
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	b0 15 00 20 d1 11 00 08 cb 3b 00 08 a5 11 00 08     ... .....;......
 8000010:	a5 11 00 08 a5 11 00 08 a5 11 00 08 00 00 00 00     ................
	...
 800002c:	ad 0e 00 08 a5 11 00 08 00 00 00 00 65 0e 00 08     ............e...
 800003c:	bd 28 00 08                                         .(..

08000040 <_irq_vector_table>:
 8000040:	29 0f 00 08 29 0f 00 08 29 0f 00 08 29 0f 00 08     )...)...)...)...
 8000050:	29 0f 00 08 29 0f 00 08 29 0f 00 08 29 0f 00 08     )...)...)...)...
 8000060:	29 0f 00 08 29 0f 00 08 29 0f 00 08 29 0f 00 08     )...)...)...)...
 8000070:	29 0f 00 08 29 0f 00 08 29 0f 00 08 29 0f 00 08     )...)...)...)...
 8000080:	29 0f 00 08 29 0f 00 08 29 0f 00 08 29 0f 00 08     )...)...)...)...
 8000090:	29 0f 00 08 29 0f 00 08 29 0f 00 08 29 0f 00 08     )...)...)...)...
 80000a0:	29 0f 00 08 29 0f 00 08 29 0f 00 08 29 0f 00 08     )...)...)...)...
 80000b0:	29 0f 00 08 29 0f 00 08 29 0f 00 08 29 0f 00 08     )...)...)...)...
 80000c0:	29 0f 00 08 29 0f 00 08 29 0f 00 08 29 0f 00 08     )...)...)...)...
 80000d0:	29 0f 00 08 29 0f 00 08 29 0f 00 08 29 0f 00 08     )...)...)...)...
 80000e0:	29 0f 00 08 29 0f 00 08 29 0f 00 08                 )...)...)...

Disassembly of section text:

080000f0 <__aeabi_uldivmod>:
 80000f0:	b953      	cbnz	r3, 8000108 <__aeabi_uldivmod+0x18>
 80000f2:	b94a      	cbnz	r2, 8000108 <__aeabi_uldivmod+0x18>
 80000f4:	2900      	cmp	r1, #0
 80000f6:	bf08      	it	eq
 80000f8:	2800      	cmpeq	r0, #0
 80000fa:	bf1c      	itt	ne
 80000fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000100:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000104:	f000 b80c 	b.w	8000120 <__aeabi_idiv0>
 8000108:	f1ad 0c08 	sub.w	ip, sp, #8
 800010c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000110:	f000 f808 	bl	8000124 <__udivmoddi4>
 8000114:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800011c:	b004      	add	sp, #16
 800011e:	4770      	bx	lr

08000120 <__aeabi_idiv0>:
 8000120:	4770      	bx	lr
 8000122:	bf00      	nop

08000124 <__udivmoddi4>:
 8000124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000128:	4686      	mov	lr, r0
 800012a:	468c      	mov	ip, r1
 800012c:	4608      	mov	r0, r1
 800012e:	4615      	mov	r5, r2
 8000130:	4674      	mov	r4, lr
 8000132:	4619      	mov	r1, r3
 8000134:	9e08      	ldr	r6, [sp, #32]
 8000136:	2b00      	cmp	r3, #0
 8000138:	f040 80c2 	bne.w	80002c0 <__udivmoddi4+0x19c>
 800013c:	4285      	cmp	r5, r0
 800013e:	fab2 f282 	clz	r2, r2
 8000142:	d945      	bls.n	80001d0 <__udivmoddi4+0xac>
 8000144:	b14a      	cbz	r2, 800015a <__udivmoddi4+0x36>
 8000146:	f1c2 0320 	rsb	r3, r2, #32
 800014a:	fa00 fc02 	lsl.w	ip, r0, r2
 800014e:	fa2e f303 	lsr.w	r3, lr, r3
 8000152:	4095      	lsls	r5, r2
 8000154:	ea43 0c0c 	orr.w	ip, r3, ip
 8000158:	4094      	lsls	r4, r2
 800015a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800015e:	fbbc f8fe 	udiv	r8, ip, lr
 8000162:	b2a8      	uxth	r0, r5
 8000164:	fb0e cc18 	mls	ip, lr, r8, ip
 8000168:	fb08 f900 	mul.w	r9, r8, r0
 800016c:	0c23      	lsrs	r3, r4, #16
 800016e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8000172:	4599      	cmp	r9, r3
 8000174:	d928      	bls.n	80001c8 <__udivmoddi4+0xa4>
 8000176:	18eb      	adds	r3, r5, r3
 8000178:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 800017c:	d204      	bcs.n	8000188 <__udivmoddi4+0x64>
 800017e:	4599      	cmp	r9, r3
 8000180:	d902      	bls.n	8000188 <__udivmoddi4+0x64>
 8000182:	f1a8 0702 	sub.w	r7, r8, #2
 8000186:	442b      	add	r3, r5
 8000188:	eba3 0309 	sub.w	r3, r3, r9
 800018c:	fbb3 fcfe 	udiv	ip, r3, lr
 8000190:	fb0e 331c 	mls	r3, lr, ip, r3
 8000194:	fb0c f000 	mul.w	r0, ip, r0
 8000198:	b2a4      	uxth	r4, r4
 800019a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800019e:	42a0      	cmp	r0, r4
 80001a0:	d914      	bls.n	80001cc <__udivmoddi4+0xa8>
 80001a2:	192c      	adds	r4, r5, r4
 80001a4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 80001a8:	d204      	bcs.n	80001b4 <__udivmoddi4+0x90>
 80001aa:	42a0      	cmp	r0, r4
 80001ac:	d902      	bls.n	80001b4 <__udivmoddi4+0x90>
 80001ae:	f1ac 0302 	sub.w	r3, ip, #2
 80001b2:	442c      	add	r4, r5
 80001b4:	1a24      	subs	r4, r4, r0
 80001b6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 80001ba:	b11e      	cbz	r6, 80001c4 <__udivmoddi4+0xa0>
 80001bc:	2300      	movs	r3, #0
 80001be:	40d4      	lsrs	r4, r2
 80001c0:	6034      	str	r4, [r6, #0]
 80001c2:	6073      	str	r3, [r6, #4]
 80001c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80001c8:	4647      	mov	r7, r8
 80001ca:	e7dd      	b.n	8000188 <__udivmoddi4+0x64>
 80001cc:	4663      	mov	r3, ip
 80001ce:	e7f1      	b.n	80001b4 <__udivmoddi4+0x90>
 80001d0:	bb92      	cbnz	r2, 8000238 <__udivmoddi4+0x114>
 80001d2:	2101      	movs	r1, #1
 80001d4:	1b43      	subs	r3, r0, r5
 80001d6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001da:	fbb3 fcfe 	udiv	ip, r3, lr
 80001de:	b2af      	uxth	r7, r5
 80001e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80001e4:	fb0c f807 	mul.w	r8, ip, r7
 80001e8:	0c20      	lsrs	r0, r4, #16
 80001ea:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80001ee:	4598      	cmp	r8, r3
 80001f0:	d962      	bls.n	80002b8 <__udivmoddi4+0x194>
 80001f2:	18eb      	adds	r3, r5, r3
 80001f4:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80001f8:	d204      	bcs.n	8000204 <__udivmoddi4+0xe0>
 80001fa:	4598      	cmp	r8, r3
 80001fc:	d902      	bls.n	8000204 <__udivmoddi4+0xe0>
 80001fe:	f1ac 0002 	sub.w	r0, ip, #2
 8000202:	442b      	add	r3, r5
 8000204:	eba3 0308 	sub.w	r3, r3, r8
 8000208:	fbb3 fcfe 	udiv	ip, r3, lr
 800020c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000210:	fb0c f707 	mul.w	r7, ip, r7
 8000214:	b2a4      	uxth	r4, r4
 8000216:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021a:	42a7      	cmp	r7, r4
 800021c:	d94e      	bls.n	80002bc <__udivmoddi4+0x198>
 800021e:	192c      	adds	r4, r5, r4
 8000220:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000224:	d204      	bcs.n	8000230 <__udivmoddi4+0x10c>
 8000226:	42a7      	cmp	r7, r4
 8000228:	d902      	bls.n	8000230 <__udivmoddi4+0x10c>
 800022a:	f1ac 0302 	sub.w	r3, ip, #2
 800022e:	442c      	add	r4, r5
 8000230:	1be4      	subs	r4, r4, r7
 8000232:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000236:	e7c0      	b.n	80001ba <__udivmoddi4+0x96>
 8000238:	f1c2 0320 	rsb	r3, r2, #32
 800023c:	4095      	lsls	r5, r2
 800023e:	fa20 f103 	lsr.w	r1, r0, r3
 8000242:	fa2e f303 	lsr.w	r3, lr, r3
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	fbb1 fcfe 	udiv	ip, r1, lr
 800024e:	4090      	lsls	r0, r2
 8000250:	4303      	orrs	r3, r0
 8000252:	b2af      	uxth	r7, r5
 8000254:	fb0e 101c 	mls	r0, lr, ip, r1
 8000258:	fb0c f807 	mul.w	r8, ip, r7
 800025c:	0c19      	lsrs	r1, r3, #16
 800025e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000262:	4588      	cmp	r8, r1
 8000264:	fa04 f402 	lsl.w	r4, r4, r2
 8000268:	d922      	bls.n	80002b0 <__udivmoddi4+0x18c>
 800026a:	1869      	adds	r1, r5, r1
 800026c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000270:	d204      	bcs.n	800027c <__udivmoddi4+0x158>
 8000272:	4588      	cmp	r8, r1
 8000274:	d902      	bls.n	800027c <__udivmoddi4+0x158>
 8000276:	f1ac 0002 	sub.w	r0, ip, #2
 800027a:	4429      	add	r1, r5
 800027c:	eba1 0108 	sub.w	r1, r1, r8
 8000280:	fbb1 fcfe 	udiv	ip, r1, lr
 8000284:	fb0e 111c 	mls	r1, lr, ip, r1
 8000288:	fb0c f707 	mul.w	r7, ip, r7
 800028c:	b29b      	uxth	r3, r3
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	429f      	cmp	r7, r3
 8000294:	d90e      	bls.n	80002b4 <__udivmoddi4+0x190>
 8000296:	18eb      	adds	r3, r5, r3
 8000298:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800029c:	d204      	bcs.n	80002a8 <__udivmoddi4+0x184>
 800029e:	429f      	cmp	r7, r3
 80002a0:	d902      	bls.n	80002a8 <__udivmoddi4+0x184>
 80002a2:	f1ac 0102 	sub.w	r1, ip, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1bdb      	subs	r3, r3, r7
 80002aa:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80002ae:	e792      	b.n	80001d6 <__udivmoddi4+0xb2>
 80002b0:	4660      	mov	r0, ip
 80002b2:	e7e3      	b.n	800027c <__udivmoddi4+0x158>
 80002b4:	4661      	mov	r1, ip
 80002b6:	e7f7      	b.n	80002a8 <__udivmoddi4+0x184>
 80002b8:	4660      	mov	r0, ip
 80002ba:	e7a3      	b.n	8000204 <__udivmoddi4+0xe0>
 80002bc:	4663      	mov	r3, ip
 80002be:	e7b7      	b.n	8000230 <__udivmoddi4+0x10c>
 80002c0:	4283      	cmp	r3, r0
 80002c2:	d906      	bls.n	80002d2 <__udivmoddi4+0x1ae>
 80002c4:	b916      	cbnz	r6, 80002cc <__udivmoddi4+0x1a8>
 80002c6:	2100      	movs	r1, #0
 80002c8:	4608      	mov	r0, r1
 80002ca:	e77b      	b.n	80001c4 <__udivmoddi4+0xa0>
 80002cc:	e9c6 e000 	strd	lr, r0, [r6]
 80002d0:	e7f9      	b.n	80002c6 <__udivmoddi4+0x1a2>
 80002d2:	fab3 f783 	clz	r7, r3
 80002d6:	b98f      	cbnz	r7, 80002fc <__udivmoddi4+0x1d8>
 80002d8:	4283      	cmp	r3, r0
 80002da:	d301      	bcc.n	80002e0 <__udivmoddi4+0x1bc>
 80002dc:	4572      	cmp	r2, lr
 80002de:	d808      	bhi.n	80002f2 <__udivmoddi4+0x1ce>
 80002e0:	ebbe 0402 	subs.w	r4, lr, r2
 80002e4:	eb60 0303 	sbc.w	r3, r0, r3
 80002e8:	2001      	movs	r0, #1
 80002ea:	469c      	mov	ip, r3
 80002ec:	b91e      	cbnz	r6, 80002f6 <__udivmoddi4+0x1d2>
 80002ee:	2100      	movs	r1, #0
 80002f0:	e768      	b.n	80001c4 <__udivmoddi4+0xa0>
 80002f2:	4638      	mov	r0, r7
 80002f4:	e7fa      	b.n	80002ec <__udivmoddi4+0x1c8>
 80002f6:	e9c6 4c00 	strd	r4, ip, [r6]
 80002fa:	e7f8      	b.n	80002ee <__udivmoddi4+0x1ca>
 80002fc:	f1c7 0c20 	rsb	ip, r7, #32
 8000300:	40bb      	lsls	r3, r7
 8000302:	fa22 f40c 	lsr.w	r4, r2, ip
 8000306:	431c      	orrs	r4, r3
 8000308:	ea4f 4914 	mov.w	r9, r4, lsr #16
 800030c:	fa20 f30c 	lsr.w	r3, r0, ip
 8000310:	fbb3 f8f9 	udiv	r8, r3, r9
 8000314:	40b8      	lsls	r0, r7
 8000316:	fa2e f10c 	lsr.w	r1, lr, ip
 800031a:	4301      	orrs	r1, r0
 800031c:	fa0e f507 	lsl.w	r5, lr, r7
 8000320:	fb09 3018 	mls	r0, r9, r8, r3
 8000324:	fa1f fe84 	uxth.w	lr, r4
 8000328:	fb08 fa0e 	mul.w	sl, r8, lr
 800032c:	0c0b      	lsrs	r3, r1, #16
 800032e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000332:	459a      	cmp	sl, r3
 8000334:	fa02 f207 	lsl.w	r2, r2, r7
 8000338:	d940      	bls.n	80003bc <__udivmoddi4+0x298>
 800033a:	18e3      	adds	r3, r4, r3
 800033c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000340:	d204      	bcs.n	800034c <__udivmoddi4+0x228>
 8000342:	459a      	cmp	sl, r3
 8000344:	d902      	bls.n	800034c <__udivmoddi4+0x228>
 8000346:	f1a8 0002 	sub.w	r0, r8, #2
 800034a:	4423      	add	r3, r4
 800034c:	eba3 030a 	sub.w	r3, r3, sl
 8000350:	fbb3 f8f9 	udiv	r8, r3, r9
 8000354:	fb09 3318 	mls	r3, r9, r8, r3
 8000358:	fb08 fe0e 	mul.w	lr, r8, lr
 800035c:	b289      	uxth	r1, r1
 800035e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000362:	458e      	cmp	lr, r1
 8000364:	d92c      	bls.n	80003c0 <__udivmoddi4+0x29c>
 8000366:	1861      	adds	r1, r4, r1
 8000368:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800036c:	d204      	bcs.n	8000378 <__udivmoddi4+0x254>
 800036e:	458e      	cmp	lr, r1
 8000370:	d902      	bls.n	8000378 <__udivmoddi4+0x254>
 8000372:	f1a8 0302 	sub.w	r3, r8, #2
 8000376:	4421      	add	r1, r4
 8000378:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800037c:	fba0 9802 	umull	r9, r8, r0, r2
 8000380:	eba1 010e 	sub.w	r1, r1, lr
 8000384:	4541      	cmp	r1, r8
 8000386:	46ce      	mov	lr, r9
 8000388:	4643      	mov	r3, r8
 800038a:	d302      	bcc.n	8000392 <__udivmoddi4+0x26e>
 800038c:	d106      	bne.n	800039c <__udivmoddi4+0x278>
 800038e:	454d      	cmp	r5, r9
 8000390:	d204      	bcs.n	800039c <__udivmoddi4+0x278>
 8000392:	ebb9 0e02 	subs.w	lr, r9, r2
 8000396:	eb68 0304 	sbc.w	r3, r8, r4
 800039a:	3801      	subs	r0, #1
 800039c:	2e00      	cmp	r6, #0
 800039e:	d0a6      	beq.n	80002ee <__udivmoddi4+0x1ca>
 80003a0:	ebb5 020e 	subs.w	r2, r5, lr
 80003a4:	eb61 0103 	sbc.w	r1, r1, r3
 80003a8:	fa01 fc0c 	lsl.w	ip, r1, ip
 80003ac:	fa22 f307 	lsr.w	r3, r2, r7
 80003b0:	ea4c 0303 	orr.w	r3, ip, r3
 80003b4:	40f9      	lsrs	r1, r7
 80003b6:	e9c6 3100 	strd	r3, r1, [r6]
 80003ba:	e798      	b.n	80002ee <__udivmoddi4+0x1ca>
 80003bc:	4640      	mov	r0, r8
 80003be:	e7c5      	b.n	800034c <__udivmoddi4+0x228>
 80003c0:	4643      	mov	r3, r8
 80003c2:	e7d9      	b.n	8000378 <__udivmoddi4+0x254>
 80003c4:	0000      	movs	r0, r0
	...

080003c8 <pwm_set_dt.constprop.0.isra.0>:
 *
 * @return A value from pwm_set().
 *
 * @see pwm_set_pulse_dt()
 */
static inline int pwm_set_dt(const struct pwm_dt_spec *spec, uint32_t period,
 80003c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003cc:	4605      	mov	r5, r0
 80003ce:	b087      	sub	sp, #28
	return api->get_cycles_per_sec(dev, channel, cycles);
 80003d0:	4f23      	ldr	r7, [pc, #140]	; (8000460 <pwm_set_dt.constprop.0.isra.0+0x98>)
 80003d2:	2104      	movs	r1, #4
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	4638      	mov	r0, r7
 80003d8:	9302      	str	r3, [sp, #8]
 80003da:	aa04      	add	r2, sp, #16
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	4798      	blx	r3
	if (err < 0) {
 80003e0:	2800      	cmp	r0, #0
 80003e2:	db33      	blt.n	800044c <pwm_set_dt.constprop.0.isra.0+0x84>
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
 80003e4:	e9dd 4a04 	ldrd	r4, sl, [sp, #16]
 80003e8:	f646 7354 	movw	r3, #28500	; 0x6f54
 80003ec:	fba4 b203 	umull	fp, r2, r4, r3
 80003f0:	fb03 230a 	mla	r3, r3, sl, r2
	if (period_cycles > UINT32_MAX) {
 80003f4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
 80003f8:	9303      	str	r3, [sp, #12]
 80003fa:	4658      	mov	r0, fp
 80003fc:	a316      	add	r3, pc, #88	; (adr r3, 8000458 <pwm_set_dt.constprop.0.isra.0+0x90>)
 80003fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000402:	9903      	ldr	r1, [sp, #12]
 8000404:	f7ff fe74 	bl	80000f0 <__aeabi_uldivmod>
	if (period_cycles > UINT32_MAX) {
 8000408:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8000464 <pwm_set_dt.constprop.0.isra.0+0x9c>
 800040c:	9b03      	ldr	r3, [sp, #12]
 800040e:	45d9      	cmp	r9, fp
 8000410:	eb78 0303 	sbcs.w	r3, r8, r3
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
 8000414:	4606      	mov	r6, r0
	if (period_cycles > UINT32_MAX) {
 8000416:	d319      	bcc.n	800044c <pwm_set_dt.constprop.0.isra.0+0x84>
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
 8000418:	a30f      	add	r3, pc, #60	; (adr r3, 8000458 <pwm_set_dt.constprop.0.isra.0+0x90>)
 800041a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800041e:	fba5 b404 	umull	fp, r4, r5, r4
 8000422:	fb05 440a 	mla	r4, r5, sl, r4
 8000426:	4658      	mov	r0, fp
 8000428:	4621      	mov	r1, r4
 800042a:	f7ff fe61 	bl	80000f0 <__aeabi_uldivmod>
	if (pulse_cycles > UINT32_MAX) {
 800042e:	45d9      	cmp	r9, fp
 8000430:	eb78 0404 	sbcs.w	r4, r8, r4
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
 8000434:	4603      	mov	r3, r0
	if (pulse_cycles > UINT32_MAX) {
 8000436:	d309      	bcc.n	800044c <pwm_set_dt.constprop.0.isra.0+0x84>
	if (pulse > period) {
 8000438:	4286      	cmp	r6, r0
 800043a:	d307      	bcc.n	800044c <pwm_set_dt.constprop.0.isra.0+0x84>
	return api->set_cycles(dev, channel, period, pulse, flags);
 800043c:	2200      	movs	r2, #0
 800043e:	9200      	str	r2, [sp, #0]
 8000440:	9a02      	ldr	r2, [sp, #8]
 8000442:	2104      	movs	r1, #4
 8000444:	6814      	ldr	r4, [r2, #0]
 8000446:	4638      	mov	r0, r7
 8000448:	4632      	mov	r2, r6
 800044a:	47a0      	blx	r4
			     uint32_t pulse)
{
	return pwm_set(spec->dev, spec->channel, period, pulse, spec->flags);
}
 800044c:	b007      	add	sp, #28
 800044e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000452:	bf00      	nop
 8000454:	f3af 8000 	nop.w
 8000458:	3b9aca00 	.word	0x3b9aca00
 800045c:	00000000 	.word	0x00000000
 8000460:	08004ca0 	.word	0x08004ca0
 8000464:	3b9ac9ff 	.word	0x3b9ac9ff

08000468 <_ZN16HikariGPIOConfig14board_led_initEv>:
#include "gpio_func.hpp"

uint8_t HikariGPIOConfig::board_led_init(){
 8000468:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 800046a:	4811      	ldr	r0, [pc, #68]	; (80004b0 <_ZN16HikariGPIOConfig14board_led_initEv+0x48>)
 800046c:	f004 fa3c 	bl	80048e8 <z_device_is_ready>

    bool err = INIT_VALUE_0;

    if(!(err = gpio_is_ready_dt(&BOARD_LED_A))){
 8000470:	b920      	cbnz	r0, 800047c <_ZN16HikariGPIOConfig14board_led_initEv+0x14>
        printk(">>>GPIO A READY FAIL!<<< \r\n");
 8000472:	4810      	ldr	r0, [pc, #64]	; (80004b4 <_ZN16HikariGPIOConfig14board_led_initEv+0x4c>)
        return MY_FUNC_CRASH;
    }

    if(!(err = gpio_is_ready_dt(&BOARD_LED_B))){
        printk(">>>GPIO B READY FAIL!<<< \r\n");
 8000474:	f003 fac4 	bl	8003a00 <printk>
        return MY_FUNC_CRASH;
 8000478:	2001      	movs	r0, #1
    gpio_pin_configure_dt(&BOARD_LED_A, GPIO_OUTPUT_ACTIVE);
    gpio_pin_configure_dt(&BOARD_LED_B, GPIO_OUTPUT_ACTIVE);
    gpio_pin_configure_dt(&BOARD_LED_C, GPIO_OUTPUT_ACTIVE);
    printk("GPIO A&B&C READY!\r\n");
    return MY_FUNC_OK;
}
 800047a:	bd08      	pop	{r3, pc}
 800047c:	480c      	ldr	r0, [pc, #48]	; (80004b0 <_ZN16HikariGPIOConfig14board_led_initEv+0x48>)
 800047e:	f004 fa33 	bl	80048e8 <z_device_is_ready>
    if(!(err = gpio_is_ready_dt(&BOARD_LED_B))){
 8000482:	b908      	cbnz	r0, 8000488 <_ZN16HikariGPIOConfig14board_led_initEv+0x20>
        printk(">>>GPIO B READY FAIL!<<< \r\n");
 8000484:	480c      	ldr	r0, [pc, #48]	; (80004b8 <_ZN16HikariGPIOConfig14board_led_initEv+0x50>)
 8000486:	e7f5      	b.n	8000474 <_ZN16HikariGPIOConfig14board_led_initEv+0xc>
 8000488:	4809      	ldr	r0, [pc, #36]	; (80004b0 <_ZN16HikariGPIOConfig14board_led_initEv+0x48>)
 800048a:	f004 fa2d 	bl	80048e8 <z_device_is_ready>
    if(!(err = gpio_is_ready_dt(&BOARD_LED_C))){
 800048e:	b908      	cbnz	r0, 8000494 <_ZN16HikariGPIOConfig14board_led_initEv+0x2c>
        printk(">>>GPIO C READY FAIL!<<< \r\n");
 8000490:	480a      	ldr	r0, [pc, #40]	; (80004bc <_ZN16HikariGPIOConfig14board_led_initEv+0x54>)
 8000492:	e7ef      	b.n	8000474 <_ZN16HikariGPIOConfig14board_led_initEv+0xc>
    gpio_pin_configure_dt(&BOARD_LED_A, GPIO_OUTPUT_ACTIVE);
 8000494:	480a      	ldr	r0, [pc, #40]	; (80004c0 <_ZN16HikariGPIOConfig14board_led_initEv+0x58>)
 8000496:	f003 fa90 	bl	80039ba <gpio_pin_configure_dt.constprop.0.isra.0>
    gpio_pin_configure_dt(&BOARD_LED_B, GPIO_OUTPUT_ACTIVE);
 800049a:	480a      	ldr	r0, [pc, #40]	; (80004c4 <_ZN16HikariGPIOConfig14board_led_initEv+0x5c>)
 800049c:	f003 fa8d 	bl	80039ba <gpio_pin_configure_dt.constprop.0.isra.0>
    gpio_pin_configure_dt(&BOARD_LED_C, GPIO_OUTPUT_ACTIVE);
 80004a0:	4809      	ldr	r0, [pc, #36]	; (80004c8 <_ZN16HikariGPIOConfig14board_led_initEv+0x60>)
 80004a2:	f003 fa8a 	bl	80039ba <gpio_pin_configure_dt.constprop.0.isra.0>
    printk("GPIO A&B&C READY!\r\n");
 80004a6:	4809      	ldr	r0, [pc, #36]	; (80004cc <_ZN16HikariGPIOConfig14board_led_initEv+0x64>)
 80004a8:	f003 faaa 	bl	8003a00 <printk>
    return MY_FUNC_OK;
 80004ac:	2000      	movs	r0, #0
 80004ae:	e7e4      	b.n	800047a <_ZN16HikariGPIOConfig14board_led_initEv+0x12>
 80004b0:	08004c3c 	.word	0x08004c3c
 80004b4:	0800518a 	.word	0x0800518a
 80004b8:	080051a6 	.word	0x080051a6
 80004bc:	080051c2 	.word	0x080051c2
 80004c0:	08004e9c 	.word	0x08004e9c
 80004c4:	08004e94 	.word	0x08004e94
 80004c8:	08004e8c 	.word	0x08004e8c
 80004cc:	080051de 	.word	0x080051de

080004d0 <_ZN16HikariGPIOConfig8pwm_initEv>:

void HikariGPIOConfig::board_led_c_off(){
    gpio_pin_set_dt(&BOARD_LED_C, 0);
}

uint8_t HikariGPIOConfig::pwm_init(){
 80004d0:	b508      	push	{r3, lr}
 80004d2:	4807      	ldr	r0, [pc, #28]	; (80004f0 <_ZN16HikariGPIOConfig8pwm_initEv+0x20>)
 80004d4:	f004 fa08 	bl	80048e8 <z_device_is_ready>
    
    bool err = INIT_VALUE_0;

    if(!(err = device_is_ready(PWM_AS_SCK.dev))){
 80004d8:	b920      	cbnz	r0, 80004e4 <_ZN16HikariGPIOConfig8pwm_initEv+0x14>
        printk(">>>PWM_AS_SCK INIT READY FAIL!<<< \r\n");
 80004da:	4806      	ldr	r0, [pc, #24]	; (80004f4 <_ZN16HikariGPIOConfig8pwm_initEv+0x24>)
 80004dc:	f003 fa90 	bl	8003a00 <printk>
        return MY_FUNC_CRASH;
 80004e0:	2001      	movs	r0, #1
    //     return MY_FUNC_CRASH;
    // }

    printk("***PWM INIT READY!*** \r\n");
    return MY_FUNC_OK;
}
 80004e2:	bd08      	pop	{r3, pc}
    printk("***PWM INIT READY!*** \r\n");
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <_ZN16HikariGPIOConfig8pwm_initEv+0x28>)
 80004e6:	f003 fa8b 	bl	8003a00 <printk>
    return MY_FUNC_OK;
 80004ea:	2000      	movs	r0, #0
 80004ec:	e7f9      	b.n	80004e2 <_ZN16HikariGPIOConfig8pwm_initEv+0x12>
 80004ee:	bf00      	nop
 80004f0:	08004ca0 	.word	0x08004ca0
 80004f4:	080051f2 	.word	0x080051f2
 80004f8:	08005217 	.word	0x08005217

080004fc <main>:
SDI_COLOR_STRUCT array_test = {
	{0x00},{0x00},{0xFF}
};

int main(void)
{	
 80004fc:	b510      	push	{r4, lr}
	HikariSPIControler *spi_def;
	HikariGPIOConfig *def;

	def->board_led_init();
 80004fe:	2400      	movs	r4, #0
 8000500:	4620      	mov	r0, r4
 8000502:	f7ff ffb1 	bl	8000468 <_ZN16HikariGPIOConfig14board_led_initEv>
	def->pwm_init();
 8000506:	4620      	mov	r0, r4
 8000508:	f7ff ffe2 	bl	80004d0 <_ZN16HikariGPIOConfig8pwm_initEv>
	def->pwm_as_sck_on();
 800050c:	4620      	mov	r0, r4
 800050e:	f003 fa6e 	bl	80039ee <_ZN16HikariGPIOConfig13pwm_as_sck_onEv>
	// k_usleep(0.5);
	// spi_def->rgb2spi_array_output_TEST(clear_test_array);
	// spi_def->test(clear_test_array);
	spi_def->new_test(FFtest);
 8000512:	4620      	mov	r0, r4
 8000514:	4903      	ldr	r1, [pc, #12]	; (8000524 <main+0x28>)
 8000516:	f000 f847 	bl	80005a8 <_ZN18HikariSPIControler8new_testEPh>
	def->pwm_as_sck_off();
 800051a:	4620      	mov	r0, r4
 800051c:	f003 fa6b 	bl	80039f6 <_ZN16HikariGPIOConfig14pwm_as_sck_offEv>

	while (1)
 8000520:	e7fe      	b.n	8000520 <main+0x24>
 8000522:	bf00      	nop
 8000524:	200000b8 	.word	0x200000b8

08000528 <_ZN15HikariSPIConfig11my_spi_initEPK6device>:
#include "spi_func.hpp"

HikariSPIConfig HikariSPIConfig::_sInstance;

uint8_t HikariSPIConfig::my_spi_init(const struct device *dev){
 8000528:	b510      	push	{r4, lr}
 800052a:	460c      	mov	r4, r1
 800052c:	4608      	mov	r0, r1
 800052e:	f004 f9db 	bl	80048e8 <z_device_is_ready>

    if (!device_is_ready(dev)) {
		printk(">>>SPI device %s is not ready<<<\n", dev->name);
 8000532:	6821      	ldr	r1, [r4, #0]
    if (!device_is_ready(dev)) {
 8000534:	b920      	cbnz	r0, 8000540 <_ZN15HikariSPIConfig11my_spi_initEPK6device+0x18>
		printk(">>>SPI device %s is not ready<<<\n", dev->name);
 8000536:	4805      	ldr	r0, [pc, #20]	; (800054c <_ZN15HikariSPIConfig11my_spi_initEPK6device+0x24>)
 8000538:	f003 fa62 	bl	8003a00 <printk>
		return MY_FUNC_CRASH;
 800053c:	2001      	movs	r0, #1
	}else 
		printk("**SPI device %s is ready**\n", dev->name);

    return MY_FUNC_OK;
}
 800053e:	bd10      	pop	{r4, pc}
		printk("**SPI device %s is ready**\n", dev->name);
 8000540:	4803      	ldr	r0, [pc, #12]	; (8000550 <_ZN15HikariSPIConfig11my_spi_initEPK6device+0x28>)
 8000542:	f003 fa5d 	bl	8003a00 <printk>
    return MY_FUNC_OK;
 8000546:	2000      	movs	r0, #0
 8000548:	e7f9      	b.n	800053e <_ZN15HikariSPIConfig11my_spi_initEPK6device+0x16>
 800054a:	bf00      	nop
 800054c:	08005230 	.word	0x08005230
 8000550:	08005252 	.word	0x08005252

08000554 <_ZN15HikariSPIConfig12my_spi_writeEPK6devicePhj>:

uint8_t HikariSPIConfig::my_spi_write(const struct device *dev, uint8_t tx_buffer[], size_t len){
 8000554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000556:	b08b      	sub	sp, #44	; 0x2c
 8000558:	4617      	mov	r7, r2
 800055a:	460c      	mov	r4, r1
    const struct spi_cs_control my_cs_gpio = {
        .gpio = GPIO_DT_SPEC_GET(SPI1_NODE, cs_gpios),
        .delay = 0U,
    };

    const struct spi_config spi1_cfg = {
 800055c:	220e      	movs	r2, #14
 800055e:	2100      	movs	r1, #0
 8000560:	f10d 001a 	add.w	r0, sp, #26
uint8_t HikariSPIConfig::my_spi_write(const struct device *dev, uint8_t tx_buffer[], size_t len){
 8000564:	461e      	mov	r6, r3
    const struct spi_config spi1_cfg = {
 8000566:	2501      	movs	r5, #1
 8000568:	f003 fb48 	bl	8003bfc <memset>
 800056c:	f244 1312 	movw	r3, #16658	; 0x4112
 8000570:	4a0b      	ldr	r2, [pc, #44]	; (80005a0 <_ZN15HikariSPIConfig12my_spi_writeEPK6devicePhj+0x4c>)
    };

    const struct spi_buf spi1_buf1 = {
        .buf = tx_buffer,
        .len = len,
    };
 8000572:	e9cd 7600 	strd	r7, r6, [sp]
    const struct spi_config spi1_cfg = {
 8000576:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800057a:	f8ad 5018 	strh.w	r5, [sp, #24]

    const struct spi_buf_set spi1_buf_set1 = {
 800057e:	9503      	str	r5, [sp, #12]
        .buffers = &spi1_buf1,
        .count = 1,
    };
 8000580:	f8cd d008 	str.w	sp, [sp, #8]
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;
	int ret;

	ret = api->transceive(dev, config, tx_bufs, rx_bufs);
 8000584:	68a3      	ldr	r3, [r4, #8]
 8000586:	4620      	mov	r0, r4
 8000588:	681e      	ldr	r6, [r3, #0]
 800058a:	aa02      	add	r2, sp, #8
 800058c:	2300      	movs	r3, #0
 800058e:	a904      	add	r1, sp, #16
 8000590:	47b0      	blx	r6

    err = spi_write(dev, &spi1_cfg, &spi1_buf_set1);
    if(err){
 8000592:	b118      	cbz	r0, 800059c <_ZN15HikariSPIConfig12my_spi_writeEPK6devicePhj+0x48>
        printk("**SPI Write Error!**\r\n");
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <_ZN15HikariSPIConfig12my_spi_writeEPK6devicePhj+0x50>)
 8000596:	f003 fa33 	bl	8003a00 <printk>
        return MY_FUNC_CRASH;
 800059a:	4628      	mov	r0, r5
    }else 
        // printk("**SPI Write Right!**\r\n");
    
    return MY_FUNC_OK;
}
 800059c:	b00b      	add	sp, #44	; 0x2c
 800059e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a0:	00061a80 	.word	0x00061a80
 80005a4:	0800526e 	.word	0x0800526e

080005a8 <_ZN18HikariSPIControler8new_testEPh>:

    hikarispiconfig->my_spi_init(spi1);
    hikarispiconfig->my_spi_write(spi1, SPI_SDI_COLOR_ARRAY, 1024);
}

void HikariSPIControler::new_test(uint8_t *input_RGBcolor){
 80005a8:	b570      	push	{r4, r5, r6, lr}

    uint8_t SPI_SDI_COLOR_ARRAY[1056] = {0};

    for(int i =0; i < 1056; i++){
        SPI_SDI_COLOR_ARRAY[i] = input_RGBcolor[i];
 80005aa:	f44f 6684 	mov.w	r6, #1056	; 0x420
void HikariSPIControler::new_test(uint8_t *input_RGBcolor){
 80005ae:	4604      	mov	r4, r0
 80005b0:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
    }

    hikarispiconfig->my_spi_init(spi1);
 80005b4:	4d08      	ldr	r5, [pc, #32]	; (80005d8 <_ZN18HikariSPIControler8new_testEPh+0x30>)
        SPI_SDI_COLOR_ARRAY[i] = input_RGBcolor[i];
 80005b6:	4632      	mov	r2, r6
 80005b8:	4668      	mov	r0, sp
 80005ba:	f003 fb14 	bl	8003be6 <memcpy>
    hikarispiconfig->my_spi_init(spi1);
 80005be:	4629      	mov	r1, r5
 80005c0:	6820      	ldr	r0, [r4, #0]
 80005c2:	f7ff ffb1 	bl	8000528 <_ZN15HikariSPIConfig11my_spi_initEPK6device>
    hikarispiconfig->my_spi_write(spi1, SPI_SDI_COLOR_ARRAY, 1056);
 80005c6:	4633      	mov	r3, r6
 80005c8:	466a      	mov	r2, sp
 80005ca:	4629      	mov	r1, r5
 80005cc:	6820      	ldr	r0, [r4, #0]
 80005ce:	f7ff ffc1 	bl	8000554 <_ZN15HikariSPIConfig12my_spi_writeEPK6devicePhj>
 80005d2:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
 80005d6:	bd70      	pop	{r4, r5, r6, pc}
 80005d8:	08004cb4 	.word	0x08004cb4

080005dc <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
 80005dc:	4b01      	ldr	r3, [pc, #4]	; (80005e4 <char_out+0x8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4718      	bx	r3
 80005e2:	bf00      	nop
 80005e4:	20000000 	.word	0x20000000

080005e8 <__printk_hook_install>:
	_char_out = fn;
 80005e8:	4b01      	ldr	r3, [pc, #4]	; (80005f0 <__printk_hook_install+0x8>)
 80005ea:	6018      	str	r0, [r3, #0]
}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000000 	.word	0x20000000

080005f4 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 80005f4:	b507      	push	{r0, r1, r2, lr}
 80005f6:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 80005f8:	2100      	movs	r1, #0
 80005fa:	4602      	mov	r2, r0
 80005fc:	9100      	str	r1, [sp, #0]
 80005fe:	4803      	ldr	r0, [pc, #12]	; (800060c <vprintk+0x18>)
 8000600:	f000 f806 	bl	8000610 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 8000604:	b003      	add	sp, #12
 8000606:	f85d fb04 	ldr.w	pc, [sp], #4
 800060a:	bf00      	nop
 800060c:	080005dd 	.word	0x080005dd

08000610 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
 8000610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000614:	4681      	mov	r9, r0
 8000616:	468b      	mov	fp, r1
 8000618:	4617      	mov	r7, r2
 800061a:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 800061c:	2500      	movs	r5, #0
{
 800061e:	b095      	sub	sp, #84	; 0x54
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8000620:	7838      	ldrb	r0, [r7, #0]
 8000622:	b908      	cbnz	r0, 8000628 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
 8000624:	4628      	mov	r0, r5
 8000626:	e357      	b.n	8000cd8 <z_cbvprintf_impl+0x6c8>
			OUTC(*fp++);
 8000628:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
 800062a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 800062c:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
 800062e:	d006      	beq.n	800063e <z_cbvprintf_impl+0x2e>
			OUTC('%');
 8000630:	4659      	mov	r1, fp
 8000632:	47c8      	blx	r9
 8000634:	2800      	cmp	r0, #0
 8000636:	f2c0 834f 	blt.w	8000cd8 <z_cbvprintf_impl+0x6c8>
 800063a:	3501      	adds	r5, #1
		if (bps == NULL) {
 800063c:	e1fb      	b.n	8000a36 <z_cbvprintf_impl+0x426>
		} state = {
 800063e:	2218      	movs	r2, #24
 8000640:	2100      	movs	r1, #0
 8000642:	a80e      	add	r0, sp, #56	; 0x38
 8000644:	f003 fada 	bl	8003bfc <memset>
	if (*sp == '%') {
 8000648:	787b      	ldrb	r3, [r7, #1]
 800064a:	2b25      	cmp	r3, #37	; 0x25
 800064c:	d07d      	beq.n	800074a <z_cbvprintf_impl+0x13a>
 800064e:	2300      	movs	r3, #0
 8000650:	4698      	mov	r8, r3
 8000652:	469e      	mov	lr, r3
 8000654:	469c      	mov	ip, r3
 8000656:	461e      	mov	r6, r3
 8000658:	1c78      	adds	r0, r7, #1
 800065a:	4601      	mov	r1, r0
		switch (*sp) {
 800065c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000660:	2a2b      	cmp	r2, #43	; 0x2b
 8000662:	f000 80a1 	beq.w	80007a8 <z_cbvprintf_impl+0x198>
 8000666:	f200 8098 	bhi.w	800079a <z_cbvprintf_impl+0x18a>
 800066a:	2a20      	cmp	r2, #32
 800066c:	f000 809f 	beq.w	80007ae <z_cbvprintf_impl+0x19e>
 8000670:	2a23      	cmp	r2, #35	; 0x23
 8000672:	f000 809f 	beq.w	80007b4 <z_cbvprintf_impl+0x1a4>
 8000676:	b12b      	cbz	r3, 8000684 <z_cbvprintf_impl+0x74>
 8000678:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800067c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000680:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8000684:	f1b8 0f00 	cmp.w	r8, #0
 8000688:	d005      	beq.n	8000696 <z_cbvprintf_impl+0x86>
 800068a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800068e:	f043 0320 	orr.w	r3, r3, #32
 8000692:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8000696:	f1be 0f00 	cmp.w	lr, #0
 800069a:	d005      	beq.n	80006a8 <z_cbvprintf_impl+0x98>
 800069c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80006a0:	f043 0310 	orr.w	r3, r3, #16
 80006a4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80006a8:	f1bc 0f00 	cmp.w	ip, #0
 80006ac:	d005      	beq.n	80006ba <z_cbvprintf_impl+0xaa>
 80006ae:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80006b2:	f043 0308 	orr.w	r3, r3, #8
 80006b6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80006ba:	b12e      	cbz	r6, 80006c8 <z_cbvprintf_impl+0xb8>
 80006bc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
 80006c8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80006cc:	f003 0044 	and.w	r0, r3, #68	; 0x44
 80006d0:	2844      	cmp	r0, #68	; 0x44
 80006d2:	d103      	bne.n	80006dc <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
 80006d4:	f36f 1386 	bfc	r3, #6, #1
 80006d8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
 80006dc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 80006e0:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
 80006e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 80006ea:	d17f      	bne.n	80007ec <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
 80006ec:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
 80006f0:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 80006f2:	f042 0201 	orr.w	r2, r2, #1
 80006f6:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
 80006fa:	781a      	ldrb	r2, [r3, #0]
 80006fc:	2a2e      	cmp	r2, #46	; 0x2e
 80006fe:	bf0c      	ite	eq
 8000700:	2101      	moveq	r1, #1
 8000702:	2100      	movne	r1, #0
 8000704:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000708:	f361 0241 	bfi	r2, r1, #1, #1
 800070c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
 8000710:	d178      	bne.n	8000804 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
 8000712:	785a      	ldrb	r2, [r3, #1]
 8000714:	2a2a      	cmp	r2, #42	; 0x2a
 8000716:	d06e      	beq.n	80007f6 <z_cbvprintf_impl+0x1e6>
	size_t val = 0;
 8000718:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 800071a:	f04f 0c0a 	mov.w	ip, #10
	++sp;
 800071e:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8000720:	4619      	mov	r1, r3
 8000722:	f811 0b01 	ldrb.w	r0, [r1], #1
 8000726:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
 800072a:	2e09      	cmp	r6, #9
 800072c:	f240 8095 	bls.w	800085a <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
 8000730:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
 8000734:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
 8000736:	f3c1 0040 	ubfx	r0, r1, #1, #1
 800073a:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
 800073e:	460a      	mov	r2, r1
 8000740:	f360 0241 	bfi	r2, r0, #1, #1
 8000744:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 8000748:	e05c      	b.n	8000804 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
 800074a:	1cba      	adds	r2, r7, #2
 800074c:	9203      	str	r2, [sp, #12]
 800074e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
 8000752:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8000756:	07da      	lsls	r2, r3, #31
 8000758:	f140 812e 	bpl.w	80009b8 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
 800075c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
 8000760:	f1b8 0f00 	cmp.w	r8, #0
 8000764:	da07      	bge.n	8000776 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
 8000766:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
 800076a:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
 800076e:	f042 0204 	orr.w	r2, r2, #4
 8000772:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
 8000776:	075e      	lsls	r6, r3, #29
 8000778:	f140 8127 	bpl.w	80009ca <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
 800077c:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
 8000780:	f1ba 0f00 	cmp.w	sl, #0
 8000784:	f280 8126 	bge.w	80009d4 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
 8000788:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 800078c:	f36f 0341 	bfc	r3, #1, #1
 8000790:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
 8000794:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8000798:	e11c      	b.n	80009d4 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
 800079a:	2a2d      	cmp	r2, #45	; 0x2d
 800079c:	d00d      	beq.n	80007ba <z_cbvprintf_impl+0x1aa>
 800079e:	2a30      	cmp	r2, #48	; 0x30
 80007a0:	f47f af69 	bne.w	8000676 <z_cbvprintf_impl+0x66>
 80007a4:	2301      	movs	r3, #1
	} while (loop);
 80007a6:	e758      	b.n	800065a <z_cbvprintf_impl+0x4a>
		switch (*sp) {
 80007a8:	f04f 0c01 	mov.w	ip, #1
 80007ac:	e755      	b.n	800065a <z_cbvprintf_impl+0x4a>
 80007ae:	f04f 0e01 	mov.w	lr, #1
 80007b2:	e752      	b.n	800065a <z_cbvprintf_impl+0x4a>
 80007b4:	f04f 0801 	mov.w	r8, #1
 80007b8:	e74f      	b.n	800065a <z_cbvprintf_impl+0x4a>
 80007ba:	2601      	movs	r6, #1
 80007bc:	e74d      	b.n	800065a <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
 80007be:	4603      	mov	r3, r0
 80007c0:	fb0e 6202 	mla	r2, lr, r2, r6
 80007c4:	3a30      	subs	r2, #48	; 0x30
 80007c6:	4618      	mov	r0, r3
 80007c8:	f810 6b01 	ldrb.w	r6, [r0], #1
 80007cc:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
 80007d0:	f1bc 0f09 	cmp.w	ip, #9
 80007d4:	d9f3      	bls.n	80007be <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
 80007d6:	4299      	cmp	r1, r3
 80007d8:	d08f      	beq.n	80006fa <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 80007da:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
 80007de:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
 80007e0:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 80007e2:	f362 0141 	bfi	r1, r2, #1, #1
 80007e6:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 80007ea:	e786      	b.n	80006fa <z_cbvprintf_impl+0xea>
 80007ec:	460b      	mov	r3, r1
	size_t val = 0;
 80007ee:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 80007f0:	f04f 0e0a 	mov.w	lr, #10
 80007f4:	e7e7      	b.n	80007c6 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
 80007f6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
 80007fa:	3302      	adds	r3, #2
		conv->prec_star = true;
 80007fc:	f042 0204 	orr.w	r2, r2, #4
 8000800:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
 8000804:	781a      	ldrb	r2, [r3, #0]
 8000806:	2a6c      	cmp	r2, #108	; 0x6c
 8000808:	d047      	beq.n	800089a <z_cbvprintf_impl+0x28a>
 800080a:	d82b      	bhi.n	8000864 <z_cbvprintf_impl+0x254>
 800080c:	2a68      	cmp	r2, #104	; 0x68
 800080e:	d031      	beq.n	8000874 <z_cbvprintf_impl+0x264>
 8000810:	2a6a      	cmp	r2, #106	; 0x6a
 8000812:	d04b      	beq.n	80008ac <z_cbvprintf_impl+0x29c>
 8000814:	2a4c      	cmp	r2, #76	; 0x4c
 8000816:	d051      	beq.n	80008bc <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
 8000818:	461a      	mov	r2, r3
 800081a:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
 800081e:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
 8000820:	9203      	str	r2, [sp, #12]
 8000822:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000826:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
 800082a:	f200 80be 	bhi.w	80009aa <z_cbvprintf_impl+0x39a>
 800082e:	2b6d      	cmp	r3, #109	; 0x6d
 8000830:	d851      	bhi.n	80008d6 <z_cbvprintf_impl+0x2c6>
 8000832:	2b69      	cmp	r3, #105	; 0x69
 8000834:	f200 80b9 	bhi.w	80009aa <z_cbvprintf_impl+0x39a>
 8000838:	2b57      	cmp	r3, #87	; 0x57
 800083a:	d867      	bhi.n	800090c <z_cbvprintf_impl+0x2fc>
 800083c:	2b41      	cmp	r3, #65	; 0x41
 800083e:	d003      	beq.n	8000848 <z_cbvprintf_impl+0x238>
 8000840:	3b45      	subs	r3, #69	; 0x45
 8000842:	2b02      	cmp	r3, #2
 8000844:	f200 80b1 	bhi.w	80009aa <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
 8000848:	2204      	movs	r2, #4
 800084a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800084e:	f362 0302 	bfi	r3, r2, #0, #3
 8000852:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
 8000856:	2301      	movs	r3, #1
			break;
 8000858:	e073      	b.n	8000942 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
 800085a:	fb0c 0202 	mla	r2, ip, r2, r0
 800085e:	460b      	mov	r3, r1
 8000860:	3a30      	subs	r2, #48	; 0x30
 8000862:	e75d      	b.n	8000720 <z_cbvprintf_impl+0x110>
	switch (*sp) {
 8000864:	2a74      	cmp	r2, #116	; 0x74
 8000866:	d025      	beq.n	80008b4 <z_cbvprintf_impl+0x2a4>
 8000868:	2a7a      	cmp	r2, #122	; 0x7a
 800086a:	d1d5      	bne.n	8000818 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
 800086c:	2106      	movs	r1, #6
 800086e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000872:	e00c      	b.n	800088e <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
 8000874:	785a      	ldrb	r2, [r3, #1]
 8000876:	2a68      	cmp	r2, #104	; 0x68
 8000878:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800087c:	d106      	bne.n	800088c <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
 800087e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 8000880:	f361 02c6 	bfi	r2, r1, #3, #4
 8000884:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
 8000888:	3302      	adds	r3, #2
 800088a:	e7c5      	b.n	8000818 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
 800088c:	2102      	movs	r1, #2
 800088e:	f361 02c6 	bfi	r2, r1, #3, #4
 8000892:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
 8000896:	3301      	adds	r3, #1
 8000898:	e7be      	b.n	8000818 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
 800089a:	785a      	ldrb	r2, [r3, #1]
 800089c:	2a6c      	cmp	r2, #108	; 0x6c
 800089e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80008a2:	d101      	bne.n	80008a8 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
 80008a4:	2104      	movs	r1, #4
 80008a6:	e7eb      	b.n	8000880 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
 80008a8:	2103      	movs	r1, #3
 80008aa:	e7f0      	b.n	800088e <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
 80008ac:	2105      	movs	r1, #5
 80008ae:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80008b2:	e7ec      	b.n	800088e <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
 80008b4:	2107      	movs	r1, #7
 80008b6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80008ba:	e7e8      	b.n	800088e <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
 80008bc:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80008c0:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80008c4:	f022 0202 	bic.w	r2, r2, #2
 80008c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80008cc:	f042 0202 	orr.w	r2, r2, #2
 80008d0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
 80008d4:	e7df      	b.n	8000896 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
 80008d6:	3b6e      	subs	r3, #110	; 0x6e
 80008d8:	b2d9      	uxtb	r1, r3
 80008da:	2301      	movs	r3, #1
 80008dc:	408b      	lsls	r3, r1
 80008de:	f240 4182 	movw	r1, #1154	; 0x482
 80008e2:	420b      	tst	r3, r1
 80008e4:	d137      	bne.n	8000956 <z_cbvprintf_impl+0x346>
 80008e6:	f013 0f24 	tst.w	r3, #36	; 0x24
 80008ea:	d151      	bne.n	8000990 <z_cbvprintf_impl+0x380>
 80008ec:	07d8      	lsls	r0, r3, #31
 80008ee:	d55c      	bpl.n	80009aa <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
 80008f0:	2103      	movs	r1, #3
 80008f2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80008f6:	f361 0302 	bfi	r3, r1, #0, #3
 80008fa:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 80008fe:	f002 0378 	and.w	r3, r2, #120	; 0x78
 8000902:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 8000906:	424b      	negs	r3, r1
 8000908:	414b      	adcs	r3, r1
 800090a:	e01a      	b.n	8000942 <z_cbvprintf_impl+0x332>
 800090c:	2001      	movs	r0, #1
	switch (conv->specifier) {
 800090e:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
 8000912:	b2c9      	uxtb	r1, r1
 8000914:	fa00 f101 	lsl.w	r1, r0, r1
 8000918:	f411 4f62 	tst.w	r1, #57856	; 0xe200
 800091c:	d194      	bne.n	8000848 <z_cbvprintf_impl+0x238>
 800091e:	f640 0601 	movw	r6, #2049	; 0x801
 8000922:	4231      	tst	r1, r6
 8000924:	d11d      	bne.n	8000962 <z_cbvprintf_impl+0x352>
 8000926:	f411 3f04 	tst.w	r1, #135168	; 0x21000
 800092a:	d03e      	beq.n	80009aa <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
 800092c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000930:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000934:	f002 0278 	and.w	r2, r2, #120	; 0x78
 8000938:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
 800093a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 800093e:	d034      	beq.n	80009aa <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
 8000940:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
 8000942:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8000946:	f3c2 0140 	ubfx	r1, r2, #1, #1
 800094a:	430b      	orrs	r3, r1
 800094c:	f363 0241 	bfi	r2, r3, #1, #1
 8000950:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 8000954:	e6fd      	b.n	8000752 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
 8000956:	2102      	movs	r1, #2
 8000958:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800095c:	f361 0302 	bfi	r3, r1, #0, #3
 8000960:	e7e8      	b.n	8000934 <z_cbvprintf_impl+0x324>
 8000962:	2002      	movs	r0, #2
 8000964:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000968:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 800096c:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000970:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 8000972:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
 8000976:	bf02      	ittt	eq
 8000978:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
 800097c:	f041 0101 	orreq.w	r1, r1, #1
 8000980:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
 8000984:	2b63      	cmp	r3, #99	; 0x63
 8000986:	d1db      	bne.n	8000940 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8000988:	1e13      	subs	r3, r2, #0
 800098a:	bf18      	it	ne
 800098c:	2301      	movne	r3, #1
 800098e:	e7d8      	b.n	8000942 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
 8000990:	2103      	movs	r1, #3
 8000992:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
 8000996:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 800099a:	f361 0302 	bfi	r3, r1, #0, #3
 800099e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
 80009a2:	bf14      	ite	ne
 80009a4:	2301      	movne	r3, #1
 80009a6:	2300      	moveq	r3, #0
 80009a8:	e7cb      	b.n	8000942 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
 80009aa:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
 80009b6:	e7c3      	b.n	8000940 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
 80009b8:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
 80009bc:	2a00      	cmp	r2, #0
		int width = -1;
 80009be:	bfac      	ite	ge
 80009c0:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
			width = conv->width_value;
 80009c4:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
 80009c8:	e6d5      	b.n	8000776 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
 80009ca:	0798      	lsls	r0, r3, #30
 80009cc:	f57f aee2 	bpl.w	8000794 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
 80009d0:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
 80009d4:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 80009d6:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
 80009da:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
 80009de:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		enum specifier_cat_enum specifier_cat
 80009e2:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 80009e6:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 80009e8:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 80009ec:	d133      	bne.n	8000a56 <z_cbvprintf_impl+0x446>
			switch (length_mod) {
 80009ee:	1ecb      	subs	r3, r1, #3
 80009f0:	2b04      	cmp	r3, #4
 80009f2:	d804      	bhi.n	80009fe <z_cbvprintf_impl+0x3ee>
 80009f4:	e8df f003 	tbb	[pc, r3]
 80009f8:	21464621 	.word	0x21464621
 80009fc:	21          	.byte	0x21
 80009fd:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 80009fe:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
 8000a00:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
 8000a02:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8000a06:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 8000a0a:	d11c      	bne.n	8000a46 <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
 8000a0c:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
 8000a10:	17da      	asrs	r2, r3, #31
 8000a12:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
 8000a16:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
 8000a18:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000a1c:	f013 0603 	ands.w	r6, r3, #3
 8000a20:	d050      	beq.n	8000ac4 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
 8000a22:	463a      	mov	r2, r7
 8000a24:	4659      	mov	r1, fp
 8000a26:	4648      	mov	r0, r9
 8000a28:	9b03      	ldr	r3, [sp, #12]
 8000a2a:	f003 f8aa 	bl	8003b82 <outs>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	f2c0 8152 	blt.w	8000cd8 <z_cbvprintf_impl+0x6c8>
 8000a34:	4405      	add	r5, r0
			continue;
 8000a36:	9f03      	ldr	r7, [sp, #12]
 8000a38:	e5f2      	b.n	8000620 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000a3a:	f854 3b04 	ldr.w	r3, [r4], #4
 8000a3e:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
 8000a40:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 8000a44:	e7e8      	b.n	8000a18 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
 8000a46:	2902      	cmp	r1, #2
 8000a48:	d1e5      	bne.n	8000a16 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
 8000a4a:	b21a      	sxth	r2, r3
 8000a4c:	f343 33c0 	sbfx	r3, r3, #15, #1
 8000a50:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000a54:	e7df      	b.n	8000a16 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d124      	bne.n	8000aa4 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
 8000a5a:	1ecb      	subs	r3, r1, #3
 8000a5c:	2b04      	cmp	r3, #4
 8000a5e:	d804      	bhi.n	8000a6a <z_cbvprintf_impl+0x45a>
 8000a60:	e8df f003 	tbb	[pc, r3]
 8000a64:	18101018 	.word	0x18101018
 8000a68:	18          	.byte	0x18
 8000a69:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
 8000a6a:	2901      	cmp	r1, #1
 8000a6c:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
 8000a70:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8000a74:	d014      	beq.n	8000aa0 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
 8000a76:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
 8000a78:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
 8000a7c:	d1cc      	bne.n	8000a18 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
 8000a7e:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
 8000a80:	930e      	str	r3, [sp, #56]	; 0x38
 8000a82:	e7c9      	b.n	8000a18 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
 8000a84:	3407      	adds	r4, #7
 8000a86:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
 8000a8a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8000a8e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 8000a92:	e7c1      	b.n	8000a18 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
 8000a94:	f854 3b04 	ldr.w	r3, [r4], #4
 8000a98:	930e      	str	r3, [sp, #56]	; 0x38
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
 8000a9e:	e7bb      	b.n	8000a18 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	e7cd      	b.n	8000a40 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
 8000aa4:	2b04      	cmp	r3, #4
 8000aa6:	d108      	bne.n	8000aba <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
 8000aa8:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
 8000aaa:	f024 0407 	bic.w	r4, r4, #7
 8000aae:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000ab2:	3408      	adds	r4, #8
 8000ab4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000ab8:	e7ae      	b.n	8000a18 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8000aba:	2b03      	cmp	r3, #3
 8000abc:	d1ac      	bne.n	8000a18 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
 8000abe:	f854 3b04 	ldr.w	r3, [r4], #4
 8000ac2:	e7dd      	b.n	8000a80 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
 8000ac4:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 8000ac8:	2878      	cmp	r0, #120	; 0x78
 8000aca:	d8b4      	bhi.n	8000a36 <z_cbvprintf_impl+0x426>
 8000acc:	2862      	cmp	r0, #98	; 0x62
 8000ace:	d81c      	bhi.n	8000b0a <z_cbvprintf_impl+0x4fa>
 8000ad0:	2825      	cmp	r0, #37	; 0x25
 8000ad2:	f43f adad 	beq.w	8000630 <z_cbvprintf_impl+0x20>
 8000ad6:	2858      	cmp	r0, #88	; 0x58
 8000ad8:	d1ad      	bne.n	8000a36 <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000ada:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8000ade:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	aa10      	add	r2, sp, #64	; 0x40
 8000ae6:	ab08      	add	r3, sp, #32
 8000ae8:	f003 f805 	bl	8003af6 <encode_uint>
			if (precision >= 0) {
 8000aec:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000af0:	4607      	mov	r7, r0
			if (precision >= 0) {
 8000af2:	f280 8099 	bge.w	8000c28 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
 8000af6:	2f00      	cmp	r7, #0
 8000af8:	d09d      	beq.n	8000a36 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
 8000afa:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000afe:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
 8000b00:	2e00      	cmp	r6, #0
 8000b02:	f000 80c0 	beq.w	8000c86 <z_cbvprintf_impl+0x676>
			nj_len += 1U;
 8000b06:	3001      	adds	r0, #1
 8000b08:	e0bd      	b.n	8000c86 <z_cbvprintf_impl+0x676>
		switch (conv->specifier) {
 8000b0a:	3863      	subs	r0, #99	; 0x63
 8000b0c:	2815      	cmp	r0, #21
 8000b0e:	d892      	bhi.n	8000a36 <z_cbvprintf_impl+0x426>
 8000b10:	a201      	add	r2, pc, #4	; (adr r2, 8000b18 <z_cbvprintf_impl+0x508>)
 8000b12:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8000b16:	bf00      	nop
 8000b18:	08000bed 	.word	0x08000bed
 8000b1c:	08000bff 	.word	0x08000bff
 8000b20:	08000a37 	.word	0x08000a37
 8000b24:	08000a37 	.word	0x08000a37
 8000b28:	08000a37 	.word	0x08000a37
 8000b2c:	08000a37 	.word	0x08000a37
 8000b30:	08000bff 	.word	0x08000bff
 8000b34:	08000a37 	.word	0x08000a37
 8000b38:	08000a37 	.word	0x08000a37
 8000b3c:	08000a37 	.word	0x08000a37
 8000b40:	08000a37 	.word	0x08000a37
 8000b44:	08000c8b 	.word	0x08000c8b
 8000b48:	08000c23 	.word	0x08000c23
 8000b4c:	08000c49 	.word	0x08000c49
 8000b50:	08000a37 	.word	0x08000a37
 8000b54:	08000a37 	.word	0x08000a37
 8000b58:	08000b71 	.word	0x08000b71
 8000b5c:	08000a37 	.word	0x08000a37
 8000b60:	08000c23 	.word	0x08000c23
 8000b64:	08000a37 	.word	0x08000a37
 8000b68:	08000a37 	.word	0x08000a37
 8000b6c:	08000c23 	.word	0x08000c23
			if (precision >= 0) {
 8000b70:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
 8000b74:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
 8000b76:	db35      	blt.n	8000be4 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
 8000b78:	4651      	mov	r1, sl
 8000b7a:	4638      	mov	r0, r7
 8000b7c:	f003 f84a 	bl	8003c14 <strnlen>
			bpe = bps + len;
 8000b80:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
 8000b84:	2f00      	cmp	r7, #0
 8000b86:	f43f af56 	beq.w	8000a36 <z_cbvprintf_impl+0x426>
		char sign = 0;
 8000b8a:	2600      	movs	r6, #0
		if (conv->altform_0c) {
 8000b8c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000b90:	f013 0210 	ands.w	r2, r3, #16
 8000b94:	9205      	str	r2, [sp, #20]
 8000b96:	f000 8092 	beq.w	8000cbe <z_cbvprintf_impl+0x6ae>
			nj_len += 2U;
 8000b9a:	3002      	adds	r0, #2
		if (conv->pad_fp) {
 8000b9c:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
 8000b9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
 8000ba0:	bf48      	it	mi
 8000ba2:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
 8000ba4:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
 8000ba6:	bf48      	it	mi
 8000ba8:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
 8000baa:	f1b8 0f00 	cmp.w	r8, #0
		nj_len += conv->pad0_value;
 8000bae:	9204      	str	r2, [sp, #16]
		if (width > 0) {
 8000bb0:	f340 809f 	ble.w	8000cf2 <z_cbvprintf_impl+0x6e2>
			if (!conv->flag_dash) {
 8000bb4:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
 8000bb8:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
 8000bbc:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8000bc0:	0750      	lsls	r0, r2, #29
 8000bc2:	9306      	str	r3, [sp, #24]
 8000bc4:	f100 8095 	bmi.w	8000cf2 <z_cbvprintf_impl+0x6e2>
				if (conv->flag_zero) {
 8000bc8:	0651      	lsls	r1, r2, #25
 8000bca:	f140 8088 	bpl.w	8000cde <z_cbvprintf_impl+0x6ce>
					if (sign != 0) {
 8000bce:	b13e      	cbz	r6, 8000be0 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
 8000bd0:	4659      	mov	r1, fp
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	47c8      	blx	r9
 8000bd6:	2800      	cmp	r0, #0
 8000bd8:	db7e      	blt.n	8000cd8 <z_cbvprintf_impl+0x6c8>
 8000bda:	9b06      	ldr	r3, [sp, #24]
 8000bdc:	3501      	adds	r5, #1
 8000bde:	461e      	mov	r6, r3
					pad = '0';
 8000be0:	2230      	movs	r2, #48	; 0x30
 8000be2:	e07d      	b.n	8000ce0 <z_cbvprintf_impl+0x6d0>
				len = strlen(bps);
 8000be4:	4638      	mov	r0, r7
 8000be6:	f002 fff7 	bl	8003bd8 <strlen>
 8000bea:	e7c9      	b.n	8000b80 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8000bec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
 8000bee:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
 8000bf0:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8000bf2:	f88d 3020 	strb.w	r3, [sp, #32]
			bps = buf;
 8000bf6:	af08      	add	r7, sp, #32
			bpe = buf + 1;
 8000bf8:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
 8000bfc:	e7c6      	b.n	8000b8c <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
 8000bfe:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
 8000c00:	bf5a      	itte	pl
 8000c02:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
 8000c06:	015e      	lslpl	r6, r3, #5
				sign = '+';
 8000c08:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
 8000c0a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	f6bf af63 	bge.w	8000ada <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
 8000c14:	4252      	negs	r2, r2
 8000c16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
 8000c1a:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
 8000c1c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000c20:	e75b      	b.n	8000ada <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
 8000c22:	2600      	movs	r6, #0
 8000c24:	e759      	b.n	8000ada <z_cbvprintf_impl+0x4ca>
		char sign = 0;
 8000c26:	2600      	movs	r6, #0
				conv->flag_zero = false;
 8000c28:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
 8000c2c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000c30:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
 8000c32:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8000c36:	459a      	cmp	sl, r3
				conv->flag_zero = false;
 8000c38:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
 8000c3c:	f67f af5b 	bls.w	8000af6 <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
 8000c40:	ebaa 0303 	sub.w	r3, sl, r3
 8000c44:	9311      	str	r3, [sp, #68]	; 0x44
 8000c46:	e756      	b.n	8000af6 <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
 8000c48:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000c4a:	b390      	cbz	r0, 8000cb2 <z_cbvprintf_impl+0x6a2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000c4c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	2100      	movs	r1, #0
 8000c54:	ab08      	add	r3, sp, #32
 8000c56:	aa10      	add	r2, sp, #64	; 0x40
 8000c58:	f002 ff4d 	bl	8003af6 <encode_uint>
				conv->altform_0c = true;
 8000c5c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
 8000c60:	f1ba 0f00 	cmp.w	sl, #0
				conv->altform_0c = true;
 8000c64:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000c68:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8000c6c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000c70:	4607      	mov	r7, r0
				conv->altform_0c = true;
 8000c72:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
 8000c76:	dad6      	bge.n	8000c26 <z_cbvprintf_impl+0x616>
		if (bps == NULL) {
 8000c78:	2800      	cmp	r0, #0
 8000c7a:	f43f aedc 	beq.w	8000a36 <z_cbvprintf_impl+0x426>
		char sign = 0;
 8000c7e:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
 8000c80:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000c84:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
 8000c86:	469a      	mov	sl, r3
 8000c88:	e780      	b.n	8000b8c <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
 8000c8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
 8000c8c:	2907      	cmp	r1, #7
 8000c8e:	f63f aed2 	bhi.w	8000a36 <z_cbvprintf_impl+0x426>
 8000c92:	e8df f001 	tbb	[pc, r1]
 8000c96:	040c      	.short	0x040c
 8000c98:	08080c06 	.word	0x08080c06
 8000c9c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
 8000c9e:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
 8000ca0:	e6c9      	b.n	8000a36 <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
 8000ca2:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
 8000ca4:	e6c7      	b.n	8000a36 <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
 8000ca6:	17ea      	asrs	r2, r5, #31
 8000ca8:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
 8000cac:	e6c3      	b.n	8000a36 <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8000cae:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
 8000cb0:	e6c1      	b.n	8000a36 <z_cbvprintf_impl+0x426>
 8000cb2:	4f2f      	ldr	r7, [pc, #188]	; (8000d70 <z_cbvprintf_impl+0x760>)
		char sign = 0;
 8000cb4:	4606      	mov	r6, r0
			bpe = bps + 5;
 8000cb6:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
 8000cba:	2005      	movs	r0, #5
 8000cbc:	e766      	b.n	8000b8c <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
 8000cbe:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
 8000cc0:	bf48      	it	mi
 8000cc2:	3001      	addmi	r0, #1
 8000cc4:	e76a      	b.n	8000b9c <z_cbvprintf_impl+0x58c>
					OUTC(pad);
 8000cc6:	4610      	mov	r0, r2
 8000cc8:	9307      	str	r3, [sp, #28]
 8000cca:	9206      	str	r2, [sp, #24]
 8000ccc:	4659      	mov	r1, fp
 8000cce:	47c8      	blx	r9
 8000cd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	da04      	bge.n	8000ce2 <z_cbvprintf_impl+0x6d2>
#undef OUTS
#undef OUTC
}
 8000cd8:	b015      	add	sp, #84	; 0x54
 8000cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 8000cde:	2220      	movs	r2, #32
					pad = '0';
 8000ce0:	4643      	mov	r3, r8
				while (width-- > 0) {
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	2900      	cmp	r1, #0
 8000ce6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000cea:	dcec      	bgt.n	8000cc6 <z_cbvprintf_impl+0x6b6>
 8000cec:	4445      	add	r5, r8
 8000cee:	4698      	mov	r8, r3
 8000cf0:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
 8000cf2:	b12e      	cbz	r6, 8000d00 <z_cbvprintf_impl+0x6f0>
			OUTC(sign);
 8000cf4:	4659      	mov	r1, fp
 8000cf6:	4630      	mov	r0, r6
 8000cf8:	47c8      	blx	r9
 8000cfa:	2800      	cmp	r0, #0
 8000cfc:	dbec      	blt.n	8000cd8 <z_cbvprintf_impl+0x6c8>
 8000cfe:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 8000d00:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000d04:	06da      	lsls	r2, r3, #27
 8000d06:	d401      	bmi.n	8000d0c <z_cbvprintf_impl+0x6fc>
 8000d08:	071b      	lsls	r3, r3, #28
 8000d0a:	d505      	bpl.n	8000d18 <z_cbvprintf_impl+0x708>
				OUTC('0');
 8000d0c:	4659      	mov	r1, fp
 8000d0e:	2030      	movs	r0, #48	; 0x30
 8000d10:	47c8      	blx	r9
 8000d12:	2800      	cmp	r0, #0
 8000d14:	dbe0      	blt.n	8000cd8 <z_cbvprintf_impl+0x6c8>
 8000d16:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 8000d18:	9b05      	ldr	r3, [sp, #20]
 8000d1a:	b133      	cbz	r3, 8000d2a <z_cbvprintf_impl+0x71a>
				OUTC(conv->specifier);
 8000d1c:	4659      	mov	r1, fp
 8000d1e:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 8000d22:	47c8      	blx	r9
 8000d24:	2800      	cmp	r0, #0
 8000d26:	dbd7      	blt.n	8000cd8 <z_cbvprintf_impl+0x6c8>
 8000d28:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000d2a:	9e04      	ldr	r6, [sp, #16]
 8000d2c:	442e      	add	r6, r5
 8000d2e:	e005      	b.n	8000d3c <z_cbvprintf_impl+0x72c>
				OUTC('0');
 8000d30:	4659      	mov	r1, fp
 8000d32:	2030      	movs	r0, #48	; 0x30
 8000d34:	47c8      	blx	r9
 8000d36:	2800      	cmp	r0, #0
 8000d38:	dbce      	blt.n	8000cd8 <z_cbvprintf_impl+0x6c8>
 8000d3a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000d3c:	1b73      	subs	r3, r6, r5
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	dcf6      	bgt.n	8000d30 <z_cbvprintf_impl+0x720>
			OUTS(bps, bpe);
 8000d42:	4653      	mov	r3, sl
 8000d44:	463a      	mov	r2, r7
 8000d46:	4659      	mov	r1, fp
 8000d48:	4648      	mov	r0, r9
 8000d4a:	f002 ff1a 	bl	8003b82 <outs>
 8000d4e:	2800      	cmp	r0, #0
 8000d50:	dbc2      	blt.n	8000cd8 <z_cbvprintf_impl+0x6c8>
 8000d52:	4405      	add	r5, r0
		while (width > 0) {
 8000d54:	44a8      	add	r8, r5
 8000d56:	eba8 0305 	sub.w	r3, r8, r5
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f77f ae6b 	ble.w	8000a36 <z_cbvprintf_impl+0x426>
			OUTC(' ');
 8000d60:	4659      	mov	r1, fp
 8000d62:	2020      	movs	r0, #32
 8000d64:	47c8      	blx	r9
 8000d66:	2800      	cmp	r0, #0
 8000d68:	dbb6      	blt.n	8000cd8 <z_cbvprintf_impl+0x6c8>
 8000d6a:	3501      	adds	r5, #1
			--width;
 8000d6c:	e7f3      	b.n	8000d56 <z_cbvprintf_impl+0x746>
 8000d6e:	bf00      	nop
 8000d70:	08005296 	.word	0x08005296

08000d74 <stm32f1_init>:
 */
static int stm32f1_init(void)
{
	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 8 MHz from HSI */
	SystemCoreClock = 8000000;
 8000d74:	4b02      	ldr	r3, [pc, #8]	; (8000d80 <stm32f1_init+0xc>)
 8000d76:	4a03      	ldr	r2, [pc, #12]	; (8000d84 <stm32f1_init+0x10>)

	return 0;
}
 8000d78:	2000      	movs	r0, #0
	SystemCoreClock = 8000000;
 8000d7a:	601a      	str	r2, [r3, #0]
}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	200000ac 	.word	0x200000ac
 8000d84:	007a1200 	.word	0x007a1200

08000d88 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8000d88:	4901      	ldr	r1, [pc, #4]	; (8000d90 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8000d8a:	2210      	movs	r2, #16
	str	r2, [r1]
 8000d8c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8000d8e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8000d90:	e000ed10 	.word	0xe000ed10

08000d94 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8000d94:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8000d96:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8000d98:	f380 8811 	msr	BASEPRI, r0
	isb
 8000d9c:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
 8000da0:	f3bf 8f4f 	dsb	sy
 8000da4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8000da6:	b662      	cpsie	i
	isb
 8000da8:	f3bf 8f6f 	isb	sy

	bx	lr
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8000db0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000db2:	2800      	cmp	r0, #0
 8000db4:	db07      	blt.n	8000dc6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db6:	2301      	movs	r3, #1
 8000db8:	0941      	lsrs	r1, r0, #5
 8000dba:	4a03      	ldr	r2, [pc, #12]	; (8000dc8 <arch_irq_enable+0x18>)
 8000dbc:	f000 001f 	and.w	r0, r0, #31
 8000dc0:	4083      	lsls	r3, r0
 8000dc2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100

08000dcc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8000dcc:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000dce:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
 8000dd0:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	bfac      	ite	ge
 8000dd6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	4b06      	ldrlt	r3, [pc, #24]	; (8000df4 <z_arm_irq_priority_set+0x28>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8000de0:	b2c9      	uxtb	r1, r1
 8000de2:	bfab      	itete	ge
 8000de4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	5419      	strblt	r1, [r3, r0]
}
 8000df2:	4770      	bx	lr
 8000df4:	e000ed14 	.word	0xe000ed14

08000df8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8000df8:	bf30      	wfi
    b z_SysNmiOnReset
 8000dfa:	f7ff bffd 	b.w	8000df8 <z_SysNmiOnReset>
 8000dfe:	bf00      	nop

08000e00 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8000e00:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <z_arm_prep_c+0x28>)
 8000e04:	4a09      	ldr	r2, [pc, #36]	; (8000e2c <z_arm_prep_c+0x2c>)
 8000e06:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000e0a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000e0e:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e14:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8000e18:	f001 ffd6 	bl	8002dc8 <z_bss_zero>
	z_data_copy();
 8000e1c:	f002 fc74 	bl	8003708 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8000e20:	f000 f9ca 	bl	80011b8 <z_arm_interrupt_init>
	z_cstart();
 8000e24:	f002 f81e 	bl	8002e64 <z_cstart>
 8000e28:	08000000 	.word	0x08000000
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8000e30:	4a09      	ldr	r2, [pc, #36]	; (8000e58 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8000e32:	490a      	ldr	r1, [pc, #40]	; (8000e5c <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8000e34:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8000e36:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
 8000e38:	6698      	str	r0, [r3, #104]	; 0x68
	_current->arch.swap_return_value = _k_neg_eagain;
 8000e3a:	66d9      	str	r1, [r3, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000e3c:	4908      	ldr	r1, [pc, #32]	; (8000e60 <arch_swap+0x30>)
 8000e3e:	684b      	ldr	r3, [r1, #4]
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e44:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000e46:	2300      	movs	r3, #0
 8000e48:	f383 8811 	msr	BASEPRI, r3
 8000e4c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8000e50:	6893      	ldr	r3, [r2, #8]
}
 8000e52:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000878 	.word	0x20000878
 8000e5c:	08005168 	.word	0x08005168
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8000e64:	490f      	ldr	r1, [pc, #60]	; (8000ea4 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8000e66:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8000e68:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8000e6c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8000e6e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8000e72:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8000e76:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8000e78:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8000e7c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8000e80:	4f09      	ldr	r7, [pc, #36]	; (8000ea8 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8000e82:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8000e86:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
 8000e88:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8000e8a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8000e8c:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs r3, #0
 8000e8e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8000e90:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8000e92:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8000e96:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8000e9a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8000e9e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8000ea2:	4770      	bx	lr
    ldr r1, =_kernel
 8000ea4:	20000878 	.word	0x20000878
    ldr v4, =_SCS_ICSR
 8000ea8:	e000ed04 	.word	0xe000ed04

08000eac <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8000eac:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8000eb0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8000eb2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8000eb6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8000eba:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8000ebc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8000ec0:	2902      	cmp	r1, #2
    beq _oops
 8000ec2:	d0ff      	beq.n	8000ec4 <_oops>

08000ec4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8000ec4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 8000ec6:	f002 fe78 	bl	8003bba <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 8000eca:	bd01      	pop	{r0, pc}

08000ecc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8000ecc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8000ed0:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
 8000ed2:	490b      	ldr	r1, [pc, #44]	; (8000f00 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
 8000ed4:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 8000ed8:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
 8000eda:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
 8000ede:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8000ee2:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
 8000ee4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
 8000ee8:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8000eec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ef0:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8000ef4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8000ef6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8000ef8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8000efa:	6683      	str	r3, [r0, #104]	; 0x68
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	08003a1b 	.word	0x08003a1b

08000f04 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <arch_switch_to_main_thread+0x20>)
 8000f06:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8000f08:	4610      	mov	r0, r2
 8000f0a:	f381 8809 	msr	PSP, r1
 8000f0e:	2100      	movs	r1, #0
 8000f10:	b663      	cpsie	if
 8000f12:	f381 8811 	msr	BASEPRI, r1
 8000f16:	f3bf 8f6f 	isb	sy
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f002 fd7c 	bl	8003a1a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8000f22:	bf00      	nop
 8000f24:	20000878 	.word	0x20000878

08000f28 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8000f28:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8000f2a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8000f2e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8000f32:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8000f36:	4904      	ldr	r1, [pc, #16]	; (8000f48 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8000f38:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8000f3a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8000f3c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8000f3e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8000f42:	4902      	ldr	r1, [pc, #8]	; (8000f4c <_isr_wrapper+0x24>)
	bx r1
 8000f44:	4708      	bx	r1
 8000f46:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8000f48:	08004cdc 	.word	0x08004cdc
	ldr r1, =z_arm_int_exit
 8000f4c:	08000f51 	.word	0x08000f51

08000f50 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8000f52:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8000f54:	6958      	ldr	r0, [r3, #20]
	cmp r0, r1
 8000f56:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8000f58:	d003      	beq.n	8000f62 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8000f5a:	4903      	ldr	r1, [pc, #12]	; (8000f68 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8000f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8000f60:	600a      	str	r2, [r1, #0]

08000f62 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8000f62:	4770      	bx	lr
	ldr r3, =_kernel
 8000f64:	20000878 	.word	0x20000878
	ldr r1, =_SCS_ICSR
 8000f68:	e000ed04 	.word	0xe000ed04

08000f6c <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <usage_fault.constprop.0+0x50>)
 8000f6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
 8000f70:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8000f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
 8000f76:	bf14      	ite	ne
 8000f78:	201e      	movne	r0, #30
 8000f7a:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
 8000f7c:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8000f80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
 8000f82:	bf18      	it	ne
 8000f84:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
 8000f86:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8000f8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
 8000f8c:	bf18      	it	ne
 8000f8e:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
 8000f90:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8000f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
 8000f96:	bf18      	it	ne
 8000f98:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
 8000f9a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8000f9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
 8000fa0:	bf18      	it	ne
 8000fa2:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
 8000fa4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8000fa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	return reason;
}
 8000faa:	bf18      	it	ne
 8000fac:	2024      	movne	r0, #36	; 0x24
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8000fae:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8000fb2:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8000fb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8000fc0:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8000fc2:	4b16      	ldr	r3, [pc, #88]	; (800101c <bus_fault.constprop.0+0x5c>)
 8000fc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8000fc6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
 8000fc8:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000fcc:	bf14      	ite	ne
 8000fce:	2217      	movne	r2, #23
 8000fd0:	2216      	moveq	r2, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
 8000fd2:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8000fd6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
 8000fd8:	bf18      	it	ne
 8000fda:	2218      	movne	r2, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8000fdc:	05a4      	lsls	r4, r4, #22
 8000fde:	d509      	bpl.n	8000ff4 <bus_fault.constprop.0+0x34>
		STORE_xFAR(bfar, SCB->BFAR);
 8000fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8000fe2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fe4:	0412      	lsls	r2, r2, #16
 8000fe6:	d504      	bpl.n	8000ff2 <bus_fault.constprop.0+0x32>
			if (from_hard_fault != 0) {
 8000fe8:	b118      	cbz	r0, 8000ff2 <bus_fault.constprop.0+0x32>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8000fea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ff0:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
 8000ff2:	2219      	movs	r2, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <bus_fault.constprop.0+0x5c>)
 8000ff6:	6a98      	ldr	r0, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
 8000ff8:	f410 6f80 	tst.w	r0, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8000ffc:	6a98      	ldr	r0, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
 8000ffe:	bf18      	it	ne
 8001000:	221a      	movne	r2, #26
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
 8001002:	f410 7f80 	tst.w	r0, #256	; 0x100
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8001006:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001008:	f440 407f 	orr.w	r0, r0, #65280	; 0xff00
 800100c:	6298      	str	r0, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 800100e:	f04f 0300 	mov.w	r3, #0
}
 8001012:	bf0c      	ite	eq
 8001014:	4610      	moveq	r0, r2
 8001016:	201b      	movne	r0, #27
	*recoverable = memory_fault_recoverable(esf, true);
 8001018:	700b      	strb	r3, [r1, #0]
}
 800101a:	bd10      	pop	{r4, pc}
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
 8001020:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <mem_manage_fault.constprop.0+0x58>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
 8001024:	4602      	mov	r2, r0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8001026:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8001028:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
 800102a:	f010 0f10 	tst.w	r0, #16
 800102e:	bf14      	ite	ne
 8001030:	2011      	movne	r0, #17
 8001032:	2010      	moveq	r0, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
 8001034:	f014 0f08 	tst.w	r4, #8
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8001038:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
 800103a:	bf18      	it	ne
 800103c:	2012      	movne	r0, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 800103e:	07a4      	lsls	r4, r4, #30
 8001040:	d509      	bpl.n	8001056 <mem_manage_fault.constprop.0+0x36>
		uint32_t temp = SCB->MMFAR;
 8001042:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8001044:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001046:	0600      	lsls	r0, r0, #24
 8001048:	d504      	bpl.n	8001054 <mem_manage_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
 800104a:	b11a      	cbz	r2, 8001054 <mem_manage_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 800104c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800104e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001052:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
 8001054:	2013      	movs	r0, #19
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <mem_manage_fault.constprop.0+0x58>)
 8001058:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
 800105a:	f012 0f01 	tst.w	r2, #1
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 800105e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
 8001060:	bf18      	it	ne
 8001062:	2014      	movne	r0, #20
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8001064:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8001066:	bf58      	it	pl
 8001068:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 800106a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800106c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8001070:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8001072:	2300      	movs	r3, #0
 8001074:	700b      	strb	r3, [r1, #0]
}
 8001076:	bd10      	pop	{r4, pc}
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 800107c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800107e:	4b44      	ldr	r3, [pc, #272]	; (8001190 <z_arm_fault+0x114>)
{
 8001080:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2500      	movs	r5, #0
{
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800108c:	f385 8811 	msr	BASEPRI, r5
 8001090:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8001094:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
 8001098:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800109c:	d111      	bne.n	80010c2 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 800109e:	f002 000c 	and.w	r0, r2, #12
 80010a2:	2808      	cmp	r0, #8
 80010a4:	d00d      	beq.n	80010c2 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 80010a6:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 80010a8:	bf4c      	ite	mi
 80010aa:	460e      	movmi	r6, r1
			*nested_exc = true;
 80010ac:	2501      	movpl	r5, #1
	*recoverable = false;
 80010ae:	2200      	movs	r2, #0
	switch (fault) {
 80010b0:	3b03      	subs	r3, #3
	*recoverable = false;
 80010b2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d805      	bhi.n	80010c6 <z_arm_fault+0x4a>
 80010ba:	e8df f003 	tbb	[pc, r3]
 80010be:	5c1e      	.short	0x5c1e
 80010c0:	5960      	.short	0x5960
		return NULL;
 80010c2:	462e      	mov	r6, r5
 80010c4:	e7f3      	b.n	80010ae <z_arm_fault+0x32>
 80010c6:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 80010c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80010cc:	b99b      	cbnz	r3, 80010f6 <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 80010ce:	2220      	movs	r2, #32
 80010d0:	4631      	mov	r1, r6
 80010d2:	a802      	add	r0, sp, #8
 80010d4:	f002 fd87 	bl	8003be6 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 80010d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010da:	2d00      	cmp	r5, #0
 80010dc:	d053      	beq.n	8001186 <z_arm_fault+0x10a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 80010de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80010e2:	b922      	cbnz	r2, 80010ee <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 80010e4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80010e8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80010ec:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
 80010ee:	4620      	mov	r0, r4
 80010f0:	a902      	add	r1, sp, #8
 80010f2:	f002 fd60 	bl	8003bb6 <z_arm_fatal_error>
}
 80010f6:	b00a      	add	sp, #40	; 0x28
 80010f8:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80010fa:	4b25      	ldr	r3, [pc, #148]	; (8001190 <z_arm_fault+0x114>)
 80010fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010fe:	0791      	lsls	r1, r2, #30
 8001100:	d4e1      	bmi.n	80010c6 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8001102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001104:	2a00      	cmp	r2, #0
 8001106:	dbde      	blt.n	80010c6 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8001108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800110a:	0052      	lsls	r2, r2, #1
 800110c:	d5db      	bpl.n	80010c6 <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 800110e:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 8001110:	69b1      	ldr	r1, [r6, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 8001112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001116:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001118:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800111c:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8001120:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
 8001122:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8001126:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800112a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800112c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001130:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8001134:	f64d 7202 	movw	r2, #57090	; 0xdf02
 8001138:	4291      	cmp	r1, r2
 800113a:	d009      	beq.n	8001150 <z_arm_fault+0xd4>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
 800113c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	b142      	cbz	r2, 8001154 <z_arm_fault+0xd8>
			reason = mem_manage_fault(esf, 1, recoverable);
 8001142:	2001      	movs	r0, #1
 8001144:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
 8001148:	f7ff ff6a 	bl	8001020 <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
 800114c:	4604      	mov	r4, r0
		break;
 800114e:	e7bb      	b.n	80010c8 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
 8001150:	6834      	ldr	r4, [r6, #0]
 8001152:	e7b9      	b.n	80010c8 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
 8001154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001156:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
 800115a:	d005      	beq.n	8001168 <z_arm_fault+0xec>
			reason = bus_fault(esf, 1, recoverable);
 800115c:	2001      	movs	r0, #1
 800115e:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
 8001162:	f7ff ff2d 	bl	8000fc0 <bus_fault.constprop.0>
 8001166:	e7f1      	b.n	800114c <z_arm_fault+0xd0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
 8001168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800116e:	d3aa      	bcc.n	80010c6 <z_arm_fault+0x4a>
		reason = usage_fault(esf);
 8001170:	f7ff fefc 	bl	8000f6c <usage_fault.constprop.0>
 8001174:	e7ea      	b.n	800114c <z_arm_fault+0xd0>
		reason = mem_manage_fault(esf, 0, recoverable);
 8001176:	2000      	movs	r0, #0
 8001178:	f10d 0107 	add.w	r1, sp, #7
 800117c:	e7e4      	b.n	8001148 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
 800117e:	2000      	movs	r0, #0
 8001180:	f10d 0107 	add.w	r1, sp, #7
 8001184:	e7ed      	b.n	8001162 <z_arm_fault+0xe6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8001186:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800118a:	f023 0301 	bic.w	r3, r3, #1
 800118e:	e7ad      	b.n	80010ec <z_arm_fault+0x70>
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8001194:	4a02      	ldr	r2, [pc, #8]	; (80011a0 <z_arm_fault_init+0xc>)
 8001196:	6953      	ldr	r3, [r2, #20]
 8001198:	f043 0310 	orr.w	r3, r3, #16
 800119c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 80011a4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 80011a8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 80011ac:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 80011ae:	4672      	mov	r2, lr
	bl z_arm_fault
 80011b0:	f7ff ff64 	bl	800107c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 80011b4:	bd01      	pop	{r0, pc}
 80011b6:	bf00      	nop

080011b8 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 80011b8:	2300      	movs	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ba:	2110      	movs	r1, #16
 80011bc:	4803      	ldr	r0, [pc, #12]	; (80011cc <z_arm_interrupt_init+0x14>)
 80011be:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80011c0:	3301      	adds	r3, #1
 80011c2:	2b2b      	cmp	r3, #43	; 0x2b
 80011c4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 80011c8:	d1f9      	bne.n	80011be <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80011d0:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80011d2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 80011d6:	4808      	ldr	r0, [pc, #32]	; (80011f8 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 80011d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 80011dc:	1840      	adds	r0, r0, r1
    msr PSP, r0
 80011de:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 80011e2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 80011e6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 80011e8:	4308      	orrs	r0, r1
    msr CONTROL, r0
 80011ea:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 80011ee:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 80011f2:	f7ff fe05 	bl	8000e00 <z_arm_prep_c>
 80011f6:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 80011f8:	200008b0 	.word	0x200008b0

080011fc <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <z_impl_k_thread_abort+0x24>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	4283      	cmp	r3, r0
 8001202:	d10b      	bne.n	800121c <z_impl_k_thread_abort+0x20>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001204:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8001208:	b143      	cbz	r3, 800121c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <z_impl_k_thread_abort+0x28>)
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001212:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 8001214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001216:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800121a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 800121c:	f002 ba14 	b.w	8003648 <z_thread_abort>
 8001220:	20000878 	.word	0x20000878
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
 8001228:	4b01      	ldr	r3, [pc, #4]	; (8001230 <__stdout_hook_install+0x8>)
 800122a:	6018      	str	r0, [r3, #0]
}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000004 	.word	0x20000004

08001234 <stm32_exti_isr>:
 * Check EXTI lines in exti_range for pending interrupts
 *
 * @param exti_range Pointer to a exti_range structure
 */
static void stm32_exti_isr(const void *exti_range)
{
 8001234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001238:	4605      	mov	r5, r0
 800123a:	2400      	movs	r4, #0
		return LL_EXTI_IsActiveFlag_0_31(BIT((uint32_t)line));
 800123c:	f04f 0801 	mov.w	r8, #1
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001240:	4e0d      	ldr	r6, [pc, #52]	; (8001278 <stm32_exti_isr+0x44>)
		if (stm32_exti_is_pending(line) != 0) {
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 8001242:	4f0e      	ldr	r7, [pc, #56]	; (800127c <stm32_exti_isr+0x48>)
		line = range->start + i;
 8001244:	782b      	ldrb	r3, [r5, #0]
 8001246:	b2e2      	uxtb	r2, r4
 8001248:	1898      	adds	r0, r3, r2
	if (line < 32) {
 800124a:	281f      	cmp	r0, #31
 800124c:	dc0d      	bgt.n	800126a <stm32_exti_isr+0x36>
 800124e:	6972      	ldr	r2, [r6, #20]
		return LL_EXTI_IsActiveFlag_0_31(BIT((uint32_t)line));
 8001250:	fa08 f300 	lsl.w	r3, r8, r0
		if (stm32_exti_is_pending(line) != 0) {
 8001254:	ea33 0202 	bics.w	r2, r3, r2
 8001258:	d107      	bne.n	800126a <stm32_exti_isr+0x36>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 800125a:	6173      	str	r3, [r6, #20]
			if (!data->cb[line].cb) {
 800125c:	f857 3030 	ldr.w	r3, [r7, r0, lsl #3]
 8001260:	b11b      	cbz	r3, 800126a <stm32_exti_isr+0x36>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8001262:	eb07 02c0 	add.w	r2, r7, r0, lsl #3
 8001266:	6851      	ldr	r1, [r2, #4]
 8001268:	4798      	blx	r3
	for (uint8_t i = 0; i <= range->len; i++) {
 800126a:	786a      	ldrb	r2, [r5, #1]
 800126c:	3401      	adds	r4, #1
 800126e:	b2e3      	uxtb	r3, r4
 8001270:	429a      	cmp	r2, r3
 8001272:	d2e7      	bcs.n	8001244 <stm32_exti_isr+0x10>
		}
	}
}
 8001274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001278:	40010400 	.word	0x40010400
 800127c:	20000698 	.word	0x20000698

08001280 <stm32_fill_irq_table>:

static void stm32_fill_irq_table(int8_t start, int8_t len, int32_t irqn)
{
	for (int i = 0; i < len; i++) {
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <stm32_fill_irq_table+0x14>)
 8001282:	4418      	add	r0, r3
 8001284:	2300      	movs	r3, #0
 8001286:	3301      	adds	r3, #1
 8001288:	4299      	cmp	r1, r3
		exti_irq_table[start + i] = irqn;
 800128a:	f800 2b01 	strb.w	r2, [r0], #1
	for (int i = 0; i < len; i++) {
 800128e:	dcfa      	bgt.n	8001286 <stm32_fill_irq_table+0x6>
	}
}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000558 	.word	0x20000558

08001298 <stm32_exti_enable>:
{
 8001298:	b410      	push	{r4}
	irqnum = exti_irq_table[line];
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <stm32_exti_enable+0x1c>)
{
 800129c:	4602      	mov	r2, r0
	irqnum = exti_irq_table[line];
 800129e:	5618      	ldrsb	r0, [r3, r0]
	LL_EXTI_EnableIT_0_31(BIT((uint32_t)line));
 80012a0:	2301      	movs	r3, #1
  SET_BIT(EXTI->IMR, ExtiLine);
 80012a2:	4905      	ldr	r1, [pc, #20]	; (80012b8 <stm32_exti_enable+0x20>)
 80012a4:	4093      	lsls	r3, r2
 80012a6:	680c      	ldr	r4, [r1, #0]
 80012a8:	4323      	orrs	r3, r4
 80012aa:	600b      	str	r3, [r1, #0]
}
 80012ac:	bc10      	pop	{r4}
	irq_enable(irqnum);
 80012ae:	f7ff bd7f 	b.w	8000db0 <arch_irq_enable>
 80012b2:	bf00      	nop
 80012b4:	20000558 	.word	0x20000558
 80012b8:	40010400 	.word	0x40010400

080012bc <stm32_exti_disable>:
	if (line < 32) {
 80012bc:	281f      	cmp	r0, #31
 80012be:	dc06      	bgt.n	80012ce <stm32_exti_disable+0x12>
		LL_EXTI_DisableIT_0_31(BIT((uint32_t)line));
 80012c0:	2201      	movs	r2, #1
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80012c2:	4903      	ldr	r1, [pc, #12]	; (80012d0 <stm32_exti_disable+0x14>)
 80012c4:	4082      	lsls	r2, r0
 80012c6:	680b      	ldr	r3, [r1, #0]
 80012c8:	ea23 0302 	bic.w	r3, r3, r2
 80012cc:	600b      	str	r3, [r1, #0]
}
 80012ce:	4770      	bx	lr
 80012d0:	40010400 	.word	0x40010400

080012d4 <stm32_exti_trigger>:
	switch (trigger) {
 80012d4:	2903      	cmp	r1, #3
 80012d6:	d82a      	bhi.n	800132e <stm32_exti_trigger+0x5a>
 80012d8:	e8df f001 	tbb	[pc, r1]
 80012dc:	1f140e02 	.word	0x1f140e02
		LL_EXTI_DisableRisingTrig_0_31(BIT((uint32_t)line));
 80012e0:	2201      	movs	r2, #1
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <stm32_exti_trigger+0x5c>)
 80012e4:	4082      	lsls	r2, r0
 80012e6:	6899      	ldr	r1, [r3, #8]
 80012e8:	ea21 0102 	bic.w	r1, r1, r2
  SET_BIT(EXTI->RTSR, ExtiLine);
 80012ec:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80012ee:	68d9      	ldr	r1, [r3, #12]
 80012f0:	ea21 0202 	bic.w	r2, r1, r2
 80012f4:	60da      	str	r2, [r3, #12]
}
 80012f6:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(BIT((uint32_t)line));
 80012f8:	2201      	movs	r2, #1
  SET_BIT(EXTI->RTSR, ExtiLine);
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <stm32_exti_trigger+0x5c>)
 80012fc:	4082      	lsls	r2, r0
 80012fe:	6899      	ldr	r1, [r3, #8]
 8001300:	4311      	orrs	r1, r2
 8001302:	e7f3      	b.n	80012ec <stm32_exti_trigger+0x18>
		LL_EXTI_EnableFallingTrig_0_31(BIT((uint32_t)line));
 8001304:	2201      	movs	r2, #1
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <stm32_exti_trigger+0x5c>)
 8001308:	4082      	lsls	r2, r0
 800130a:	68d9      	ldr	r1, [r3, #12]
 800130c:	4311      	orrs	r1, r2
 800130e:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001310:	6899      	ldr	r1, [r3, #8]
 8001312:	ea21 0202 	bic.w	r2, r1, r2
 8001316:	609a      	str	r2, [r3, #8]
}
 8001318:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(BIT((uint32_t)line));
 800131a:	2301      	movs	r3, #1
 800131c:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <stm32_exti_trigger+0x5c>)
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	4302      	orrs	r2, r0
 8001326:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	4310      	orrs	r0, r2
 800132c:	60d8      	str	r0, [r3, #12]
}
 800132e:	4770      	bx	lr
 8001330:	40010400 	.word	0x40010400

08001334 <stm32_exti_set_callback>:

/**
 * @brief set & unset for the interrupt callbacks
 */
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
 8001334:	b530      	push	{r4, r5, lr}
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if ((data->cb[line].cb == cb) && (data->cb[line].data == arg)) {
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <stm32_exti_set_callback+0x2c>)
 8001338:	f853 4030 	ldr.w	r4, [r3, r0, lsl #3]
 800133c:	428c      	cmp	r4, r1
 800133e:	d104      	bne.n	800134a <stm32_exti_set_callback+0x16>
 8001340:	eb03 05c0 	add.w	r5, r3, r0, lsl #3
 8001344:	686d      	ldr	r5, [r5, #4]
 8001346:	4295      	cmp	r5, r2
 8001348:	d005      	beq.n	8001356 <stm32_exti_set_callback+0x22>
		return 0;
	}

	/* if callback already exists/maybe-running return busy */
	if (data->cb[line].cb != NULL) {
 800134a:	b934      	cbnz	r4, 800135a <stm32_exti_set_callback+0x26>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 800134c:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 8001350:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8001354:	605a      	str	r2, [r3, #4]
		return 0;
 8001356:	2000      	movs	r0, #0

	return 0;
}
 8001358:	bd30      	pop	{r4, r5, pc}
		return -EBUSY;
 800135a:	f06f 000f 	mvn.w	r0, #15
 800135e:	e7fb      	b.n	8001358 <stm32_exti_set_callback+0x24>
 8001360:	20000698 	.word	0x20000698

08001364 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8001364:	2200      	movs	r2, #0
 8001366:	4b03      	ldr	r3, [pc, #12]	; (8001374 <stm32_exti_unset_callback+0x10>)
 8001368:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 800136c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8001370:	605a      	str	r2, [r3, #4]
}
 8001372:	4770      	bx	lr
 8001374:	20000698 	.word	0x20000698

08001378 <z_impl_can_calc_timing>:
	return sp_err_min == UINT16_MAX ? -ENOTSUP : (int)sp_err_min;
}

int z_impl_can_calc_timing(const struct device *dev, struct can_timing *res,
			   uint32_t bitrate, uint16_t sample_pnt)
{
 8001378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800137c:	b089      	sub	sp, #36	; 0x24
 800137e:	4690      	mov	r8, r2
 8001380:	4699      	mov	r9, r3
 8001382:	9101      	str	r1, [sp, #4]
 */
__syscall const struct can_timing *can_get_timing_min(const struct device *dev);

static inline const struct can_timing *z_impl_can_get_timing_min(const struct device *dev)
{
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
 8001384:	6883      	ldr	r3, [r0, #8]
 8001386:	9303      	str	r3, [sp, #12]
	const struct can_timing *min = can_get_timing_min(dev);
	const struct can_timing *max = can_get_timing_max(dev);
	uint32_t core_clock;
	int ret;

	if (bitrate > 1000000) {
 8001388:	4b5d      	ldr	r3, [pc, #372]	; (8001500 <z_impl_can_calc_timing+0x188>)
 */
__syscall const struct can_timing *can_get_timing_max(const struct device *dev);

static inline const struct can_timing *z_impl_can_get_timing_max(const struct device *dev)
{
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
 800138a:	6887      	ldr	r7, [r0, #8]
 800138c:	429a      	cmp	r2, r3
 800138e:	f200 80b3 	bhi.w	80014f8 <z_impl_can_calc_timing+0x180>
	return api->get_core_clock(dev, rate);
 8001392:	6883      	ldr	r3, [r0, #8]
 8001394:	a907      	add	r1, sp, #28
 8001396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001398:	4798      	blx	r3
		return -EINVAL;
	}

	ret = can_get_core_clock(dev, &core_clock);
	if (ret != 0) {
 800139a:	2800      	cmp	r0, #0
 800139c:	f040 80a1 	bne.w	80014e2 <z_impl_can_calc_timing+0x16a>
		return ret;
	}

	return can_calc_timing_int(core_clock, res, min, max, bitrate, sample_pnt);
 80013a0:	9b07      	ldr	r3, [sp, #28]
	uint32_t ts = max->prop_seg + max->phase_seg1 + max->phase_seg2 +
 80013a2:	f8b7 4040 	ldrh.w	r4, [r7, #64]	; 0x40
	return can_calc_timing_int(core_clock, res, min, max, bitrate, sample_pnt);
 80013a6:	9302      	str	r3, [sp, #8]
	uint32_t ts = max->prop_seg + max->phase_seg1 + max->phase_seg2 +
 80013a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80013ac:	441c      	add	r4, r3
 80013ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80013b2:	441c      	add	r4, r3
 80013b4:	3401      	adds	r4, #1
	if (bitrate == 0 || sp >= 1000) {
 80013b6:	f1b8 0f00 	cmp.w	r8, #0
 80013ba:	f000 809d 	beq.w	80014f8 <z_impl_can_calc_timing+0x180>
 80013be:	f5b9 7f7a 	cmp.w	r9, #1000	; 0x3e8
 80013c2:	f080 8099 	bcs.w	80014f8 <z_impl_can_calc_timing+0x180>
	for (int prescaler = MAX(core_clock / (ts * bitrate), 1);
 80013c6:	fb04 f408 	mul.w	r4, r4, r8
 80013ca:	9b02      	ldr	r3, [sp, #8]
	uint16_t sp_err_min = UINT16_MAX;
 80013cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
	for (int prescaler = MAX(core_clock / (ts * bitrate), 1);
 80013d0:	fbb3 f4f4 	udiv	r4, r3, r4
 80013d4:	2c01      	cmp	r4, #1
 80013d6:	bf38      	it	cc
 80013d8:	2401      	movcc	r4, #1
 80013da:	fb04 fb08 	mul.w	fp, r4, r8
	     prescaler <= max->prescaler; ++prescaler) {
 80013de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80013e2:	429c      	cmp	r4, r3
 80013e4:	dd06      	ble.n	80013f4 <z_impl_can_calc_timing+0x7c>
	return sp_err_min == UINT16_MAX ? -ENOTSUP : (int)sp_err_min;
 80013e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ea:	4298      	cmp	r0, r3
 80013ec:	d179      	bne.n	80014e2 <z_impl_can_calc_timing+0x16a>
 80013ee:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return can_calc_timing_int(core_clock, res, min, max, bitrate, sample_pnt);
 80013f2:	e076      	b.n	80014e2 <z_impl_can_calc_timing+0x16a>
		if (core_clock % (prescaler * bitrate)) {
 80013f4:	9b02      	ldr	r3, [sp, #8]
 80013f6:	9a02      	ldr	r2, [sp, #8]
 80013f8:	fbb3 f3fb 	udiv	r3, r3, fp
 80013fc:	fb0b 2213 	mls	r2, fp, r3, r2
 8001400:	bb8a      	cbnz	r2, 8001466 <z_impl_can_calc_timing+0xee>
	uint16_t tseg1_min = min->phase_seg1 + min->prop_seg;
 8001402:	9d03      	ldr	r5, [sp, #12]
	tseg2 = total_tq - (total_tq * sample_pnt) / 1000;
 8001404:	fb09 fe03 	mul.w	lr, r9, r3
	uint16_t tseg1_min = min->phase_seg1 + min->prop_seg;
 8001408:	8eee      	ldrh	r6, [r5, #54]	; 0x36
	tseg2 = total_tq - (total_tq * sample_pnt) / 1000;
 800140a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800140e:	fbbe fef5 	udiv	lr, lr, r5
	tseg2 = CLAMP(tseg2, min->phase_seg2, max->phase_seg2);
 8001412:	9d03      	ldr	r5, [sp, #12]
	uint16_t tseg1_max = max->phase_seg1 + max->prop_seg;
 8001414:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001418:	f8b7 a042 	ldrh.w	sl, [r7, #66]	; 0x42
	tseg2 = total_tq - (total_tq * sample_pnt) / 1000;
 800141c:	fa1f fc83 	uxth.w	ip, r3
	tseg2 = CLAMP(tseg2, min->phase_seg2, max->phase_seg2);
 8001420:	8f6d      	ldrh	r5, [r5, #58]	; 0x3a
	tseg2 = total_tq - (total_tq * sample_pnt) / 1000;
 8001422:	ebac 0e0e 	sub.w	lr, ip, lr
	uint16_t tseg1_max = max->phase_seg1 + max->prop_seg;
 8001426:	eb0a 0102 	add.w	r1, sl, r2
 800142a:	9205      	str	r2, [sp, #20]
	tseg2 = total_tq - (total_tq * sample_pnt) / 1000;
 800142c:	fa1f fe8e 	uxth.w	lr, lr
	uint16_t tseg1_min = min->phase_seg1 + min->prop_seg;
 8001430:	9a03      	ldr	r2, [sp, #12]
	tseg2 = CLAMP(tseg2, min->phase_seg2, max->phase_seg2);
 8001432:	45ae      	cmp	lr, r5
	uint16_t tseg1_min = min->phase_seg1 + min->prop_seg;
 8001434:	8f12      	ldrh	r2, [r2, #56]	; 0x38
	uint16_t tseg1_max = max->phase_seg1 + max->prop_seg;
 8001436:	b289      	uxth	r1, r1
	tseg2 = CLAMP(tseg2, min->phase_seg2, max->phase_seg2);
 8001438:	9504      	str	r5, [sp, #16]
 800143a:	d917      	bls.n	800146c <z_impl_can_calc_timing+0xf4>
 800143c:	f8b7 5044 	ldrh.w	r5, [r7, #68]	; 0x44
 8001440:	4575      	cmp	r5, lr
 8001442:	bf28      	it	cs
 8001444:	4675      	movcs	r5, lr
	tseg1 = total_tq - CAN_SYNC_SEG - tseg2;
 8001446:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
 800144a:	ebae 0e05 	sub.w	lr, lr, r5
 800144e:	fa1f fe8e 	uxth.w	lr, lr
	if (tseg1 > tseg1_max) {
 8001452:	4571      	cmp	r1, lr
 8001454:	d20c      	bcs.n	8001470 <z_impl_can_calc_timing+0xf8>
		tseg2 = total_tq - CAN_SYNC_SEG - tseg1;
 8001456:	ebac 0501 	sub.w	r5, ip, r1
 800145a:	3d01      	subs	r5, #1
		if (tseg2 > max->phase_seg2) {
 800145c:	f8b7 c044 	ldrh.w	ip, [r7, #68]	; 0x44
		tseg2 = total_tq - CAN_SYNC_SEG - tseg1;
 8001460:	b2ad      	uxth	r5, r5
		if (tseg2 > max->phase_seg2) {
 8001462:	45ac      	cmp	ip, r5
 8001464:	d212      	bcs.n	800148c <z_impl_can_calc_timing+0x114>
	     prescaler <= max->prescaler; ++prescaler) {
 8001466:	3401      	adds	r4, #1
 8001468:	44c3      	add	fp, r8
 800146a:	e7b8      	b.n	80013de <z_impl_can_calc_timing+0x66>
 800146c:	9d04      	ldr	r5, [sp, #16]
 800146e:	e7ea      	b.n	8001446 <z_impl_can_calc_timing+0xce>
	uint16_t tseg1_min = min->phase_seg1 + min->prop_seg;
 8001470:	1991      	adds	r1, r2, r6
 8001472:	b289      	uxth	r1, r1
	} else if (tseg1 < tseg1_min) {
 8001474:	4571      	cmp	r1, lr
 8001476:	d937      	bls.n	80014e8 <z_impl_can_calc_timing+0x170>
		tseg2 = total_tq - CAN_SYNC_SEG - tseg1;
 8001478:	ebac 0c01 	sub.w	ip, ip, r1
 800147c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8001480:	fa1f f58c 	uxth.w	r5, ip
		if (tseg2 < min->phase_seg2) {
 8001484:	f8dd c010 	ldr.w	ip, [sp, #16]
 8001488:	45ac      	cmp	ip, r5
 800148a:	d8ec      	bhi.n	8001466 <z_impl_can_calc_timing+0xee>
	res->prop_seg = CLAMP(tseg1 / 2, min->prop_seg, max->prop_seg);
 800148c:	ebb6 0f51 	cmp.w	r6, r1, lsr #1
 8001490:	ea4f 0c51 	mov.w	ip, r1, lsr #1
 8001494:	d203      	bcs.n	800149e <z_impl_can_calc_timing+0x126>
 8001496:	9e05      	ldr	r6, [sp, #20]
 8001498:	4566      	cmp	r6, ip
 800149a:	bf28      	it	cs
 800149c:	4666      	movcs	r6, ip
	res->phase_seg1 = tseg1 - res->prop_seg;
 800149e:	eba1 0c06 	sub.w	ip, r1, r6
 80014a2:	fa1f fc8c 	uxth.w	ip, ip
	if (res->phase_seg1 > max->phase_seg1) {
 80014a6:	45e2      	cmp	sl, ip
 80014a8:	d220      	bcs.n	80014ec <z_impl_can_calc_timing+0x174>
		res->phase_seg1 = max->phase_seg1;
 80014aa:	46d4      	mov	ip, sl
		res->prop_seg = tseg1 - res->phase_seg1;
 80014ac:	eba1 060a 	sub.w	r6, r1, sl
 80014b0:	b2b6      	uxth	r6, r6
	sample_pnt_res = (CAN_SYNC_SEG + tseg1) * 1000 / total_tq;
 80014b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014b6:	fb01 2102 	mla	r1, r1, r2, r2
 80014ba:	fbb1 f1f3 	udiv	r1, r1, r3
		sample_pnt_res - sample_pnt :
 80014be:	4589      	cmp	r9, r1
 80014c0:	bf34      	ite	cc
 80014c2:	eba1 0109 	subcc.w	r1, r1, r9
		sample_pnt - sample_pnt_res;
 80014c6:	eba9 0101 	subcs.w	r1, r9, r1
		if (sp_err < sp_err_min) {
 80014ca:	4288      	cmp	r0, r1
 80014cc:	d9cb      	bls.n	8001466 <z_impl_can_calc_timing+0xee>
			res->prop_seg = tmp_res.prop_seg;
 80014ce:	9b01      	ldr	r3, [sp, #4]
			sp_err_min = sp_err;
 80014d0:	b288      	uxth	r0, r1
			res->prop_seg = tmp_res.prop_seg;
 80014d2:	805e      	strh	r6, [r3, #2]
			res->phase_seg1 = tmp_res.phase_seg1;
 80014d4:	f8a3 c004 	strh.w	ip, [r3, #4]
			res->phase_seg2 = tmp_res.phase_seg2;
 80014d8:	80dd      	strh	r5, [r3, #6]
			res->prescaler = (uint16_t)prescaler;
 80014da:	811c      	strh	r4, [r3, #8]
			if (sp_err == 0) {
 80014dc:	2900      	cmp	r1, #0
 80014de:	d1c2      	bne.n	8001466 <z_impl_can_calc_timing+0xee>
			sp_err_min = sp_err;
 80014e0:	4608      	mov	r0, r1
}
 80014e2:	b009      	add	sp, #36	; 0x24
 80014e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014e8:	4671      	mov	r1, lr
 80014ea:	e7cf      	b.n	800148c <z_impl_can_calc_timing+0x114>
	} else if (res->phase_seg1 < min->phase_seg1) {
 80014ec:	4562      	cmp	r2, ip
		res->prop_seg = tseg1 - res->phase_seg1;
 80014ee:	bf82      	ittt	hi
 80014f0:	1a8e      	subhi	r6, r1, r2
		res->phase_seg1 = min->phase_seg1;
 80014f2:	4694      	movhi	ip, r2
		res->prop_seg = tseg1 - res->phase_seg1;
 80014f4:	b2b6      	uxthhi	r6, r6
 80014f6:	e7dc      	b.n	80014b2 <z_impl_can_calc_timing+0x13a>
		return -EINVAL;
 80014f8:	f06f 0015 	mvn.w	r0, #21
 80014fc:	e7f1      	b.n	80014e2 <z_impl_can_calc_timing+0x16a>
 80014fe:	bf00      	nop
 8001500:	000f4240 	.word	0x000f4240

08001504 <can_stm32_enter_init_mode>:
}

#endif

static int can_stm32_enter_init_mode(CAN_TypeDef *can)
{
 8001504:	b570      	push	{r4, r5, r6, lr}
	uint32_t start_time;

	can->MCR |= CAN_MCR_INRQ;
 8001506:	6803      	ldr	r3, [r0, #0]
{
 8001508:	4604      	mov	r4, r0
	can->MCR |= CAN_MCR_INRQ;
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6003      	str	r3, [r0, #0]
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 8001510:	f001 fa96 	bl	8002a40 <sys_clock_cycle_get_32>
 8001514:	4605      	mov	r5, r0
	start_time = k_cycle_get_32();

	while ((can->MSR & CAN_MSR_INAK) == 0U) {
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 8001516:	4e09      	ldr	r6, [pc, #36]	; (800153c <can_stm32_enter_init_mode+0x38>)
	while ((can->MSR & CAN_MSR_INAK) == 0U) {
 8001518:	6863      	ldr	r3, [r4, #4]
 800151a:	07db      	lsls	r3, r3, #31
 800151c:	d501      	bpl.n	8001522 <can_stm32_enter_init_mode+0x1e>
			can->MCR &= ~CAN_MCR_INRQ;
			return -EAGAIN;
		}
	}

	return 0;
 800151e:	2000      	movs	r0, #0
 8001520:	e00a      	b.n	8001538 <can_stm32_enter_init_mode+0x34>
 8001522:	f001 fa8d 	bl	8002a40 <sys_clock_cycle_get_32>
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 8001526:	1b40      	subs	r0, r0, r5
 8001528:	42b0      	cmp	r0, r6
 800152a:	d9f5      	bls.n	8001518 <can_stm32_enter_init_mode+0x14>
			return -EAGAIN;
 800152c:	f06f 000a 	mvn.w	r0, #10
			can->MCR &= ~CAN_MCR_INRQ;
 8001530:	6823      	ldr	r3, [r4, #0]
 8001532:	f023 0301 	bic.w	r3, r3, #1
 8001536:	6023      	str	r3, [r4, #0]
}
 8001538:	bd70      	pop	{r4, r5, r6, pc}
 800153a:	bf00      	nop
 800153c:	000afc80 	.word	0x000afc80

08001540 <can_stm32_get_core_clock>:

	return 0;
}

static int can_stm32_get_core_clock(const struct device *dev, uint32_t *rate)
{
 8001540:	b508      	push	{r3, lr}
 8001542:	460a      	mov	r2, r1
	int ret;

	clock = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);

	ret = clock_control_get_rate(clock,
				     (clock_control_subsys_t) &cfg->pclken,
 8001544:	6841      	ldr	r1, [r0, #4]
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <can_stm32_get_core_clock+0x1c>)
 8001548:	3114      	adds	r1, #20
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 800154a:	6883      	ldr	r3, [r0, #8]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	b10b      	cbz	r3, 8001554 <can_stm32_get_core_clock+0x14>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8001550:	4798      	blx	r3
				     rate);
	if (ret != 0) {
 8001552:	b108      	cbz	r0, 8001558 <can_stm32_get_core_clock+0x18>
		LOG_ERR("Failed call clock_control_get_rate: return [%d]", ret);
		return -EIO;
 8001554:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
 8001558:	bd08      	pop	{r3, pc}
 800155a:	bf00      	nop
 800155c:	08004bc4 	.word	0x08004bc4

08001560 <can_stm32_set_timing>:
{
 8001560:	b570      	push	{r4, r5, r6, lr}
	CAN_TypeDef *can = cfg->can;
 8001562:	6843      	ldr	r3, [r0, #4]
	struct can_stm32_data *data = dev->data;
 8001564:	6905      	ldr	r5, [r0, #16]
	CAN_TypeDef *can = cfg->can;
 8001566:	681c      	ldr	r4, [r3, #0]
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 8001568:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800156c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001570:	4628      	mov	r0, r5
{
 8001572:	460e      	mov	r6, r1
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 8001574:	f002 fd38 	bl	8003fe8 <k_mutex_lock.constprop.0.isra.0>
	if (data->started) {
 8001578:	f895 30ed 	ldrb.w	r3, [r5, #237]	; 0xed
 800157c:	b12b      	cbz	r3, 800158a <can_stm32_set_timing+0x2a>
		k_mutex_unlock(&data->inst_mutex);
 800157e:	4628      	mov	r0, r5
 8001580:	f002 fd34 	bl	8003fec <k_mutex_unlock.isra.0>
		return -EBUSY;
 8001584:	f06f 000f 	mvn.w	r0, #15
}
 8001588:	bd70      	pop	{r4, r5, r6, pc}
	     (((timing->prescaler  - 1) << CAN_BTR_BRP_Pos) & CAN_BTR_BRP_Msk);
 800158a:	8933      	ldrh	r3, [r6, #8]
	can->BTR = (can->BTR & ~(CAN_BTR_BRP_Msk | CAN_BTR_TS1_Msk | CAN_BTR_TS2_Msk)) |
 800158c:	69e1      	ldr	r1, [r4, #28]
 800158e:	4a11      	ldr	r2, [pc, #68]	; (80015d4 <can_stm32_set_timing+0x74>)
	     (((timing->prescaler  - 1) << CAN_BTR_BRP_Pos) & CAN_BTR_BRP_Msk);
 8001590:	3b01      	subs	r3, #1
	can->BTR = (can->BTR & ~(CAN_BTR_BRP_Msk | CAN_BTR_TS1_Msk | CAN_BTR_TS2_Msk)) |
 8001592:	400a      	ands	r2, r1
	     (((timing->prescaler  - 1) << CAN_BTR_BRP_Pos) & CAN_BTR_BRP_Msk);
 8001594:	f3c3 0309 	ubfx	r3, r3, #0, #10
	     (((timing->phase_seg2 - 1) << CAN_BTR_TS2_Pos) & CAN_BTR_TS2_Msk) |
 8001598:	4313      	orrs	r3, r2
	     (((timing->phase_seg1 - 1) << CAN_BTR_TS1_Pos) & CAN_BTR_TS1_Msk) |
 800159a:	88b2      	ldrh	r2, [r6, #4]
 800159c:	3a01      	subs	r2, #1
 800159e:	0412      	lsls	r2, r2, #16
 80015a0:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
	     (((timing->phase_seg2 - 1) << CAN_BTR_TS2_Pos) & CAN_BTR_TS2_Msk) |
 80015a4:	4313      	orrs	r3, r2
 80015a6:	88f2      	ldrh	r2, [r6, #6]
 80015a8:	3a01      	subs	r2, #1
 80015aa:	0512      	lsls	r2, r2, #20
 80015ac:	f402 02e0 	and.w	r2, r2, #7340032	; 0x700000
 80015b0:	4313      	orrs	r3, r2
	can->BTR = (can->BTR & ~(CAN_BTR_BRP_Msk | CAN_BTR_TS1_Msk | CAN_BTR_TS2_Msk)) |
 80015b2:	61e3      	str	r3, [r4, #28]
	if (timing->sjw != CAN_SJW_NO_CHANGE) {
 80015b4:	8833      	ldrh	r3, [r6, #0]
 80015b6:	b143      	cbz	r3, 80015ca <can_stm32_set_timing+0x6a>
		can->BTR = (can->BTR & ~CAN_BTR_SJW_Msk) |
 80015b8:	69e2      	ldr	r2, [r4, #28]
			   (((timing->sjw - 1) << CAN_BTR_SJW_Pos) & CAN_BTR_SJW_Msk);
 80015ba:	3b01      	subs	r3, #1
 80015bc:	061b      	lsls	r3, r3, #24
 80015be:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
		can->BTR = (can->BTR & ~CAN_BTR_SJW_Msk) |
 80015c2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61e3      	str	r3, [r4, #28]
	k_mutex_unlock(&data->inst_mutex);
 80015ca:	4628      	mov	r0, r5
 80015cc:	f002 fd0e 	bl	8003fec <k_mutex_unlock.isra.0>
	return 0;
 80015d0:	2000      	movs	r0, #0
 80015d2:	e7d9      	b.n	8001588 <can_stm32_set_timing+0x28>
 80015d4:	ff80fc00 	.word	0xff80fc00

080015d8 <can_stm32_add_rx_filter>:
 *
 * Currently, all filter banks are assigned to FIFO 0 and FIFO 1 is not used.
 */
static int can_stm32_add_rx_filter(const struct device *dev, can_rx_callback_t cb,
				   void *cb_arg, const struct can_filter *filter)
{
 80015d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015dc:	461d      	mov	r5, r3
	struct can_stm32_data *data = dev->data;
	int filter_id;

	if ((filter->flags & ~(CAN_FILTER_IDE | CAN_FILTER_DATA | CAN_FILTER_RTR)) != 0) {
 80015de:	7a1b      	ldrb	r3, [r3, #8]
{
 80015e0:	4604      	mov	r4, r0
	if ((filter->flags & ~(CAN_FILTER_IDE | CAN_FILTER_DATA | CAN_FILTER_RTR)) != 0) {
 80015e2:	2b07      	cmp	r3, #7
{
 80015e4:	4688      	mov	r8, r1
 80015e6:	4617      	mov	r7, r2
	struct can_stm32_data *data = dev->data;
 80015e8:	6906      	ldr	r6, [r0, #16]
	if ((filter->flags & ~(CAN_FILTER_IDE | CAN_FILTER_DATA | CAN_FILTER_RTR)) != 0) {
 80015ea:	f200 80a1 	bhi.w	8001730 <can_stm32_add_rx_filter+0x158>
		LOG_ERR("unsupported CAN filter flags 0x%02x", filter->flags);
		return -ENOTSUP;
	}

	k_mutex_lock(&filter_mutex, K_FOREVER);
 80015ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015f6:	4850      	ldr	r0, [pc, #320]	; (8001738 <can_stm32_add_rx_filter+0x160>)
 80015f8:	f002 fcf6 	bl	8003fe8 <k_mutex_lock.constprop.0.isra.0>
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 80015fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001604:	4630      	mov	r0, r6
 8001606:	f002 fcef 	bl	8003fe8 <k_mutex_lock.constprop.0.isra.0>
	const struct can_stm32_config *cfg = dev->config;
 800160a:	6861      	ldr	r1, [r4, #4]
	if ((filter->flags & CAN_FILTER_IDE) != 0) {
 800160c:	f895 c008 	ldrb.w	ip, [r5, #8]
	if (cfg->can != cfg->master_can) {
 8001610:	c906      	ldmia	r1, {r1, r2}
		bank_offset = CAN_STM32_NUM_FILTER_BANKS;
 8001612:	428a      	cmp	r2, r1
 8001614:	bf14      	ite	ne
 8001616:	210e      	movne	r1, #14
 8001618:	2100      	moveq	r1, #0
	if ((filter->flags & CAN_FILTER_IDE) != 0) {
 800161a:	f01c 0e01 	ands.w	lr, ip, #1
	struct can_stm32_data *data = dev->data;
 800161e:	6923      	ldr	r3, [r4, #16]
	if ((filter->flags & CAN_FILTER_IDE) != 0) {
 8001620:	d055      	beq.n	80016ce <can_stm32_add_rx_filter+0xf6>
		for (int i = 0; i < CONFIG_CAN_MAX_EXT_ID_FILTER; i++) {
 8001622:	2400      	movs	r4, #0
 8001624:	3370      	adds	r3, #112	; 0x70
			if (data->rx_cb_ext[i] == NULL) {
 8001626:	f853 0f04 	ldr.w	r0, [r3, #4]!
 800162a:	2800      	cmp	r0, #0
 800162c:	d141      	bne.n	80016b2 <can_stm32_add_rx_filter+0xda>
		(1U << CAN_STM32_FIRX_EXT_RTR_POS) : 0U) |
 800162e:	f00c 0302 	and.w	r3, ip, #2
		(CAN_FILTER_DATA | CAN_FILTER_RTR) ? 1U : 0U;
 8001632:	f00c 0c06 	and.w	ip, ip, #6
 8001636:	f1bc 0c06 	subs.w	ip, ip, #6
 800163a:	bf18      	it	ne
 800163c:	f04f 0c01 	movne.w	ip, #1
	return  (filter->id << CAN_STM32_FIRX_EXT_EXT_ID_POS) |
 8001640:	6828      	ldr	r0, [r5, #0]
				bank_num = bank_offset + i;
 8001642:	4421      	add	r1, r4
	return  (filter->id << CAN_STM32_FIRX_EXT_EXT_ID_POS) |
 8001644:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
	return  (filter->mask << CAN_STM32_FIRX_EXT_EXT_ID_POS) |
 8001648:	6868      	ldr	r0, [r5, #4]
		(1U << CAN_STM32_FIRX_EXT_RTR_POS) : 0U) |
 800164a:	f043 0304 	orr.w	r3, r3, #4
	return  (filter->mask << CAN_STM32_FIRX_EXT_EXT_ID_POS) |
 800164e:	00c0      	lsls	r0, r0, #3
 8001650:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
		(rtr_mask << CAN_STM32_FIRX_EXT_RTR_POS) |
 8001654:	f040 0004 	orr.w	r0, r0, #4
		can->FMR |= CAN_FMR_FINIT;
 8001658:	f8d2 c200 	ldr.w	ip, [r2, #512]	; 0x200
 800165c:	f04c 0c01 	orr.w	ip, ip, #1
 8001660:	f8c2 c200 	str.w	ip, [r2, #512]	; 0x200
		can_stm32_set_filter_bank(filter_id, &can->sFilterRegister[bank_num],
 8001664:	f895 c008 	ldrb.w	ip, [r5, #8]
	if (ide) {
 8001668:	f01c 0f01 	tst.w	ip, #1
 800166c:	d053      	beq.n	8001716 <can_stm32_add_rx_filter+0x13e>
		filter_reg->FR1 = id;
 800166e:	eb02 0cc1 	add.w	ip, r2, r1, lsl #3
 8001672:	f8cc 3240 	str.w	r3, [ip, #576]	; 0x240
		filter_reg->FR2 = mask;
 8001676:	f8cc 0244 	str.w	r0, [ip, #580]	; 0x244
		can->FA1R |= 1U << bank_num;
 800167a:	2301      	movs	r3, #1
 800167c:	f8d2 021c 	ldr.w	r0, [r2, #540]	; 0x21c
 8001680:	408b      	lsls	r3, r1
 8001682:	4303      	orrs	r3, r0
 8001684:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
		can->FMR &= ~(CAN_FMR_FINIT);
 8001688:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	filter_id = can_stm32_set_filter(dev, filter);
	if (filter_id >= 0) {
		if ((filter->flags & CAN_FILTER_IDE) != 0) {
 8001694:	7a2b      	ldrb	r3, [r5, #8]
 8001696:	f013 0f01 	tst.w	r3, #1
 800169a:	ea4f 0384 	mov.w	r3, r4, lsl #2
 800169e:	4433      	add	r3, r6
			data->rx_cb_ext[filter_id] = cb;
 80016a0:	bf19      	ittee	ne
 80016a2:	f8c3 8074 	strne.w	r8, [r3, #116]	; 0x74
			data->cb_arg_ext[filter_id] = cb_arg;
 80016a6:	f8c3 70c8 	strne.w	r7, [r3, #200]	; 0xc8
		} else {
			data->rx_cb_std[filter_id - CONFIG_CAN_MAX_EXT_ID_FILTER] = cb;
 80016aa:	f8c3 8020 	streq.w	r8, [r3, #32]
			data->cb_arg_std[filter_id - CONFIG_CAN_MAX_EXT_ID_FILTER] = cb_arg;
 80016ae:	675f      	streq	r7, [r3, #116]	; 0x74
 80016b0:	e004      	b.n	80016bc <can_stm32_add_rx_filter+0xe4>
		for (int i = 0; i < CONFIG_CAN_MAX_EXT_ID_FILTER; i++) {
 80016b2:	3401      	adds	r4, #1
 80016b4:	2c07      	cmp	r4, #7
 80016b6:	d1b6      	bne.n	8001626 <can_stm32_add_rx_filter+0x4e>
 80016b8:	f06f 041b 	mvn.w	r4, #27
		}
	}

	k_mutex_unlock(&data->inst_mutex);
 80016bc:	4630      	mov	r0, r6
 80016be:	f002 fc95 	bl	8003fec <k_mutex_unlock.isra.0>
	k_mutex_unlock(&filter_mutex);
 80016c2:	481d      	ldr	r0, [pc, #116]	; (8001738 <can_stm32_add_rx_filter+0x160>)
 80016c4:	f002 fc92 	bl	8003fec <k_mutex_unlock.isra.0>

	return filter_id;
}
 80016c8:	4620      	mov	r0, r4
 80016ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016ce:	3338      	adds	r3, #56	; 0x38
			if (data->rx_cb_std[i] == NULL) {
 80016d0:	f853 0f04 	ldr.w	r0, [r3, #4]!
 80016d4:	b9c8      	cbnz	r0, 800170a <can_stm32_add_rx_filter+0x132>
		(((filter->flags & CAN_FILTER_RTR) != 0) ? (1U << CAN_STM32_FIRX_STD_RTR_POS) : 0U);
 80016d6:	ea4f 03cc 	mov.w	r3, ip, lsl #3
		(CAN_FILTER_DATA | CAN_FILTER_RTR) ? 1U : 0U;
 80016da:	f00c 0c06 	and.w	ip, ip, #6
 80016de:	f1bc 0c06 	subs.w	ip, ip, #6
 80016e2:	bf18      	it	ne
 80016e4:	f04f 0c01 	movne.w	ip, #1
	return  (filter->id  << CAN_STM32_FIRX_STD_ID_POS) |
 80016e8:	6828      	ldr	r0, [r5, #0]
		(((filter->flags & CAN_FILTER_RTR) != 0) ? (1U << CAN_STM32_FIRX_STD_RTR_POS) : 0U);
 80016ea:	f003 0310 	and.w	r3, r3, #16
	return  (filter->id  << CAN_STM32_FIRX_STD_ID_POS) |
 80016ee:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	return  (filter->mask << CAN_STM32_FIRX_STD_ID_POS) |
 80016f2:	6868      	ldr	r0, [r5, #4]
				bank_num = bank_offset + CONFIG_CAN_MAX_EXT_ID_FILTER + i / 2;
 80016f4:	3107      	adds	r1, #7
	return  (filter->mask << CAN_STM32_FIRX_STD_ID_POS) |
 80016f6:	0140      	lsls	r0, r0, #5
 80016f8:	ea40 100c 	orr.w	r0, r0, ip, lsl #4
		(rtr_mask << CAN_STM32_FIRX_STD_RTR_POS) |
 80016fc:	f040 0008 	orr.w	r0, r0, #8
				filter_id = CONFIG_CAN_MAX_EXT_ID_FILTER + i;
 8001700:	f10e 0407 	add.w	r4, lr, #7
				bank_num = bank_offset + CONFIG_CAN_MAX_EXT_ID_FILTER + i / 2;
 8001704:	eb01 016e 	add.w	r1, r1, lr, asr #1
	if (filter_id != -ENOSPC) {
 8001708:	e7a6      	b.n	8001658 <can_stm32_add_rx_filter+0x80>
		for (int i = 0; i < CONFIG_CAN_MAX_STD_ID_FILTER; i++) {
 800170a:	f10e 0e01 	add.w	lr, lr, #1
 800170e:	f1be 0f0e 	cmp.w	lr, #14
 8001712:	d1dd      	bne.n	80016d0 <can_stm32_add_rx_filter+0xf8>
 8001714:	e7d0      	b.n	80016b8 <can_stm32_add_rx_filter+0xe0>
			filter_reg->FR1 = id | (mask << 16);
 8001716:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
		if ((filter_id - CONFIG_CAN_MAX_EXT_ID_FILTER) % 2 == 0) {
 800171a:	f014 0f01 	tst.w	r4, #1
 800171e:	f101 0048 	add.w	r0, r1, #72	; 0x48
			filter_reg->FR2 = id | (mask << 16);
 8001722:	bf0a      	itet	eq
 8001724:	eb02 00c0 	addeq.w	r0, r2, r0, lsl #3
			filter_reg->FR1 = id | (mask << 16);
 8001728:	f842 3030 	strne.w	r3, [r2, r0, lsl #3]
			filter_reg->FR2 = id | (mask << 16);
 800172c:	6043      	streq	r3, [r0, #4]
 800172e:	e7a4      	b.n	800167a <can_stm32_add_rx_filter+0xa2>
		return -ENOTSUP;
 8001730:	f06f 0485 	mvn.w	r4, #133	; 0x85
 8001734:	e7c8      	b.n	80016c8 <can_stm32_add_rx_filter+0xf0>
 8001736:	bf00      	nop
 8001738:	20000808 	.word	0x20000808

0800173c <can_stm32_init>:
{
 800173c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct can_stm32_config *cfg = dev->config;
 8001740:	6845      	ldr	r5, [r0, #4]
{
 8001742:	4607      	mov	r7, r0
	struct can_stm32_data *data = dev->data;
 8001744:	f8d0 8010 	ldr.w	r8, [r0, #16]
	CAN_TypeDef *can = cfg->can;
 8001748:	682e      	ldr	r6, [r5, #0]
{
 800174a:	b085      	sub	sp, #20
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_init(mutex);
 800174c:	4854      	ldr	r0, [pc, #336]	; (80018a0 <can_stm32_init+0x164>)
 800174e:	f003 f915 	bl	800497c <z_impl_k_mutex_init>
 8001752:	4640      	mov	r0, r8
 8001754:	f003 f912 	bl	800497c <z_impl_k_mutex_init>
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
 8001758:	2201      	movs	r2, #1
 800175a:	2100      	movs	r1, #0
 800175c:	f108 0014 	add.w	r0, r8, #20
 8001760:	f003 f913 	bl	800498a <z_impl_k_sem_init>
	if (cfg->phy != NULL) {
 8001764:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8001766:	b950      	cbnz	r0, 800177e <can_stm32_init+0x42>
 8001768:	4c4e      	ldr	r4, [pc, #312]	; (80018a4 <can_stm32_init+0x168>)
 800176a:	4620      	mov	r0, r4
 800176c:	f003 f8bc 	bl	80048e8 <z_device_is_ready>
	if (!device_is_ready(clock)) {
 8001770:	b950      	cbnz	r0, 8001788 <can_stm32_init+0x4c>
			return -ENODEV;
 8001772:	f06f 0412 	mvn.w	r4, #18
}
 8001776:	4620      	mov	r0, r4
 8001778:	b005      	add	sp, #20
 800177a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800177e:	f003 f8b3 	bl	80048e8 <z_device_is_ready>
		if (!device_is_ready(cfg->phy)) {
 8001782:	2800      	cmp	r0, #0
 8001784:	d1f0      	bne.n	8001768 <can_stm32_init+0x2c>
 8001786:	e7f4      	b.n	8001772 <can_stm32_init+0x36>
	return api->on(dev, sys);
 8001788:	68a3      	ldr	r3, [r4, #8]
 800178a:	4620      	mov	r0, r4
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f105 0114 	add.w	r1, r5, #20
 8001792:	4798      	blx	r3
	if (ret != 0) {
 8001794:	4681      	mov	r9, r0
 8001796:	b110      	cbz	r0, 800179e <can_stm32_init+0x62>
		return -EIO;
 8001798:	f06f 0404 	mvn.w	r4, #4
 800179c:	e7eb      	b.n	8001776 <can_stm32_init+0x3a>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 800179e:	4601      	mov	r1, r0
 80017a0:	aa01      	add	r2, sp, #4
 80017a2:	6a28      	ldr	r0, [r5, #32]
 80017a4:	f002 fee4 	bl	8004570 <pinctrl_lookup_state>
	if (ret < 0) {
 80017a8:	1e04      	subs	r4, r0, #0
 80017aa:	dbe4      	blt.n	8001776 <can_stm32_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 80017ac:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 80017ae:	464a      	mov	r2, r9
 80017b0:	7919      	ldrb	r1, [r3, #4]
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	f000 fa96 	bl	8001ce4 <pinctrl_configure_pins>
	if (ret < 0) {
 80017b8:	1e04      	subs	r4, r0, #0
 80017ba:	dbdc      	blt.n	8001776 <can_stm32_init+0x3a>
	can->MCR &= ~CAN_MCR_SLEEP;
 80017bc:	6833      	ldr	r3, [r6, #0]
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 80017be:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80018a8 <can_stm32_init+0x16c>
	can->MCR &= ~CAN_MCR_SLEEP;
 80017c2:	f023 0302 	bic.w	r3, r3, #2
 80017c6:	6033      	str	r3, [r6, #0]
 80017c8:	f001 f93a 	bl	8002a40 <sys_clock_cycle_get_32>
 80017cc:	4604      	mov	r4, r0
	while ((can->MSR & CAN_MSR_SLAK) != 0) {
 80017ce:	6873      	ldr	r3, [r6, #4]
 80017d0:	079b      	lsls	r3, r3, #30
 80017d2:	d44f      	bmi.n	8001874 <can_stm32_init+0x138>
	ret = can_stm32_enter_init_mode(can);
 80017d4:	4630      	mov	r0, r6
 80017d6:	f7ff fe95 	bl	8001504 <can_stm32_enter_init_mode>
	if (ret) {
 80017da:	4604      	mov	r4, r0
 80017dc:	2800      	cmp	r0, #0
 80017de:	d1ca      	bne.n	8001776 <can_stm32_init+0x3a>
	bank_offset = (cfg->can == cfg->master_can) ? 0 : CAN_STM32_NUM_FILTER_BANKS;
 80017e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	bf18      	it	ne
 80017e8:	240e      	movne	r4, #14
	cfg->master_can->FMR |= CAN_FMR_FINIT;
 80017ea:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80017ee:	f042 0201 	orr.w	r2, r2, #1
 80017f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	cfg->master_can->FS1R |= ((1U << CONFIG_CAN_MAX_EXT_ID_FILTER) - 1) << bank_offset;
 80017f6:	237f      	movs	r3, #127	; 0x7f
 80017f8:	686a      	ldr	r2, [r5, #4]
 80017fa:	40a3      	lsls	r3, r4
 80017fc:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8001800:	430b      	orrs	r3, r1
 8001802:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
	cfg->master_can->FMR &= ~CAN_FMR_FINIT;
 8001806:	686a      	ldr	r2, [r5, #4]
 8001808:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 800180c:	f023 0301 	bic.w	r3, r3, #1
 8001810:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	can->MCR &= ~CAN_MCR_TTCM & ~CAN_MCR_ABOM & ~CAN_MCR_AWUM &
 8001814:	6833      	ldr	r3, [r6, #0]
 8001816:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 800181a:	6033      	str	r3, [r6, #0]
	can->MCR |= CAN_MCR_ABOM;
 800181c:	6833      	ldr	r3, [r6, #0]
 800181e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001822:	6033      	str	r3, [r6, #0]
	timing.sjw = cfg->sjw;
 8001824:	7bab      	ldrb	r3, [r5, #14]
 8001826:	f8ad 3004 	strh.w	r3, [sp, #4]
	if (cfg->sample_point && USE_SP_ALGO) {
 800182a:	89ab      	ldrh	r3, [r5, #12]
 800182c:	b353      	cbz	r3, 8001884 <can_stm32_init+0x148>
		ret = can_calc_timing(dev, &timing, cfg->bus_speed,
 800182e:	68aa      	ldr	r2, [r5, #8]
		union { uintptr_t x; uint16_t val; } parm3 = { .val = sample_pnt };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_CAN_CALC_TIMING);
	}
#endif
	compiler_barrier();
	return z_impl_can_calc_timing(dev, res, bitrate, sample_pnt);
 8001830:	4638      	mov	r0, r7
 8001832:	a901      	add	r1, sp, #4
 8001834:	f7ff fda0 	bl	8001378 <z_impl_can_calc_timing>
		if (ret == -EINVAL) {
 8001838:	3016      	adds	r0, #22
 800183a:	d0ad      	beq.n	8001798 <can_stm32_init+0x5c>
	ret = can_stm32_set_timing(dev, &timing);
 800183c:	4638      	mov	r0, r7
 800183e:	a901      	add	r1, sp, #4
 8001840:	f7ff fe8e 	bl	8001560 <can_stm32_set_timing>
	if (ret) {
 8001844:	4604      	mov	r4, r0
 8001846:	2800      	cmp	r0, #0
 8001848:	d195      	bne.n	8001776 <can_stm32_init+0x3a>
	ret = can_stm32_set_mode(dev, CAN_MODE_NORMAL);
 800184a:	4601      	mov	r1, r0
 800184c:	4638      	mov	r0, r7
 800184e:	f002 fcae 	bl	80041ae <can_stm32_set_mode>
	if (ret) {
 8001852:	4604      	mov	r4, r0
 8001854:	2800      	cmp	r0, #0
 8001856:	d18e      	bne.n	8001776 <can_stm32_init+0x3a>
	(void)can_stm32_get_state(dev, &data->state, NULL);
 8001858:	4602      	mov	r2, r0
 800185a:	f108 01ec 	add.w	r1, r8, #236	; 0xec
 800185e:	4638      	mov	r0, r7
 8001860:	f002 fa54 	bl	8003d0c <can_stm32_get_state>
	cfg->config_irq(can);
 8001864:	69eb      	ldr	r3, [r5, #28]
 8001866:	4630      	mov	r0, r6
 8001868:	4798      	blx	r3
	can->IER |= CAN_IER_TMEIE;
 800186a:	6973      	ldr	r3, [r6, #20]
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6173      	str	r3, [r6, #20]
	return 0;
 8001872:	e780      	b.n	8001776 <can_stm32_init+0x3a>
 8001874:	f001 f8e4 	bl	8002a40 <sys_clock_cycle_get_32>
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 8001878:	1b00      	subs	r0, r0, r4
 800187a:	4548      	cmp	r0, r9
 800187c:	d9a7      	bls.n	80017ce <can_stm32_init+0x92>
			return -EAGAIN;
 800187e:	f06f 040a 	mvn.w	r4, #10
 8001882:	e778      	b.n	8001776 <can_stm32_init+0x3a>
		timing.prop_seg = 0;
 8001884:	f8ad 3006 	strh.w	r3, [sp, #6]
		timing.phase_seg1 = cfg->prop_ts1;
 8001888:	7beb      	ldrb	r3, [r5, #15]
		ret = can_calc_prescaler(dev, &timing, cfg->bus_speed);
 800188a:	4638      	mov	r0, r7
		timing.phase_seg1 = cfg->prop_ts1;
 800188c:	f8ad 3008 	strh.w	r3, [sp, #8]
		timing.phase_seg2 = cfg->ts2;
 8001890:	7c2b      	ldrb	r3, [r5, #16]
		ret = can_calc_prescaler(dev, &timing, cfg->bus_speed);
 8001892:	a901      	add	r1, sp, #4
		timing.phase_seg2 = cfg->ts2;
 8001894:	f8ad 300a 	strh.w	r3, [sp, #10]
		ret = can_calc_prescaler(dev, &timing, cfg->bus_speed);
 8001898:	68aa      	ldr	r2, [r5, #8]
 800189a:	f002 fa0d 	bl	8003cb8 <can_calc_prescaler>
		if (ret) {
 800189e:	e7cd      	b.n	800183c <can_stm32_init+0x100>
 80018a0:	20000808 	.word	0x20000808
 80018a4:	08004bc4 	.word	0x08004bc4
 80018a8:	000afc80 	.word	0x000afc80

080018ac <can_stm32_remove_rx_filter>:

static void can_stm32_remove_rx_filter(const struct device *dev, int filter_id)
{
 80018ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ae:	460e      	mov	r6, r1
	const struct can_stm32_config *cfg = dev->config;
 80018b0:	6847      	ldr	r7, [r0, #4]
	struct can_stm32_data *data = dev->data;
 80018b2:	6905      	ldr	r5, [r0, #16]
	int bank_num;
	bool bank_unused;

	__ASSERT_NO_MSG(filter_id >= 0 && filter_id < CAN_STM32_MAX_FILTER_ID);

	k_mutex_lock(&filter_mutex, K_FOREVER);
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018bc:	483b      	ldr	r0, [pc, #236]	; (80019ac <can_stm32_remove_rx_filter+0x100>)
	CAN_TypeDef *can = cfg->master_can;
 80018be:	687c      	ldr	r4, [r7, #4]
	k_mutex_lock(&filter_mutex, K_FOREVER);
 80018c0:	f002 fb92 	bl	8003fe8 <k_mutex_lock.constprop.0.isra.0>
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018cc:	4628      	mov	r0, r5
 80018ce:	f002 fb8b 	bl	8003fe8 <k_mutex_lock.constprop.0.isra.0>

	if (cfg->can != cfg->master_can) {
 80018d2:	e9d7 3200 	ldrd	r3, r2, [r7]
	int bank_offset = 0;
 80018d6:	4293      	cmp	r3, r2
 80018d8:	bf14      	ite	ne
 80018da:	230e      	movne	r3, #14
 80018dc:	2300      	moveq	r3, #0
		bank_offset = CAN_STM32_NUM_FILTER_BANKS;
	}

	if (filter_id < CONFIG_CAN_MAX_EXT_ID_FILTER) {
 80018de:	2e06      	cmp	r6, #6
 80018e0:	ea4f 0286 	mov.w	r2, r6, lsl #2
 80018e4:	dc1d      	bgt.n	8001922 <can_stm32_remove_rx_filter+0x76>
		ide = true;
		bank_num = bank_offset + filter_id;

		data->rx_cb_ext[filter_id] = NULL;
 80018e6:	2100      	movs	r1, #0
 80018e8:	442a      	add	r2, r5
 80018ea:	6751      	str	r1, [r2, #116]	; 0x74
		data->cb_arg_ext[filter_id] = NULL;
 80018ec:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8
		}
	}

	LOG_DBG("Removing filter_id %d, ide %d", filter_id, ide);

	can->FMR |= CAN_FMR_FINIT;
 80018f0:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
		bank_num = bank_offset + filter_id;
 80018f4:	4433      	add	r3, r6
	can->FMR |= CAN_FMR_FINIT;
 80018f6:	f042 0201 	orr.w	r2, r2, #1
 80018fa:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
		filter_reg->FR1 = id;
 80018fe:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8001902:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
		filter_reg->FR2 = mask;
 8001906:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800190a:	f8c2 1244 	str.w	r1, [r2, #580]	; 0x244

	can_stm32_set_filter_bank(filter_id, &can->sFilterRegister[bank_num],
				  ide, 0, 0xFFFFFFFF);

	if (bank_unused) {
		can->FA1R &= ~(1U << bank_num);
 800190e:	2101      	movs	r1, #1
 8001910:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	ea22 0303 	bic.w	r3, r2, r3
 800191c:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
		LOG_DBG("Filter bank %d is unused -> deactivate", bank_num);
 8001920:	e01c      	b.n	800195c <can_stm32_remove_rx_filter+0xb0>
		data->rx_cb_std[filter_index] = NULL;
 8001922:	2100      	movs	r1, #0
		int filter_index = filter_id - CONFIG_CAN_MAX_EXT_ID_FILTER;
 8001924:	3e07      	subs	r6, #7
		bank_num = bank_offset + CONFIG_CAN_MAX_EXT_ID_FILTER +
 8001926:	3307      	adds	r3, #7
 8001928:	442a      	add	r2, r5
 800192a:	eb03 0366 	add.w	r3, r3, r6, asr #1
		if (filter_index % 2 == 1) {
 800192e:	f016 0f01 	tst.w	r6, #1
		data->rx_cb_std[filter_index] = NULL;
 8001932:	6211      	str	r1, [r2, #32]
		data->cb_arg_std[filter_index] = NULL;
 8001934:	6751      	str	r1, [r2, #116]	; 0x74
		if (filter_index % 2 == 1) {
 8001936:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800193a:	d01d      	beq.n	8001978 <can_stm32_remove_rx_filter+0xcc>
			bank_unused = data->rx_cb_std[filter_index - 1] == NULL;
 800193c:	69d2      	ldr	r2, [r2, #28]
	can->FMR |= CAN_FMR_FINIT;
 800193e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
			bank_unused = data->rx_cb_std[filter_index - 1] == NULL;
 8001942:	fab2 f282 	clz	r2, r2
	can->FMR |= CAN_FMR_FINIT;
 8001946:	f040 0001 	orr.w	r0, r0, #1
 800194a:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
			filter_reg->FR2 = id | (mask << 16);
 800194e:	4818      	ldr	r0, [pc, #96]	; (80019b0 <can_stm32_remove_rx_filter+0x104>)
 8001950:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
			bank_unused = data->rx_cb_std[filter_index - 1] == NULL;
 8001954:	0952      	lsrs	r2, r2, #5
			filter_reg->FR2 = id | (mask << 16);
 8001956:	6048      	str	r0, [r1, #4]
	if (bank_unused) {
 8001958:	2a00      	cmp	r2, #0
 800195a:	d1d8      	bne.n	800190e <can_stm32_remove_rx_filter+0x62>
	}

	can->FMR &= ~(CAN_FMR_FINIT);
 800195c:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200

	k_mutex_unlock(&data->inst_mutex);
 8001960:	4628      	mov	r0, r5
	can->FMR &= ~(CAN_FMR_FINIT);
 8001962:	f023 0301 	bic.w	r3, r3, #1
 8001966:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
	k_mutex_unlock(&data->inst_mutex);
 800196a:	f002 fb3f 	bl	8003fec <k_mutex_unlock.isra.0>
	k_mutex_unlock(&filter_mutex);
}
 800196e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&filter_mutex);
 8001972:	480e      	ldr	r0, [pc, #56]	; (80019ac <can_stm32_remove_rx_filter+0x100>)
 8001974:	f002 bb3a 	b.w	8003fec <k_mutex_unlock.isra.0>
		} else if (filter_index + 1 < CONFIG_CAN_MAX_STD_ID_FILTER) {
 8001978:	2e0c      	cmp	r6, #12
 800197a:	dc0d      	bgt.n	8001998 <can_stm32_remove_rx_filter+0xec>
			bank_unused = data->rx_cb_std[filter_index + 1] == NULL;
 800197c:	6a52      	ldr	r2, [r2, #36]	; 0x24
	can->FMR |= CAN_FMR_FINIT;
 800197e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
			bank_unused = data->rx_cb_std[filter_index + 1] == NULL;
 8001982:	fab2 f282 	clz	r2, r2
	can->FMR |= CAN_FMR_FINIT;
 8001986:	f040 0001 	orr.w	r0, r0, #1
 800198a:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
			filter_reg->FR1 = id | (mask << 16);
 800198e:	4808      	ldr	r0, [pc, #32]	; (80019b0 <can_stm32_remove_rx_filter+0x104>)
			bank_unused = data->rx_cb_std[filter_index + 1] == NULL;
 8001990:	0952      	lsrs	r2, r2, #5
			filter_reg->FR1 = id | (mask << 16);
 8001992:	f844 0031 	str.w	r0, [r4, r1, lsl #3]
 8001996:	e7df      	b.n	8001958 <can_stm32_remove_rx_filter+0xac>
	can->FMR |= CAN_FMR_FINIT;
 8001998:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 800199c:	f042 0201 	orr.w	r2, r2, #1
 80019a0:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
			filter_reg->FR1 = id | (mask << 16);
 80019a4:	4a02      	ldr	r2, [pc, #8]	; (80019b0 <can_stm32_remove_rx_filter+0x104>)
 80019a6:	f844 2031 	str.w	r2, [r4, r1, lsl #3]
	if (bank_unused) {
 80019aa:	e7b0      	b.n	800190e <can_stm32_remove_rx_filter+0x62>
 80019ac:	20000808 	.word	0x20000808
 80019b0:	ffff0000 	.word	0xffff0000

080019b4 <can_stm32_start>:
{
 80019b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct can_stm32_data *data = dev->data;
 80019b8:	6905      	ldr	r5, [r0, #16]
	const struct can_stm32_config *cfg = dev->config;
 80019ba:	6846      	ldr	r6, [r0, #4]
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 80019bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019c4:	4628      	mov	r0, r5
	CAN_TypeDef *can = cfg->can;
 80019c6:	6837      	ldr	r7, [r6, #0]
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 80019c8:	f002 fb0e 	bl	8003fe8 <k_mutex_lock.constprop.0.isra.0>
	if (data->started) {
 80019cc:	f895 30ed 	ldrb.w	r3, [r5, #237]	; 0xed
 80019d0:	bb63      	cbnz	r3, 8001a2c <can_stm32_start+0x78>
	if (cfg->phy != NULL) {
 80019d2:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80019d4:	b980      	cbnz	r0, 80019f8 <can_stm32_start+0x44>
	can->MCR &= ~CAN_MCR_INRQ;
 80019d6:	683b      	ldr	r3, [r7, #0]
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 80019d8:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8001a34 <can_stm32_start+0x80>
	can->MCR &= ~CAN_MCR_INRQ;
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	603b      	str	r3, [r7, #0]
 80019e2:	f001 f82d 	bl	8002a40 <sys_clock_cycle_get_32>
 80019e6:	4680      	mov	r8, r0
	while ((can->MSR & CAN_MSR_INAK) != 0U) {
 80019e8:	687c      	ldr	r4, [r7, #4]
 80019ea:	f014 0401 	ands.w	r4, r4, #1
 80019ee:	d10f      	bne.n	8001a10 <can_stm32_start+0x5c>
	data->started = true;
 80019f0:	2301      	movs	r3, #1
 80019f2:	f885 30ed 	strb.w	r3, [r5, #237]	; 0xed
 80019f6:	e005      	b.n	8001a04 <can_stm32_start+0x50>
static inline int can_transceiver_enable(const struct device *dev)
{
	const struct can_transceiver_driver_api *api =
		(const struct can_transceiver_driver_api *)dev->api;

	return api->enable(dev);
 80019f8:	6883      	ldr	r3, [r0, #8]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4798      	blx	r3
		if (ret != 0) {
 80019fe:	4604      	mov	r4, r0
 8001a00:	2800      	cmp	r0, #0
 8001a02:	d0e8      	beq.n	80019d6 <can_stm32_start+0x22>
	k_mutex_unlock(&data->inst_mutex);
 8001a04:	4628      	mov	r0, r5
 8001a06:	f002 faf1 	bl	8003fec <k_mutex_unlock.isra.0>
}
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a10:	f001 f816 	bl	8002a40 <sys_clock_cycle_get_32>
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 8001a14:	eba0 0008 	sub.w	r0, r0, r8
 8001a18:	4548      	cmp	r0, r9
 8001a1a:	d9e5      	bls.n	80019e8 <can_stm32_start+0x34>
		if (cfg->phy != NULL) {
 8001a1c:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8001a1e:	b110      	cbz	r0, 8001a26 <can_stm32_start+0x72>
static inline int can_transceiver_disable(const struct device *dev)
{
	const struct can_transceiver_driver_api *api =
		(const struct can_transceiver_driver_api *)dev->api;

	return api->disable(dev);
 8001a20:	6883      	ldr	r3, [r0, #8]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	4798      	blx	r3
		ret = -EIO;
 8001a26:	f06f 0404 	mvn.w	r4, #4
 8001a2a:	e7eb      	b.n	8001a04 <can_stm32_start+0x50>
		ret = -EALREADY;
 8001a2c:	f06f 0477 	mvn.w	r4, #119	; 0x77
 8001a30:	e7e8      	b.n	8001a04 <can_stm32_start+0x50>
 8001a32:	bf00      	nop
 8001a34:	000afc80 	.word	0x000afc80

08001a38 <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 8001a38:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <stm32_clock_control_get_subsys_rate+0x3c>)
 8001a3a:	6818      	ldr	r0, [r3, #0]
	}
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8001a3c:	680b      	ldr	r3, [r1, #0]
 8001a3e:	2b05      	cmp	r3, #5
 8001a40:	d80b      	bhi.n	8001a5a <stm32_clock_control_get_subsys_rate+0x22>
 8001a42:	b183      	cbz	r3, 8001a66 <stm32_clock_control_get_subsys_rate+0x2e>
 8001a44:	3b02      	subs	r3, #2
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d803      	bhi.n	8001a52 <stm32_clock_control_get_subsys_rate+0x1a>
 8001a4a:	e8df f003 	tbb	[pc, r3]
 8001a4e:	0211      	.short	0x0211
 8001a50:	0302      	.short	0x0302
 8001a52:	2000      	movs	r0, #0
		*rate = get_msi_frequency();
		break;
#endif
#if defined(STM32_SRC_HSE)
	case STM32_SRC_HSE:
		*rate = STM32_HSE_FREQ;
 8001a54:	6010      	str	r0, [r2, #0]
#endif /* STM32_HSI48_ENABLED */
	default:
		return -ENOTSUP;
	}

	return 0;
 8001a56:	2000      	movs	r0, #0
 8001a58:	4770      	bx	lr
	switch (pclken->bus) {
 8001a5a:	f023 0104 	bic.w	r1, r3, #4
 8001a5e:	2918      	cmp	r1, #24
 8001a60:	d004      	beq.n	8001a6c <stm32_clock_control_get_subsys_rate+0x34>
 8001a62:	2b14      	cmp	r3, #20
 8001a64:	d0f6      	beq.n	8001a54 <stm32_clock_control_get_subsys_rate+0x1c>
 8001a66:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8001a6a:	4770      	bx	lr
	return clock / prescaler;
 8001a6c:	0840      	lsrs	r0, r0, #1
		break;
 8001a6e:	e7f1      	b.n	8001a54 <stm32_clock_control_get_subsys_rate+0x1c>
		break;
 8001a70:	4801      	ldr	r0, [pc, #4]	; (8001a78 <stm32_clock_control_get_subsys_rate+0x40>)
 8001a72:	e7ef      	b.n	8001a54 <stm32_clock_control_get_subsys_rate+0x1c>
 8001a74:	200000ac 	.word	0x200000ac
 8001a78:	007a1200 	.word	0x007a1200

08001a7c <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8001a7c:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(dev);

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8001a7e:	f002 fc31 	bl	80042e4 <config_enable_default_clocks>

#if defined(FLASH_ACR_LATENCY)
	uint32_t old_flash_freq;
	uint32_t new_flash_freq;

	old_flash_freq = RCC_CALC_FLASH_FREQ(HAL_RCC_GetSysClockFreq(),
 8001a82:	f000 fff3 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001a86:	4c33      	ldr	r4, [pc, #204]	; (8001b54 <stm32_clock_control_init+0xd8>)
 8001a88:	4a33      	ldr	r2, [pc, #204]	; (8001b58 <stm32_clock_control_init+0xdc>)
 8001a8a:	6863      	ldr	r3, [r4, #4]

	new_flash_freq = RCC_CALC_FLASH_FREQ(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC,
				      STM32_FLASH_PRESCALER);

	/* If freq increases, set flash latency before any clock setting */
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8001a8c:	4e33      	ldr	r6, [pc, #204]	; (8001b5c <stm32_clock_control_init+0xe0>)
	old_flash_freq = RCC_CALC_FLASH_FREQ(HAL_RCC_GetSysClockFreq(),
 8001a8e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a92:	5cd3      	ldrb	r3, [r2, r3]
 8001a94:	fa20 f503 	lsr.w	r5, r0, r3
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8001a98:	42b5      	cmp	r5, r6
 8001a9a:	d802      	bhi.n	8001aa2 <stm32_clock_control_init+0x26>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 8001a9c:	4830      	ldr	r0, [pc, #192]	; (8001b60 <stm32_clock_control_init+0xe4>)
 8001a9e:	f001 f917 	bl	8002cd0 <LL_SetFlashLatency>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa8:	6023      	str	r3, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001aaa:	6823      	ldr	r3, [r4, #0]
 8001aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab0:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001ab2:	6823      	ldr	r3, [r4, #0]
		while (LL_RCC_HSE_IsReady() != 1) {
 8001ab4:	0398      	lsls	r0, r3, #14
 8001ab6:	d5fc      	bpl.n	8001ab2 <stm32_clock_control_init+0x36>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ab8:	6863      	ldr	r3, [r4, #4]
 8001aba:	f003 030c 	and.w	r3, r3, #12
	if (LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d115      	bne.n	8001aee <stm32_clock_control_init+0x72>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001ac2:	6823      	ldr	r3, [r4, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 8001ac4:	0799      	lsls	r1, r3, #30
 8001ac6:	d406      	bmi.n	8001ad6 <stm32_clock_control_init+0x5a>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001ac8:	6823      	ldr	r3, [r4, #0]
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001ad0:	6823      	ldr	r3, [r4, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 8001ad2:	079a      	lsls	r2, r3, #30
 8001ad4:	d5fc      	bpl.n	8001ad0 <stm32_clock_control_init+0x54>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001ad6:	6863      	ldr	r3, [r4, #4]
 8001ad8:	f023 0303 	bic.w	r3, r3, #3
 8001adc:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ade:	6863      	ldr	r3, [r4, #4]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8001ae0:	f013 0f0c 	tst.w	r3, #12
 8001ae4:	d1fb      	bne.n	8001ade <stm32_clock_control_init+0x62>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001ae6:	6863      	ldr	r3, [r4, #4]
 8001ae8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aec:	6063      	str	r3, [r4, #4]
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001aee:	6823      	ldr	r3, [r4, #0]
 8001af0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001af4:	6023      	str	r3, [r4, #0]
	config_pll_sysclock();
 8001af6:	f000 f837 	bl	8001b68 <config_pll_sysclock>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001afa:	6823      	ldr	r3, [r4, #0]
 8001afc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b00:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001b02:	6823      	ldr	r3, [r4, #0]
	while (LL_RCC_PLL_IsReady() != 1U) {
 8001b04:	019b      	lsls	r3, r3, #6
 8001b06:	d5fc      	bpl.n	8001b02 <stm32_clock_control_init+0x86>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001b08:	6863      	ldr	r3, [r4, #4]
 8001b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b0e:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b10:	6863      	ldr	r3, [r4, #4]
 8001b12:	f023 0303 	bic.w	r3, r3, #3
 8001b16:	f043 0302 	orr.w	r3, r3, #2
 8001b1a:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b1c:	6863      	ldr	r3, [r4, #4]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
	}

#if STM32_SYSCLK_SRC_PLL
	/* Set PLL as System Clock Source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d1fa      	bne.n	8001b1c <stm32_clock_control_init+0xa0>
		LL_RCC_SetAHBPrescaler(ahb_prescaler(STM32_CORE_PRESCALER));
	}

#if defined(FLASH_ACR_LATENCY)
	/* If freq not increased, set flash latency after all clock setting */
	if (old_flash_freq >= CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8001b26:	42b5      	cmp	r5, r6
 8001b28:	d902      	bls.n	8001b30 <stm32_clock_control_init+0xb4>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 8001b2a:	480d      	ldr	r0, [pc, #52]	; (8001b60 <stm32_clock_control_init+0xe4>)
 8001b2c:	f001 f8d0 	bl	8002cd0 <LL_SetFlashLatency>
	}
#endif /* FLASH_ACR_LATENCY */

	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <stm32_clock_control_init+0xe8>)
 8001b32:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <stm32_clock_control_init+0xe4>)

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8001b34:	2000      	movs	r0, #0
	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 8001b36:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001b38:	6863      	ldr	r3, [r4, #4]
 8001b3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b42:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001b44:	6863      	ldr	r3, [r4, #4]
 8001b46:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001b4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b4e:	6063      	str	r3, [r4, #4]
}
 8001b50:	bd70      	pop	{r4, r5, r6, pc}
 8001b52:	bf00      	nop
 8001b54:	40021000 	.word	0x40021000
 8001b58:	080053a6 	.word	0x080053a6
 8001b5c:	044aa1ff 	.word	0x044aa1ff
 8001b60:	044aa200 	.word	0x044aa200
 8001b64:	200000ac 	.word	0x200000ac

08001b68 <config_pll_sysclock>:
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8001b68:	4a05      	ldr	r2, [pc, #20]	; (8001b80 <config_pll_sysclock+0x18>)
 8001b6a:	6853      	ldr	r3, [r2, #4]
 8001b6c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001b70:	f443 13c8 	orr.w	r3, r3, #1638400	; 0x190000
 8001b74:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_USBPRE, USBxSource);
 8001b76:	6853      	ldr	r3, [r2, #4]
 8001b78:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b7c:	6053      	str	r3, [r2, #4]
#ifdef STM32_USB_PRE_ENABLED
	/* Prescaler is enabled: PLL clock is not divided */
	LL_RCC_SetUSBClockSource(IS_ENABLED(STM32_PLL_USBPRE) ?
				 STM32_USB_PRE_ENABLED : 0);
#endif
}
 8001b7e:	4770      	bx	lr
 8001b80:	40021000 	.word	0x40021000

08001b84 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
 8001b84:	b508      	push	{r3, lr}
 8001b86:	4807      	ldr	r0, [pc, #28]	; (8001ba4 <uart_console_init+0x20>)
 8001b88:	f002 feae 	bl	80048e8 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
 8001b8c:	b138      	cbz	r0, 8001b9e <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
 8001b8e:	4806      	ldr	r0, [pc, #24]	; (8001ba8 <uart_console_init+0x24>)
 8001b90:	f7ff fb4a 	bl	8001228 <__stdout_hook_install>
	__printk_hook_install(console_out);
 8001b94:	4804      	ldr	r0, [pc, #16]	; (8001ba8 <uart_console_init+0x24>)
 8001b96:	f7fe fd27 	bl	80005e8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 8001b9a:	2000      	movs	r0, #0
}
 8001b9c:	bd08      	pop	{r3, pc}
		return -ENODEV;
 8001b9e:	f06f 0012 	mvn.w	r0, #18
 8001ba2:	e7fb      	b.n	8001b9c <uart_console_init+0x18>
 8001ba4:	08004c64 	.word	0x08004c64
 8001ba8:	08001bad 	.word	0x08001bad

08001bac <console_out>:
	if ('\n' == c) {
 8001bac:	280a      	cmp	r0, #10
{
 8001bae:	b538      	push	{r3, r4, r5, lr}
 8001bb0:	4604      	mov	r4, r0
 8001bb2:	4d07      	ldr	r5, [pc, #28]	; (8001bd0 <console_out+0x24>)
	if ('\n' == c) {
 8001bb4:	d104      	bne.n	8001bc0 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8001bb6:	68ab      	ldr	r3, [r5, #8]
 8001bb8:	210d      	movs	r1, #13
 8001bba:	4628      	mov	r0, r5
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	4798      	blx	r3
 8001bc0:	68ab      	ldr	r3, [r5, #8]
 8001bc2:	4803      	ldr	r0, [pc, #12]	; (8001bd0 <console_out+0x24>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	b2e1      	uxtb	r1, r4
 8001bc8:	4798      	blx	r3
}
 8001bca:	4620      	mov	r0, r4
 8001bcc:	bd38      	pop	{r3, r4, r5, pc}
 8001bce:	bf00      	nop
 8001bd0:	08004c64 	.word	0x08004c64

08001bd4 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 8001bd4:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
 8001bd6:	6903      	ldr	r3, [r0, #16]
{
 8001bd8:	4604      	mov	r4, r0
	int ret;

	data->dev = dev;
 8001bda:	6058      	str	r0, [r3, #4]
 8001bdc:	4d08      	ldr	r5, [pc, #32]	; (8001c00 <gpio_stm32_init+0x2c>)
 8001bde:	4628      	mov	r0, r5
 8001be0:	f002 fe82 	bl	80048e8 <z_device_is_ready>

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 8001be4:	b140      	cbz	r0, 8001bf8 <gpio_stm32_init+0x24>
					(clock_control_subsys_t)&cfg->pclken);
 8001be6:	6861      	ldr	r1, [r4, #4]
 8001be8:	68ab      	ldr	r3, [r5, #8]
 8001bea:	4628      	mov	r0, r5
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	310c      	adds	r1, #12
 8001bf0:	4798      	blx	r3
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
	if (ret < 0) {
 8001bf2:	ea00 70e0 	and.w	r0, r0, r0, asr #31

	pm_device_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 8001bf6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
 8001bf8:	f06f 0012 	mvn.w	r0, #18
 8001bfc:	e7fb      	b.n	8001bf6 <gpio_stm32_init+0x22>
 8001bfe:	bf00      	nop
 8001c00:	08004bc4 	.word	0x08004bc4

08001c04 <gpio_stm32_pin_interrupt_configure>:
{
 8001c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c06:	4617      	mov	r7, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 8001c08:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
{
 8001c0c:	460c      	mov	r4, r1
 8001c0e:	461d      	mov	r5, r3
	const struct gpio_stm32_config *cfg = dev->config;
 8001c10:	6846      	ldr	r6, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8001c12:	6902      	ldr	r2, [r0, #16]
	if (mode == GPIO_INT_MODE_DISABLED) {
 8001c14:	d123      	bne.n	8001c5e <gpio_stm32_pin_interrupt_configure+0x5a>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8001c16:	230f      	movs	r3, #15
 8001c18:	f001 0203 	and.w	r2, r1, #3
 8001c1c:	3204      	adds	r2, #4
 8001c1e:	0092      	lsls	r2, r2, #2
 8001c20:	4093      	lsls	r3, r2
 8001c22:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  *         @arg @ref LL_GPIO_AF_EXTI_PORTF
  *         @arg @ref LL_GPIO_AF_EXTI_PORTG
  */
__STATIC_INLINE uint32_t LL_GPIO_AF_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(AFIO->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	492c      	ldr	r1, [pc, #176]	; (8001cdc <gpio_stm32_pin_interrupt_configure+0xd8>)
 8001c2a:	3202      	adds	r2, #2
 8001c2c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001c30:	0c19      	lsrs	r1, r3, #16
 8001c32:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 8001c3a:	fab2 f282 	clz	r2, r2
 8001c3e:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8001c40:	68b2      	ldr	r2, [r6, #8]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d109      	bne.n	8001c5a <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 8001c46:	4620      	mov	r0, r4
 8001c48:	f7ff fb38 	bl	80012bc <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	f7ff fb89 	bl	8001364 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8001c52:	2100      	movs	r1, #0
 8001c54:	4620      	mov	r0, r4
 8001c56:	f7ff fb3d 	bl	80012d4 <stm32_exti_trigger>
	int err = 0;
 8001c5a:	2000      	movs	r0, #0
}
 8001c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
 8001c5e:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
 8001c62:	d035      	beq.n	8001cd0 <gpio_stm32_pin_interrupt_configure+0xcc>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8001c64:	4620      	mov	r0, r4
 8001c66:	491e      	ldr	r1, [pc, #120]	; (8001ce0 <gpio_stm32_pin_interrupt_configure+0xdc>)
 8001c68:	f7ff fb64 	bl	8001334 <stm32_exti_set_callback>
 8001c6c:	bb98      	cbnz	r0, 8001cd6 <gpio_stm32_pin_interrupt_configure+0xd2>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8001c6e:	220f      	movs	r2, #15
 8001c70:	f004 0303 	and.w	r3, r4, #3
 8001c74:	3304      	adds	r3, #4
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	409a      	lsls	r2, r3
 8001c7a:	ea42 0294 	orr.w	r2, r2, r4, lsr #2
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001c7e:	b2d3      	uxtb	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c86:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	LL_GPIO_AF_SetEXTISource(port, line);
 8001c8a:	68b1      	ldr	r1, [r6, #8]
 8001c8c:	689e      	ldr	r6, [r3, #8]
 8001c8e:	0c10      	lsrs	r0, r2, #16
 8001c90:	ea26 4612 	bic.w	r6, r6, r2, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	fa90 f2a0 	rbit	r2, r0
  return __builtin_clz(value);
 8001c98:	fab2 f282 	clz	r2, r2
 8001c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca0:	4332      	orrs	r2, r6
	switch (trig) {
 8001ca2:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	d00e      	beq.n	8001cc8 <gpio_stm32_pin_interrupt_configure+0xc4>
 8001caa:	f1b5 6fc0 	cmp.w	r5, #100663296	; 0x6000000
 8001cae:	d00d      	beq.n	8001ccc <gpio_stm32_pin_interrupt_configure+0xc8>
 8001cb0:	f105 437e 	add.w	r3, r5, #4261412864	; 0xfe000000
 8001cb4:	4259      	negs	r1, r3
 8001cb6:	4159      	adcs	r1, r3
 8001cb8:	0049      	lsls	r1, r1, #1
	stm32_exti_trigger(pin, edge);
 8001cba:	4620      	mov	r0, r4
 8001cbc:	f7ff fb0a 	bl	80012d4 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	f7ff fae9 	bl	8001298 <stm32_exti_enable>
 8001cc6:	e7c8      	b.n	8001c5a <gpio_stm32_pin_interrupt_configure+0x56>
		edge = STM32_EXTI_TRIG_RISING;
 8001cc8:	2101      	movs	r1, #1
 8001cca:	e7f6      	b.n	8001cba <gpio_stm32_pin_interrupt_configure+0xb6>
		edge = STM32_EXTI_TRIG_BOTH;
 8001ccc:	2103      	movs	r1, #3
 8001cce:	e7f4      	b.n	8001cba <gpio_stm32_pin_interrupt_configure+0xb6>
		err = -ENOTSUP;
 8001cd0:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8001cd4:	e7c2      	b.n	8001c5c <gpio_stm32_pin_interrupt_configure+0x58>
		err = -EBUSY;
 8001cd6:	f06f 000f 	mvn.w	r0, #15
	return err;
 8001cda:	e7bf      	b.n	8001c5c <gpio_stm32_pin_interrupt_configure+0x58>
 8001cdc:	40010000 	.word	0x40010000
 8001ce0:	080043fd 	.word	0x080043fd

08001ce4 <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 8001ce4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	remap = (uint16_t)STM32_DT_PINMUX_REMAP(pins[0].pinmux);
 8001ce8:	6803      	ldr	r3, [r0, #0]
{
 8001cea:	4604      	mov	r4, r0
	remap = (uint16_t)STM32_DT_PINMUX_REMAP(pins[0].pinmux);
 8001cec:	f3c3 258f 	ubfx	r5, r3, #10, #16
 8001cf0:	f3c3 2389 	ubfx	r3, r3, #10, #10
	if (remap == NO_REMAP) {
 8001cf4:	b1fb      	cbz	r3, 8001d36 <pinctrl_configure_pins+0x52>
	for (size_t i = 1U; i < pin_cnt; i++) {
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	428a      	cmp	r2, r1
 8001cfa:	d323      	bcc.n	8001d44 <pinctrl_configure_pins+0x60>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001cfc:	4a33      	ldr	r2, [pc, #204]	; (8001dcc <pinctrl_configure_pins+0xe8>)
	if (STM32_REMAP_REG_GET(remap) == 0U) {
 8001cfe:	f015 0f01 	tst.w	r5, #1
 8001d02:	6990      	ldr	r0, [r2, #24]
 8001d04:	f040 0001 	orr.w	r0, r0, #1
 8001d08:	6190      	str	r0, [r2, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d0a:	6992      	ldr	r2, [r2, #24]
		reg_val |= STM32_REMAP_VAL_GET(remap) << STM32_REMAP_SHIFT_GET(remap);
 8001d0c:	ea4f 2013 	mov.w	r0, r3, lsr #8
 8001d10:	f002 0201 	and.w	r2, r2, #1
 8001d14:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001d16:	9a01      	ldr	r2, [sp, #4]
	if (STM32_REMAP_REG_GET(remap) == 0U) {
 8001d18:	4a2d      	ldr	r2, [pc, #180]	; (8001dd0 <pinctrl_configure_pins+0xec>)
		reg_val |= STM32_REMAP_VAL_GET(remap) << STM32_REMAP_SHIFT_GET(remap);
 8001d1a:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8001d1e:	fa00 f003 	lsl.w	r0, r0, r3
		reg_val = AFIO->MAPR & ~AFIO_MAPR_SWJ_CFG;
 8001d22:	bf09      	itett	eq
 8001d24:	6853      	ldreq	r3, [r2, #4]
		reg_val = AFIO->MAPR2;
 8001d26:	69d3      	ldrne	r3, [r2, #28]
		reg_val |= STM32_REMAP_VAL_GET(remap) << STM32_REMAP_SHIFT_GET(remap);
 8001d28:	4303      	orreq	r3, r0
		AFIO->MAPR = reg_val | AFIO_MAPR_SWJ_CFG;
 8001d2a:	f043 63e0 	orreq.w	r3, r3, #117440512	; 0x7000000
		reg_val |= STM32_REMAP_VAL_GET(remap) << STM32_REMAP_SHIFT_GET(remap);
 8001d2e:	bf16      	itet	ne
 8001d30:	4303      	orrne	r3, r0
		AFIO->MAPR = reg_val | AFIO_MAPR_SWJ_CFG;
 8001d32:	6053      	streq	r3, [r2, #4]
		AFIO->MAPR2 = reg_val;
 8001d34:	61d3      	strne	r3, [r2, #28]
	port_device = gpio_ports[STM32_PORT(pin)];
 8001d36:	4f27      	ldr	r7, [pc, #156]	; (8001dd4 <pinctrl_configure_pins+0xf0>)
 8001d38:	eb04 06c1 	add.w	r6, r4, r1, lsl #3
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8001d3c:	42a6      	cmp	r6, r4
 8001d3e:	d10e      	bne.n	8001d5e <pinctrl_configure_pins+0x7a>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 8001d40:	2000      	movs	r0, #0
 8001d42:	e007      	b.n	8001d54 <pinctrl_configure_pins+0x70>
		if (STM32_DT_PINMUX_REMAP(pins[i].pinmux) != remap) {
 8001d44:	f854 0032 	ldr.w	r0, [r4, r2, lsl #3]
 8001d48:	f3c0 2089 	ubfx	r0, r0, #10, #10
 8001d4c:	4298      	cmp	r0, r3
 8001d4e:	d004      	beq.n	8001d5a <pinctrl_configure_pins+0x76>
	for (size_t i = 1U; i < pin_cnt; i++) {
 8001d50:	f06f 0015 	mvn.w	r0, #21
}
 8001d54:	b002      	add	sp, #8
 8001d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (size_t i = 1U; i < pin_cnt; i++) {
 8001d5a:	3201      	adds	r2, #1
 8001d5c:	e7cc      	b.n	8001cf8 <pinctrl_configure_pins+0x14>
			pin_cgf = pins[i].pincfg | STM32_MODE_OUTPUT | STM32_CNF_ALT_FUNC;
 8001d5e:	e9d4 2500 	ldrd	r2, r5, [r4]
		if (STM32_DT_PINMUX_FUNC(mux) == ALTERNATE) {
 8001d62:	f012 0903 	ands.w	r9, r2, #3
 8001d66:	d10f      	bne.n	8001d88 <pinctrl_configure_pins+0xa4>
			pin_cgf = pins[i].pincfg | STM32_MODE_OUTPUT | STM32_CNF_ALT_FUNC;
 8001d68:	f045 0541 	orr.w	r5, r5, #65	; 0x41
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8001d6c:	f3c2 0a87 	ubfx	sl, r2, #2, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 8001d70:	f3c2 1283 	ubfx	r2, r2, #6, #4
 8001d74:	2a0a      	cmp	r2, #10
 8001d76:	d8eb      	bhi.n	8001d50 <pinctrl_configure_pins+0x6c>
	port_device = gpio_ports[STM32_PORT(pin)];
 8001d78:	f857 8022 	ldr.w	r8, [r7, r2, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8001d7c:	f1b8 0f00 	cmp.w	r8, #0
 8001d80:	d113      	bne.n	8001daa <pinctrl_configure_pins+0xc6>
		return -ENODEV;
 8001d82:	f06f 0012 	mvn.w	r0, #18
 8001d86:	e7e5      	b.n	8001d54 <pinctrl_configure_pins+0x70>
		} else if (STM32_DT_PINMUX_FUNC(mux) == ANALOG) {
 8001d88:	f1b9 0f02 	cmp.w	r9, #2
 8001d8c:	d0ee      	beq.n	8001d6c <pinctrl_configure_pins+0x88>
		} else if (STM32_DT_PINMUX_FUNC(mux) == GPIO_IN) {
 8001d8e:	f1b9 0f01 	cmp.w	r9, #1
 8001d92:	d107      	bne.n	8001da4 <pinctrl_configure_pins+0xc0>
			if (pupd == STM32_PUPD_NO_PULL) {
 8001d94:	f415 7fc0 	tst.w	r5, #384	; 0x180
				pin_cgf = pin_cgf | STM32_CNF_IN_FLOAT;
 8001d98:	bf0c      	ite	eq
 8001d9a:	f045 0502 	orreq.w	r5, r5, #2
				pin_cgf = pin_cgf | STM32_CNF_IN_PUPD;
 8001d9e:	f045 0504 	orrne.w	r5, r5, #4
 8001da2:	e7e3      	b.n	8001d6c <pinctrl_configure_pins+0x88>
			pin_cgf = pins[i].pincfg | STM32_MODE_OUTPUT | STM32_CNF_GP_OUTPUT;
 8001da4:	f045 0501 	orr.w	r5, r5, #1
 8001da8:	e7e0      	b.n	8001d6c <pinctrl_configure_pins+0x88>
 8001daa:	4640      	mov	r0, r8
 8001dac:	f002 fd9c 	bl	80048e8 <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8001db0:	2800      	cmp	r0, #0
 8001db2:	d0e6      	beq.n	8001d82 <pinctrl_configure_pins+0x9e>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
 8001db4:	464b      	mov	r3, r9
 8001db6:	462a      	mov	r2, r5
 8001db8:	4640      	mov	r0, r8
 8001dba:	f00a 010f 	and.w	r1, sl, #15
 8001dbe:	f002 fbc2 	bl	8004546 <gpio_stm32_configure>
		if (ret < 0) {
 8001dc2:	2800      	cmp	r0, #0
 8001dc4:	f104 0408 	add.w	r4, r4, #8
 8001dc8:	dab8      	bge.n	8001d3c <pinctrl_configure_pins+0x58>
 8001dca:	e7c3      	b.n	8001d54 <pinctrl_configure_pins+0x70>
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40010000 	.word	0x40010000
 8001dd4:	08004fc0 	.word	0x08004fc0

08001dd8 <LL_TIM_OC_GetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  */
__STATIC_INLINE uint32_t LL_TIM_OC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001dd8:	2940      	cmp	r1, #64	; 0x40
 8001dda:	d01a      	beq.n	8001e12 <LL_TIM_OC_GetPolarity+0x3a>
 8001ddc:	d811      	bhi.n	8001e02 <LL_TIM_OC_GetPolarity+0x2a>
 8001dde:	2904      	cmp	r1, #4
 8001de0:	d019      	beq.n	8001e16 <LL_TIM_OC_GetPolarity+0x3e>
 8001de2:	2910      	cmp	r1, #16
 8001de4:	d019      	beq.n	8001e1a <LL_TIM_OC_GetPolarity+0x42>
 8001de6:	2901      	cmp	r1, #1
 8001de8:	bf08      	it	eq
 8001dea:	2300      	moveq	r3, #0
 8001dec:	bf18      	it	ne
 8001dee:	2306      	movne	r3, #6
  return (READ_BIT(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel])) >> SHIFT_TAB_CCxP[iChannel]);
 8001df0:	490c      	ldr	r1, [pc, #48]	; (8001e24 <LL_TIM_OC_GetPolarity+0x4c>)
 8001df2:	6a02      	ldr	r2, [r0, #32]
 8001df4:	5cc8      	ldrb	r0, [r1, r3]
 8001df6:	2302      	movs	r3, #2
 8001df8:	4083      	lsls	r3, r0
 8001dfa:	4013      	ands	r3, r2
}
 8001dfc:	fa23 f000 	lsr.w	r0, r3, r0
 8001e00:	4770      	bx	lr
 8001e02:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001e06:	d00a      	beq.n	8001e1e <LL_TIM_OC_GetPolarity+0x46>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001e08:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001e0c:	bf08      	it	eq
 8001e0e:	2305      	moveq	r3, #5
 8001e10:	e7ec      	b.n	8001dec <LL_TIM_OC_GetPolarity+0x14>
{
 8001e12:	2303      	movs	r3, #3
 8001e14:	e7ec      	b.n	8001df0 <LL_TIM_OC_GetPolarity+0x18>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e7ea      	b.n	8001df0 <LL_TIM_OC_GetPolarity+0x18>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e7e8      	b.n	8001df0 <LL_TIM_OC_GetPolarity+0x18>
 8001e1e:	2304      	movs	r3, #4
 8001e20:	e7e6      	b.n	8001df0 <LL_TIM_OC_GetPolarity+0x18>
 8001e22:	bf00      	nop
 8001e24:	0800534b 	.word	0x0800534b

08001e28 <pwm_stm32_set_cycles>:
}

static int pwm_stm32_set_cycles(const struct device *dev, uint32_t channel,
				uint32_t period_cycles, uint32_t pulse_cycles,
				pwm_flags_t flags)
{
 8001e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	uint32_t ll_channel;
	uint32_t current_ll_channel; /* complementary output if used */
	uint32_t negative_ll_channel;

	if (channel < 1u || channel > TIMER_MAX_CH) {
 8001e2c:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
{
 8001e30:	b088      	sub	sp, #32
	if (channel < 1u || channel > TIMER_MAX_CH) {
 8001e32:	f1bc 0f03 	cmp.w	ip, #3
{
 8001e36:	461f      	mov	r7, r3
 8001e38:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
	const struct pwm_stm32_config *cfg = dev->config;
 8001e3c:	6844      	ldr	r4, [r0, #4]
	if (channel < 1u || channel > TIMER_MAX_CH) {
 8001e3e:	f200 80df 	bhi.w	8002000 <pwm_stm32_set_cycles+0x1d8>

	/*
	 * Non 32-bit timers count from 0 up to the value in the ARR register
	 * (16-bit). Thus period_cycles cannot be greater than UINT16_MAX + 1.
	 */
	if (!IS_TIM_32B_COUNTER_INSTANCE(cfg->timer) &&
 8001e42:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001e46:	f200 80de 	bhi.w	8002006 <pwm_stm32_set_cycles+0x1de>
			return -EBUSY;
		}
	}
#endif /* CONFIG_PWM_CAPTURE */

	ll_channel = ch2ll[channel - 1u];
 8001e4a:	4b70      	ldr	r3, [pc, #448]	; (800200c <pwm_stm32_set_cycles+0x1e4>)

	if (channel <= ARRAY_SIZE(ch2ll_n)) {
 8001e4c:	2904      	cmp	r1, #4
	ll_channel = ch2ll[channel - 1u];
 8001e4e:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
	if (channel <= ARRAY_SIZE(ch2ll_n)) {
 8001e52:	f406 7a80 	and.w	sl, r6, #256	; 0x100
 8001e56:	d10d      	bne.n	8001e74 <pwm_stm32_set_cycles+0x4c>
	}

	/* in LL_TIM_CC_DisableChannel and LL_TIM_CC_IsEnabledChannel,
	 * the channel param could be the complementary one
	 */
	if ((flags & STM32_PWM_COMPLEMENTARY_MASK) == STM32_PWM_COMPLEMENTARY) {
 8001e58:	f1ba 0f00 	cmp.w	sl, #0
 8001e5c:	f040 80d0 	bne.w	8002000 <pwm_stm32_set_cycles+0x1d8>
	ll_channel = ch2ll[channel - 1u];
 8001e60:	4628      	mov	r0, r5
		negative_ll_channel = 0;
 8001e62:	46d1      	mov	r9, sl
		current_ll_channel = negative_ll_channel;
	} else {
		current_ll_channel = ll_channel;
	}

	if (period_cycles == 0u) {
 8001e64:	b9a2      	cbnz	r2, 8001e90 <pwm_stm32_set_cycles+0x68>
		LL_TIM_CC_DisableChannel(cfg->timer, current_ll_channel);
 8001e66:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8001e68:	6a13      	ldr	r3, [r2, #32]
 8001e6a:	ea23 0300 	bic.w	r3, r3, r0
 8001e6e:	6213      	str	r3, [r2, #32]
		return 0;
 8001e70:	2000      	movs	r0, #0
 8001e72:	e074      	b.n	8001f5e <pwm_stm32_set_cycles+0x136>
		negative_ll_channel = ch2ll_n[channel - 1u];
 8001e74:	4b66      	ldr	r3, [pc, #408]	; (8002010 <pwm_stm32_set_cycles+0x1e8>)
 8001e76:	f853 902c 	ldr.w	r9, [r3, ip, lsl #2]
	if ((flags & STM32_PWM_COMPLEMENTARY_MASK) == STM32_PWM_COMPLEMENTARY) {
 8001e7a:	f1ba 0f00 	cmp.w	sl, #0
 8001e7e:	d005      	beq.n	8001e8c <pwm_stm32_set_cycles+0x64>
		if (!negative_ll_channel) {
 8001e80:	f1b9 0f00 	cmp.w	r9, #0
 8001e84:	f000 80bc 	beq.w	8002000 <pwm_stm32_set_cycles+0x1d8>
 8001e88:	4648      	mov	r0, r9
 8001e8a:	e7eb      	b.n	8001e64 <pwm_stm32_set_cycles+0x3c>
	ll_channel = ch2ll[channel - 1u];
 8001e8c:	4628      	mov	r0, r5
 8001e8e:	e7e9      	b.n	8001e64 <pwm_stm32_set_cycles+0x3c>
	}

	if (cfg->countermode == LL_TIM_COUNTERMODE_UP) {
 8001e90:	68a3      	ldr	r3, [r4, #8]
 8001e92:	bb63      	cbnz	r3, 8001eee <pwm_stm32_set_cycles+0xc6>
		period_cycles -= 1U;
	} else if (cfg->countermode == LL_TIM_COUNTERMODE_DOWN) {
		/* remove 1 pulse cycle, accounts for 1 extra high cycle */
		pulse_cycles -= 1U;
		/* remove 1 period cycle, accounts for 1 extra low cycle */
		period_cycles -= 1U;
 8001e94:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
		period_cycles /= 2U;
	} else {
		return -ENOTSUP;
	}

	if (!LL_TIM_CC_IsEnabledChannel(cfg->timer, current_ll_channel)) {
 8001e98:	6821      	ldr	r1, [r4, #0]
	if ((flags & PWM_POLARITY_MASK) == PWM_POLARITY_NORMAL) {
 8001e9a:	f006 0601 	and.w	r6, r6, #1
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8001e9e:	6a0b      	ldr	r3, [r1, #32]
 8001ea0:	0076      	lsls	r6, r6, #1
 8001ea2:	ea30 0303 	bics.w	r3, r0, r3
 8001ea6:	d139      	bne.n	8001f1c <pwm_stm32_set_cycles+0xf4>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001ea8:	2840      	cmp	r0, #64	; 0x40
 8001eaa:	f000 80a1 	beq.w	8001ff0 <pwm_stm32_set_cycles+0x1c8>
 8001eae:	d82d      	bhi.n	8001f0c <pwm_stm32_set_cycles+0xe4>
 8001eb0:	2804      	cmp	r0, #4
 8001eb2:	f000 809f 	beq.w	8001ff4 <pwm_stm32_set_cycles+0x1cc>
 8001eb6:	2810      	cmp	r0, #16
 8001eb8:	f000 809e 	beq.w	8001ff8 <pwm_stm32_set_cycles+0x1d0>
 8001ebc:	2801      	cmp	r0, #1
 8001ebe:	bf08      	it	eq
 8001ec0:	2300      	moveq	r3, #0
 8001ec2:	bf18      	it	ne
 8001ec4:	2306      	movne	r3, #6
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8001ec6:	4853      	ldr	r0, [pc, #332]	; (8002014 <pwm_stm32_set_cycles+0x1ec>)
 8001ec8:	6a0a      	ldr	r2, [r1, #32]
 8001eca:	5cc0      	ldrb	r0, [r0, r3]
 8001ecc:	2302      	movs	r3, #2
 8001ece:	4083      	lsls	r3, r0
 8001ed0:	ea22 0303 	bic.w	r3, r2, r3
 8001ed4:	4086      	lsls	r6, r0
 8001ed6:	431e      	orrs	r6, r3
		LL_TIM_SetAutoReload(cfg->timer, period_cycles);
		LL_TIM_GenerateEvent_UPDATE(cfg->timer);
	} else {
		/* in LL_TIM_OC_SetPolarity, the channel could be the complementary one */
		LL_TIM_OC_SetPolarity(cfg->timer, current_ll_channel, get_polarity(flags));
		set_timer_compare[channel - 1u](cfg->timer, pulse_cycles);
 8001ed8:	4b4f      	ldr	r3, [pc, #316]	; (8002018 <pwm_stm32_set_cycles+0x1f0>)
 8001eda:	620e      	str	r6, [r1, #32]
 8001edc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8001ee0:	4639      	mov	r1, r7
 8001ee2:	6820      	ldr	r0, [r4, #0]
 8001ee4:	4798      	blx	r3
		LL_TIM_SetAutoReload(cfg->timer, period_cycles);
 8001ee6:	6823      	ldr	r3, [r4, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001ee8:	f8c3 802c 	str.w	r8, [r3, #44]	; 0x2c
}
 8001eec:	e7c0      	b.n	8001e70 <pwm_stm32_set_cycles+0x48>
	} else if (cfg->countermode == LL_TIM_COUNTERMODE_DOWN) {
 8001eee:	2b10      	cmp	r3, #16
 8001ef0:	d101      	bne.n	8001ef6 <pwm_stm32_set_cycles+0xce>
		pulse_cycles -= 1U;
 8001ef2:	3f01      	subs	r7, #1
 8001ef4:	e7ce      	b.n	8001e94 <pwm_stm32_set_cycles+0x6c>
		(ll_countermode == LL_TIM_COUNTERMODE_CENTER_UP) ||
 8001ef6:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8001efa:	2920      	cmp	r1, #32
 8001efc:	d002      	beq.n	8001f04 <pwm_stm32_set_cycles+0xdc>
	return ((ll_countermode == LL_TIM_COUNTERMODE_CENTER_DOWN) ||
 8001efe:	2b40      	cmp	r3, #64	; 0x40
 8001f00:	f040 8081 	bne.w	8002006 <pwm_stm32_set_cycles+0x1de>
		pulse_cycles /= 2U;
 8001f04:	087f      	lsrs	r7, r7, #1
		period_cycles /= 2U;
 8001f06:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8001f0a:	e7c5      	b.n	8001e98 <pwm_stm32_set_cycles+0x70>
 8001f0c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8001f10:	d074      	beq.n	8001ffc <pwm_stm32_set_cycles+0x1d4>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001f12:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8001f16:	bf08      	it	eq
 8001f18:	2305      	moveq	r3, #5
 8001f1a:	e7d2      	b.n	8001ec2 <pwm_stm32_set_cycles+0x9a>
		LL_TIM_OC_StructInit(&oc_init);
 8001f1c:	4668      	mov	r0, sp
 8001f1e:	f002 fcd8 	bl	80048d2 <LL_TIM_OC_StructInit>
		oc_init.OCMode = LL_TIM_OCMODE_PWM1;
 8001f22:	2360      	movs	r3, #96	; 0x60
 8001f24:	9300      	str	r3, [sp, #0]
		if ((flags & STM32_PWM_COMPLEMENTARY_MASK) == STM32_PWM_COMPLEMENTARY) {
 8001f26:	2301      	movs	r3, #1
 8001f28:	f1ba 0f00 	cmp.w	sl, #0
 8001f2c:	d01a      	beq.n	8001f64 <pwm_stm32_set_cycles+0x13c>
			oc_init.OCNState = LL_TIM_OCSTATE_ENABLE;
 8001f2e:	9302      	str	r3, [sp, #8]
			oc_init.OCNPolarity = get_polarity(flags);
 8001f30:	9605      	str	r6, [sp, #20]
			oc_init.OCState = LL_TIM_CC_IsEnabledChannel(cfg->timer, ll_channel)
 8001f32:	6823      	ldr	r3, [r4, #0]
			oc_init.OCPolarity = LL_TIM_OC_GetPolarity(cfg->timer, ll_channel);
 8001f34:	4629      	mov	r1, r5
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	ea35 0303 	bics.w	r3, r5, r3
 8001f3c:	bf0c      	ite	eq
 8001f3e:	2301      	moveq	r3, #1
 8001f40:	2300      	movne	r3, #0
			oc_init.OCState = LL_TIM_CC_IsEnabledChannel(cfg->timer, ll_channel)
 8001f42:	9301      	str	r3, [sp, #4]
			oc_init.OCPolarity = LL_TIM_OC_GetPolarity(cfg->timer, ll_channel);
 8001f44:	6820      	ldr	r0, [r4, #0]
 8001f46:	f7ff ff47 	bl	8001dd8 <LL_TIM_OC_GetPolarity>
 8001f4a:	9004      	str	r0, [sp, #16]
		oc_init.CompareValue = pulse_cycles;
 8001f4c:	9703      	str	r7, [sp, #12]
		if (LL_TIM_OC_Init(cfg->timer, ll_channel, &oc_init) != SUCCESS) {
 8001f4e:	466a      	mov	r2, sp
 8001f50:	4629      	mov	r1, r5
 8001f52:	6820      	ldr	r0, [r4, #0]
 8001f54:	f000 fdf4 	bl	8002b40 <LL_TIM_OC_Init>
 8001f58:	b1b8      	cbz	r0, 8001f8a <pwm_stm32_set_cycles+0x162>
			return -EIO;
 8001f5a:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
 8001f5e:	b008      	add	sp, #32
 8001f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 8001f64:	9301      	str	r3, [sp, #4]
			oc_init.OCPolarity = get_polarity(flags);
 8001f66:	9604      	str	r6, [sp, #16]
			if (negative_ll_channel) {
 8001f68:	f1b9 0f00 	cmp.w	r9, #0
 8001f6c:	d0ee      	beq.n	8001f4c <pwm_stm32_set_cycles+0x124>
					LL_TIM_CC_IsEnabledChannel(cfg->timer, negative_ll_channel)
 8001f6e:	6823      	ldr	r3, [r4, #0]
					LL_TIM_OC_GetPolarity(cfg->timer, negative_ll_channel);
 8001f70:	4649      	mov	r1, r9
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	ea39 0303 	bics.w	r3, r9, r3
 8001f78:	bf0c      	ite	eq
 8001f7a:	2301      	moveq	r3, #1
 8001f7c:	2300      	movne	r3, #0
				oc_init.OCNState =
 8001f7e:	9302      	str	r3, [sp, #8]
					LL_TIM_OC_GetPolarity(cfg->timer, negative_ll_channel);
 8001f80:	6820      	ldr	r0, [r4, #0]
 8001f82:	f7ff ff29 	bl	8001dd8 <LL_TIM_OC_GetPolarity>
				oc_init.OCNPolarity =
 8001f86:	9005      	str	r0, [sp, #20]
 8001f88:	e7e0      	b.n	8001f4c <pwm_stm32_set_cycles+0x124>
		LL_TIM_EnableARRPreload(cfg->timer);
 8001f8a:	6822      	ldr	r2, [r4, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001f8c:	2d40      	cmp	r5, #64	; 0x40
 8001f8e:	6813      	ldr	r3, [r2, #0]
 8001f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f94:	6013      	str	r3, [r2, #0]
		LL_TIM_OC_EnablePreload(cfg->timer, ll_channel);
 8001f96:	6822      	ldr	r2, [r4, #0]
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001f98:	d022      	beq.n	8001fe0 <pwm_stm32_set_cycles+0x1b8>
 8001f9a:	d819      	bhi.n	8001fd0 <pwm_stm32_set_cycles+0x1a8>
 8001f9c:	2d04      	cmp	r5, #4
 8001f9e:	d021      	beq.n	8001fe4 <pwm_stm32_set_cycles+0x1bc>
 8001fa0:	2d10      	cmp	r5, #16
 8001fa2:	d021      	beq.n	8001fe8 <pwm_stm32_set_cycles+0x1c0>
 8001fa4:	2d01      	cmp	r5, #1
 8001fa6:	bf18      	it	ne
 8001fa8:	2006      	movne	r0, #6
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001faa:	4b1c      	ldr	r3, [pc, #112]	; (800201c <pwm_stm32_set_cycles+0x1f4>)
 8001fac:	3218      	adds	r2, #24
 8001fae:	5c19      	ldrb	r1, [r3, r0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001fb0:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <pwm_stm32_set_cycles+0x1f8>)
 8001fb2:	5855      	ldr	r5, [r2, r1]
 8001fb4:	5c18      	ldrb	r0, [r3, r0]
 8001fb6:	2308      	movs	r3, #8
 8001fb8:	4083      	lsls	r3, r0
 8001fba:	432b      	orrs	r3, r5
 8001fbc:	5053      	str	r3, [r2, r1]
		LL_TIM_SetAutoReload(cfg->timer, period_cycles);
 8001fbe:	6823      	ldr	r3, [r4, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001fc0:	f8c3 802c 	str.w	r8, [r3, #44]	; 0x2c
		LL_TIM_GenerateEvent_UPDATE(cfg->timer);
 8001fc4:	6822      	ldr	r2, [r4, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001fc6:	6953      	ldr	r3, [r2, #20]
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6153      	str	r3, [r2, #20]
 8001fce:	e74f      	b.n	8001e70 <pwm_stm32_set_cycles+0x48>
 8001fd0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8001fd4:	d00a      	beq.n	8001fec <pwm_stm32_set_cycles+0x1c4>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001fd6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001fda:	bf08      	it	eq
 8001fdc:	2005      	moveq	r0, #5
 8001fde:	e7e2      	b.n	8001fa6 <pwm_stm32_set_cycles+0x17e>
		LL_TIM_OC_EnablePreload(cfg->timer, ll_channel);
 8001fe0:	2003      	movs	r0, #3
 8001fe2:	e7e2      	b.n	8001faa <pwm_stm32_set_cycles+0x182>
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	e7e0      	b.n	8001faa <pwm_stm32_set_cycles+0x182>
 8001fe8:	2002      	movs	r0, #2
 8001fea:	e7de      	b.n	8001faa <pwm_stm32_set_cycles+0x182>
 8001fec:	2004      	movs	r0, #4
 8001fee:	e7dc      	b.n	8001faa <pwm_stm32_set_cycles+0x182>
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e768      	b.n	8001ec6 <pwm_stm32_set_cycles+0x9e>
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e766      	b.n	8001ec6 <pwm_stm32_set_cycles+0x9e>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e764      	b.n	8001ec6 <pwm_stm32_set_cycles+0x9e>
 8001ffc:	2304      	movs	r3, #4
 8001ffe:	e762      	b.n	8001ec6 <pwm_stm32_set_cycles+0x9e>
		return -EINVAL;
 8002000:	f06f 0015 	mvn.w	r0, #21
 8002004:	e7ab      	b.n	8001f5e <pwm_stm32_set_cycles+0x136>
		return -ENOTSUP;
 8002006:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800200a:	e7a8      	b.n	8001f5e <pwm_stm32_set_cycles+0x136>
 800200c:	080050a0 	.word	0x080050a0
 8002010:	08005094 	.word	0x08005094
 8002014:	0800534b 	.word	0x0800534b
 8002018:	08005084 	.word	0x08005084
 800201c:	08005359 	.word	0x08005359
 8002020:	08005352 	.word	0x08005352

08002024 <pwm_stm32_init>:
	.disable_capture = pwm_stm32_disable_capture,
#endif /* CONFIG_PWM_CAPTURE */
};

static int pwm_stm32_init(const struct device *dev)
{
 8002024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002028:	b086      	sub	sp, #24
	struct pwm_stm32_data *data = dev->data;
 800202a:	6906      	ldr	r6, [r0, #16]
	const struct pwm_stm32_config *cfg = dev->config;
 800202c:	6844      	ldr	r4, [r0, #4]
 800202e:	4d2e      	ldr	r5, [pc, #184]	; (80020e8 <pwm_stm32_init+0xc4>)
 8002030:	4628      	mov	r0, r5
 8002032:	f002 fc59 	bl	80048e8 <z_device_is_ready>
	LL_TIM_InitTypeDef init;

	/* enable clock and store its speed */
	clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);

	if (!device_is_ready(clk)) {
 8002036:	2800      	cmp	r0, #0
 8002038:	d04f      	beq.n	80020da <pwm_stm32_init+0xb6>
	const struct clock_control_driver_api *api =
 800203a:	f8d5 8008 	ldr.w	r8, [r5, #8]
		LOG_ERR("clock control device not ready");
		return -ENODEV;
	}

	r = clock_control_on(clk, (clock_control_subsys_t)&cfg->pclken);
 800203e:	f104 070c 	add.w	r7, r4, #12
	return api->on(dev, sys);
 8002042:	4639      	mov	r1, r7
 8002044:	4628      	mov	r0, r5
 8002046:	f8d8 3000 	ldr.w	r3, [r8]
 800204a:	4798      	blx	r3
	if (r < 0) {
 800204c:	2800      	cmp	r0, #0
 800204e:	db04      	blt.n	800205a <pwm_stm32_init+0x36>
	if (api->get_rate == NULL) {
 8002050:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8002054:	b923      	cbnz	r3, 8002060 <pwm_stm32_init+0x3c>
		LOG_ERR("Could not initialize clock (%d)", r);
		return r;
	}

	r = get_tim_clk(&cfg->pclken, &data->tim_clk);
	if (r < 0) {
 8002056:	f06f 0057 	mvn.w	r0, #87	; 0x57
#ifdef CONFIG_PWM_CAPTURE
	cfg->irq_config_func(dev);
#endif /* CONFIG_PWM_CAPTURE */

	return 0;
}
 800205a:	b006      	add	sp, #24
 800205c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return api->get_rate(dev, sys, rate);
 8002060:	4639      	mov	r1, r7
 8002062:	4628      	mov	r0, r5
 8002064:	aa01      	add	r2, sp, #4
 8002066:	4798      	blx	r3
	if (r < 0) {
 8002068:	2800      	cmp	r0, #0
 800206a:	dbf6      	blt.n	800205a <pwm_stm32_init+0x36>
 *
 * @return a value from reset_line_toggle()
 */
static inline int reset_line_toggle_dt(const struct reset_dt_spec *spec)
{
	return reset_line_toggle(spec->dev, spec->id);
 800206c:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
		*tim_clk = bus_clk * 2u;
 8002070:	9b01      	ldr	r3, [sp, #4]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	6033      	str	r3, [r6, #0]
	if (api->line_toggle == NULL) {
 8002076:	6883      	ldr	r3, [r0, #8]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	b103      	cbz	r3, 800207e <pwm_stm32_init+0x5a>
	return api->line_toggle(dev, id);
 800207c:	4798      	blx	r3
	ret = pinctrl_lookup_state(config, id, &state);
 800207e:	2100      	movs	r1, #0
 8002080:	6960      	ldr	r0, [r4, #20]
 8002082:	aa01      	add	r2, sp, #4
 8002084:	f002 fa74 	bl	8004570 <pinctrl_lookup_state>
	if (ret < 0) {
 8002088:	2800      	cmp	r0, #0
 800208a:	dbe6      	blt.n	800205a <pwm_stm32_init+0x36>
	return pinctrl_apply_state_direct(config, state);
 800208c:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800208e:	2200      	movs	r2, #0
 8002090:	7919      	ldrb	r1, [r3, #4]
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	f7ff fe26 	bl	8001ce4 <pinctrl_configure_pins>
	if (r < 0) {
 8002098:	2800      	cmp	r0, #0
 800209a:	dbde      	blt.n	800205a <pwm_stm32_init+0x36>
	LL_TIM_StructInit(&init);
 800209c:	a801      	add	r0, sp, #4
 800209e:	f002 fc0f 	bl	80048c0 <LL_TIM_StructInit>
	init.Prescaler = cfg->prescaler;
 80020a2:	6863      	ldr	r3, [r4, #4]
	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 80020a4:	a901      	add	r1, sp, #4
	init.Prescaler = cfg->prescaler;
 80020a6:	f8ad 3004 	strh.w	r3, [sp, #4]
	init.CounterMode = cfg->countermode;
 80020aa:	68a3      	ldr	r3, [r4, #8]
 80020ac:	9302      	str	r3, [sp, #8]
	init.Autoreload = 0u;
 80020ae:	2300      	movs	r3, #0
	init.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80020b0:	e9cd 3303 	strd	r3, r3, [sp, #12]
	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 80020b4:	6820      	ldr	r0, [r4, #0]
 80020b6:	f000 fd13 	bl	8002ae0 <LL_TIM_Init>
 80020ba:	b988      	cbnz	r0, 80020e0 <pwm_stm32_init+0xbc>
	if (IS_TIM_BREAK_INSTANCE(cfg->timer)) {
 80020bc:	6823      	ldr	r3, [r4, #0]
 80020be:	4a0b      	ldr	r2, [pc, #44]	; (80020ec <pwm_stm32_init+0xc8>)
	return 0;
 80020c0:	2000      	movs	r0, #0
	if (IS_TIM_BREAK_INSTANCE(cfg->timer)) {
 80020c2:	4293      	cmp	r3, r2
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80020c4:	bf02      	ittt	eq
 80020c6:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80020c8:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80020cc:	645a      	streq	r2, [r3, #68]	; 0x44
	LL_TIM_EnableCounter(cfg->timer);
 80020ce:	6822      	ldr	r2, [r4, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80020d0:	6813      	ldr	r3, [r2, #0]
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6013      	str	r3, [r2, #0]
	return 0;
 80020d8:	e7bf      	b.n	800205a <pwm_stm32_init+0x36>
		return -ENODEV;
 80020da:	f06f 0012 	mvn.w	r0, #18
 80020de:	e7bc      	b.n	800205a <pwm_stm32_init+0x36>
		return -EIO;
 80020e0:	f06f 0004 	mvn.w	r0, #4
 80020e4:	e7b9      	b.n	800205a <pwm_stm32_init+0x36>
 80020e6:	bf00      	nop
 80020e8:	08004bc4 	.word	0x08004bc4
 80020ec:	40012c00 	.word	0x40012c00

080020f0 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 80020f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020f2:	4606      	mov	r6, r0
	const struct uart_stm32_config *config = dev->config;
 80020f4:	6844      	ldr	r4, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 80020f6:	6907      	ldr	r7, [r0, #16]
	data->clock = clk;
 80020f8:	4836      	ldr	r0, [pc, #216]	; (80021d4 <uart_stm32_init+0xe4>)
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	f002 fbf4 	bl	80048e8 <z_device_is_ready>
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);

	if (!device_is_ready(data->clock)) {
 8002100:	b920      	cbnz	r0, 800210c <uart_stm32_init+0x1c>
		LOG_ERR("clock control device not ready");
		return -ENODEV;
 8002102:	f06f 0512 	mvn.w	r5, #18
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8002106:	4628      	mov	r0, r5
 8002108:	b003      	add	sp, #12
 800210a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = clock_control_on(data->clock, (clock_control_subsys_t)&config->pclken[0]);
 800210c:	6878      	ldr	r0, [r7, #4]
	return api->on(dev, sys);
 800210e:	6861      	ldr	r1, [r4, #4]
 8002110:	6883      	ldr	r3, [r0, #8]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4798      	blx	r3
	if (err != 0) {
 8002116:	4605      	mov	r5, r0
 8002118:	2800      	cmp	r0, #0
 800211a:	d1f4      	bne.n	8002106 <uart_stm32_init+0x16>
	ret = pinctrl_lookup_state(config, id, &state);
 800211c:	4601      	mov	r1, r0
 800211e:	aa01      	add	r2, sp, #4
 8002120:	69e0      	ldr	r0, [r4, #28]
 8002122:	f002 fa25 	bl	8004570 <pinctrl_lookup_state>
	if (ret < 0) {
 8002126:	2800      	cmp	r0, #0
 8002128:	da01      	bge.n	800212e <uart_stm32_init+0x3e>
 800212a:	4605      	mov	r5, r0
 800212c:	e7eb      	b.n	8002106 <uart_stm32_init+0x16>
	return pinctrl_apply_state_direct(config, state);
 800212e:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8002130:	462a      	mov	r2, r5
 8002132:	7919      	ldrb	r1, [r3, #4]
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	f7ff fdd5 	bl	8001ce4 <pinctrl_configure_pins>
	if (err < 0) {
 800213a:	2800      	cmp	r0, #0
 800213c:	dbf5      	blt.n	800212a <uart_stm32_init+0x3a>
	LL_USART_Disable(config->usart);
 800213e:	6822      	ldr	r2, [r4, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8002140:	68d3      	ldr	r3, [r2, #12]
 8002142:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002146:	60d3      	str	r3, [r2, #12]
	if (!device_is_ready(data->reset.dev)) {
 8002148:	68b8      	ldr	r0, [r7, #8]
 800214a:	f002 fbcd 	bl	80048e8 <z_device_is_ready>
 800214e:	2800      	cmp	r0, #0
 8002150:	d0d7      	beq.n	8002102 <uart_stm32_init+0x12>
	return reset_line_toggle(spec->dev, spec->id);
 8002152:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
	if (api->line_toggle == NULL) {
 8002156:	6883      	ldr	r3, [r0, #8]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	b103      	cbz	r3, 800215e <uart_stm32_init+0x6e>
	return api->line_toggle(dev, id);
 800215c:	4798      	blx	r3
	LL_USART_SetTransferDirection(config->usart,
 800215e:	6822      	ldr	r2, [r4, #0]
  *         @arg @ref LL_USART_DIRECTION_TX_RX
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8002160:	68d3      	ldr	r3, [r2, #12]
 8002162:	f043 030c 	orr.w	r3, r3, #12
 8002166:	60d3      	str	r3, [r2, #12]
	if (config->parity == 2) {
 8002168:	6923      	ldr	r3, [r4, #16]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d029      	beq.n	80021c2 <uart_stm32_init+0xd2>
	} else if (config->parity == 1) {
 800216e:	2b01      	cmp	r3, #1
 8002170:	d12c      	bne.n	80021cc <uart_stm32_init+0xdc>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8002172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 8002176:	f44f 60c0 	mov.w	r0, #1536	; 0x600
	LL_USART_ConfigCharacter(config->usart,
 800217a:	6821      	ldr	r1, [r4, #0]
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity,
                                              uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800217c:	4303      	orrs	r3, r0
 800217e:	68ca      	ldr	r2, [r1, #12]
 8002180:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002184:	4313      	orrs	r3, r2
 8002186:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002188:	690b      	ldr	r3, [r1, #16]
 800218a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800218e:	610b      	str	r3, [r1, #16]
	if (config->hw_flow_control) {
 8002190:	7b23      	ldrb	r3, [r4, #12]
 8002192:	b12b      	cbz	r3, 80021a0 <uart_stm32_init+0xb0>
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 8002194:	6873      	ldr	r3, [r6, #4]
 8002196:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002198:	6953      	ldr	r3, [r2, #20]
 800219a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800219e:	6153      	str	r3, [r2, #20]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 80021a0:	4630      	mov	r0, r6
 80021a2:	6839      	ldr	r1, [r7, #0]
 80021a4:	f002 fa4b 	bl	800463e <uart_stm32_set_baudrate>
	if (config->single_wire) {
 80021a8:	7d23      	ldrb	r3, [r4, #20]
 80021aa:	b123      	cbz	r3, 80021b6 <uart_stm32_init+0xc6>
		LL_USART_EnableHalfDuplex(config->usart);
 80021ac:	6822      	ldr	r2, [r4, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 80021ae:	6953      	ldr	r3, [r2, #20]
 80021b0:	f043 0308 	orr.w	r3, r3, #8
 80021b4:	6153      	str	r3, [r2, #20]
	LL_USART_Enable(config->usart);
 80021b6:	6822      	ldr	r2, [r4, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80021b8:	68d3      	ldr	r3, [r2, #12]
 80021ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021be:	60d3      	str	r3, [r2, #12]
	return 0;
 80021c0:	e7a1      	b.n	8002106 <uart_stm32_init+0x16>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 80021c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 80021c6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021ca:	e7d6      	b.n	800217a <uart_stm32_init+0x8a>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 80021cc:	2300      	movs	r3, #0
		ll_parity = LL_USART_PARITY_NONE;
 80021ce:	4618      	mov	r0, r3
 80021d0:	e7d3      	b.n	800217a <uart_stm32_init+0x8a>
 80021d2:	bf00      	nop
 80021d4:	08004bc4 	.word	0x08004bc4

080021d8 <uart_stm32_configure>:
{
 80021d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 80021dc:	790b      	ldrb	r3, [r1, #4]
{
 80021de:	460c      	mov	r4, r1
	switch (parity) {
 80021e0:	2b01      	cmp	r3, #1
	const struct uart_stm32_config *config = dev->config;
 80021e2:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 80021e4:	6906      	ldr	r6, [r0, #16]
	switch (parity) {
 80021e6:	d026      	beq.n	8002236 <uart_stm32_configure+0x5e>
 80021e8:	1e9a      	subs	r2, r3, #2
 80021ea:	4257      	negs	r7, r2
 80021ec:	4157      	adcs	r7, r2
 80021ee:	02bf      	lsls	r7, r7, #10
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 80021f0:	7962      	ldrb	r2, [r4, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 80021f2:	f894 8006 	ldrb.w	r8, [r4, #6]
 80021f6:	2a02      	cmp	r2, #2
 80021f8:	bf96      	itet	ls
 80021fa:	494c      	ldrls	r1, [pc, #304]	; (800232c <uart_stm32_configure+0x154>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 80021fc:	f44f 5c00 	movhi.w	ip, #8192	; 0x2000
 8002200:	f831 c012 	ldrhls.w	ip, [r1, r2, lsl #1]
	switch (db) {
 8002204:	f1b8 0f04 	cmp.w	r8, #4
 8002208:	d012      	beq.n	8002230 <uart_stm32_configure+0x58>
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 800220a:	f894 e007 	ldrb.w	lr, [r4, #7]
		if (p == UART_CFG_PARITY_NONE) {
 800220e:	b9ab      	cbnz	r3, 800223c <uart_stm32_configure+0x64>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8002210:	f1be 0f01 	cmp.w	lr, #1
 8002214:	f022 0202 	bic.w	r2, r2, #2
 8002218:	d026      	beq.n	8002268 <uart_stm32_configure+0x90>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 800221a:	b14a      	cbz	r2, 8002230 <uart_stm32_configure+0x58>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 800221c:	f1b8 0f02 	cmp.w	r8, #2
 8002220:	d906      	bls.n	8002230 <uart_stm32_configure+0x58>
		return LL_USART_HWCONTROL_NONE;
 8002222:	4619      	mov	r1, r3
	if (!(cfg->flow_ctrl == UART_CFG_FLOW_CTRL_NONE
 8002224:	f1be 0f00 	cmp.w	lr, #0
 8002228:	d032      	beq.n	8002290 <uart_stm32_configure+0xb8>
 800222a:	f1be 0f01 	cmp.w	lr, #1
 800222e:	d022      	beq.n	8002276 <uart_stm32_configure+0x9e>
		return -ENOTSUP;
 8002230:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002234:	e077      	b.n	8002326 <uart_stm32_configure+0x14e>
	switch (parity) {
 8002236:	f44f 67c0 	mov.w	r7, #1536	; 0x600
 800223a:	e7d9      	b.n	80021f0 <uart_stm32_configure+0x18>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 800223c:	3b03      	subs	r3, #3
 800223e:	f1be 0f01 	cmp.w	lr, #1
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8002242:	b2db      	uxtb	r3, r3
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8002244:	d10c      	bne.n	8002260 <uart_stm32_configure+0x88>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8002246:	2b01      	cmp	r3, #1
 8002248:	d9f2      	bls.n	8002230 <uart_stm32_configure+0x58>
		return LL_USART_HWCONTROL_RTS_CTS;
 800224a:	f44f 7140 	mov.w	r1, #768	; 0x300
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 800224e:	f012 0ffd 	tst.w	r2, #253	; 0xfd
 8002252:	d0ed      	beq.n	8002230 <uart_stm32_configure+0x58>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8002254:	f1b8 0f02 	cmp.w	r8, #2
 8002258:	d9ea      	bls.n	8002230 <uart_stm32_configure+0x58>
		return LL_USART_DATAWIDTH_9B;
 800225a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800225e:	e7e1      	b.n	8002224 <uart_stm32_configure+0x4c>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8002260:	2b01      	cmp	r3, #1
 8002262:	d9e5      	bls.n	8002230 <uart_stm32_configure+0x58>
		return LL_USART_HWCONTROL_NONE;
 8002264:	2100      	movs	r1, #0
 8002266:	e7f2      	b.n	800224e <uart_stm32_configure+0x76>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8002268:	2a00      	cmp	r2, #0
 800226a:	d0e1      	beq.n	8002230 <uart_stm32_configure+0x58>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 800226c:	f1b8 0f02 	cmp.w	r8, #2
 8002270:	d9de      	bls.n	8002230 <uart_stm32_configure+0x58>
		return LL_USART_HWCONTROL_RTS_CTS;
 8002272:	f44f 7140 	mov.w	r1, #768	; 0x300
			IS_UART_HWFLOW_INSTANCE(config->usart))
 8002276:	682a      	ldr	r2, [r5, #0]
		|| (cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS &&
 8002278:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8002330 <uart_stm32_configure+0x158>
 800227c:	4572      	cmp	r2, lr
 800227e:	d007      	beq.n	8002290 <uart_stm32_configure+0xb8>
			IS_UART_HWFLOW_INSTANCE(config->usart))
 8002280:	f5ae 4e74 	sub.w	lr, lr, #62464	; 0xf400
 8002284:	4572      	cmp	r2, lr
 8002286:	d003      	beq.n	8002290 <uart_stm32_configure+0xb8>
 8002288:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 800228c:	4572      	cmp	r2, lr
 800228e:	d1cf      	bne.n	8002230 <uart_stm32_configure+0x58>
	LL_USART_Disable(config->usart);
 8002290:	f8d5 e000 	ldr.w	lr, [r5]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8002294:	f8de 200c 	ldr.w	r2, [lr, #12]
 8002298:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800229c:	f8ce 200c 	str.w	r2, [lr, #12]
	return LL_USART_GetParity(config->usart);
 80022a0:	6842      	ldr	r2, [r0, #4]
 80022a2:	f8d2 e000 	ldr.w	lr, [r2]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80022a6:	f8de 200c 	ldr.w	r2, [lr, #12]
 80022aa:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 80022ae:	4297      	cmp	r7, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 80022b0:	bf1f      	itttt	ne
 80022b2:	f8de 200c 	ldrne.w	r2, [lr, #12]
 80022b6:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80022ba:	433a      	orrne	r2, r7
 80022bc:	f8ce 200c 	strne.w	r2, [lr, #12]
	return LL_USART_GetStopBitsLength(config->usart);
 80022c0:	6842      	ldr	r2, [r0, #4]
 80022c2:	6817      	ldr	r7, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 80022ca:	4594      	cmp	ip, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80022cc:	bf1f      	itttt	ne
 80022ce:	693a      	ldrne	r2, [r7, #16]
 80022d0:	f422 5240 	bicne.w	r2, r2, #12288	; 0x3000
 80022d4:	ea42 020c 	orrne.w	r2, r2, ip
 80022d8:	613a      	strne	r2, [r7, #16]
	return LL_USART_GetDataWidth(config->usart);
 80022da:	6842      	ldr	r2, [r0, #4]
 80022dc:	6817      	ldr	r7, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 80022e4:	429a      	cmp	r2, r3
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 80022e6:	bf1f      	itttt	ne
 80022e8:	68fa      	ldrne	r2, [r7, #12]
 80022ea:	f422 5280 	bicne.w	r2, r2, #4096	; 0x1000
 80022ee:	4313      	orrne	r3, r2
 80022f0:	60fb      	strne	r3, [r7, #12]
	return LL_USART_GetHWFlowCtrl(config->usart);
 80022f2:	6843      	ldr	r3, [r0, #4]
 80022f4:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80022f6:	6953      	ldr	r3, [r2, #20]
 80022f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 80022fc:	4299      	cmp	r1, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80022fe:	bf1f      	itttt	ne
 8002300:	6953      	ldrne	r3, [r2, #20]
 8002302:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8002306:	430b      	orrne	r3, r1
 8002308:	6153      	strne	r3, [r2, #20]
	if (cfg->baudrate != data->baud_rate) {
 800230a:	6821      	ldr	r1, [r4, #0]
 800230c:	6833      	ldr	r3, [r6, #0]
 800230e:	4299      	cmp	r1, r3
 8002310:	d003      	beq.n	800231a <uart_stm32_configure+0x142>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8002312:	f002 f994 	bl	800463e <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8002316:	6823      	ldr	r3, [r4, #0]
 8002318:	6033      	str	r3, [r6, #0]
	return 0;
 800231a:	2000      	movs	r0, #0
	LL_USART_Enable(config->usart);
 800231c:	682a      	ldr	r2, [r5, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800231e:	68d3      	ldr	r3, [r2, #12]
 8002320:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002324:	60d3      	str	r3, [r2, #12]
};
 8002326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800232a:	bf00      	nop
 800232c:	08005184 	.word	0x08005184
 8002330:	40013800 	.word	0x40013800

08002334 <spi_stm32_init>:
	return false;
#endif
}

static int spi_stm32_init(const struct device *dev)
{
 8002334:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 8002338:	6905      	ldr	r5, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 800233a:	6846      	ldr	r6, [r0, #4]
 800233c:	4c2d      	ldr	r4, [pc, #180]	; (80023f4 <spi_stm32_init+0xc0>)
 800233e:	4620      	mov	r0, r4
 8002340:	f002 fad2 	bl	80048e8 <z_device_is_ready>
	int err;

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 8002344:	2800      	cmp	r0, #0
 8002346:	d052      	beq.n	80023ee <spi_stm32_init+0xba>
 8002348:	68a3      	ldr	r3, [r4, #8]
 800234a:	4620      	mov	r0, r4
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68f1      	ldr	r1, [r6, #12]
 8002350:	4798      	blx	r3
		return -ENODEV;
	}

	err = clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
			       (clock_control_subsys_t) &cfg->pclken[0]);
	if (err < 0) {
 8002352:	2800      	cmp	r0, #0
 8002354:	db48      	blt.n	80023e8 <spi_stm32_init+0xb4>
	ret = pinctrl_lookup_state(config, id, &state);
 8002356:	2100      	movs	r1, #0
 8002358:	6870      	ldr	r0, [r6, #4]
 800235a:	aa01      	add	r2, sp, #4
 800235c:	f002 f908 	bl	8004570 <pinctrl_lookup_state>
	if (ret < 0) {
 8002360:	2800      	cmp	r0, #0
 8002362:	db41      	blt.n	80023e8 <spi_stm32_init+0xb4>
	return pinctrl_apply_state_direct(config, state);
 8002364:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8002366:	2200      	movs	r2, #0
 8002368:	7919      	ldrb	r1, [r3, #4]
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	f7ff fcba 	bl	8001ce4 <pinctrl_configure_pins>
	}

	if (!spi_stm32_is_subghzspi(dev)) {
		/* Configure dt provided device signals when available */
		err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
		if (err < 0) {
 8002370:	2800      	cmp	r0, #0
 8002372:	db39      	blt.n	80023e8 <spi_stm32_init+0xb4>

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8002374:	2601      	movs	r6, #1
 8002376:	68ac      	ldr	r4, [r5, #8]
 8002378:	3408      	adds	r4, #8
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 800237a:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800237e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002382:	f1a4 0208 	sub.w	r2, r4, #8
 8002386:	4293      	cmp	r3, r2
 8002388:	d804      	bhi.n	8002394 <spi_stm32_init+0x60>
	err = spi_context_cs_configure_all(&data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&data->ctx);
 800238a:	4628      	mov	r0, r5
 800238c:	f002 fa7a 	bl	8004884 <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 8002390:	2000      	movs	r0, #0

	return 0;
 8002392:	e029      	b.n	80023e8 <spi_stm32_init+0xb4>
		if (!device_is_ready(cs_gpio->port)) {
 8002394:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8002398:	f002 faa6 	bl	80048e8 <z_device_is_ready>
 800239c:	b338      	cbz	r0, 80023ee <spi_stm32_init+0xba>
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
 800239e:	f854 0c08 	ldr.w	r0, [r4, #-8]
				  spec->pin,
 80023a2:	f814 1c04 	ldrb.w	r1, [r4, #-4]
				  spec->dt_flags | extra_flags);
 80023a6:	f834 3c02 	ldrh.w	r3, [r4, #-2]
	struct gpio_driver_data *data =
 80023aa:	f8d0 c010 	ldr.w	ip, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 80023ae:	07da      	lsls	r2, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80023b0:	f8dc 7000 	ldr.w	r7, [ip]
	return gpio_pin_configure(spec->port,
 80023b4:	bf54      	ite	pl
 80023b6:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 80023ba:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 80023be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80023c2:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80023c6:	07db      	lsls	r3, r3, #31
	const struct gpio_driver_api *api =
 80023c8:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80023cc:	bf4c      	ite	mi
 80023ce:	ea4e 0707 	orrmi.w	r7, lr, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80023d2:	ea27 070e 	bicpl.w	r7, r7, lr
 80023d6:	f8cc 7000 	str.w	r7, [ip]
	return api->pin_configure(port, pin, flags);
 80023da:	f8d8 3000 	ldr.w	r3, [r8]
 80023de:	4798      	blx	r3
		if (ret < 0) {
 80023e0:	2800      	cmp	r0, #0
 80023e2:	f104 0408 	add.w	r4, r4, #8
 80023e6:	dac8      	bge.n	800237a <spi_stm32_init+0x46>
}
 80023e8:	b002      	add	sp, #8
 80023ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ENODEV;
 80023ee:	f06f 0012 	mvn.w	r0, #18
	if (err < 0) {
 80023f2:	e7f9      	b.n	80023e8 <spi_stm32_init+0xb4>
 80023f4:	08004bc4 	.word	0x08004bc4

080023f8 <spi_stm32_transceive>:
{
 80023f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023fc:	4698      	mov	r8, r3
	SPI_TypeDef *spi = cfg->spi;
 80023fe:	6843      	ldr	r3, [r0, #4]
{
 8002400:	4681      	mov	r9, r0
 8002402:	460f      	mov	r7, r1
	if (!tx_bufs && !rx_bufs) {
 8002404:	4692      	mov	sl, r2
	struct spi_stm32_data *data = dev->data;
 8002406:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 8002408:	681e      	ldr	r6, [r3, #0]
{
 800240a:	b08b      	sub	sp, #44	; 0x2c
	if (!tx_bufs && !rx_bufs) {
 800240c:	b912      	cbnz	r2, 8002414 <spi_stm32_transceive+0x1c>
 800240e:	f1b8 0f00 	cmp.w	r8, #0
 8002412:	d033      	beq.n	800247c <spi_stm32_transceive+0x84>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	049a      	lsls	r2, r3, #18
 8002418:	d434      	bmi.n	8002484 <spi_stm32_transceive+0x8c>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
 800241a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800241e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002422:	f104 0010 	add.w	r0, r4, #16
 8002426:	f000 fed3 	bl	80031d0 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 800242a:	6067      	str	r7, [r4, #4]
	const uint32_t scaler[] = {
 800242c:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 80024f4 <spi_stm32_transceive+0xfc>
 8002430:	ad02      	add	r5, sp, #8
 8002432:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002436:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002438:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
	struct spi_stm32_data *data = dev->data;
 800243c:	f8d9 b010 	ldr.w	fp, [r9, #16]
	const uint32_t scaler[] = {
 8002440:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (spi_context_configured(&data->ctx, config)) {
 8002444:	f8db 1000 	ldr.w	r1, [fp]
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8002448:	687b      	ldr	r3, [r7, #4]
	if (spi_context_configured(&data->ctx, config)) {
 800244a:	428f      	cmp	r7, r1
	const struct spi_stm32_config *cfg = dev->config;
 800244c:	f8d9 c004 	ldr.w	ip, [r9, #4]
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8002450:	f3c3 1245 	ubfx	r2, r3, #5, #6
	if (spi_context_configured(&data->ctx, config)) {
 8002454:	f000 8095 	beq.w	8002582 <spi_stm32_transceive+0x18a>
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8002458:	2a08      	cmp	r2, #8
	SPI_TypeDef *spi = cfg->spi;
 800245a:	f8dc 5000 	ldr.w	r5, [ip]
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 800245e:	d018      	beq.n	8002492 <spi_stm32_transceive+0x9a>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 8002460:	2a10      	cmp	r2, #16
 8002462:	d016      	beq.n	8002492 <spi_stm32_transceive+0x9a>
		return -ENOTSUP;
 8002464:	f06f 0885 	mvn.w	r8, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 8002468:	6823      	ldr	r3, [r4, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 8002470:	d104      	bne.n	800247c <spi_stm32_transceive+0x84>
		ctx->owner = NULL;
 8002472:	6063      	str	r3, [r4, #4]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8002474:	f104 0010 	add.w	r0, r4, #16
 8002478:	f000 fe86 	bl	8003188 <z_impl_k_sem_give>
}
 800247c:	4640      	mov	r0, r8
 800247e:	b00b      	add	sp, #44	; 0x2c
 8002480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8002484:	69a3      	ldr	r3, [r4, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1c7      	bne.n	800241a <spi_stm32_transceive+0x22>
		(k_sem_count_get(&ctx->lock) == 0) &&
 800248a:	6863      	ldr	r3, [r4, #4]
 800248c:	429f      	cmp	r7, r3
 800248e:	d1c4      	bne.n	800241a <spi_stm32_transceive+0x22>
 8002490:	e7cc      	b.n	800242c <spi_stm32_transceive+0x34>
	if ((config->operation & SPI_FRAME_FORMAT_TI) == SPI_FRAME_FORMAT_TI) {
 8002492:	041b      	lsls	r3, r3, #16
 8002494:	d4e6      	bmi.n	8002464 <spi_stm32_transceive+0x6c>
	const struct clock_control_driver_api *api =
 8002496:	4818      	ldr	r0, [pc, #96]	; (80024f8 <spi_stm32_transceive+0x100>)
					   (clock_control_subsys_t) &cfg->pclken[0], &clock) < 0) {
 8002498:	f8dc 100c 	ldr.w	r1, [ip, #12]
	if (api->get_rate == NULL) {
 800249c:	6883      	ldr	r3, [r0, #8]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	b913      	cbnz	r3, 80024a8 <spi_stm32_transceive+0xb0>
			return -EIO;
 80024a2:	f06f 0804 	mvn.w	r8, #4
 80024a6:	e7df      	b.n	8002468 <spi_stm32_transceive+0x70>
	return api->get_rate(dev, sys, rate);
 80024a8:	aa01      	add	r2, sp, #4
 80024aa:	4798      	blx	r3
		if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 80024ac:	2800      	cmp	r0, #0
 80024ae:	dbf8      	blt.n	80024a2 <spi_stm32_transceive+0xaa>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 80024b0:	2301      	movs	r3, #1
		uint32_t clk = clock >> br;
 80024b2:	9a01      	ldr	r2, [sp, #4]
		if (clk <= config->frequency) {
 80024b4:	6839      	ldr	r1, [r7, #0]
		uint32_t clk = clock >> br;
 80024b6:	fa22 f003 	lsr.w	r0, r2, r3
		if (clk <= config->frequency) {
 80024ba:	4288      	cmp	r0, r1
 80024bc:	d905      	bls.n	80024ca <spi_stm32_transceive+0xd2>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 80024be:	3301      	adds	r3, #1
 80024c0:	2b09      	cmp	r3, #9
 80024c2:	d1f8      	bne.n	80024b6 <spi_stm32_transceive+0xbe>
		return -EINVAL;
 80024c4:	f06f 0815 	mvn.w	r8, #21
 80024c8:	e7ce      	b.n	8002468 <spi_stm32_transceive+0x70>
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80024ca:	682a      	ldr	r2, [r5, #0]
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 80024cc:	a90a      	add	r1, sp, #40	; 0x28
 80024ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024d2:	602a      	str	r2, [r5, #0]
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 80024d4:	682a      	ldr	r2, [r5, #0]
 80024d6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80024da:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80024de:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80024e2:	4313      	orrs	r3, r2
 80024e4:	602b      	str	r3, [r5, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	0798      	lsls	r0, r3, #30
 80024ea:	d407      	bmi.n	80024fc <spi_stm32_transceive+0x104>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 80024ec:	682b      	ldr	r3, [r5, #0]
 80024ee:	f023 0302 	bic.w	r3, r3, #2
 80024f2:	e006      	b.n	8002502 <spi_stm32_transceive+0x10a>
 80024f4:	08004e6c 	.word	0x08004e6c
 80024f8:	08004bc4 	.word	0x08004bc4
 80024fc:	682b      	ldr	r3, [r5, #0]
 80024fe:	f043 0302 	orr.w	r3, r3, #2
 8002502:	602b      	str	r3, [r5, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f013 0f04 	tst.w	r3, #4
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 800250a:	682b      	ldr	r3, [r5, #0]
 800250c:	bf14      	ite	ne
 800250e:	f043 0301 	orrne.w	r3, r3, #1
 8002512:	f023 0301 	biceq.w	r3, r3, #1
 8002516:	602b      	str	r3, [r5, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8002518:	682b      	ldr	r3, [r5, #0]
 800251a:	f423 4344 	bic.w	r3, r3, #50176	; 0xc400
 800251e:	602b      	str	r3, [r5, #0]
	if (config->operation & SPI_TRANSFER_LSB) {
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f013 0f10 	tst.w	r3, #16
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8002526:	682b      	ldr	r3, [r5, #0]
 8002528:	bf14      	ite	ne
 800252a:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
 800252e:	f023 0380 	biceq.w	r3, r3, #128	; 0x80
 8002532:	602b      	str	r3, [r5, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 8002534:	682b      	ldr	r3, [r5, #0]
 8002536:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800253a:	602b      	str	r3, [r5, #0]
	if (spi_cs_is_gpio(config) || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 80cf 	beq.w	80026e2 <spi_stm32_transceive+0x2ea>
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8002544:	682b      	ldr	r3, [r5, #0]
 8002546:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800254a:	602b      	str	r3, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800254c:	686b      	ldr	r3, [r5, #4]
 800254e:	f023 0304 	bic.w	r3, r3, #4
 8002552:	606b      	str	r3, [r5, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f013 0f01 	tst.w	r3, #1
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 800255a:	682b      	ldr	r3, [r5, #0]
 800255c:	bf14      	ite	ne
 800255e:	f423 7382 	bicne.w	r3, r3, #260	; 0x104
 8002562:	f443 7382 	orreq.w	r3, r3, #260	; 0x104
 8002566:	602b      	str	r3, [r5, #0]
	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800256e:	2b08      	cmp	r3, #8
  MODIFY_REG(SPIx->CR1, SPI_CR1_DFF, DataWidth);
 8002570:	682b      	ldr	r3, [r5, #0]
 8002572:	bf0c      	ite	eq
 8002574:	f423 6300 	biceq.w	r3, r3, #2048	; 0x800
 8002578:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 800257c:	602b      	str	r3, [r5, #0]
	data->ctx.config = config;
 800257e:	f8cb 7000 	str.w	r7, [fp]
	if (SPI_WORD_SIZE_GET(config->operation) == 8) {
 8002582:	687b      	ldr	r3, [r7, #4]
		spi_context_buffers_setup(&data->ctx, tx_bufs, rx_bufs, 2);
 8002584:	4620      	mov	r0, r4
	if (SPI_WORD_SIZE_GET(config->operation) == 8) {
 8002586:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800258a:	2b08      	cmp	r3, #8
		spi_context_buffers_setup(&data->ctx, tx_bufs, rx_bufs, 1);
 800258c:	bf0c      	ite	eq
 800258e:	2301      	moveq	r3, #1
		spi_context_buffers_setup(&data->ctx, tx_bufs, rx_bufs, 2);
 8002590:	2302      	movne	r3, #2
 8002592:	4642      	mov	r2, r8
 8002594:	4651      	mov	r1, sl
 8002596:	f002 f932 	bl	80047fe <spi_context_buffers_setup>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800259a:	6833      	ldr	r3, [r6, #0]
 800259c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025a0:	6033      	str	r3, [r6, #0]
	spi_stm32_cs_control(dev, true);
 80025a2:	f8d9 5010 	ldr.w	r5, [r9, #16]
}

static inline void _spi_context_cs_control(struct spi_context *ctx,
					   bool on, bool force_off)
{
	if (ctx->config && spi_cs_is_gpio(ctx->config)) {
 80025a6:	6828      	ldr	r0, [r5, #0]
 80025a8:	b148      	cbz	r0, 80025be <spi_stm32_transceive+0x1c6>
 80025aa:	68c3      	ldr	r3, [r0, #12]
 80025ac:	b13b      	cbz	r3, 80025be <spi_stm32_transceive+0x1c6>
		if (on) {
			gpio_pin_set_dt(&ctx->config->cs.gpio, 1);
 80025ae:	2101      	movs	r1, #1
 80025b0:	300c      	adds	r0, #12
 80025b2:	f002 f953 	bl	800485c <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs.delay);
 80025b6:	682b      	ldr	r3, [r5, #0]
 80025b8:	6958      	ldr	r0, [r3, #20]
	z_impl_k_busy_wait(usec_to_wait);
 80025ba:	f000 fbaf 	bl	8002d1c <z_impl_k_busy_wait>
	uint16_t operation = data->ctx.config->operation;
 80025be:	6823      	ldr	r3, [r4, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 80025c2:	07d9      	lsls	r1, r3, #31
 80025c4:	f100 80d3 	bmi.w	800276e <spi_stm32_transceive+0x376>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80025c8:	68b2      	ldr	r2, [r6, #8]
 80025ca:	0792      	lsls	r2, r2, #30
 80025cc:	d5fc      	bpl.n	80025c8 <spi_stm32_transceive+0x1d0>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80025ce:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80025d2:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 80025d4:	6c62      	ldr	r2, [r4, #68]	; 0x44
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80025d6:	f040 809b 	bne.w	8002710 <spi_stm32_transceive+0x318>
}

static ALWAYS_INLINE
bool spi_context_tx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->tx_buf && ctx->tx_len);
 80025da:	2a00      	cmp	r2, #0
 80025dc:	f000 8090 	beq.w	8002700 <spi_stm32_transceive+0x308>
 80025e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80025e2:	b103      	cbz	r3, 80025e6 <spi_stm32_transceive+0x1ee>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 80025e4:	7813      	ldrb	r3, [r2, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 80025e6:	b2db      	uxtb	r3, r3
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 80025e8:	7333      	strb	r3, [r6, #12]
	if (!ctx->tx_len) {
 80025ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80025ec:	b1a3      	cbz	r3, 8002618 <spi_stm32_transceive+0x220>
	ctx->tx_len -= len;
 80025ee:	3b01      	subs	r3, #1
 80025f0:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f040 8086 	bne.w	8002704 <spi_stm32_transceive+0x30c>
		++ctx->current_tx;
 80025f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80025fa:	3308      	adds	r3, #8
 80025fc:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
 80025fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002600:	3b01      	subs	r3, #1
 8002602:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
 8002604:	2301      	movs	r3, #1
 8002606:	f104 0248 	add.w	r2, r4, #72	; 0x48
 800260a:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800260e:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8002612:	f002 f8de 	bl	80047d2 <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 8002616:	6460      	str	r0, [r4, #68]	; 0x44
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002618:	68b3      	ldr	r3, [r6, #8]
 800261a:	07df      	lsls	r7, r3, #31
 800261c:	d5fc      	bpl.n	8002618 <spi_stm32_transceive+0x220>
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 800261e:	e9d4 3113 	ldrd	r3, r1, [r4, #76]	; 0x4c
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8002622:	6822      	ldr	r2, [r4, #0]
 8002624:	6852      	ldr	r2, [r2, #4]
 8002626:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800262a:	2a08      	cmp	r2, #8
 800262c:	f040 808c 	bne.w	8002748 <spi_stm32_transceive+0x350>
  return (*((__IO uint8_t *)&SPIx->DR));
 8002630:	7b32      	ldrb	r2, [r6, #12]
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	b10b      	cbz	r3, 800263a <spi_stm32_transceive+0x242>
 8002636:	b101      	cbz	r1, 800263a <spi_stm32_transceive+0x242>
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 8002638:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 800263a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800263c:	b1a3      	cbz	r3, 8002668 <spi_stm32_transceive+0x270>
	ctx->rx_len -= len;
 800263e:	3b01      	subs	r3, #1
 8002640:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
 8002642:	2b00      	cmp	r3, #0
 8002644:	f040 80e9 	bne.w	800281a <spi_stm32_transceive+0x422>
		++ctx->current_rx;
 8002648:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800264a:	3308      	adds	r3, #8
 800264c:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
 800264e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002650:	3b01      	subs	r3, #1
 8002652:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
 8002654:	2301      	movs	r3, #1
 8002656:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800265a:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800265e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8002662:	f002 f8b6 	bl	80047d2 <spi_context_get_next_buf>
		ctx->rx_buf = (uint8_t *)
 8002666:	64e0      	str	r0, [r4, #76]	; 0x4c
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 8002668:	68b3      	ldr	r3, [r6, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 800266a:	f013 0f70 	tst.w	r3, #112	; 0x70
 800266e:	f000 80e3 	beq.w	8002838 <spi_stm32_transceive+0x440>
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8002672:	68b3      	ldr	r3, [r6, #8]
 8002674:	0659      	lsls	r1, r3, #25
 8002676:	d505      	bpl.n	8002684 <spi_stm32_transceive+0x28c>
  tmpreg = SPIx->DR;
 8002678:	68f3      	ldr	r3, [r6, #12]
 800267a:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800267c:	9b01      	ldr	r3, [sp, #4]
  tmpreg = SPIx->SR;
 800267e:	68b3      	ldr	r3, [r6, #8]
 8002680:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8002682:	9b01      	ldr	r3, [sp, #4]
		return -EIO;
 8002684:	f06f 0804 	mvn.w	r8, #4
	SPI_TypeDef *spi = cfg->spi;
 8002688:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800268c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8002690:	681d      	ldr	r5, [r3, #0]
	if (ctx->config && spi_cs_is_gpio(ctx->config)) {
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	b16b      	cbz	r3, 80026b2 <spi_stm32_transceive+0x2ba>
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	b15a      	cbz	r2, 80026b2 <spi_stm32_transceive+0x2ba>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
 800269a:	6859      	ldr	r1, [r3, #4]
			if (!force_off &&
 800269c:	f411 5680 	ands.w	r6, r1, #4096	; 0x1000
 80026a0:	d107      	bne.n	80026b2 <spi_stm32_transceive+0x2ba>
			k_busy_wait(ctx->config->cs.delay);
 80026a2:	6958      	ldr	r0, [r3, #20]
 80026a4:	f000 fb3a 	bl	8002d1c <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs.gpio, 0);
 80026a8:	6838      	ldr	r0, [r7, #0]
 80026aa:	4631      	mov	r1, r6
 80026ac:	300c      	adds	r0, #12
 80026ae:	f002 f8d5 	bl	800485c <gpio_pin_set_dt.isra.0>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 80026b2:	682b      	ldr	r3, [r5, #0]
 80026b4:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 80026b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026bc:	d102      	bne.n	80026c4 <spi_stm32_transceive+0x2cc>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80026be:	68ab      	ldr	r3, [r5, #8]
 80026c0:	061a      	lsls	r2, r3, #24
 80026c2:	d4fc      	bmi.n	80026be <spi_stm32_transceive+0x2c6>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 80026c4:	68ab      	ldr	r3, [r5, #8]
 80026c6:	069b      	lsls	r3, r3, #26
 80026c8:	d506      	bpl.n	80026d8 <spi_stm32_transceive+0x2e0>
  tmpreg_sr = SPIx->SR;
 80026ca:	68ab      	ldr	r3, [r5, #8]
 80026cc:	9302      	str	r3, [sp, #8]
  (void) tmpreg_sr;
 80026ce:	9b02      	ldr	r3, [sp, #8]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80026d0:	682b      	ldr	r3, [r5, #0]
 80026d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026d6:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80026d8:	682b      	ldr	r3, [r5, #0]
 80026da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026de:	602b      	str	r3, [r5, #0]
}
 80026e0:	e6c2      	b.n	8002468 <spi_stm32_transceive+0x70>
		if (config->operation & SPI_OP_MODE_SLAVE) {
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f013 0f01 	tst.w	r3, #1
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 80026e8:	682b      	ldr	r3, [r5, #0]
 80026ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026ee:	f47f af2c 	bne.w	800254a <spi_stm32_transceive+0x152>
 80026f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f6:	602b      	str	r3, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 80026f8:	686b      	ldr	r3, [r5, #4]
 80026fa:	f043 0304 	orr.w	r3, r3, #4
 80026fe:	e728      	b.n	8002552 <spi_stm32_transceive+0x15a>
	uint16_t tx_frame = SPI_STM32_TX_NOP;
 8002700:	4613      	mov	r3, r2
 8002702:	e770      	b.n	80025e6 <spi_stm32_transceive+0x1ee>
	} else if (ctx->tx_buf) {
 8002704:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002706:	2b00      	cmp	r3, #0
 8002708:	d086      	beq.n	8002618 <spi_stm32_transceive+0x220>
		ctx->tx_buf += dfs * len;
 800270a:	3301      	adds	r3, #1
 800270c:	6463      	str	r3, [r4, #68]	; 0x44
 800270e:	e783      	b.n	8002618 <spi_stm32_transceive+0x220>
	return !!(ctx->tx_buf && ctx->tx_len);
 8002710:	b192      	cbz	r2, 8002738 <spi_stm32_transceive+0x340>
 8002712:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002714:	b103      	cbz	r3, 8002718 <spi_stm32_transceive+0x320>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 8002716:	8813      	ldrh	r3, [r2, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 8002718:	81b3      	strh	r3, [r6, #12]
	if (!ctx->tx_len) {
 800271a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800271c:	2b00      	cmp	r3, #0
 800271e:	f43f af7b 	beq.w	8002618 <spi_stm32_transceive+0x220>
	ctx->tx_len -= len;
 8002722:	3b01      	subs	r3, #1
 8002724:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
 8002726:	b94b      	cbnz	r3, 800273c <spi_stm32_transceive+0x344>
		++ctx->current_tx;
 8002728:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800272a:	3308      	adds	r3, #8
 800272c:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
 800272e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002730:	3b01      	subs	r3, #1
 8002732:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
 8002734:	2302      	movs	r3, #2
 8002736:	e766      	b.n	8002606 <spi_stm32_transceive+0x20e>
	uint16_t tx_frame = SPI_STM32_TX_NOP;
 8002738:	4613      	mov	r3, r2
 800273a:	e7ed      	b.n	8002718 <spi_stm32_transceive+0x320>
	} else if (ctx->tx_buf) {
 800273c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800273e:	2b00      	cmp	r3, #0
 8002740:	f43f af6a 	beq.w	8002618 <spi_stm32_transceive+0x220>
		ctx->tx_buf += dfs * len;
 8002744:	3302      	adds	r3, #2
 8002746:	e7e1      	b.n	800270c <spi_stm32_transceive+0x314>
  return (uint16_t)(READ_REG(SPIx->DR));
 8002748:	68f2      	ldr	r2, [r6, #12]
	return !!(ctx->rx_buf && ctx->rx_len);
 800274a:	b10b      	cbz	r3, 8002750 <spi_stm32_transceive+0x358>
 800274c:	b101      	cbz	r1, 8002750 <spi_stm32_transceive+0x358>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 800274e:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 8002750:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002752:	2b00      	cmp	r3, #0
 8002754:	d088      	beq.n	8002668 <spi_stm32_transceive+0x270>
	ctx->rx_len -= len;
 8002756:	3b01      	subs	r3, #1
 8002758:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
 800275a:	2b00      	cmp	r3, #0
 800275c:	d166      	bne.n	800282c <spi_stm32_transceive+0x434>
		++ctx->current_rx;
 800275e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002760:	3308      	adds	r3, #8
 8002762:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
 8002764:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002766:	3b01      	subs	r3, #1
 8002768:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
 800276a:	2302      	movs	r3, #2
 800276c:	e773      	b.n	8002656 <spi_stm32_transceive+0x25e>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800276e:	68b2      	ldr	r2, [r6, #8]
 8002770:	0795      	lsls	r5, r2, #30
 8002772:	d54d      	bpl.n	8002810 <spi_stm32_transceive+0x418>
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 8002774:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002776:	2a00      	cmp	r2, #0
 8002778:	d04a      	beq.n	8002810 <spi_stm32_transceive+0x418>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800277a:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800277e:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8002780:	6c62      	ldr	r2, [r4, #68]	; 0x44
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8002782:	d130      	bne.n	80027e6 <spi_stm32_transceive+0x3ee>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8002784:	7813      	ldrb	r3, [r2, #0]
  *spidr = TxData;
 8002786:	7333      	strb	r3, [r6, #12]
	if (!ctx->tx_len) {
 8002788:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800278a:	b193      	cbz	r3, 80027b2 <spi_stm32_transceive+0x3ba>
	ctx->tx_len -= len;
 800278c:	3b01      	subs	r3, #1
 800278e:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
 8002790:	bb1b      	cbnz	r3, 80027da <spi_stm32_transceive+0x3e2>
		++ctx->current_tx;
 8002792:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002794:	3308      	adds	r3, #8
 8002796:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
 8002798:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800279a:	3b01      	subs	r3, #1
 800279c:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
 800279e:	2301      	movs	r3, #1
 80027a0:	f104 0248 	add.w	r2, r4, #72	; 0x48
 80027a4:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80027a8:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80027ac:	f002 f811 	bl	80047d2 <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 80027b0:	6460      	str	r0, [r4, #68]	; 0x44
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80027b2:	68b3      	ldr	r3, [r6, #8]
 80027b4:	07d8      	lsls	r0, r3, #31
 80027b6:	f57f af57 	bpl.w	8002668 <spi_stm32_transceive+0x270>
	return !!(ctx->rx_buf && ctx->rx_len);
 80027ba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f43f af53 	beq.w	8002668 <spi_stm32_transceive+0x270>
 80027c2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80027c4:	2a00      	cmp	r2, #0
 80027c6:	f43f af4f 	beq.w	8002668 <spi_stm32_transceive+0x270>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80027ca:	6822      	ldr	r2, [r4, #0]
 80027cc:	6852      	ldr	r2, [r2, #4]
 80027ce:	f3c2 1245 	ubfx	r2, r2, #5, #6
 80027d2:	2a08      	cmp	r2, #8
 80027d4:	d128      	bne.n	8002828 <spi_stm32_transceive+0x430>
  return (*((__IO uint8_t *)&SPIx->DR));
 80027d6:	7b32      	ldrb	r2, [r6, #12]
 80027d8:	e72e      	b.n	8002638 <spi_stm32_transceive+0x240>
	} else if (ctx->tx_buf) {
 80027da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0e8      	beq.n	80027b2 <spi_stm32_transceive+0x3ba>
		ctx->tx_buf += dfs * len;
 80027e0:	3301      	adds	r3, #1
 80027e2:	6463      	str	r3, [r4, #68]	; 0x44
 80027e4:	e7e5      	b.n	80027b2 <spi_stm32_transceive+0x3ba>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 80027e6:	8813      	ldrh	r3, [r2, #0]
  *spidr = TxData;
 80027e8:	81b3      	strh	r3, [r6, #12]
	if (!ctx->tx_len) {
 80027ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0e0      	beq.n	80027b2 <spi_stm32_transceive+0x3ba>
	ctx->tx_len -= len;
 80027f0:	3b01      	subs	r3, #1
 80027f2:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
 80027f4:	b93b      	cbnz	r3, 8002806 <spi_stm32_transceive+0x40e>
		++ctx->current_tx;
 80027f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80027f8:	3308      	adds	r3, #8
 80027fa:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
 80027fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027fe:	3b01      	subs	r3, #1
 8002800:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
 8002802:	2302      	movs	r3, #2
 8002804:	e7cc      	b.n	80027a0 <spi_stm32_transceive+0x3a8>
	} else if (ctx->tx_buf) {
 8002806:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0d2      	beq.n	80027b2 <spi_stm32_transceive+0x3ba>
		ctx->tx_buf += dfs * len;
 800280c:	3302      	adds	r3, #2
 800280e:	e7e8      	b.n	80027e2 <spi_stm32_transceive+0x3ea>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8002810:	6873      	ldr	r3, [r6, #4]
 8002812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002816:	6073      	str	r3, [r6, #4]
#if DT_HAS_COMPAT_STATUS_OKAY(st_stm32h7_spi)
	LL_SPI_DisableIT_TXP(spi);
#else
	LL_SPI_DisableIT_TXE(spi);
#endif /* st_stm32h7_spi */
}
 8002818:	e7cb      	b.n	80027b2 <spi_stm32_transceive+0x3ba>
	} else if (ctx->rx_buf) {
 800281a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800281c:	2b00      	cmp	r3, #0
 800281e:	f43f af23 	beq.w	8002668 <spi_stm32_transceive+0x270>
		ctx->rx_buf += dfs * len;
 8002822:	3301      	adds	r3, #1
 8002824:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002826:	e71f      	b.n	8002668 <spi_stm32_transceive+0x270>
  return (uint16_t)(READ_REG(SPIx->DR));
 8002828:	68f2      	ldr	r2, [r6, #12]
 800282a:	e790      	b.n	800274e <spi_stm32_transceive+0x356>
	} else if (ctx->rx_buf) {
 800282c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800282e:	2b00      	cmp	r3, #0
 8002830:	f43f af1a 	beq.w	8002668 <spi_stm32_transceive+0x270>
		ctx->rx_buf += dfs * len;
 8002834:	3302      	adds	r3, #2
 8002836:	e7f5      	b.n	8002824 <spi_stm32_transceive+0x42c>
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 8002838:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800283a:	2b00      	cmp	r3, #0
 800283c:	f47f aebf 	bne.w	80025be <spi_stm32_transceive+0x1c6>
 8002840:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002842:	2b00      	cmp	r3, #0
 8002844:	f47f aebb 	bne.w	80025be <spi_stm32_transceive+0x1c6>
		ret = spi_stm32_shift_frames(spi, data);
 8002848:	4698      	mov	r8, r3
 800284a:	e71d      	b.n	8002688 <spi_stm32_transceive+0x290>

0800284c <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 800284c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8002850:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 8002852:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8002854:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8002856:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8002858:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <elapsed+0x34>)
 800285e:	4909      	ldr	r1, [pc, #36]	; (8002884 <elapsed+0x38>)
 8002860:	d101      	bne.n	8002866 <elapsed+0x1a>
	    || (val1 < val2)) {
 8002862:	4282      	cmp	r2, r0
 8002864:	d206      	bcs.n	8002874 <elapsed+0x28>
		overflow_cyc += last_load;
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	680c      	ldr	r4, [r1, #0]
 800286a:	4422      	add	r2, r4
 800286c:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 800286e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002872:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	680a      	ldr	r2, [r1, #0]
 8002878:	4413      	add	r3, r2
}
 800287a:	1a18      	subs	r0, r3, r0
 800287c:	bd10      	pop	{r4, pc}
 800287e:	bf00      	nop
 8002880:	2000086c 	.word	0x2000086c
 8002884:	20000870 	.word	0x20000870

08002888 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002888:	2210      	movs	r2, #16
 800288a:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <sys_clock_driver_init+0x28>)
static int sys_clock_driver_init(void)
{

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
 800288c:	2000      	movs	r0, #0
 800288e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	last_load = CYC_PER_TICK - 1;
 8002892:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002896:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <sys_clock_driver_init+0x2c>)
 8002898:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 800289a:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <sys_clock_driver_init+0x30>)
 800289c:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 800289e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80028a2:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 80028a4:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	f042 0207 	orr.w	r2, r2, #7
 80028ac:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 80028ae:	4770      	bx	lr
 80028b0:	e000ed00 	.word	0xe000ed00
 80028b4:	20000870 	.word	0x20000870
 80028b8:	2000086c 	.word	0x2000086c

080028bc <sys_clock_isr>:
{
 80028bc:	b510      	push	{r4, lr}
	elapsed();
 80028be:	f7ff ffc5 	bl	800284c <elapsed>
	cycle_count += overflow_cyc;
 80028c2:	4910      	ldr	r1, [pc, #64]	; (8002904 <sys_clock_isr+0x48>)
 80028c4:	4b10      	ldr	r3, [pc, #64]	; (8002908 <sys_clock_isr+0x4c>)
 80028c6:	6808      	ldr	r0, [r1, #0]
 80028c8:	e9d3 4200 	ldrd	r4, r2, [r3]
 80028cc:	1900      	adds	r0, r0, r4
 80028ce:	f142 0200 	adc.w	r2, r2, #0
 80028d2:	e9c3 0200 	strd	r0, r2, [r3]
	overflow_cyc = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	600b      	str	r3, [r1, #0]
		dticks = dcycles / CYC_PER_TICK;
 80028da:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
		dcycles = cycle_count - announced_cycles;
 80028de:	4a0b      	ldr	r2, [pc, #44]	; (800290c <sys_clock_isr+0x50>)
 80028e0:	e9d2 4100 	ldrd	r4, r1, [r2]
 80028e4:	1b00      	subs	r0, r0, r4
		dticks = dcycles / CYC_PER_TICK;
 80028e6:	fbb0 f0f3 	udiv	r0, r0, r3
		announced_cycles += dticks * CYC_PER_TICK;
 80028ea:	4343      	muls	r3, r0
 80028ec:	191b      	adds	r3, r3, r4
 80028ee:	f141 0100 	adc.w	r1, r1, #0
 80028f2:	e9c2 3100 	strd	r3, r1, [r2]
		sys_clock_announce(dticks);
 80028f6:	f000 ffdd 	bl	80038b4 <sys_clock_announce>
}
 80028fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_arm_int_exit();
 80028fe:	f7fe bb27 	b.w	8000f50 <z_arm_exc_exit>
 8002902:	bf00      	nop
 8002904:	2000086c 	.word	0x2000086c
 8002908:	20000590 	.word	0x20000590
 800290c:	20000588 	.word	0x20000588

08002910 <sys_clock_set_timeout>:
{
 8002910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002914:	4f36      	ldr	r7, [pc, #216]	; (80029f0 <sys_clock_set_timeout+0xe0>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8002916:	2900      	cmp	r1, #0
 8002918:	d05e      	beq.n	80029d8 <sys_clock_set_timeout+0xc8>
 800291a:	1c42      	adds	r2, r0, #1
 800291c:	d10a      	bne.n	8002934 <sys_clock_set_timeout+0x24>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 800291e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002922:	6913      	ldr	r3, [r2, #16]
 8002924:	f023 0301 	bic.w	r3, r3, #1
 8002928:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 800292a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800292e:	603b      	str	r3, [r7, #0]
}
 8002930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t last_load_ = last_load;
 8002934:	683e      	ldr	r6, [r7, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8002936:	2801      	cmp	r0, #1
 8002938:	dd54      	ble.n	80029e4 <sys_clock_set_timeout+0xd4>
 800293a:	f640 1819 	movw	r8, #2329	; 0x919
 800293e:	4540      	cmp	r0, r8
 8002940:	dc01      	bgt.n	8002946 <sys_clock_set_timeout+0x36>
 8002942:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	__asm__ volatile(
 8002946:	f04f 0310 	mov.w	r3, #16
 800294a:	f3ef 8511 	mrs	r5, BASEPRI
 800294e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002952:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8002956:	f7ff ff79 	bl	800284c <elapsed>
	val1 = SysTick->VAL;
 800295a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	cycle_count += pending;
 800295e:	4925      	ldr	r1, [pc, #148]	; (80029f4 <sys_clock_set_timeout+0xe4>)
	val1 = SysTick->VAL;
 8002960:	699a      	ldr	r2, [r3, #24]
	cycle_count += pending;
 8002962:	e9d1 4300 	ldrd	r4, r3, [r1]
 8002966:	1900      	adds	r0, r0, r4
	overflow_cyc = 0U;
 8002968:	f04f 0400 	mov.w	r4, #0
	cycle_count += pending;
 800296c:	f143 0300 	adc.w	r3, r3, #0
 8002970:	e9c1 0300 	strd	r0, r3, [r1]
	overflow_cyc = 0U;
 8002974:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <sys_clock_set_timeout+0xe8>)
 8002976:	601c      	str	r4, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8002978:	4b20      	ldr	r3, [pc, #128]	; (80029fc <sys_clock_set_timeout+0xec>)
 800297a:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 800297c:	1ac4      	subs	r4, r0, r3
 800297e:	d434      	bmi.n	80029ea <sys_clock_set_timeout+0xda>
		delay = ticks * CYC_PER_TICK;
 8002980:	f44f 5ce1 	mov.w	ip, #7200	; 0x1c20
		delay = DIV_ROUND_UP(delay, CYC_PER_TICK) * CYC_PER_TICK;
 8002984:	fb0c 4408 	mla	r4, ip, r8, r4
 8002988:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 800298c:	341f      	adds	r4, #31
 800298e:	fbb4 f4fc 	udiv	r4, r4, ip
		delay -= unannounced;
 8002992:	1a18      	subs	r0, r3, r0
 8002994:	fb0c 0004 	mla	r0, ip, r4, r0
		delay = MAX(delay, MIN_DELAY);
 8002998:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800299c:	d925      	bls.n	80029ea <sys_clock_set_timeout+0xda>
		if (delay > MAX_CYCLES) {
 800299e:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <sys_clock_set_timeout+0xf0>)
 80029a0:	4298      	cmp	r0, r3
 80029a2:	bf28      	it	cs
 80029a4:	4618      	movcs	r0, r3
	val2 = SysTick->VAL;
 80029a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
		last_load = MIN_DELAY;
 80029aa:	6038      	str	r0, [r7, #0]
	SysTick->LOAD = last_load - 1;
 80029ac:	3801      	subs	r0, #1
	val2 = SysTick->VAL;
 80029ae:	699c      	ldr	r4, [r3, #24]
	SysTick->LOAD = last_load - 1;
 80029b0:	6158      	str	r0, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 80029b2:	2000      	movs	r0, #0
	if (val1 < val2) {
 80029b4:	42a2      	cmp	r2, r4
	SysTick->VAL = 0; /* resets timer to last_load */
 80029b6:	6198      	str	r0, [r3, #24]
	if (val1 < val2) {
 80029b8:	eba2 0304 	sub.w	r3, r2, r4
		cycle_count += (val1 + (last_load_ - val2));
 80029bc:	bf38      	it	cc
 80029be:	199b      	addcc	r3, r3, r6
		cycle_count += (val1 - val2);
 80029c0:	e9d1 0200 	ldrd	r0, r2, [r1]
 80029c4:	181b      	adds	r3, r3, r0
 80029c6:	f142 0200 	adc.w	r2, r2, #0
 80029ca:	e9c1 3200 	strd	r3, r2, [r1]
	__asm__ volatile(
 80029ce:	f385 8811 	msr	BASEPRI, r5
 80029d2:	f3bf 8f6f 	isb	sy
 80029d6:	e7ab      	b.n	8002930 <sys_clock_set_timeout+0x20>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 80029d8:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 80029da:	683e      	ldr	r6, [r7, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 80029dc:	d1ab      	bne.n	8002936 <sys_clock_set_timeout+0x26>
 80029de:	f640 1019 	movw	r0, #2329	; 0x919
 80029e2:	e7ae      	b.n	8002942 <sys_clock_set_timeout+0x32>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 80029e4:	f04f 0800 	mov.w	r8, #0
 80029e8:	e7ad      	b.n	8002946 <sys_clock_set_timeout+0x36>
 80029ea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80029ee:	e7da      	b.n	80029a6 <sys_clock_set_timeout+0x96>
 80029f0:	20000870 	.word	0x20000870
 80029f4:	20000590 	.word	0x20000590
 80029f8:	2000086c 	.word	0x2000086c
 80029fc:	20000588 	.word	0x20000588
 8002a00:	00ffdf20 	.word	0x00ffdf20

08002a04 <sys_clock_elapsed>:
{
 8002a04:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8002a06:	f04f 0310 	mov.w	r3, #16
 8002a0a:	f3ef 8511 	mrs	r5, BASEPRI
 8002a0e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002a12:	f3bf 8f6f 	isb	sy
	uint32_t unannounced = cycle_count - announced_cycles;
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <sys_clock_elapsed+0x34>)
 8002a18:	681c      	ldr	r4, [r3, #0]
 8002a1a:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <sys_clock_elapsed+0x38>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	1ae4      	subs	r4, r4, r3
	uint32_t cyc = elapsed() + unannounced;
 8002a20:	f7ff ff14 	bl	800284c <elapsed>
	__asm__ volatile(
 8002a24:	f385 8811 	msr	BASEPRI, r5
 8002a28:	f3bf 8f6f 	isb	sy
}
 8002a2c:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
	uint32_t cyc = elapsed() + unannounced;
 8002a30:	4420      	add	r0, r4
}
 8002a32:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a36:	bd38      	pop	{r3, r4, r5, pc}
 8002a38:	20000590 	.word	0x20000590
 8002a3c:	20000588 	.word	0x20000588

08002a40 <sys_clock_cycle_get_32>:
{
 8002a40:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8002a42:	f04f 0310 	mov.w	r3, #16
 8002a46:	f3ef 8511 	mrs	r5, BASEPRI
 8002a4a:	f383 8812 	msr	BASEPRI_MAX, r3
 8002a4e:	f3bf 8f6f 	isb	sy
	uint32_t ret = cycle_count;
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <sys_clock_cycle_get_32+0x28>)
 8002a54:	681c      	ldr	r4, [r3, #0]
	ret += elapsed();
 8002a56:	f7ff fef9 	bl	800284c <elapsed>
	__asm__ volatile(
 8002a5a:	f385 8811 	msr	BASEPRI, r5
 8002a5e:	f3bf 8f6f 	isb	sy
}
 8002a62:	4420      	add	r0, r4
 8002a64:	bd38      	pop	{r3, r4, r5, pc}
 8002a66:	bf00      	nop
 8002a68:	20000590 	.word	0x20000590

08002a6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a6c:	b530      	push	{r4, r5, lr}
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a6e:	4b18      	ldr	r3, [pc, #96]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8002a70:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a72:	ac02      	add	r4, sp, #8
 8002a74:	f103 0510 	add.w	r5, r3, #16
 8002a78:	4622      	mov	r2, r4
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	6859      	ldr	r1, [r3, #4]
 8002a7e:	3308      	adds	r3, #8
 8002a80:	c203      	stmia	r2!, {r0, r1}
 8002a82:	42ab      	cmp	r3, r5
 8002a84:	4614      	mov	r4, r2
 8002a86:	d1f7      	bne.n	8002a78 <HAL_RCC_GetSysClockFreq+0xc>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a88:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t sysclockfreq = 0U;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a8c:	4911      	ldr	r1, [pc, #68]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a8e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8002a92:	684b      	ldr	r3, [r1, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a94:	f003 020c 	and.w	r2, r3, #12
 8002a98:	2a08      	cmp	r2, #8
 8002a9a:	d117      	bne.n	8002acc <HAL_RCC_GetSysClockFreq+0x60>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a9c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002aa0:	3218      	adds	r2, #24
 8002aa2:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aa4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aa6:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aaa:	d50c      	bpl.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x5a>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002aac:	684b      	ldr	r3, [r1, #4]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aae:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ab0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ab4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ab6:	3318      	adds	r3, #24
 8002ab8:	446b      	add	r3, sp
 8002aba:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002abe:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002ac2:	b007      	add	sp, #28
 8002ac4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetSysClockFreq+0x70>)
 8002ac8:	4358      	muls	r0, r3
 8002aca:	e7fa      	b.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8002acc:	4802      	ldr	r0, [pc, #8]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8002ace:	e7f8      	b.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x56>
 8002ad0:	080053b6 	.word	0x080053b6
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	007a1200 	.word	0x007a1200
 8002adc:	003d0900 	.word	0x003d0900

08002ae0 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ae0:	4a16      	ldr	r2, [pc, #88]	; (8002b3c <LL_TIM_Init+0x5c>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002ae2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ae4:	4290      	cmp	r0, r2
 8002ae6:	d00a      	beq.n	8002afe <LL_TIM_Init+0x1e>
 8002ae8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002aec:	d007      	beq.n	8002afe <LL_TIM_Init+0x1e>
 8002aee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002af2:	4290      	cmp	r0, r2
 8002af4:	d003      	beq.n	8002afe <LL_TIM_Init+0x1e>
 8002af6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002afa:	4290      	cmp	r0, r2
 8002afc:	d117      	bne.n	8002b2e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002afe:	684a      	ldr	r2, [r1, #4]
 8002b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b04:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002b06:	68ca      	ldr	r2, [r1, #12]
 8002b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b0c:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002b0e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002b10:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002b12:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002b14:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002b16:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b18:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <LL_TIM_Init+0x5c>)
 8002b1a:	4298      	cmp	r0, r3
 8002b1c:	d101      	bne.n	8002b22 <LL_TIM_Init+0x42>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002b1e:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002b20:	6303      	str	r3, [r0, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002b22:	6943      	ldr	r3, [r0, #20]
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	4770      	bx	lr
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002b2e:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002b30:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002b32:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002b34:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002b36:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b38:	e7f3      	b.n	8002b22 <LL_TIM_Init+0x42>
 8002b3a:	bf00      	nop
 8002b3c:	40012c00 	.word	0x40012c00

08002b40 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8002b40:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 8002b44:	b530      	push	{r4, r5, lr}
  switch (Channel)
 8002b46:	f000 808f 	beq.w	8002c68 <LL_TIM_OC_Init+0x128>
 8002b4a:	d805      	bhi.n	8002b58 <LL_TIM_OC_Init+0x18>
 8002b4c:	2901      	cmp	r1, #1
 8002b4e:	d029      	beq.n	8002ba4 <LL_TIM_OC_Init+0x64>
 8002b50:	2910      	cmp	r1, #16
 8002b52:	d057      	beq.n	8002c04 <LL_TIM_OC_Init+0xc4>
 8002b54:	2001      	movs	r0, #1
    default:
      break;
  }

  return result;
}
 8002b56:	bd30      	pop	{r4, r5, pc}
  switch (Channel)
 8002b58:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002b5c:	d1fa      	bne.n	8002b54 <LL_TIM_OC_Init+0x14>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002b5e:	6a03      	ldr	r3, [r0, #32]
 8002b60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b64:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002b66:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002b68:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002b6a:	69c1      	ldr	r1, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002b6c:	6815      	ldr	r5, [r2, #0]
 8002b6e:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8002b72:	ea41 2105 	orr.w	r1, r1, r5, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002b76:	6915      	ldr	r5, [r2, #16]
 8002b78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b7c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002b80:	6855      	ldr	r5, [r2, #4]
 8002b82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b86:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b8a:	4d50      	ldr	r5, [pc, #320]	; (8002ccc <LL_TIM_OC_Init+0x18c>)
 8002b8c:	42a8      	cmp	r0, r5
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002b8e:	bf02      	ittt	eq
 8002b90:	6995      	ldreq	r5, [r2, #24]
 8002b92:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
 8002b96:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002b9a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002b9c:	61c1      	str	r1, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002b9e:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002ba0:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002ba2:	e02c      	b.n	8002bfe <LL_TIM_OC_Init+0xbe>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002ba4:	6a03      	ldr	r3, [r0, #32]
 8002ba6:	f023 0301 	bic.w	r3, r3, #1
 8002baa:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002bac:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002bae:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002bb0:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002bb2:	6815      	ldr	r5, [r2, #0]
 8002bb4:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8002bb8:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002bba:	6915      	ldr	r5, [r2, #16]
 8002bbc:	f023 0302 	bic.w	r3, r3, #2
 8002bc0:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002bc2:	6855      	ldr	r5, [r2, #4]
 8002bc4:	f023 0301 	bic.w	r3, r3, #1
 8002bc8:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bca:	4d40      	ldr	r5, [pc, #256]	; (8002ccc <LL_TIM_OC_Init+0x18c>)
 8002bcc:	42a8      	cmp	r0, r5
 8002bce:	d112      	bne.n	8002bf6 <LL_TIM_OC_Init+0xb6>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002bd0:	6955      	ldr	r5, [r2, #20]
 8002bd2:	f023 0308 	bic.w	r3, r3, #8
 8002bd6:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002bda:	6895      	ldr	r5, [r2, #8]
 8002bdc:	f023 0304 	bic.w	r3, r3, #4
 8002be0:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002be4:	6995      	ldr	r5, [r2, #24]
 8002be6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002bea:	4329      	orrs	r1, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002bec:	69d5      	ldr	r5, [r2, #28]
 8002bee:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8002bf2:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002bf6:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002bf8:	6184      	str	r4, [r0, #24]
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002bfa:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002bfc:	6342      	str	r2, [r0, #52]	; 0x34
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002bfe:	6203      	str	r3, [r0, #32]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002c00:	2000      	movs	r0, #0
 8002c02:	e7a8      	b.n	8002b56 <LL_TIM_OC_Init+0x16>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002c04:	6a03      	ldr	r3, [r0, #32]
 8002c06:	f023 0310 	bic.w	r3, r3, #16
 8002c0a:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002c0c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002c0e:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002c10:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002c12:	6815      	ldr	r5, [r2, #0]
 8002c14:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8002c18:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002c1c:	6915      	ldr	r5, [r2, #16]
 8002c1e:	f023 0320 	bic.w	r3, r3, #32
 8002c22:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002c26:	6855      	ldr	r5, [r2, #4]
 8002c28:	f023 0310 	bic.w	r3, r3, #16
 8002c2c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c30:	4d26      	ldr	r5, [pc, #152]	; (8002ccc <LL_TIM_OC_Init+0x18c>)
 8002c32:	42a8      	cmp	r0, r5
 8002c34:	d113      	bne.n	8002c5e <LL_TIM_OC_Init+0x11e>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002c36:	6955      	ldr	r5, [r2, #20]
 8002c38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c3c:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002c40:	6895      	ldr	r5, [r2, #8]
 8002c42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c46:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002c4a:	6995      	ldr	r5, [r2, #24]
 8002c4c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002c50:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002c54:	69d5      	ldr	r5, [r2, #28]
 8002c56:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8002c5a:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002c5e:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002c60:	6184      	str	r4, [r0, #24]
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002c62:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002c64:	6382      	str	r2, [r0, #56]	; 0x38
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002c66:	e7ca      	b.n	8002bfe <LL_TIM_OC_Init+0xbe>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002c68:	6a03      	ldr	r3, [r0, #32]
 8002c6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c6e:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002c70:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002c72:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002c74:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002c76:	6815      	ldr	r5, [r2, #0]
 8002c78:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8002c7c:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002c7e:	6915      	ldr	r5, [r2, #16]
 8002c80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c84:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002c88:	6855      	ldr	r5, [r2, #4]
 8002c8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c8e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c92:	4d0e      	ldr	r5, [pc, #56]	; (8002ccc <LL_TIM_OC_Init+0x18c>)
 8002c94:	42a8      	cmp	r0, r5
 8002c96:	d113      	bne.n	8002cc0 <LL_TIM_OC_Init+0x180>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002c98:	6955      	ldr	r5, [r2, #20]
 8002c9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c9e:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002ca2:	6895      	ldr	r5, [r2, #8]
 8002ca4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ca8:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002cac:	6995      	ldr	r5, [r2, #24]
 8002cae:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8002cb2:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002cb6:	69d5      	ldr	r5, [r2, #28]
 8002cb8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8002cbc:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002cc0:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002cc2:	61c4      	str	r4, [r0, #28]
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002cc4:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002cc6:	63c2      	str	r2, [r0, #60]	; 0x3c
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002cc8:	e799      	b.n	8002bfe <LL_TIM_OC_Init+0xbe>
 8002cca:	bf00      	nop
 8002ccc:	40012c00 	.word	0x40012c00

08002cd0 <LL_SetFlashLatency>:
  uint32_t getlatency;
  uint32_t latency = LL_FLASH_LATENCY_0; /* default value 0WS */
  ErrorStatus status = SUCCESS;

  /* Frequency cannot be equal to 0 */
  if (Frequency == 0U)
 8002cd0:	b1d8      	cbz	r0, 8002d0a <LL_SetFlashLatency+0x3a>
  {
    status = ERROR;
  }
  else
  {
    if (Frequency > UTILS_LATENCY2_FREQ)
 8002cd2:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <LL_SetFlashLatency+0x40>)
 8002cd4:	4298      	cmp	r0, r3
 8002cd6:	d816      	bhi.n	8002d06 <LL_SetFlashLatency+0x36>
      /* 48 < SYSCLK <= 72 => 2WS (3 CPU cycles) */
      latency = LL_FLASH_LATENCY_2;
    }
    else
    {
      if (Frequency > UTILS_LATENCY1_FREQ)
 8002cd8:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <LL_SetFlashLatency+0x44>)
 8002cda:	4298      	cmp	r0, r3
 8002cdc:	bf94      	ite	ls
 8002cde:	2000      	movls	r0, #0
 8002ce0:	2001      	movhi	r0, #1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002ce2:	4a0d      	ldr	r2, [pc, #52]	; (8002d18 <LL_SetFlashLatency+0x48>)
 8002ce4:	6813      	ldr	r3, [r2, #0]
 8002ce6:	f023 0307 	bic.w	r3, r3, #7
 8002cea:	4303      	orrs	r3, r0
 8002cec:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002cee:	6813      	ldr	r3, [r2, #0]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
      {
        /* Wait for Flash latency to be updated */
        getlatency = LL_FLASH_GetLatency();
        timeout--;
      }
      while ((getlatency != latency) && (timeout > 0));
 8002cf4:	4298      	cmp	r0, r3
 8002cf6:	bf1c      	itt	ne
 8002cf8:	6813      	ldrne	r3, [r2, #0]
 8002cfa:	f003 0307 	andne.w	r3, r3, #7

      if (getlatency != latency)
 8002cfe:	1ac0      	subs	r0, r0, r3
 8002d00:	bf18      	it	ne
 8002d02:	2001      	movne	r0, #1
 8002d04:	4770      	bx	lr
      latency = LL_FLASH_LATENCY_2;
 8002d06:	2002      	movs	r0, #2
 8002d08:	e7eb      	b.n	8002ce2 <LL_SetFlashLatency+0x12>
    status = ERROR;
 8002d0a:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	02dc6c00 	.word	0x02dc6c00
 8002d14:	016e3600 	.word	0x016e3600
 8002d18:	40022000 	.word	0x40022000

08002d1c <z_impl_k_busy_wait>:
#include <zephyr/drivers/timer/system_timer.h>
#include <zephyr/sys_clock.h>
#include <kernel_arch_interface.h>

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 8002d1c:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 8002d1e:	4604      	mov	r4, r0
 8002d20:	b178      	cbz	r0, 8002d42 <z_impl_k_busy_wait+0x26>
 8002d22:	f7ff fe8d 	bl	8002a40 <sys_clock_cycle_get_32>
 8002d26:	4605      	mov	r5, r0
#elif defined(CONFIG_SYS_CLOCK_EXISTS)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 8002d28:	4806      	ldr	r0, [pc, #24]	; (8002d44 <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	fba4 0100 	umull	r0, r1, r4, r0
 8002d30:	4a05      	ldr	r2, [pc, #20]	; (8002d48 <z_impl_k_busy_wait+0x2c>)
 8002d32:	f7fd f9dd 	bl	80000f0 <__aeabi_uldivmod>
 8002d36:	4604      	mov	r4, r0
 8002d38:	f7ff fe82 	bl	8002a40 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8002d3c:	1b43      	subs	r3, r0, r5
 8002d3e:	42a3      	cmp	r3, r4
 8002d40:	d3fa      	bcc.n	8002d38 <z_impl_k_busy_wait+0x1c>
		arch_nop();
	}
#endif

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 8002d42:	bd38      	pop	{r3, r4, r5, pc}
 8002d44:	044aa200 	.word	0x044aa200
 8002d48:	000f4240 	.word	0x000f4240

08002d4c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8002d4c:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <z_sys_init_run_level+0x44>)
{
 8002d4e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8002d50:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8002d54:	3001      	adds	r0, #1
 8002d56:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8002d5a:	42a6      	cmp	r6, r4
 8002d5c:	d800      	bhi.n	8002d60 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
 8002d5e:	bd70      	pop	{r4, r5, r6, pc}
			if (entry->init_fn.dev != NULL) {
 8002d60:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
 8002d64:	b195      	cbz	r5, 8002d8c <z_sys_init_run_level+0x40>
			if (entry->init_fn.dev != NULL) {
 8002d66:	b153      	cbz	r3, 8002d7e <z_sys_init_run_level+0x32>
				rc = entry->init_fn.dev(dev);
 8002d68:	4628      	mov	r0, r5
 8002d6a:	4798      	blx	r3
				if (rc != 0) {
 8002d6c:	b138      	cbz	r0, 8002d7e <z_sys_init_run_level+0x32>
					if (rc < 0) {
 8002d6e:	2800      	cmp	r0, #0
 8002d70:	bfb8      	it	lt
 8002d72:	4240      	neglt	r0, r0
					if (rc > UINT8_MAX) {
 8002d74:	28ff      	cmp	r0, #255	; 0xff
 8002d76:	bfa8      	it	ge
 8002d78:	20ff      	movge	r0, #255	; 0xff
					dev->state->init_res = rc;
 8002d7a:	68eb      	ldr	r3, [r5, #12]
 8002d7c:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8002d7e:	68ea      	ldr	r2, [r5, #12]
 8002d80:	7853      	ldrb	r3, [r2, #1]
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8002d88:	3408      	adds	r4, #8
 8002d8a:	e7e6      	b.n	8002d5a <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
 8002d8c:	4798      	blx	r3
 8002d8e:	e7fb      	b.n	8002d88 <z_sys_init_run_level+0x3c>
 8002d90:	0800516c 	.word	0x0800516c

08002d94 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 8002d94:	2201      	movs	r2, #1
{
 8002d96:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 8002d98:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 8002d9a:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
 8002d9c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 8002d9e:	f7ff ffd5 	bl	8002d4c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 8002da2:	f000 fdf1 	bl	8003988 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
 8002da6:	2004      	movs	r0, #4
 8002da8:	f7ff ffd0 	bl	8002d4c <z_sys_init_run_level>

	z_init_static_threads();
 8002dac:	f000 f8ea 	bl	8002f84 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
 8002db0:	f7fd fba4 	bl	80004fc <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8002db4:	4a03      	ldr	r2, [pc, #12]	; (8002dc4 <bg_thread_main+0x30>)
 8002db6:	7b13      	ldrb	r3, [r2, #12]
 8002db8:	f023 0301 	bic.w	r3, r3, #1
 8002dbc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8002dbe:	bd08      	pop	{r3, pc}
 8002dc0:	200008a8 	.word	0x200008a8
 8002dc4:	20000608 	.word	0x20000608

08002dc8 <z_bss_zero>:
{
 8002dc8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 8002dca:	4803      	ldr	r0, [pc, #12]	; (8002dd8 <z_bss_zero+0x10>)
 8002dcc:	4a03      	ldr	r2, [pc, #12]	; (8002ddc <z_bss_zero+0x14>)
 8002dce:	2100      	movs	r1, #0
 8002dd0:	1a12      	subs	r2, r2, r0
 8002dd2:	f001 fdbb 	bl	800494c <z_early_memset>
}
 8002dd6:	bd08      	pop	{r3, pc}
 8002dd8:	20000588 	.word	0x20000588
 8002ddc:	200008ac 	.word	0x200008ac

08002de0 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
 8002de0:	2370      	movs	r3, #112	; 0x70
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 8002de2:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
 8002de4:	4e19      	ldr	r6, [pc, #100]	; (8002e4c <z_init_cpu+0x6c>)
	z_setup_new_thread(thread, stack,
 8002de6:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
 8002de8:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
 8002dec:	2300      	movs	r3, #0
{
 8002dee:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 8002df0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002df4:	220f      	movs	r2, #15
 8002df6:	9301      	str	r3, [sp, #4]
 8002df8:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8002dfc:	2314      	movs	r3, #20
{
 8002dfe:	4604      	mov	r4, r0
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8002e00:	4d13      	ldr	r5, [pc, #76]	; (8002e50 <z_init_cpu+0x70>)
	z_setup_new_thread(thread, stack,
 8002e02:	4914      	ldr	r1, [pc, #80]	; (8002e54 <z_init_cpu+0x74>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8002e04:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
 8002e08:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8002e0c:	4b12      	ldr	r3, [pc, #72]	; (8002e58 <z_init_cpu+0x78>)
 8002e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e12:	4630      	mov	r0, r6
 8002e14:	9500      	str	r5, [sp, #0]
 8002e16:	f000 f88b 	bl	8002f30 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8002e1a:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
 8002e1c:	742c      	strb	r4, [r5, #16]
 8002e1e:	f023 0304 	bic.w	r3, r3, #4
 8002e22:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8002e24:	4b0d      	ldr	r3, [pc, #52]	; (8002e5c <z_init_cpu+0x7c>)
 8002e26:	3401      	adds	r4, #1
 8002e28:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].irq_stack =
 8002e2c:	606b      	str	r3, [r5, #4]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 8002e2e:	60ee      	str	r6, [r5, #12]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8002e30:	f3bf 8f5b 	dmb	ish
 8002e34:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <z_init_cpu+0x80>)
 8002e36:	e853 1f00 	ldrex	r1, [r3]
 8002e3a:	3101      	adds	r1, #1
 8002e3c:	e843 1200 	strex	r2, r1, [r3]
 8002e40:	2a00      	cmp	r2, #0
 8002e42:	d1f8      	bne.n	8002e36 <z_init_cpu+0x56>
 8002e44:	f3bf 8f5b 	dmb	ish
	/*
	 * Increment number of CPUs active. The pm subsystem
	 * will keep track of this from here.
	 */
	atomic_inc(&_cpus_active);
}
 8002e48:	b006      	add	sp, #24
 8002e4a:	bd70      	pop	{r4, r5, r6, pc}
 8002e4c:	20000598 	.word	0x20000598
 8002e50:	20000878 	.word	0x20000878
 8002e54:	200010b0 	.word	0x200010b0
 8002e58:	08004955 	.word	0x08004955
 8002e5c:	200008b0 	.word	0x200008b0
 8002e60:	20000874 	.word	0x20000874

08002e64 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
 8002e64:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 8002e66:	2000      	movs	r0, #0
{
 8002e68:	b0a2      	sub	sp, #136	; 0x88
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 8002e6a:	f7ff ff6f 	bl	8002d4c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8002e6e:	4b29      	ldr	r3, [pc, #164]	; (8002f14 <z_cstart+0xb0>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8002e70:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8002e74:	4c28      	ldr	r4, [pc, #160]	; (8002f18 <z_cstart+0xb4>)
 8002e76:	2500      	movs	r5, #0
 8002e78:	6963      	ldr	r3, [r4, #20]

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
 8002e7a:	4e28      	ldr	r6, [pc, #160]	; (8002f1c <z_cstart+0xb8>)
 8002e7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e80:	6163      	str	r3, [r4, #20]
 8002e82:	23f0      	movs	r3, #240	; 0xf0
 8002e84:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8002e88:	77e5      	strb	r5, [r4, #31]
 8002e8a:	7625      	strb	r5, [r4, #24]
 8002e8c:	7665      	strb	r5, [r4, #25]
 8002e8e:	76a5      	strb	r5, [r4, #26]
 8002e90:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8002e94:	6a63      	ldr	r3, [r4, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002e96:	4f22      	ldr	r7, [pc, #136]	; (8002f20 <z_cstart+0xbc>)
 8002e98:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002e9c:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8002e9e:	f7fe f979 	bl	8001194 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8002ea2:	f7fd ff71 	bl	8000d88 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8002ea6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002eaa:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8002eac:	62e3      	str	r3, [r4, #44]	; 0x2c
	dummy_thread->base.user_options = K_ESSENTIAL;
 8002eae:	f240 1301 	movw	r3, #257	; 0x101
 8002eb2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 8002eb6:	ab06      	add	r3, sp, #24
 8002eb8:	60b3      	str	r3, [r6, #8]
	dummy_thread->resource_pool = NULL;
 8002eba:	951f      	str	r5, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8002ebc:	f001 fd13 	bl	80048e6 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	f7ff ff43 	bl	8002d4c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 8002ec6:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
 8002ec8:	4c16      	ldr	r4, [pc, #88]	; (8002f24 <z_cstart+0xc0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 8002eca:	f7ff ff3f 	bl	8002d4c <z_sys_init_run_level>
	z_sched_init();
 8002ece:	f000 fbad 	bl	800362c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002ed2:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <z_cstart+0xc4>)
	_kernel.ready_q.cache = &z_main_thread;
 8002ed4:	6174      	str	r4, [r6, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002ed6:	9305      	str	r3, [sp, #20]
 8002ed8:	2301      	movs	r3, #1
 8002eda:	4914      	ldr	r1, [pc, #80]	; (8002f2c <z_cstart+0xc8>)
 8002edc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ee0:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	463b      	mov	r3, r7
 8002ee8:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8002eec:	9500      	str	r5, [sp, #0]
 8002eee:	f000 f81f 	bl	8002f30 <z_setup_new_thread>
 8002ef2:	4606      	mov	r6, r0
 8002ef4:	7b62      	ldrb	r2, [r4, #13]
	z_ready_thread(&z_main_thread);
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	f022 0204 	bic.w	r2, r2, #4
 8002efc:	7362      	strb	r2, [r4, #13]
 8002efe:	f001 fd8a 	bl	8004a16 <z_ready_thread>
	z_init_cpu(0);
 8002f02:	4628      	mov	r0, r5
 8002f04:	f7ff ff6c 	bl	8002de0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8002f08:	463a      	mov	r2, r7
 8002f0a:	4631      	mov	r1, r6
 8002f0c:	4620      	mov	r0, r4
 8002f0e:	f7fd fff9 	bl	8000f04 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8002f12:	bf00      	nop
 8002f14:	200010b0 	.word	0x200010b0
 8002f18:	e000ed00 	.word	0xe000ed00
 8002f1c:	20000878 	.word	0x20000878
 8002f20:	08002d95 	.word	0x08002d95
 8002f24:	20000608 	.word	0x20000608
 8002f28:	080053c7 	.word	0x080053c7
 8002f2c:	200011b0 	.word	0x200011b0

08002f30 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8002f30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 8002f32:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8002f34:	f100 0558 	add.w	r5, r0, #88	; 0x58
 8002f38:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 8002f3a:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 8002f3c:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
 8002f40:	2500      	movs	r5, #0
{
 8002f42:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
 8002f44:	7346      	strb	r6, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002f46:	3207      	adds	r2, #7

	thread_base->prio = priority;
 8002f48:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002f4a:	f022 0207 	bic.w	r2, r2, #7
	thread_base->prio = priority;
 8002f4e:	7386      	strb	r6, [r0, #14]
	stack_ptr = (char *)stack + stack_obj_size;
 8002f50:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002f52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 8002f54:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->pended_on = NULL;
 8002f58:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 8002f5a:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002f5c:	9202      	str	r2, [sp, #8]
 8002f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f60:	9201      	str	r2, [sp, #4]
 8002f62:	9a08      	ldr	r2, [sp, #32]
 8002f64:	9200      	str	r2, [sp, #0]
 8002f66:	4632      	mov	r2, r6
 8002f68:	f7fd ffb0 	bl	8000ecc <arch_new_thread>
	if (!_current) {
 8002f6c:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
 8002f6e:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	b103      	cbz	r3, 8002f76 <z_setup_new_thread+0x46>
	new_thread->resource_pool = _current->resource_pool;
 8002f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 8002f76:	4630      	mov	r0, r6
 8002f78:	6663      	str	r3, [r4, #100]	; 0x64
 8002f7a:	b004      	add	sp, #16
 8002f7c:	bd70      	pop	{r4, r5, r6, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000878 	.word	0x20000878

08002f84 <z_init_static_threads>:
{
 8002f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f86:	4c22      	ldr	r4, [pc, #136]	; (8003010 <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 8002f88:	4d22      	ldr	r5, [pc, #136]	; (8003014 <z_init_static_threads+0x90>)
{
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 8002f8e:	42ae      	cmp	r6, r5
 8002f90:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8002f94:	d30b      	bcc.n	8002fae <z_init_static_threads+0x2a>
	k_sched_lock();
 8002f96:	f000 fb19 	bl	80035cc <k_sched_lock>
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8002f9a:	260a      	movs	r6, #10
	_FOREACH_STATIC_THREAD(thread_data) {
 8002f9c:	4c1c      	ldr	r4, [pc, #112]	; (8003010 <z_init_static_threads+0x8c>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8002f9e:	4f1e      	ldr	r7, [pc, #120]	; (8003018 <z_init_static_threads+0x94>)
 8002fa0:	42ac      	cmp	r4, r5
 8002fa2:	d320      	bcc.n	8002fe6 <z_init_static_threads+0x62>
}
 8002fa4:	b007      	add	sp, #28
 8002fa6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8002faa:	f000 bb23 	b.w	80035f4 <k_sched_unlock>
		z_setup_new_thread(
 8002fae:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002fb2:	9305      	str	r3, [sp, #20]
 8002fb4:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8002fb8:	9304      	str	r3, [sp, #16]
 8002fba:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8002fbe:	9303      	str	r3, [sp, #12]
 8002fc0:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8002fc4:	9302      	str	r3, [sp, #8]
 8002fc6:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8002fca:	9301      	str	r3, [sp, #4]
 8002fcc:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
 8002fd6:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
 8002fda:	f7ff ffa9 	bl	8002f30 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8002fde:	f854 3c2c 	ldr.w	r3, [r4, #-44]
 8002fe2:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 8002fe4:	e7d2      	b.n	8002f8c <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8002fe6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002fe8:	1c53      	adds	r3, r2, #1
 8002fea:	d009      	beq.n	8003000 <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 8002fec:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002ff0:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002ff4:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 8002ff8:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002ffa:	d103      	bne.n	8003004 <z_init_static_threads+0x80>
	z_sched_start(thread);
 8002ffc:	f000 fac8 	bl	8003590 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8003000:	342c      	adds	r4, #44	; 0x2c
 8003002:	e7cd      	b.n	8002fa0 <z_init_static_threads+0x1c>
 8003004:	4639      	mov	r1, r7
 8003006:	3018      	adds	r0, #24
 8003008:	f000 fbde 	bl	80037c8 <z_add_timeout>
 800300c:	e7f8      	b.n	8003000 <z_init_static_threads+0x7c>
 800300e:	bf00      	nop
 8003010:	08004e34 	.word	0x08004e34
 8003014:	08004e34 	.word	0x08004e34
 8003018:	08004a7b 	.word	0x08004a7b

0800301c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 800301c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003020:	4604      	mov	r4, r0
 8003022:	4617      	mov	r7, r2
 8003024:	461e      	mov	r6, r3
	__asm__ volatile(
 8003026:	f04f 0310 	mov.w	r3, #16
 800302a:	f3ef 8811 	mrs	r8, BASEPRI
 800302e:	f383 8812 	msr	BASEPRI_MAX, r3
 8003032:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8003036:	68c3      	ldr	r3, [r0, #12]
 8003038:	4a33      	ldr	r2, [pc, #204]	; (8003108 <z_impl_k_mutex_lock+0xec>)
 800303a:	b17b      	cbz	r3, 800305c <z_impl_k_mutex_lock+0x40>
 800303c:	6880      	ldr	r0, [r0, #8]
 800303e:	6891      	ldr	r1, [r2, #8]
 8003040:	4288      	cmp	r0, r1
 8003042:	d019      	beq.n	8003078 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 8003044:	ea57 0306 	orrs.w	r3, r7, r6
 8003048:	d118      	bne.n	800307c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
 800304a:	f388 8811 	msr	BASEPRI, r8
 800304e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
 8003052:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 8003056:	b002      	add	sp, #8
 8003058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
 800305c:	6891      	ldr	r1, [r2, #8]
 800305e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
 8003062:	3301      	adds	r3, #1
 8003064:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
 8003066:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 8003068:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
 800306a:	60a3      	str	r3, [r4, #8]
 800306c:	f388 8811 	msr	BASEPRI, r8
 8003070:	f3bf 8f6f 	isb	sy
		return 0;
 8003074:	2000      	movs	r0, #0
 8003076:	e7ee      	b.n	8003056 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
 8003078:	6921      	ldr	r1, [r4, #16]
 800307a:	e7f2      	b.n	8003062 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 800307c:	f991 100e 	ldrsb.w	r1, [r1, #14]
 8003080:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 8003084:	f06f 027e 	mvn.w	r2, #126	; 0x7e
 8003088:	4299      	cmp	r1, r3
 800308a:	bfa8      	it	ge
 800308c:	4619      	movge	r1, r3
 800308e:	4291      	cmp	r1, r2
 8003090:	bfb8      	it	lt
 8003092:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 8003094:	428b      	cmp	r3, r1
 8003096:	dd2e      	ble.n	80030f6 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
 8003098:	f001 fc68 	bl	800496c <adjust_owner_prio.isra.0>
 800309c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 800309e:	4622      	mov	r2, r4
 80030a0:	4641      	mov	r1, r8
 80030a2:	e9cd 7600 	strd	r7, r6, [sp]
 80030a6:	4819      	ldr	r0, [pc, #100]	; (800310c <z_impl_k_mutex_lock+0xf0>)
 80030a8:	f000 f9fc 	bl	80034a4 <z_pend_curr>
	if (got_mutex == 0) {
 80030ac:	2800      	cmp	r0, #0
 80030ae:	d0e1      	beq.n	8003074 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
 80030b0:	f04f 0310 	mov.w	r3, #16
 80030b4:	f3ef 8611 	mrs	r6, BASEPRI
 80030b8:	f383 8812 	msr	BASEPRI_MAX, r3
 80030bc:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
 80030c0:	68a0      	ldr	r0, [r4, #8]
 80030c2:	b1d0      	cbz	r0, 80030fa <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 80030c4:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 80030c6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80030c8:	429c      	cmp	r4, r3
 80030ca:	d00a      	beq.n	80030e2 <z_impl_k_mutex_lock+0xc6>
 80030cc:	b14b      	cbz	r3, 80030e2 <z_impl_k_mutex_lock+0xc6>
 80030ce:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80030d2:	4299      	cmp	r1, r3
 80030d4:	bfa8      	it	ge
 80030d6:	4619      	movge	r1, r3
 80030d8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80030dc:	4299      	cmp	r1, r3
 80030de:	bfb8      	it	lt
 80030e0:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
 80030e2:	f001 fc43 	bl	800496c <adjust_owner_prio.isra.0>
 80030e6:	b140      	cbz	r0, 80030fa <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
 80030e8:	4631      	mov	r1, r6
 80030ea:	4808      	ldr	r0, [pc, #32]	; (800310c <z_impl_k_mutex_lock+0xf0>)
 80030ec:	f000 fa3e 	bl	800356c <z_reschedule>
	return -EAGAIN;
 80030f0:	f06f 000a 	mvn.w	r0, #10
 80030f4:	e7af      	b.n	8003056 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
 80030f6:	2500      	movs	r5, #0
 80030f8:	e7d1      	b.n	800309e <z_impl_k_mutex_lock+0x82>
	if (resched) {
 80030fa:	2d00      	cmp	r5, #0
 80030fc:	d1f4      	bne.n	80030e8 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
 80030fe:	f386 8811 	msr	BASEPRI, r6
 8003102:	f3bf 8f6f 	isb	sy
 8003106:	e7f3      	b.n	80030f0 <z_impl_k_mutex_lock+0xd4>
 8003108:	20000878 	.word	0x20000878
 800310c:	200008a9 	.word	0x200008a9

08003110 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 8003110:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 8003112:	6883      	ldr	r3, [r0, #8]
{
 8003114:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
 8003116:	b36b      	cbz	r3, 8003174 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 8003118:	4a19      	ldr	r2, [pc, #100]	; (8003180 <z_impl_k_mutex_unlock+0x70>)
 800311a:	6892      	ldr	r2, [r2, #8]
 800311c:	4293      	cmp	r3, r2
 800311e:	d12c      	bne.n	800317a <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 8003120:	68c3      	ldr	r3, [r0, #12]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d903      	bls.n	800312e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
 8003126:	3b01      	subs	r3, #1
 8003128:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
 800312a:	2000      	movs	r0, #0
}
 800312c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800312e:	f04f 0310 	mov.w	r3, #16
 8003132:	f3ef 8511 	mrs	r5, BASEPRI
 8003136:	f383 8812 	msr	BASEPRI_MAX, r3
 800313a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 800313e:	6901      	ldr	r1, [r0, #16]
 8003140:	6880      	ldr	r0, [r0, #8]
 8003142:	f001 fc13 	bl	800496c <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 8003146:	4620      	mov	r0, r4
 8003148:	f001 fc9b 	bl	8004a82 <z_unpend_first_thread>
	mutex->owner = new_owner;
 800314c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 800314e:	b158      	cbz	r0, 8003168 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
 8003150:	f990 200e 	ldrsb.w	r2, [r0, #14]
 8003154:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8003156:	2200      	movs	r2, #0
 8003158:	66c2      	str	r2, [r0, #108]	; 0x6c
		z_ready_thread(new_owner);
 800315a:	f001 fc5c 	bl	8004a16 <z_ready_thread>
		z_reschedule(&lock, key);
 800315e:	4629      	mov	r1, r5
 8003160:	4808      	ldr	r0, [pc, #32]	; (8003184 <z_impl_k_mutex_unlock+0x74>)
 8003162:	f000 fa03 	bl	800356c <z_reschedule>
 8003166:	e7e0      	b.n	800312a <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
 8003168:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 800316a:	f385 8811 	msr	BASEPRI, r5
 800316e:	f3bf 8f6f 	isb	sy
 8003172:	e7da      	b.n	800312a <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
 8003174:	f06f 0015 	mvn.w	r0, #21
 8003178:	e7d8      	b.n	800312c <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
 800317a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800317e:	e7d5      	b.n	800312c <z_impl_k_mutex_unlock+0x1c>
 8003180:	20000878 	.word	0x20000878
 8003184:	200008a9 	.word	0x200008a9

08003188 <z_impl_k_sem_give>:
	return false;
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8003188:	b538      	push	{r3, r4, r5, lr}
 800318a:	4604      	mov	r4, r0
	__asm__ volatile(
 800318c:	f04f 0310 	mov.w	r3, #16
 8003190:	f3ef 8511 	mrs	r5, BASEPRI
 8003194:	f383 8812 	msr	BASEPRI_MAX, r3
 8003198:	f3bf 8f6f 	isb	sy
	struct k_thread *thread;
	bool resched = true;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 800319c:	f001 fc71 	bl	8004a82 <z_unpend_first_thread>

	if (thread != NULL) {
 80031a0:	b148      	cbz	r0, 80031b6 <z_impl_k_sem_give+0x2e>
 80031a2:	2200      	movs	r2, #0
 80031a4:	66c2      	str	r2, [r0, #108]	; 0x6c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 80031a6:	f001 fc36 	bl	8004a16 <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		resched = handle_poll_events(sem);
	}

	if (resched) {
		z_reschedule(&lock, key);
 80031aa:	4629      	mov	r1, r5
	} else {
		k_spin_unlock(&lock, key);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 80031ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
 80031b0:	4806      	ldr	r0, [pc, #24]	; (80031cc <z_impl_k_sem_give+0x44>)
 80031b2:	f000 b9db 	b.w	800356c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 80031b6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	bf18      	it	ne
 80031be:	3301      	addne	r3, #1
 80031c0:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 80031c2:	f385 8811 	msr	BASEPRI, r5
 80031c6:	f3bf 8f6f 	isb	sy
}
 80031ca:	bd38      	pop	{r3, r4, r5, pc}
 80031cc:	200008a9 	.word	0x200008a9

080031d0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 80031d0:	b513      	push	{r0, r1, r4, lr}
	__asm__ volatile(
 80031d2:	f04f 0410 	mov.w	r4, #16
 80031d6:	f3ef 8111 	mrs	r1, BASEPRI
 80031da:	f384 8812 	msr	BASEPRI_MAX, r4
 80031de:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 80031e2:	6884      	ldr	r4, [r0, #8]
 80031e4:	b144      	cbz	r4, 80031f8 <z_impl_k_sem_take+0x28>
		sem->count--;
 80031e6:	3c01      	subs	r4, #1
 80031e8:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 80031ea:	f381 8811 	msr	BASEPRI, r1
 80031ee:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 80031f2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 80031f4:	b002      	add	sp, #8
 80031f6:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 80031f8:	ea52 0403 	orrs.w	r4, r2, r3
 80031fc:	d106      	bne.n	800320c <z_impl_k_sem_take+0x3c>
 80031fe:	f381 8811 	msr	BASEPRI, r1
 8003202:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 8003206:	f06f 000f 	mvn.w	r0, #15
 800320a:	e7f3      	b.n	80031f4 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 800320c:	e9cd 2300 	strd	r2, r3, [sp]
 8003210:	4602      	mov	r2, r0
 8003212:	4802      	ldr	r0, [pc, #8]	; (800321c <z_impl_k_sem_take+0x4c>)
 8003214:	f000 f946 	bl	80034a4 <z_pend_curr>
	return ret;
 8003218:	e7ec      	b.n	80031f4 <z_impl_k_sem_take+0x24>
 800321a:	bf00      	nop
 800321c:	200008a9 	.word	0x200008a9

08003220 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
 8003220:	89c3      	ldrh	r3, [r0, #14]
 8003222:	2b7f      	cmp	r3, #127	; 0x7f
 8003224:	d812      	bhi.n	800324c <sliceable+0x2c>
	int ret = slice_ticks;
 8003226:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <sliceable+0x30>)
 8003228:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
 800322a:	b163      	cbz	r3, 8003246 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 800322c:	4b09      	ldr	r3, [pc, #36]	; (8003254 <sliceable+0x34>)
 800322e:	f990 200e 	ldrsb.w	r2, [r0, #14]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	db09      	blt.n	800324c <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
 8003238:	7b43      	ldrb	r3, [r0, #13]
 800323a:	06db      	lsls	r3, r3, #27
 800323c:	d106      	bne.n	800324c <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <sliceable+0x38>)
 8003240:	1ac3      	subs	r3, r0, r3
 8003242:	bf18      	it	ne
 8003244:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
 8003246:	f003 0001 	and.w	r0, r3, #1
 800324a:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
 800324c:	2300      	movs	r3, #0
 800324e:	e7fa      	b.n	8003246 <sliceable+0x26>
 8003250:	200008a0 	.word	0x200008a0
 8003254:	2000089c 	.word	0x2000089c
 8003258:	20000598 	.word	0x20000598

0800325c <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
 800325c:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
 800325e:	4b04      	ldr	r3, [pc, #16]	; (8003270 <slice_timeout+0x14>)
 8003260:	1ac0      	subs	r0, r0, r3
 8003262:	4b04      	ldr	r3, [pc, #16]	; (8003274 <slice_timeout+0x18>)
 8003264:	10c0      	asrs	r0, r0, #3
 8003266:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
 8003268:	4b03      	ldr	r3, [pc, #12]	; (8003278 <slice_timeout+0x1c>)
 800326a:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	20000678 	.word	0x20000678
 8003274:	aaaaaaab 	.word	0xaaaaaaab
 8003278:	200008a9 	.word	0x200008a9

0800327c <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
 800327c:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
 800327e:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
 8003280:	4c0e      	ldr	r4, [pc, #56]	; (80032bc <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
 8003282:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
 8003284:	2318      	movs	r3, #24
 8003286:	fb03 4406 	mla	r4, r3, r6, r4
{
 800328a:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
 800328c:	4620      	mov	r0, r4
 800328e:	f001 fc2a 	bl	8004ae6 <z_abort_timeout>
	slice_expired[cpu] = false;
 8003292:	2200      	movs	r2, #0
 8003294:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <z_reset_time_slice+0x44>)
	if (sliceable(curr)) {
 8003296:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
 8003298:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
 800329a:	f7ff ffc1 	bl	8003220 <sliceable>
 800329e:	b148      	cbz	r0, 80032b4 <z_reset_time_slice+0x38>
	int ret = slice_ticks;
 80032a0:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
 80032a2:	4620      	mov	r0, r4
			      K_TICKS(slice_time(curr) - 1));
	}
}
 80032a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			      K_TICKS(slice_time(curr) - 1));
 80032a8:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
 80032aa:	4907      	ldr	r1, [pc, #28]	; (80032c8 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
 80032ac:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
 80032ae:	17d3      	asrs	r3, r2, #31
 80032b0:	f000 ba8a 	b.w	80037c8 <z_add_timeout>
}
 80032b4:	bd70      	pop	{r4, r5, r6, pc}
 80032b6:	bf00      	nop
 80032b8:	20000878 	.word	0x20000878
 80032bc:	20000678 	.word	0x20000678
 80032c0:	200008a9 	.word	0x200008a9
 80032c4:	200008a0 	.word	0x200008a0
 80032c8:	0800325d 	.word	0x0800325d

080032cc <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
 80032cc:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
 80032ce:	4d0d      	ldr	r5, [pc, #52]	; (8003304 <update_cache+0x38>)
 80032d0:	462b      	mov	r3, r5
 80032d2:	f853 4f18 	ldr.w	r4, [r3, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80032d6:	429c      	cmp	r4, r3
 80032d8:	d000      	beq.n	80032dc <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 80032da:	b904      	cbnz	r4, 80032de <update_cache+0x12>
 80032dc:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 80032de:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 80032e0:	b938      	cbnz	r0, 80032f2 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
 80032e2:	7b5a      	ldrb	r2, [r3, #13]
 80032e4:	06d2      	lsls	r2, r2, #27
 80032e6:	d104      	bne.n	80032f2 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 80032e8:	69a2      	ldr	r2, [r4, #24]
 80032ea:	b912      	cbnz	r2, 80032f2 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
 80032ec:	89da      	ldrh	r2, [r3, #14]
 80032ee:	2a7f      	cmp	r2, #127	; 0x7f
 80032f0:	d805      	bhi.n	80032fe <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
 80032f2:	429c      	cmp	r4, r3
 80032f4:	d002      	beq.n	80032fc <update_cache+0x30>
			z_reset_time_slice(thread);
 80032f6:	4620      	mov	r0, r4
 80032f8:	f7ff ffc0 	bl	800327c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
 80032fc:	4623      	mov	r3, r4
 80032fe:	616b      	str	r3, [r5, #20]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
 8003300:	bd38      	pop	{r3, r4, r5, pc}
 8003302:	bf00      	nop
 8003304:	20000878 	.word	0x20000878

08003308 <move_thread_to_end_of_prio_q>:
{
 8003308:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 800330a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 800330e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8003310:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
 8003312:	7b43      	ldrb	r3, [r0, #13]
 8003314:	da04      	bge.n	8003320 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8003316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800331a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 800331c:	f001 fb41 	bl	80049a2 <sys_dlist_remove>
	return list->head == list;
 8003320:	4a15      	ldr	r2, [pc, #84]	; (8003378 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
 8003322:	7b4b      	ldrb	r3, [r1, #13]
 8003324:	4610      	mov	r0, r2
 8003326:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800332a:	734b      	strb	r3, [r1, #13]
 800332c:	f850 3f18 	ldr.w	r3, [r0, #24]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 8003330:	69d4      	ldr	r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003332:	4283      	cmp	r3, r0
 8003334:	bf08      	it	eq
 8003336:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003338:	b923      	cbnz	r3, 8003344 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
 800333a:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
 800333e:	6021      	str	r1, [r4, #0]
	list->tail = node;
 8003340:	61d1      	str	r1, [r2, #28]
}
 8003342:	e00c      	b.n	800335e <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
 8003344:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 8003348:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 800334c:	42b5      	cmp	r5, r6
 800334e:	d00e      	beq.n	800336e <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8003350:	42ae      	cmp	r6, r5
 8003352:	dd0c      	ble.n	800336e <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 8003354:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 8003356:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 800335a:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 800335c:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 800335e:	6890      	ldr	r0, [r2, #8]
}
 8003360:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 8003364:	1a43      	subs	r3, r0, r1
 8003366:	4258      	negs	r0, r3
 8003368:	4158      	adcs	r0, r3
 800336a:	f7ff bfaf 	b.w	80032cc <update_cache>
	return (node == list->tail) ? NULL : node->next;
 800336e:	429c      	cmp	r4, r3
 8003370:	d0e3      	beq.n	800333a <move_thread_to_end_of_prio_q+0x32>
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	e7e0      	b.n	8003338 <move_thread_to_end_of_prio_q+0x30>
 8003376:	bf00      	nop
 8003378:	20000878 	.word	0x20000878

0800337c <ready_thread>:
{
 800337c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 800337e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8003382:	7b42      	ldrb	r2, [r0, #13]
 8003384:	2b00      	cmp	r3, #0
 8003386:	db29      	blt.n	80033dc <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8003388:	06d3      	lsls	r3, r2, #27
 800338a:	d127      	bne.n	80033dc <ready_thread+0x60>
	return node->next != NULL;
 800338c:	6983      	ldr	r3, [r0, #24]
 800338e:	bb2b      	cbnz	r3, 80033dc <ready_thread+0x60>
	return list->head == list;
 8003390:	4913      	ldr	r1, [pc, #76]	; (80033e0 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
 8003392:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003396:	7342      	strb	r2, [r0, #13]
 8003398:	460a      	mov	r2, r1
 800339a:	f852 4f18 	ldr.w	r4, [r2, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800339e:	4294      	cmp	r4, r2
 80033a0:	bf18      	it	ne
 80033a2:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
 80033a4:	69cc      	ldr	r4, [r1, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80033a6:	b923      	cbnz	r3, 80033b2 <ready_thread+0x36>
	node->prev = tail;
 80033a8:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
 80033ac:	6020      	str	r0, [r4, #0]
	list->tail = node;
 80033ae:	61c8      	str	r0, [r1, #28]
}
 80033b0:	e00c      	b.n	80033cc <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
 80033b2:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 80033b6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 80033ba:	42b5      	cmp	r5, r6
 80033bc:	d00a      	beq.n	80033d4 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80033be:	42ae      	cmp	r6, r5
 80033c0:	dd08      	ble.n	80033d4 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
 80033c2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80033c4:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 80033c8:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 80033ca:	6058      	str	r0, [r3, #4]
		update_cache(0);
 80033cc:	2000      	movs	r0, #0
}
 80033ce:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 80033d0:	f7ff bf7c 	b.w	80032cc <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80033d4:	42a3      	cmp	r3, r4
 80033d6:	d0e7      	beq.n	80033a8 <ready_thread+0x2c>
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	e7e4      	b.n	80033a6 <ready_thread+0x2a>
}
 80033dc:	bc70      	pop	{r4, r5, r6}
 80033de:	4770      	bx	lr
 80033e0:	20000878 	.word	0x20000878

080033e4 <unready_thread>:
{
 80033e4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 80033e6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 80033ea:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 80033ec:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
 80033ee:	7b43      	ldrb	r3, [r0, #13]
 80033f0:	da04      	bge.n	80033fc <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80033f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033f6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80033f8:	f001 fad3 	bl	80049a2 <sys_dlist_remove>
	update_cache(thread == _current);
 80033fc:	4b04      	ldr	r3, [pc, #16]	; (8003410 <unready_thread+0x2c>)
 80033fe:	6898      	ldr	r0, [r3, #8]
 8003400:	1a43      	subs	r3, r0, r1
 8003402:	4258      	negs	r0, r3
 8003404:	4158      	adcs	r0, r3
}
 8003406:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 800340a:	f7ff bf5f 	b.w	80032cc <update_cache>
 800340e:	bf00      	nop
 8003410:	20000878 	.word	0x20000878

08003414 <pend_locked>:
{
 8003414:	b570      	push	{r4, r5, r6, lr}
 8003416:	4615      	mov	r5, r2
 8003418:	461c      	mov	r4, r3
 800341a:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
 800341c:	f001 fad3 	bl	80049c6 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8003420:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003424:	bf08      	it	eq
 8003426:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 800342a:	d008      	beq.n	800343e <pend_locked+0x2a>
 800342c:	462a      	mov	r2, r5
 800342e:	4623      	mov	r3, r4
 8003430:	f106 0018 	add.w	r0, r6, #24
 8003434:	4902      	ldr	r1, [pc, #8]	; (8003440 <pend_locked+0x2c>)
}
 8003436:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800343a:	f000 b9c5 	b.w	80037c8 <z_add_timeout>
 800343e:	bd70      	pop	{r4, r5, r6, pc}
 8003440:	08004a7b 	.word	0x08004a7b

08003444 <z_time_slice>:
{
 8003444:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8003446:	f04f 0310 	mov.w	r3, #16
 800344a:	f3ef 8511 	mrs	r5, BASEPRI
 800344e:	f383 8812 	msr	BASEPRI_MAX, r3
 8003452:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
 8003456:	4b10      	ldr	r3, [pc, #64]	; (8003498 <z_time_slice+0x54>)
	if (pending_current == curr) {
 8003458:	4a10      	ldr	r2, [pc, #64]	; (800349c <z_time_slice+0x58>)
	struct k_thread *curr = _current;
 800345a:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
 800345c:	6810      	ldr	r0, [r2, #0]
 800345e:	42a0      	cmp	r0, r4
 8003460:	d106      	bne.n	8003470 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
 8003462:	f7ff ff0b 	bl	800327c <z_reset_time_slice>
	__asm__ volatile(
 8003466:	f385 8811 	msr	BASEPRI, r5
 800346a:	f3bf 8f6f 	isb	sy
}
 800346e:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 8003470:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
 8003472:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
 8003474:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
 8003476:	4a0a      	ldr	r2, [pc, #40]	; (80034a0 <z_time_slice+0x5c>)
 8003478:	5cd3      	ldrb	r3, [r2, r3]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0f3      	beq.n	8003466 <z_time_slice+0x22>
 800347e:	4620      	mov	r0, r4
 8003480:	f7ff fece 	bl	8003220 <sliceable>
 8003484:	2800      	cmp	r0, #0
 8003486:	d0ee      	beq.n	8003466 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
 8003488:	7b63      	ldrb	r3, [r4, #13]
 800348a:	06db      	lsls	r3, r3, #27
 800348c:	d102      	bne.n	8003494 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
 800348e:	4620      	mov	r0, r4
 8003490:	f7ff ff3a 	bl	8003308 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
 8003494:	4620      	mov	r0, r4
 8003496:	e7e4      	b.n	8003462 <z_time_slice+0x1e>
 8003498:	20000878 	.word	0x20000878
 800349c:	20000898 	.word	0x20000898
 80034a0:	200008a9 	.word	0x200008a9

080034a4 <z_pend_curr>:
{
 80034a4:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
 80034a6:	480c      	ldr	r0, [pc, #48]	; (80034d8 <z_pend_curr+0x34>)
 80034a8:	4d0c      	ldr	r5, [pc, #48]	; (80034dc <z_pend_curr+0x38>)
 80034aa:	6886      	ldr	r6, [r0, #8]
{
 80034ac:	460c      	mov	r4, r1
	pending_current = _current;
 80034ae:	602e      	str	r6, [r5, #0]
{
 80034b0:	4611      	mov	r1, r2
 80034b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
 80034b6:	f04f 0610 	mov.w	r6, #16
 80034ba:	f3ef 8511 	mrs	r5, BASEPRI
 80034be:	f386 8812 	msr	BASEPRI_MAX, r6
 80034c2:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
 80034c6:	6880      	ldr	r0, [r0, #8]
 80034c8:	f7ff ffa4 	bl	8003414 <pend_locked>
	ret = arch_swap(key);
 80034cc:	4620      	mov	r0, r4
}
 80034ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80034d2:	f7fd bcad 	b.w	8000e30 <arch_swap>
 80034d6:	bf00      	nop
 80034d8:	20000878 	.word	0x20000878
 80034dc:	20000898 	.word	0x20000898

080034e0 <z_set_prio>:
{
 80034e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e2:	4604      	mov	r4, r0
 80034e4:	f04f 0310 	mov.w	r3, #16
 80034e8:	f3ef 8611 	mrs	r6, BASEPRI
 80034ec:	f383 8812 	msr	BASEPRI_MAX, r3
 80034f0:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
 80034f4:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
 80034f6:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 80034f8:	06da      	lsls	r2, r3, #27
 80034fa:	d119      	bne.n	8003530 <z_set_prio+0x50>
	return node->next != NULL;
 80034fc:	6985      	ldr	r5, [r0, #24]
 80034fe:	b9bd      	cbnz	r5, 8003530 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8003500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003504:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8003506:	f001 fa4c 	bl	80049a2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 800350a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
 800350c:	4a16      	ldr	r2, [pc, #88]	; (8003568 <z_set_prio+0x88>)
 800350e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003512:	7343      	strb	r3, [r0, #13]
 8003514:	4613      	mov	r3, r2
				thread->base.prio = prio;
 8003516:	7381      	strb	r1, [r0, #14]
 8003518:	f853 0f18 	ldr.w	r0, [r3, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800351c:	4298      	cmp	r0, r3
 800351e:	bf18      	it	ne
 8003520:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
 8003522:	69d0      	ldr	r0, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003524:	b95d      	cbnz	r5, 800353e <z_set_prio+0x5e>
	node->prev = tail;
 8003526:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
 800352a:	6004      	str	r4, [r0, #0]
	list->tail = node;
 800352c:	61d4      	str	r4, [r2, #28]
}
 800352e:	e011      	b.n	8003554 <z_set_prio+0x74>
 8003530:	2000      	movs	r0, #0
			thread->base.prio = prio;
 8003532:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
 8003534:	f386 8811 	msr	BASEPRI, r6
 8003538:	f3bf 8f6f 	isb	sy
}
 800353c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
 800353e:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
 8003542:	42b9      	cmp	r1, r7
 8003544:	d00b      	beq.n	800355e <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8003546:	428f      	cmp	r7, r1
 8003548:	dd09      	ble.n	800355e <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
 800354a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
 800354c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
 8003550:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8003552:	606c      	str	r4, [r5, #4]
			update_cache(1);
 8003554:	2001      	movs	r0, #1
 8003556:	f7ff feb9 	bl	80032cc <update_cache>
 800355a:	2001      	movs	r0, #1
 800355c:	e7ea      	b.n	8003534 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
 800355e:	42a8      	cmp	r0, r5
 8003560:	d0e1      	beq.n	8003526 <z_set_prio+0x46>
 8003562:	682d      	ldr	r5, [r5, #0]
 8003564:	e7de      	b.n	8003524 <z_set_prio+0x44>
 8003566:	bf00      	nop
 8003568:	20000878 	.word	0x20000878

0800356c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800356c:	b949      	cbnz	r1, 8003582 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800356e:	f3ef 8005 	mrs	r0, IPSR
 8003572:	b930      	cbnz	r0, 8003582 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 8003574:	4b05      	ldr	r3, [pc, #20]	; (800358c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 8003576:	695a      	ldr	r2, [r3, #20]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	429a      	cmp	r2, r3
 800357c:	d001      	beq.n	8003582 <z_reschedule+0x16>
 800357e:	f7fd bc57 	b.w	8000e30 <arch_swap>
 8003582:	f381 8811 	msr	BASEPRI, r1
 8003586:	f3bf 8f6f 	isb	sy
}
 800358a:	4770      	bx	lr
 800358c:	20000878 	.word	0x20000878

08003590 <z_sched_start>:
{
 8003590:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003592:	f04f 0210 	mov.w	r2, #16
 8003596:	f3ef 8411 	mrs	r4, BASEPRI
 800359a:	f382 8812 	msr	BASEPRI_MAX, r2
 800359e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 80035a2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 80035a4:	0751      	lsls	r1, r2, #29
 80035a6:	d404      	bmi.n	80035b2 <z_sched_start+0x22>
	__asm__ volatile(
 80035a8:	f384 8811 	msr	BASEPRI, r4
 80035ac:	f3bf 8f6f 	isb	sy
}
 80035b0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80035b2:	f022 0204 	bic.w	r2, r2, #4
 80035b6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 80035b8:	f7ff fee0 	bl	800337c <ready_thread>
	z_reschedule(&sched_spinlock, key);
 80035bc:	4621      	mov	r1, r4
}
 80035be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 80035c2:	4801      	ldr	r0, [pc, #4]	; (80035c8 <z_sched_start+0x38>)
 80035c4:	f7ff bfd2 	b.w	800356c <z_reschedule>
 80035c8:	200008aa 	.word	0x200008aa

080035cc <k_sched_lock>:
	__asm__ volatile(
 80035cc:	f04f 0310 	mov.w	r3, #16
 80035d0:	f3ef 8111 	mrs	r1, BASEPRI
 80035d4:	f383 8812 	msr	BASEPRI_MAX, r3
 80035d8:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 80035dc:	4b04      	ldr	r3, [pc, #16]	; (80035f0 <k_sched_lock+0x24>)
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	7bd3      	ldrb	r3, [r2, #15]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 80035e6:	f381 8811 	msr	BASEPRI, r1
 80035ea:	f3bf 8f6f 	isb	sy
}
 80035ee:	4770      	bx	lr
 80035f0:	20000878 	.word	0x20000878

080035f4 <k_sched_unlock>:
{
 80035f4:	b510      	push	{r4, lr}
	__asm__ volatile(
 80035f6:	f04f 0310 	mov.w	r3, #16
 80035fa:	f3ef 8411 	mrs	r4, BASEPRI
 80035fe:	f383 8812 	msr	BASEPRI_MAX, r3
 8003602:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8003606:	4b08      	ldr	r3, [pc, #32]	; (8003628 <k_sched_unlock+0x34>)
		update_cache(0);
 8003608:	2000      	movs	r0, #0
		++_current->base.sched_locked;
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	7bd3      	ldrb	r3, [r2, #15]
 800360e:	3301      	adds	r3, #1
 8003610:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8003612:	f7ff fe5b 	bl	80032cc <update_cache>
	__asm__ volatile(
 8003616:	f384 8811 	msr	BASEPRI, r4
 800361a:	f3bf 8f6f 	isb	sy
}
 800361e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8003622:	f001 ba56 	b.w	8004ad2 <z_reschedule_unlocked>
 8003626:	bf00      	nop
 8003628:	20000878 	.word	0x20000878

0800362c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 800362c:	4b02      	ldr	r3, [pc, #8]	; (8003638 <z_sched_init+0xc>)
 800362e:	f103 0218 	add.w	r2, r3, #24
	list->tail = (sys_dnode_t *)list;
 8003632:	e9c3 2206 	strd	r2, r2, [r3, #24]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
 8003636:	4770      	bx	lr
 8003638:	20000878 	.word	0x20000878

0800363c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 800363c:	4b01      	ldr	r3, [pc, #4]	; (8003644 <z_impl_z_current_get+0x8>)
 800363e:	6898      	ldr	r0, [r3, #8]
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	20000878 	.word	0x20000878

08003648 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8003648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800364c:	4604      	mov	r4, r0
	__asm__ volatile(
 800364e:	f04f 0310 	mov.w	r3, #16
 8003652:	f3ef 8611 	mrs	r6, BASEPRI
 8003656:	f383 8812 	msr	BASEPRI_MAX, r3
 800365a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
 800365e:	7b03      	ldrb	r3, [r0, #12]
 8003660:	07d9      	lsls	r1, r3, #31
 8003662:	d50b      	bpl.n	800367c <z_thread_abort+0x34>
	__asm__ volatile(
 8003664:	f386 8811 	msr	BASEPRI, r6
 8003668:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
 800366c:	4040      	eors	r0, r0
 800366e:	f380 8811 	msr	BASEPRI, r0
 8003672:	f04f 0004 	mov.w	r0, #4
 8003676:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8003678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 800367c:	7b43      	ldrb	r3, [r0, #13]
 800367e:	071a      	lsls	r2, r3, #28
 8003680:	d504      	bpl.n	800368c <z_thread_abort+0x44>
 8003682:	f386 8811 	msr	BASEPRI, r6
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	e7f5      	b.n	8003678 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 800368c:	f023 0220 	bic.w	r2, r3, #32
 8003690:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 8003694:	09d2      	lsrs	r2, r2, #7
 8003696:	d120      	bne.n	80036da <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8003698:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 800369a:	68a3      	ldr	r3, [r4, #8]
 800369c:	b113      	cbz	r3, 80036a4 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
 800369e:	4620      	mov	r0, r4
 80036a0:	f001 f987 	bl	80049b2 <unpend_thread_no_timeout>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 80036a4:	f104 0018 	add.w	r0, r4, #24
 80036a8:	f001 fa1d 	bl	8004ae6 <z_abort_timeout>
 80036ac:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 80036b0:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
 80036b4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80036b6:	42bd      	cmp	r5, r7
 80036b8:	d000      	beq.n	80036bc <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 80036ba:	b9b5      	cbnz	r5, 80036ea <z_thread_abort+0xa2>
		update_cache(1);
 80036bc:	2001      	movs	r0, #1
 80036be:	f7ff fe05 	bl	80032cc <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 80036c2:	4b10      	ldr	r3, [pc, #64]	; (8003704 <z_thread_abort+0xbc>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	42a3      	cmp	r3, r4
 80036c8:	d1db      	bne.n	8003682 <z_thread_abort+0x3a>
 80036ca:	f3ef 8305 	mrs	r3, IPSR
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1d7      	bne.n	8003682 <z_thread_abort+0x3a>
 80036d2:	4630      	mov	r0, r6
 80036d4:	f7fd fbac 	bl	8000e30 <arch_swap>
	return ret;
 80036d8:	e7d3      	b.n	8003682 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80036da:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 80036de:	f043 0308 	orr.w	r3, r3, #8
 80036e2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80036e4:	f001 f95d 	bl	80049a2 <sys_dlist_remove>
}
 80036e8:	e7d7      	b.n	800369a <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
 80036ea:	4628      	mov	r0, r5
 80036ec:	f001 f961 	bl	80049b2 <unpend_thread_no_timeout>
 80036f0:	f105 0018 	add.w	r0, r5, #24
 80036f4:	f001 f9f7 	bl	8004ae6 <z_abort_timeout>
		ready_thread(thread);
 80036f8:	4628      	mov	r0, r5
 80036fa:	f8c5 806c 	str.w	r8, [r5, #108]	; 0x6c
 80036fe:	f7ff fe3d 	bl	800337c <ready_thread>
 8003702:	e7d7      	b.n	80036b4 <z_thread_abort+0x6c>
 8003704:	20000878 	.word	0x20000878

08003708 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 8003708:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 800370a:	4806      	ldr	r0, [pc, #24]	; (8003724 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 800370c:	4a06      	ldr	r2, [pc, #24]	; (8003728 <z_data_copy+0x20>)
 800370e:	4907      	ldr	r1, [pc, #28]	; (800372c <z_data_copy+0x24>)
 8003710:	1a12      	subs	r2, r2, r0
 8003712:	f001 f91d 	bl	8004950 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8003716:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 800371a:	4a05      	ldr	r2, [pc, #20]	; (8003730 <z_data_copy+0x28>)
 800371c:	4905      	ldr	r1, [pc, #20]	; (8003734 <z_data_copy+0x2c>)
 800371e:	4806      	ldr	r0, [pc, #24]	; (8003738 <z_data_copy+0x30>)
 8003720:	f001 b916 	b.w	8004950 <z_early_memcpy>
 8003724:	20000000 	.word	0x20000000
 8003728:	20000584 	.word	0x20000584
 800372c:	08005414 	.word	0x08005414
 8003730:	00000000 	.word	0x00000000
 8003734:	08005414 	.word	0x08005414
 8003738:	20000000 	.word	0x20000000

0800373c <elapsed>:
	 *
	 * The distinction is implemented by looking at announce_remaining which
	 * will be non-zero while sys_clock_announce() is executing and zero
	 * otherwise.
	 */
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800373c:	4b03      	ldr	r3, [pc, #12]	; (800374c <elapsed+0x10>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	b90b      	cbnz	r3, 8003746 <elapsed+0xa>
 8003742:	f7ff b95f 	b.w	8002a04 <sys_clock_elapsed>
}
 8003746:	2000      	movs	r0, #0
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	200008a4 	.word	0x200008a4

08003750 <next_timeout>:

static int32_t next_timeout(void)
{
 8003750:	b510      	push	{r4, lr}
	return list->head == list;
 8003752:	4b0e      	ldr	r3, [pc, #56]	; (800378c <next_timeout+0x3c>)
 8003754:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003756:	429c      	cmp	r4, r3
 8003758:	d104      	bne.n	8003764 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 800375a:	f7ff ffef 	bl	800373c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
 800375e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
 8003762:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
 8003764:	f7ff ffea 	bl	800373c <elapsed>
	if ((to == NULL) ||
 8003768:	2c00      	cmp	r4, #0
 800376a:	d0f8      	beq.n	800375e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 800376c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8003770:	1a1b      	subs	r3, r3, r0
 8003772:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
 8003776:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800377a:	f172 0100 	sbcs.w	r1, r2, #0
 800377e:	daee      	bge.n	800375e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
 8003780:	2a00      	cmp	r2, #0
 8003782:	bfac      	ite	ge
 8003784:	4618      	movge	r0, r3
 8003786:	2000      	movlt	r0, #0
	return ret;
 8003788:	e7eb      	b.n	8003762 <next_timeout+0x12>
 800378a:	bf00      	nop
 800378c:	200000b0 	.word	0x200000b0

08003790 <remove_timeout>:
{
 8003790:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8003792:	b170      	cbz	r0, 80037b2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 8003794:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <remove_timeout+0x34>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	4298      	cmp	r0, r3
 800379a:	d00a      	beq.n	80037b2 <remove_timeout+0x22>
 800379c:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
 800379e:	b143      	cbz	r3, 80037b2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 80037a0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 80037a4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 80037a8:	1912      	adds	r2, r2, r4
 80037aa:	eb41 0105 	adc.w	r1, r1, r5
 80037ae:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 80037b2:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
 80037b6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80037b8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80037ba:	2300      	movs	r3, #0
	node->prev = NULL;
 80037bc:	e9c0 3300 	strd	r3, r3, [r0]
}
 80037c0:	bd30      	pop	{r4, r5, pc}
 80037c2:	bf00      	nop
 80037c4:	200000b0 	.word	0x200000b0

080037c8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037cc:	bf08      	it	eq
 80037ce:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 80037d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d4:	4604      	mov	r4, r0
 80037d6:	461d      	mov	r5, r3
 80037d8:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80037da:	d05c      	beq.n	8003896 <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 80037dc:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 80037de:	f04f 0310 	mov.w	r3, #16
 80037e2:	f3ef 8711 	mrs	r7, BASEPRI
 80037e6:	f383 8812 	msr	BASEPRI_MAX, r3
 80037ea:	f3bf 8f6f 	isb	sy

	K_SPINLOCK(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 80037ee:	3201      	adds	r2, #1
 80037f0:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
 80037f4:	da24      	bge.n	8003840 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 80037f6:	f06f 0301 	mvn.w	r3, #1
 80037fa:	492c      	ldr	r1, [pc, #176]	; (80038ac <z_add_timeout+0xe4>)
 80037fc:	e9d1 2000 	ldrd	r2, r0, [r1]
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003806:	eb62 0000 	sbc.w	r0, r2, r0
 800380a:	1b9e      	subs	r6, r3, r6
 800380c:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
 8003810:	2e01      	cmp	r6, #1
 8003812:	f170 0300 	sbcs.w	r3, r0, #0
 8003816:	da01      	bge.n	800381c <z_add_timeout+0x54>
 8003818:	2601      	movs	r6, #1
 800381a:	2000      	movs	r0, #0
 800381c:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
 8003820:	4e23      	ldr	r6, [pc, #140]	; (80038b0 <z_add_timeout+0xe8>)
 8003822:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
 8003826:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003828:	45b4      	cmp	ip, r6
 800382a:	bf08      	it	eq
 800382c:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
 8003830:	f1bc 0f00 	cmp.w	ip, #0
 8003834:	d10d      	bne.n	8003852 <z_add_timeout+0x8a>
	node->prev = tail;
 8003836:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
 800383a:	602c      	str	r4, [r5, #0]
	list->tail = node;
 800383c:	6074      	str	r4, [r6, #4]
}
 800383e:	e01c      	b.n	800387a <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
 8003840:	f7ff ff7c 	bl	800373c <elapsed>
 8003844:	3601      	adds	r6, #1
 8003846:	f145 0500 	adc.w	r5, r5, #0
 800384a:	1836      	adds	r6, r6, r0
 800384c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 8003850:	e7e4      	b.n	800381c <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
 8003852:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
 8003856:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 800385a:	4293      	cmp	r3, r2
 800385c:	eb71 0e00 	sbcs.w	lr, r1, r0
 8003860:	da1a      	bge.n	8003898 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
 8003862:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
 8003864:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8003868:	eb60 0001 	sbc.w	r0, r0, r1
 800386c:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
 8003870:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
 8003874:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8003876:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
 800387a:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800387c:	42b3      	cmp	r3, r6
 800387e:	d006      	beq.n	800388e <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8003880:	429c      	cmp	r4, r3
 8003882:	d104      	bne.n	800388e <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
 8003884:	f7ff ff64 	bl	8003750 <next_timeout>
 8003888:	2100      	movs	r1, #0
 800388a:	f7ff f841 	bl	8002910 <sys_clock_set_timeout>
	__asm__ volatile(
 800388e:	f387 8811 	msr	BASEPRI, r7
 8003892:	f3bf 8f6f 	isb	sy
		}
	}
}
 8003896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 800389e:	45ac      	cmp	ip, r5
 80038a0:	e9c4 3104 	strd	r3, r1, [r4, #16]
 80038a4:	d0c7      	beq.n	8003836 <z_add_timeout+0x6e>
 80038a6:	f8dc c000 	ldr.w	ip, [ip]
 80038aa:	e7c1      	b.n	8003830 <z_add_timeout+0x68>
 80038ac:	20000690 	.word	0x20000690
 80038b0:	200000b0 	.word	0x200000b0

080038b4 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
 80038b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
 80038b8:	f04f 0310 	mov.w	r3, #16
 80038bc:	f3ef 8c11 	mrs	ip, BASEPRI
 80038c0:	f383 8812 	msr	BASEPRI_MAX, r3
 80038c4:	f3bf 8f6f 	isb	sy
	return list->head == list;
 80038c8:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 800397c <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 80038cc:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8003980 <sys_clock_announce+0xcc>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
 80038d0:	2400      	movs	r4, #0
	announce_remaining = ticks;
 80038d2:	f8c9 0000 	str.w	r0, [r9]
 80038d6:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
 80038da:	2500      	movs	r5, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80038dc:	4550      	cmp	r0, sl
 80038de:	bf08      	it	eq
 80038e0:	2000      	moveq	r0, #0
		curr_tick += dt;
 80038e2:	4f28      	ldr	r7, [pc, #160]	; (8003984 <sys_clock_announce+0xd0>)
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
 80038e4:	46e0      	mov	r8, ip
 80038e6:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
 80038ea:	f8d9 3000 	ldr.w	r3, [r9]
 80038ee:	b380      	cbz	r0, 8003952 <sys_clock_announce+0x9e>
 80038f0:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
 80038f4:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 80038f8:	42b3      	cmp	r3, r6
 80038fa:	eb7e 0b0c 	sbcs.w	fp, lr, ip
 80038fe:	da05      	bge.n	800390c <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
 8003900:	1af6      	subs	r6, r6, r3
 8003902:	eb6c 040e 	sbc.w	r4, ip, lr
 8003906:	e9c0 6404 	strd	r6, r4, [r0, #16]
 800390a:	e022      	b.n	8003952 <sys_clock_announce+0x9e>
		curr_tick += dt;
 800390c:	18b2      	adds	r2, r6, r2
 800390e:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
 8003912:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
 8003916:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
 800391a:	f7ff ff39 	bl	8003790 <remove_timeout>
	__asm__ volatile(
 800391e:	f388 8811 	msr	BASEPRI, r8
 8003922:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8003926:	6883      	ldr	r3, [r0, #8]
 8003928:	4798      	blx	r3
	__asm__ volatile(
 800392a:	f04f 0310 	mov.w	r3, #16
 800392e:	f3ef 8811 	mrs	r8, BASEPRI
 8003932:	f383 8812 	msr	BASEPRI_MAX, r3
 8003936:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
 800393a:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
 800393e:	f8da 0000 	ldr.w	r0, [sl]
 8003942:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003944:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
 8003946:	46c4      	mov	ip, r8
 8003948:	f8c9 3000 	str.w	r3, [r9]
 800394c:	d1ca      	bne.n	80038e4 <sys_clock_announce+0x30>
		curr_tick += dt;
 800394e:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
 8003952:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 8003954:	189a      	adds	r2, r3, r2
 8003956:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
 800395a:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
 800395e:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
 8003962:	f7ff fef5 	bl	8003750 <next_timeout>
 8003966:	4621      	mov	r1, r4
 8003968:	f7fe ffd2 	bl	8002910 <sys_clock_set_timeout>
	__asm__ volatile(
 800396c:	f388 8811 	msr	BASEPRI, r8
 8003970:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
 8003974:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
 8003978:	f7ff bd64 	b.w	8003444 <z_time_slice>
 800397c:	200000b0 	.word	0x200000b0
 8003980:	200008a4 	.word	0x200008a4
 8003984:	20000690 	.word	0x20000690

08003988 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
 8003988:	4801      	ldr	r0, [pc, #4]	; (8003990 <boot_banner+0x8>)
 800398a:	f000 b839 	b.w	8003a00 <printk>
 800398e:	bf00      	nop
 8003990:	080053cf 	.word	0x080053cf

08003994 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
 8003994:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
 8003996:	4c06      	ldr	r4, [pc, #24]	; (80039b0 <statics_init+0x1c>)
 8003998:	4d06      	ldr	r5, [pc, #24]	; (80039b4 <statics_init+0x20>)
 800399a:	42ac      	cmp	r4, r5
 800399c:	d301      	bcc.n	80039a2 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
 800399e:	2000      	movs	r0, #0
 80039a0:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 80039a2:	4620      	mov	r0, r4
 80039a4:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80039a8:	f001 f8b3 	bl	8004b12 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 80039ac:	3414      	adds	r4, #20
 80039ae:	e7f4      	b.n	800399a <statics_init+0x6>
 80039b0:	20000584 	.word	0x20000584
 80039b4:	20000584 	.word	0x20000584

080039b8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 80039b8:	4770      	bx	lr

080039ba <gpio_pin_configure_dt.constprop.0.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
 80039ba:	4603      	mov	r3, r0
 80039bc:	b4f0      	push	{r4, r5, r6, r7}
				  spec->pin,
 80039be:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
 80039c0:	6800      	ldr	r0, [r0, #0]
				  spec->dt_flags | extra_flags);
 80039c2:	88db      	ldrh	r3, [r3, #6]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80039c4:	2501      	movs	r5, #1
	struct gpio_driver_data *data =
 80039c6:	6906      	ldr	r6, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 80039c8:	07da      	lsls	r2, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80039ca:	6834      	ldr	r4, [r6, #0]
	return gpio_pin_configure(spec->port,
 80039cc:	bf54      	ite	pl
 80039ce:	f443 13d0 	orrpl.w	r3, r3, #1703936	; 0x1a0000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 80039d2:	f483 13b0 	eormi.w	r3, r3, #1441792	; 0x160000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80039d6:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 80039d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80039dc:	07db      	lsls	r3, r3, #31
	const struct gpio_driver_api *api =
 80039de:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80039e0:	bf4c      	ite	mi
 80039e2:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80039e4:	43ac      	bicpl	r4, r5
 80039e6:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
 80039e8:	683b      	ldr	r3, [r7, #0]
}
 80039ea:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
 80039ec:	4718      	bx	r3

080039ee <_ZN16HikariGPIOConfig13pwm_as_sck_onEv>:

void HikariGPIOConfig::pwm_as_sck_on(){

    // pwm_set_dt(&PWM_AS_SCK, PWM_USEC(28.5), PWM_USEC(14.25));
    pwm_set_dt(&PWM_AS_SCK, PWM_USEC(28.5), PWM_USEC(14.25));
 80039ee:	f243 70aa 	movw	r0, #14250	; 0x37aa
 80039f2:	f7fc bce9 	b.w	80003c8 <pwm_set_dt.constprop.0.isra.0>

080039f6 <_ZN16HikariGPIOConfig14pwm_as_sck_offEv>:
    // pwm_set_dt(&PWM_AS_SCK, PWM_USEC(50), PWM_USEC(25));
}

void HikariGPIOConfig::pwm_as_sck_off(){

    pwm_set_dt(&PWM_AS_SCK, PWM_USEC(28.5), PWM_USEC(0));
 80039f6:	2000      	movs	r0, #0
 80039f8:	f7fc bce6 	b.w	80003c8 <pwm_set_dt.constprop.0.isra.0>

080039fc <arch_printk_char_out>:
}
 80039fc:	2000      	movs	r0, #0
 80039fe:	4770      	bx	lr

08003a00 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
 8003a00:	b40f      	push	{r0, r1, r2, r3}
 8003a02:	b507      	push	{r0, r1, r2, lr}
 8003a04:	a904      	add	r1, sp, #16
 8003a06:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 8003a0a:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
 8003a0c:	f7fc fdf2 	bl	80005f4 <vprintk>

	va_end(ap);
}
 8003a10:	b003      	add	sp, #12
 8003a12:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a16:	b004      	add	sp, #16
 8003a18:	4770      	bx	lr

08003a1a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	b508      	push	{r3, lr}
 8003a1e:	4608      	mov	r0, r1
 8003a20:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 8003a22:	461a      	mov	r2, r3
 8003a24:	47a0      	blx	r4
	return z_impl_z_current_get();
 8003a26:	f7ff fe09 	bl	800363c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 8003a2a:	f7fd fbe7 	bl	80011fc <z_impl_k_thread_abort>

08003a2e <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
 8003a2e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8003a32:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
 8003a34:	0840      	lsrs	r0, r0, #1
 8003a36:	4770      	bx	lr

08003a38 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 8003a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3a:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
 8003a3c:	f7ff fff7 	bl	8003a2e <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
 8003a40:	fab0 f080 	clz	r0, r0
 8003a44:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
 8003a48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003a4c:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
 8003a50:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
 8003a52:	1d17      	adds	r7, r2, #4
{
 8003a54:	460c      	mov	r4, r1
 8003a56:	3206      	adds	r2, #6
 8003a58:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
 8003a5a:	b956      	cbnz	r6, 8003a72 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	fa01 f000 	lsl.w	r0, r1, r0
 8003a62:	68d9      	ldr	r1, [r3, #12]
 8003a64:	4301      	orrs	r1, r0
 8003a66:	60d9      	str	r1, [r3, #12]
		b->next = c;
 8003a68:	f8cc 4010 	str.w	r4, [ip, #16]
 8003a6c:	53dd      	strh	r5, [r3, r7]
 8003a6e:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
 8003a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
 8003a72:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
 8003a74:	3104      	adds	r1, #4
 8003a76:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
 8003a78:	53d8      	strh	r0, [r3, r7]
 8003a7a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8003a7e:	529e      	strh	r6, [r3, r2]
 8003a80:	80c5      	strh	r5, [r0, #6]
 8003a82:	525d      	strh	r5, [r3, r1]
 8003a84:	e7f4      	b.n	8003a70 <free_list_add+0x38>

08003a86 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 8003a86:	b4f0      	push	{r4, r5, r6, r7}
 8003a88:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 8003a8a:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8003a8c:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8003a8e:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8003a90:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8003a94:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 8003a98:	1a0e      	subs	r6, r1, r0
 8003a9a:	08f3      	lsrs	r3, r6, #3
	return 31 - __builtin_clz(usable_sz);
 8003a9c:	fab3 f283 	clz	r2, r3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
 8003aa0:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
 8003aa2:	2700      	movs	r7, #0
 8003aa4:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 8003aa6:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
 8003aaa:	00ad      	lsls	r5, r5, #2
	h->end_chunk = heap_sz;
 8003aac:	6083      	str	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8003aae:	3507      	adds	r5, #7
	h->avail_buckets = 0;
 8003ab0:	f844 7f0c 	str.w	r7, [r4, #12]!
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 8003ab4:	f1c2 0220 	rsb	r2, r2, #32
 8003ab8:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 8003aba:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
 8003abe:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
 8003ac2:	4294      	cmp	r4, r2
 8003ac4:	d1fb      	bne.n	8003abe <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8003ac6:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8003ac8:	f042 0201 	orr.w	r2, r2, #1
 8003acc:	8042      	strh	r2, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 8003ace:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8003ad0:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
 8003ad2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8003ad6:	8007      	strh	r7, [r0, #0]
 8003ad8:	8065      	strh	r5, [r4, #2]
 8003ada:	1984      	adds	r4, r0, r6
 8003adc:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
 8003ae0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
 8003ae4:	8067      	strh	r7, [r4, #2]
 8003ae6:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8003ae8:	885a      	ldrh	r2, [r3, #2]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
 8003af0:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
 8003af2:	f7ff bfa1 	b.w	8003a38 <free_list_add>

08003af6 <encode_uint>:
{
 8003af6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003afa:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
 8003afc:	78d3      	ldrb	r3, [r2, #3]
{
 8003afe:	4680      	mov	r8, r0
	switch (specifier) {
 8003b00:	2b6f      	cmp	r3, #111	; 0x6f
{
 8003b02:	460f      	mov	r7, r1
 8003b04:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 8003b06:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 8003b0a:	d029      	beq.n	8003b60 <encode_uint+0x6a>
 8003b0c:	d824      	bhi.n	8003b58 <encode_uint+0x62>
		return 10;
 8003b0e:	2b58      	cmp	r3, #88	; 0x58
 8003b10:	bf0c      	ite	eq
 8003b12:	2610      	moveq	r6, #16
 8003b14:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
 8003b16:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 8003b1a:	4632      	mov	r2, r6
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	4640      	mov	r0, r8
 8003b20:	4639      	mov	r1, r7
 8003b22:	f7fc fae5 	bl	80000f0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003b26:	2a09      	cmp	r2, #9
 8003b28:	b2d4      	uxtb	r4, r2
 8003b2a:	d81e      	bhi.n	8003b6a <encode_uint+0x74>
 8003b2c:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 8003b2e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003b30:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 8003b32:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003b36:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 8003b3a:	d301      	bcc.n	8003b40 <encode_uint+0x4a>
 8003b3c:	45d1      	cmp	r9, sl
 8003b3e:	d811      	bhi.n	8003b64 <encode_uint+0x6e>
	if (conv->flag_hash) {
 8003b40:	782b      	ldrb	r3, [r5, #0]
 8003b42:	069b      	lsls	r3, r3, #26
 8003b44:	d505      	bpl.n	8003b52 <encode_uint+0x5c>
		if (radix == 8) {
 8003b46:	2e08      	cmp	r6, #8
 8003b48:	d115      	bne.n	8003b76 <encode_uint+0x80>
			conv->altform_0 = true;
 8003b4a:	78ab      	ldrb	r3, [r5, #2]
 8003b4c:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 8003b50:	70ab      	strb	r3, [r5, #2]
}
 8003b52:	4648      	mov	r0, r9
 8003b54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8003b58:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
 8003b5c:	2b70      	cmp	r3, #112	; 0x70
 8003b5e:	e7d7      	b.n	8003b10 <encode_uint+0x1a>
	switch (specifier) {
 8003b60:	2608      	movs	r6, #8
 8003b62:	e7d8      	b.n	8003b16 <encode_uint+0x20>
		value /= radix;
 8003b64:	4680      	mov	r8, r0
 8003b66:	460f      	mov	r7, r1
 8003b68:	e7d7      	b.n	8003b1a <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003b6a:	f1bb 0f19 	cmp.w	fp, #25
 8003b6e:	bf94      	ite	ls
 8003b70:	3437      	addls	r4, #55	; 0x37
 8003b72:	3457      	addhi	r4, #87	; 0x57
 8003b74:	e7db      	b.n	8003b2e <encode_uint+0x38>
		} else if (radix == 16) {
 8003b76:	2e10      	cmp	r6, #16
 8003b78:	d1eb      	bne.n	8003b52 <encode_uint+0x5c>
			conv->altform_0c = true;
 8003b7a:	78ab      	ldrb	r3, [r5, #2]
 8003b7c:	f043 0310 	orr.w	r3, r3, #16
 8003b80:	e7e6      	b.n	8003b50 <encode_uint+0x5a>

08003b82 <outs>:
{
 8003b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b86:	4607      	mov	r7, r0
 8003b88:	4688      	mov	r8, r1
 8003b8a:	4615      	mov	r5, r2
 8003b8c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8003b8e:	4614      	mov	r4, r2
 8003b90:	42b4      	cmp	r4, r6
 8003b92:	d305      	bcc.n	8003ba0 <outs+0x1e>
 8003b94:	b10e      	cbz	r6, 8003b9a <outs+0x18>
	return (int)count;
 8003b96:	1b60      	subs	r0, r4, r5
 8003b98:	e008      	b.n	8003bac <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8003b9a:	7823      	ldrb	r3, [r4, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0fa      	beq.n	8003b96 <outs+0x14>
		int rc = out((int)*sp++, ctx);
 8003ba0:	4641      	mov	r1, r8
 8003ba2:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003ba6:	47b8      	blx	r7
		if (rc < 0) {
 8003ba8:	2800      	cmp	r0, #0
 8003baa:	daf1      	bge.n	8003b90 <outs+0xe>
}
 8003bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003bb0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8003bb0:	4770      	bx	lr

08003bb2 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	4770      	bx	lr

08003bb6 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8003bb6:	f000 beae 	b.w	8004916 <z_fatal_error>

08003bba <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 8003bba:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8003bbc:	6800      	ldr	r0, [r0, #0]
 8003bbe:	f000 beaa 	b.w	8004916 <z_fatal_error>

08003bc2 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	2001      	movs	r0, #1
 8003bc6:	f7ff bff6 	b.w	8003bb6 <z_arm_fatal_error>

08003bca <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 8003bca:	b508      	push	{r3, lr}
	handler();
 8003bcc:	f7fd f914 	bl	8000df8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8003bd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8003bd4:	f7fd b9bc 	b.w	8000f50 <z_arm_exc_exit>

08003bd8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 8003bd8:	4603      	mov	r3, r0
	size_t n = 0;
 8003bda:	2000      	movs	r0, #0

	while (*s != '\0') {
 8003bdc:	5c1a      	ldrb	r2, [r3, r0]
 8003bde:	b902      	cbnz	r2, 8003be2 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 8003be0:	4770      	bx	lr
		n++;
 8003be2:	3001      	adds	r0, #1
 8003be4:	e7fa      	b.n	8003bdc <strlen+0x4>

08003be6 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
 8003be6:	b510      	push	{r4, lr}
 8003be8:	1e43      	subs	r3, r0, #1
 8003bea:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 8003bec:	4291      	cmp	r1, r2
 8003bee:	d100      	bne.n	8003bf2 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8003bf0:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 8003bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bf6:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8003bfa:	e7f7      	b.n	8003bec <memcpy+0x6>

08003bfc <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
 8003bfc:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
 8003bfe:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 8003c00:	4402      	add	r2, r0
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d100      	bne.n	8003c08 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8003c06:	4770      	bx	lr
		*(d_byte++) = c_byte;
 8003c08:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8003c0c:	e7f9      	b.n	8003c02 <memset+0x6>

08003c0e <_stdout_hook_default>:
}
 8003c0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c12:	4770      	bx	lr

08003c14 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 8003c14:	4603      	mov	r3, r0
	size_t n = 0;
 8003c16:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 8003c18:	5c1a      	ldrb	r2, [r3, r0]
 8003c1a:	b10a      	cbz	r2, 8003c20 <strnlen+0xc>
 8003c1c:	4288      	cmp	r0, r1
 8003c1e:	d100      	bne.n	8003c22 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 8003c20:	4770      	bx	lr
		n++;
 8003c22:	3001      	adds	r0, #1
 8003c24:	e7f8      	b.n	8003c18 <strnlen+0x4>

08003c26 <stm32_exti_init>:
{
 8003c26:	b508      	push	{r3, lr}
	DT_FOREACH_PROP_ELEM(DT_NODELABEL(exti),
 8003c28:	2206      	movs	r2, #6
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	f7fd fb27 	bl	8001280 <stm32_fill_irq_table>
 8003c32:	2200      	movs	r2, #0
 8003c34:	2006      	movs	r0, #6
 8003c36:	4611      	mov	r1, r2
 8003c38:	f7fd f8c8 	bl	8000dcc <z_arm_irq_priority_set>
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	2207      	movs	r2, #7
 8003c40:	4608      	mov	r0, r1
 8003c42:	f7fd fb1d 	bl	8001280 <stm32_fill_irq_table>
 8003c46:	2200      	movs	r2, #0
 8003c48:	2007      	movs	r0, #7
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	f7fd f8be 	bl	8000dcc <z_arm_irq_priority_set>
 8003c50:	2208      	movs	r2, #8
 8003c52:	2101      	movs	r1, #1
 8003c54:	2002      	movs	r0, #2
 8003c56:	f7fd fb13 	bl	8001280 <stm32_fill_irq_table>
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	2008      	movs	r0, #8
 8003c5e:	4611      	mov	r1, r2
 8003c60:	f7fd f8b4 	bl	8000dcc <z_arm_irq_priority_set>
 8003c64:	2209      	movs	r2, #9
 8003c66:	2101      	movs	r1, #1
 8003c68:	2003      	movs	r0, #3
 8003c6a:	f7fd fb09 	bl	8001280 <stm32_fill_irq_table>
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2009      	movs	r0, #9
 8003c72:	4611      	mov	r1, r2
 8003c74:	f7fd f8aa 	bl	8000dcc <z_arm_irq_priority_set>
 8003c78:	220a      	movs	r2, #10
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	2004      	movs	r0, #4
 8003c7e:	f7fd faff 	bl	8001280 <stm32_fill_irq_table>
 8003c82:	2200      	movs	r2, #0
 8003c84:	200a      	movs	r0, #10
 8003c86:	4611      	mov	r1, r2
 8003c88:	f7fd f8a0 	bl	8000dcc <z_arm_irq_priority_set>
 8003c8c:	2105      	movs	r1, #5
 8003c8e:	2217      	movs	r2, #23
 8003c90:	4608      	mov	r0, r1
 8003c92:	f7fd faf5 	bl	8001280 <stm32_fill_irq_table>
 8003c96:	2200      	movs	r2, #0
 8003c98:	2017      	movs	r0, #23
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	f7fd f896 	bl	8000dcc <z_arm_irq_priority_set>
 8003ca0:	2228      	movs	r2, #40	; 0x28
 8003ca2:	2106      	movs	r1, #6
 8003ca4:	200a      	movs	r0, #10
 8003ca6:	f7fd faeb 	bl	8001280 <stm32_fill_irq_table>
 8003caa:	2200      	movs	r2, #0
 8003cac:	2028      	movs	r0, #40	; 0x28
 8003cae:	4611      	mov	r1, r2
 8003cb0:	f7fd f88c 	bl	8000dcc <z_arm_irq_priority_set>
}
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	bd08      	pop	{r3, pc}

08003cb8 <can_calc_prescaler>:
}
#endif /* CONFIG_CAN_FD_MODE */

int can_calc_prescaler(const struct device *dev, struct can_timing *timing,
		       uint32_t bitrate)
{
 8003cb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003cbc:	460e      	mov	r6, r1
 8003cbe:	4614      	mov	r4, r2
	uint32_t ts = timing->prop_seg + timing->phase_seg1 + timing->phase_seg2 +
 8003cc0:	884d      	ldrh	r5, [r1, #2]
 8003cc2:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8003cc6:	88cf      	ldrh	r7, [r1, #6]
 8003cc8:	6883      	ldr	r3, [r0, #8]
 8003cca:	a901      	add	r1, sp, #4
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	4798      	blx	r3
		   CAN_SYNC_SEG;
	uint32_t core_clock;
	int ret;

	ret = can_get_core_clock(dev, &core_clock);
	if (ret != 0) {
 8003cd0:	b978      	cbnz	r0, 8003cf2 <can_calc_prescaler+0x3a>
	uint32_t ts = timing->prop_seg + timing->phase_seg1 + timing->phase_seg2 +
 8003cd2:	eb05 0308 	add.w	r3, r5, r8
 8003cd6:	443b      	add	r3, r7
		return ret;
	}

	timing->prescaler = core_clock / (bitrate * ts);
 8003cd8:	fb03 4404 	mla	r4, r3, r4, r4
 8003cdc:	9801      	ldr	r0, [sp, #4]
 8003cde:	fbb0 f4f4 	udiv	r4, r0, r4
 8003ce2:	8134      	strh	r4, [r6, #8]

	return core_clock % (ts * timing->prescaler);
 8003ce4:	b2a4      	uxth	r4, r4
 8003ce6:	fb03 4404 	mla	r4, r3, r4, r4
 8003cea:	fbb0 f3f4 	udiv	r3, r0, r4
 8003cee:	fb04 0013 	mls	r0, r4, r3, r0
}
 8003cf2:	b002      	add	sp, #8
 8003cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003cf8 <can_stm32_signal_tx_complete>:
{
 8003cf8:	b510      	push	{r4, lr}
 8003cfa:	460c      	mov	r4, r1
	can_tx_callback_t callback = mb->tx_callback;
 8003cfc:	6823      	ldr	r3, [r4, #0]
{
 8003cfe:	4611      	mov	r1, r2
	if (callback != NULL) {
 8003d00:	b11b      	cbz	r3, 8003d0a <can_stm32_signal_tx_complete+0x12>
		callback(dev, status, mb->callback_arg);
 8003d02:	6862      	ldr	r2, [r4, #4]
 8003d04:	4798      	blx	r3
		mb->tx_callback = NULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	6023      	str	r3, [r4, #0]
}
 8003d0a:	bd10      	pop	{r4, pc}

08003d0c <can_stm32_get_state>:
	CAN_TypeDef *can = cfg->can;
 8003d0c:	6843      	ldr	r3, [r0, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
	if (state != NULL) {
 8003d10:	b129      	cbz	r1, 8003d1e <can_stm32_get_state+0x12>
		if (!data->started) {
 8003d12:	6900      	ldr	r0, [r0, #16]
 8003d14:	f890 00ed 	ldrb.w	r0, [r0, #237]	; 0xed
 8003d18:	b950      	cbnz	r0, 8003d30 <can_stm32_get_state+0x24>
			*state = CAN_STATE_STOPPED;
 8003d1a:	2004      	movs	r0, #4
			*state = CAN_STATE_ERROR_ACTIVE;
 8003d1c:	7008      	strb	r0, [r1, #0]
	if (err_cnt != NULL) {
 8003d1e:	b12a      	cbz	r2, 8003d2c <can_stm32_get_state+0x20>
			((can->ESR & CAN_ESR_TEC) >> CAN_ESR_TEC_Pos);
 8003d20:	6999      	ldr	r1, [r3, #24]
 8003d22:	0c09      	lsrs	r1, r1, #16
		err_cnt->tx_err_cnt =
 8003d24:	7011      	strb	r1, [r2, #0]
			((can->ESR & CAN_ESR_REC) >> CAN_ESR_REC_Pos);
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	0e1b      	lsrs	r3, r3, #24
		err_cnt->rx_err_cnt =
 8003d2a:	7053      	strb	r3, [r2, #1]
}
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	4770      	bx	lr
		} else if (can->ESR & CAN_ESR_BOFF) {
 8003d30:	6998      	ldr	r0, [r3, #24]
 8003d32:	0740      	lsls	r0, r0, #29
 8003d34:	d501      	bpl.n	8003d3a <can_stm32_get_state+0x2e>
			*state = CAN_STATE_BUS_OFF;
 8003d36:	2003      	movs	r0, #3
 8003d38:	e7f0      	b.n	8003d1c <can_stm32_get_state+0x10>
		} else if (can->ESR & CAN_ESR_EPVF) {
 8003d3a:	6998      	ldr	r0, [r3, #24]
 8003d3c:	0780      	lsls	r0, r0, #30
 8003d3e:	d501      	bpl.n	8003d44 <can_stm32_get_state+0x38>
			*state = CAN_STATE_ERROR_PASSIVE;
 8003d40:	2002      	movs	r0, #2
 8003d42:	e7eb      	b.n	8003d1c <can_stm32_get_state+0x10>
		} else if (can->ESR & CAN_ESR_EWGF) {
 8003d44:	6998      	ldr	r0, [r3, #24]
 8003d46:	f010 0001 	ands.w	r0, r0, #1
			*state = CAN_STATE_ERROR_WARNING;
 8003d4a:	bf18      	it	ne
 8003d4c:	2001      	movne	r0, #1
 8003d4e:	e7e5      	b.n	8003d1c <can_stm32_get_state+0x10>

08003d50 <can_stm32_get_capabilities>:
	*cap = CAN_MODE_NORMAL | CAN_MODE_LOOPBACK | CAN_MODE_LISTENONLY | CAN_MODE_ONE_SHOT;
 8003d50:	230b      	movs	r3, #11
}
 8003d52:	2000      	movs	r0, #0
	*cap = CAN_MODE_NORMAL | CAN_MODE_LOOPBACK | CAN_MODE_LISTENONLY | CAN_MODE_ONE_SHOT;
 8003d54:	600b      	str	r3, [r1, #0]
}
 8003d56:	4770      	bx	lr

08003d58 <can_stm32_get_max_bitrate>:
	*max_bitrate = config->max_bitrate;
 8003d58:	6843      	ldr	r3, [r0, #4]
}
 8003d5a:	2000      	movs	r0, #0
	*max_bitrate = config->max_bitrate;
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5e:	600b      	str	r3, [r1, #0]
}
 8003d60:	4770      	bx	lr

08003d62 <can_stm32_get_max_filters>:
		return CONFIG_CAN_MAX_EXT_ID_FILTER;
 8003d62:	2900      	cmp	r1, #0
}
 8003d64:	bf0c      	ite	eq
 8003d66:	200e      	moveq	r0, #14
 8003d68:	2007      	movne	r0, #7
 8003d6a:	4770      	bx	lr

08003d6c <can_stm32_set_state_change_callback>:
{
 8003d6c:	b510      	push	{r4, lr}
	CAN_TypeDef *can = cfg->can;
 8003d6e:	6843      	ldr	r3, [r0, #4]
	struct can_stm32_data *data = dev->data;
 8003d70:	6904      	ldr	r4, [r0, #16]
	CAN_TypeDef *can = cfg->can;
 8003d72:	681b      	ldr	r3, [r3, #0]
	data->state_change_cb_data = user_data;
 8003d74:	e9c4 1239 	strd	r1, r2, [r4, #228]	; 0xe4
		can->IER &= ~(CAN_IER_BOFIE | CAN_IER_EPVIE | CAN_IER_EWGIE);
 8003d78:	695a      	ldr	r2, [r3, #20]
	if (cb == NULL) {
 8003d7a:	b919      	cbnz	r1, 8003d84 <can_stm32_set_state_change_callback+0x18>
		can->IER &= ~(CAN_IER_BOFIE | CAN_IER_EPVIE | CAN_IER_EWGIE);
 8003d7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
		can->IER |= CAN_IER_BOFIE | CAN_IER_EPVIE | CAN_IER_EWGIE;
 8003d80:	615a      	str	r2, [r3, #20]
}
 8003d82:	bd10      	pop	{r4, pc}
		can->IER |= CAN_IER_BOFIE | CAN_IER_EPVIE | CAN_IER_EWGIE;
 8003d84:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003d88:	e7fa      	b.n	8003d80 <can_stm32_set_state_change_callback+0x14>

08003d8a <config_can_0_irq>:
CAN_STM32_IRQ_INST(inst)          \
CAN_STM32_CONFIG_INST(inst)       \
CAN_STM32_DATA_INST(inst)         \
CAN_STM32_DEFINE_INST(inst)

DT_INST_FOREACH_STATUS_OKAY(CAN_STM32_INST)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	b510      	push	{r4, lr}
 8003d8e:	4611      	mov	r1, r2
 8003d90:	4604      	mov	r4, r0
 8003d92:	2014      	movs	r0, #20
 8003d94:	f7fd f81a 	bl	8000dcc <z_arm_irq_priority_set>
 8003d98:	2014      	movs	r0, #20
 8003d9a:	f7fd f809 	bl	8000db0 <arch_irq_enable>
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2013      	movs	r0, #19
 8003da2:	4611      	mov	r1, r2
 8003da4:	f7fd f812 	bl	8000dcc <z_arm_irq_priority_set>
 8003da8:	2013      	movs	r0, #19
 8003daa:	f7fd f801 	bl	8000db0 <arch_irq_enable>
 8003dae:	2200      	movs	r2, #0
 8003db0:	2016      	movs	r0, #22
 8003db2:	4611      	mov	r1, r2
 8003db4:	f7fd f80a 	bl	8000dcc <z_arm_irq_priority_set>
 8003db8:	2016      	movs	r0, #22
 8003dba:	f7fc fff9 	bl	8000db0 <arch_irq_enable>
 8003dbe:	6963      	ldr	r3, [r4, #20]
 8003dc0:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8003dc4:	f043 0313 	orr.w	r3, r3, #19
 8003dc8:	6163      	str	r3, [r4, #20]
 8003dca:	bd10      	pop	{r4, pc}

08003dcc <can_stm32_rx_isr>:
{
 8003dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003dd0:	4606      	mov	r6, r0
	can_rx_callback_t callback = NULL;
 8003dd2:	f04f 0900 	mov.w	r9, #0
	CAN_TypeDef *can = cfg->can;
 8003dd6:	6843      	ldr	r3, [r0, #4]
	struct can_stm32_data *data = dev->data;
 8003dd8:	6907      	ldr	r7, [r0, #16]
	CAN_TypeDef *can = cfg->can;
 8003dda:	681c      	ldr	r4, [r3, #0]
{
 8003ddc:	b085      	sub	sp, #20
	while (can->RF0R & CAN_RF0R_FMP0) {
 8003dde:	68e3      	ldr	r3, [r4, #12]
 8003de0:	079b      	lsls	r3, r3, #30
 8003de2:	d103      	bne.n	8003dec <can_stm32_rx_isr+0x20>
	if (can->RF0R & CAN_RF0R_FOVR0) {
 8003de4:	68e3      	ldr	r3, [r4, #12]
}
 8003de6:	b005      	add	sp, #20
 8003de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memset(frame, 0, sizeof(*frame));
 8003dec:	2210      	movs	r2, #16
 8003dee:	2100      	movs	r1, #0
 8003df0:	4668      	mov	r0, sp
		filter_id = ((mbox->RDTR & CAN_RDT0R_FMI) >> CAN_RDT0R_FMI_Pos);
 8003df2:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
	memset(frame, 0, sizeof(*frame));
 8003df6:	f7ff ff01 	bl	8003bfc <memset>
	if (mbox->RIR & CAN_RI0R_IDE) {
 8003dfa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8003dfe:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8003e02:	f013 0f04 	tst.w	r3, #4
		frame->id = mbox->RIR >> CAN_RI0R_EXID_Pos;
 8003e06:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
 8003e0a:	9b00      	ldr	r3, [sp, #0]
	if (mbox->RIR & CAN_RI0R_IDE) {
 8003e0c:	d033      	beq.n	8003e76 <can_stm32_rx_isr+0xaa>
		frame->id = mbox->RIR >> CAN_RI0R_EXID_Pos;
 8003e0e:	08d2      	lsrs	r2, r2, #3
 8003e10:	f362 031c 	bfi	r3, r2, #0, #29
 8003e14:	9300      	str	r3, [sp, #0]
		frame->flags |= CAN_FRAME_IDE;
 8003e16:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	f88d 3005 	strb.w	r3, [sp, #5]
	if ((mbox->RIR & CAN_RI0R_RTR) != 0) {
 8003e22:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8003e26:	079a      	lsls	r2, r3, #30
		frame->flags |= CAN_FRAME_RTR;
 8003e28:	bf42      	ittt	mi
 8003e2a:	f89d 3005 	ldrbmi.w	r3, [sp, #5]
 8003e2e:	f043 0302 	orrmi.w	r3, r3, #2
 8003e32:	f88d 3005 	strbmi.w	r3, [sp, #5]
	frame->dlc = mbox->RDTR & (CAN_RDT0R_DLC >> CAN_RDT0R_DLC_Pos);
 8003e36:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
		if (filter_id < CONFIG_CAN_MAX_EXT_ID_FILTER) {
 8003e3a:	2d06      	cmp	r5, #6
	frame->dlc = mbox->RDTR & (CAN_RDT0R_DLC >> CAN_RDT0R_DLC_Pos);
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	f88d 3004 	strb.w	r3, [sp, #4]
	frame->data_32[0] = mbox->RDLR;
 8003e44:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8003e48:	9302      	str	r3, [sp, #8]
	frame->data_32[1] = mbox->RDHR;
 8003e4a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 8003e4e:	9303      	str	r3, [sp, #12]
		if (filter_id < CONFIG_CAN_MAX_EXT_ID_FILTER) {
 8003e50:	d816      	bhi.n	8003e80 <can_stm32_rx_isr+0xb4>
			callback = data->rx_cb_ext[filter_id];
 8003e52:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8003e56:	f8d5 9074 	ldr.w	r9, [r5, #116]	; 0x74
			cb_arg = data->cb_arg_ext[filter_id];
 8003e5a:	f8d5 80c8 	ldr.w	r8, [r5, #200]	; 0xc8
		if (callback) {
 8003e5e:	f1b9 0f00 	cmp.w	r9, #0
 8003e62:	d003      	beq.n	8003e6c <can_stm32_rx_isr+0xa0>
			callback(dev, &frame, cb_arg);
 8003e64:	4642      	mov	r2, r8
 8003e66:	4669      	mov	r1, sp
 8003e68:	4630      	mov	r0, r6
 8003e6a:	47c8      	blx	r9
		can->RF0R |= CAN_RF0R_RFOM0;
 8003e6c:	68e3      	ldr	r3, [r4, #12]
 8003e6e:	f043 0320 	orr.w	r3, r3, #32
 8003e72:	60e3      	str	r3, [r4, #12]
 8003e74:	e7b3      	b.n	8003dde <can_stm32_rx_isr+0x12>
		frame->id = mbox->RIR >> CAN_RI0R_STID_Pos;
 8003e76:	0d52      	lsrs	r2, r2, #21
 8003e78:	f362 031c 	bfi	r3, r2, #0, #29
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	e7d0      	b.n	8003e22 <can_stm32_rx_isr+0x56>
		} else if (filter_id < CAN_STM32_MAX_FILTER_ID) {
 8003e80:	2d22      	cmp	r5, #34	; 0x22
			callback = data->rx_cb_std[index];
 8003e82:	bf9e      	ittt	ls
 8003e84:	eb07 0585 	addls.w	r5, r7, r5, lsl #2
 8003e88:	f8d5 9020 	ldrls.w	r9, [r5, #32]
			cb_arg = data->cb_arg_std[index];
 8003e8c:	f8d5 8074 	ldrls.w	r8, [r5, #116]	; 0x74
 8003e90:	e7e5      	b.n	8003e5e <can_stm32_rx_isr+0x92>

08003e92 <can_stm32_tx_isr_handler>:
{
 8003e92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CAN_TypeDef *can = cfg->can;
 8003e94:	6843      	ldr	r3, [r0, #4]
{
 8003e96:	4606      	mov	r6, r0
	CAN_TypeDef *can = cfg->can;
 8003e98:	681c      	ldr	r4, [r3, #0]
	struct can_stm32_data *data = dev->data;
 8003e9a:	6907      	ldr	r7, [r0, #16]
	bus_off = can->ESR & CAN_ESR_BOFF;
 8003e9c:	69a5      	ldr	r5, [r4, #24]
	if ((can->TSR & CAN_TSR_RQCP0) | bus_off) {
 8003e9e:	68a3      	ldr	r3, [r4, #8]
	bus_off = can->ESR & CAN_ESR_BOFF;
 8003ea0:	f005 0504 	and.w	r5, r5, #4
	if ((can->TSR & CAN_TSR_RQCP0) | bus_off) {
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	432b      	orrs	r3, r5
 8003eaa:	d017      	beq.n	8003edc <can_stm32_tx_isr_handler+0x4a>
		status = can->TSR & CAN_TSR_TXOK0 ? 0  :
 8003eac:	68a3      	ldr	r3, [r4, #8]
 8003eae:	0798      	lsls	r0, r3, #30
 8003eb0:	d458      	bmi.n	8003f64 <can_stm32_tx_isr_handler+0xd2>
			 can->TSR & CAN_TSR_TERR0 ? -EIO :
 8003eb2:	68a3      	ldr	r3, [r4, #8]
 8003eb4:	0719      	lsls	r1, r3, #28
 8003eb6:	d457      	bmi.n	8003f68 <can_stm32_tx_isr_handler+0xd6>
			 can->TSR & CAN_TSR_ALST0 ? -EBUSY :
 8003eb8:	68a3      	ldr	r3, [r4, #8]
 8003eba:	075b      	lsls	r3, r3, #29
 8003ebc:	d457      	bmi.n	8003f6e <can_stm32_tx_isr_handler+0xdc>
					  bus_off ? -ENETUNREACH :
 8003ebe:	2d00      	cmp	r5, #0
 8003ec0:	bf0c      	ite	eq
 8003ec2:	f06f 0204 	mvneq.w	r2, #4
 8003ec6:	f06f 0271 	mvnne.w	r2, #113	; 0x71
		can->TSR |= CAN_TSR_RQCP0;
 8003eca:	68a3      	ldr	r3, [r4, #8]
		can_stm32_signal_tx_complete(dev, &data->mb0, status);
 8003ecc:	4630      	mov	r0, r6
		can->TSR |= CAN_TSR_RQCP0;
 8003ece:	f043 0301 	orr.w	r3, r3, #1
 8003ed2:	60a3      	str	r3, [r4, #8]
		can_stm32_signal_tx_complete(dev, &data->mb0, status);
 8003ed4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003ed8:	f7ff ff0e 	bl	8003cf8 <can_stm32_signal_tx_complete>
	if ((can->TSR & CAN_TSR_RQCP1) | bus_off) {
 8003edc:	68a3      	ldr	r3, [r4, #8]
 8003ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee2:	432b      	orrs	r3, r5
 8003ee4:	d017      	beq.n	8003f16 <can_stm32_tx_isr_handler+0x84>
		status = can->TSR & CAN_TSR_TXOK1 ? 0  :
 8003ee6:	68a3      	ldr	r3, [r4, #8]
 8003ee8:	0598      	lsls	r0, r3, #22
 8003eea:	d443      	bmi.n	8003f74 <can_stm32_tx_isr_handler+0xe2>
			 can->TSR & CAN_TSR_TERR1 ? -EIO :
 8003eec:	68a3      	ldr	r3, [r4, #8]
 8003eee:	0519      	lsls	r1, r3, #20
 8003ef0:	d442      	bmi.n	8003f78 <can_stm32_tx_isr_handler+0xe6>
			 can->TSR & CAN_TSR_ALST1 ? -EBUSY :
 8003ef2:	68a3      	ldr	r3, [r4, #8]
 8003ef4:	055b      	lsls	r3, r3, #21
 8003ef6:	d442      	bmi.n	8003f7e <can_stm32_tx_isr_handler+0xec>
			 bus_off                  ? -ENETUNREACH :
 8003ef8:	2d00      	cmp	r5, #0
 8003efa:	bf0c      	ite	eq
 8003efc:	f06f 0204 	mvneq.w	r2, #4
 8003f00:	f06f 0271 	mvnne.w	r2, #113	; 0x71
		can->TSR |= CAN_TSR_RQCP1;
 8003f04:	68a3      	ldr	r3, [r4, #8]
		can_stm32_signal_tx_complete(dev, &data->mb1, status);
 8003f06:	4630      	mov	r0, r6
		can->TSR |= CAN_TSR_RQCP1;
 8003f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f0c:	60a3      	str	r3, [r4, #8]
		can_stm32_signal_tx_complete(dev, &data->mb1, status);
 8003f0e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003f12:	f7ff fef1 	bl	8003cf8 <can_stm32_signal_tx_complete>
	if ((can->TSR & CAN_TSR_RQCP2) | bus_off) {
 8003f16:	68a3      	ldr	r3, [r4, #8]
 8003f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f1c:	432b      	orrs	r3, r5
 8003f1e:	d017      	beq.n	8003f50 <can_stm32_tx_isr_handler+0xbe>
		status = can->TSR & CAN_TSR_TXOK2 ? 0  :
 8003f20:	68a3      	ldr	r3, [r4, #8]
 8003f22:	0398      	lsls	r0, r3, #14
 8003f24:	d42e      	bmi.n	8003f84 <can_stm32_tx_isr_handler+0xf2>
			 can->TSR & CAN_TSR_TERR2 ? -EIO :
 8003f26:	68a3      	ldr	r3, [r4, #8]
 8003f28:	0319      	lsls	r1, r3, #12
 8003f2a:	d42d      	bmi.n	8003f88 <can_stm32_tx_isr_handler+0xf6>
			 can->TSR & CAN_TSR_ALST2 ? -EBUSY :
 8003f2c:	68a3      	ldr	r3, [r4, #8]
 8003f2e:	035b      	lsls	r3, r3, #13
 8003f30:	d42d      	bmi.n	8003f8e <can_stm32_tx_isr_handler+0xfc>
			 bus_off                  ? -ENETUNREACH :
 8003f32:	2d00      	cmp	r5, #0
 8003f34:	bf0c      	ite	eq
 8003f36:	f06f 0204 	mvneq.w	r2, #4
 8003f3a:	f06f 0271 	mvnne.w	r2, #113	; 0x71
		can->TSR |= CAN_TSR_RQCP2;
 8003f3e:	68a3      	ldr	r3, [r4, #8]
		can_stm32_signal_tx_complete(dev, &data->mb2, status);
 8003f40:	4630      	mov	r0, r6
		can->TSR |= CAN_TSR_RQCP2;
 8003f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f46:	60a3      	str	r3, [r4, #8]
		can_stm32_signal_tx_complete(dev, &data->mb2, status);
 8003f48:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8003f4c:	f7ff fed4 	bl	8003cf8 <can_stm32_signal_tx_complete>
	if (can->TSR & CAN_TSR_TME) {
 8003f50:	68a3      	ldr	r3, [r4, #8]
 8003f52:	f013 5fe0 	tst.w	r3, #469762048	; 0x1c000000
 8003f56:	d01d      	beq.n	8003f94 <can_stm32_tx_isr_handler+0x102>
	z_impl_k_sem_give(sem);
 8003f58:	f107 0014 	add.w	r0, r7, #20
}
 8003f5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f60:	f7ff b912 	b.w	8003188 <z_impl_k_sem_give>
		status = can->TSR & CAN_TSR_TXOK0 ? 0  :
 8003f64:	2200      	movs	r2, #0
 8003f66:	e7b0      	b.n	8003eca <can_stm32_tx_isr_handler+0x38>
			 can->TSR & CAN_TSR_TERR0 ? -EIO :
 8003f68:	f06f 0204 	mvn.w	r2, #4
 8003f6c:	e7ad      	b.n	8003eca <can_stm32_tx_isr_handler+0x38>
			 can->TSR & CAN_TSR_ALST0 ? -EBUSY :
 8003f6e:	f06f 020f 	mvn.w	r2, #15
 8003f72:	e7aa      	b.n	8003eca <can_stm32_tx_isr_handler+0x38>
		status = can->TSR & CAN_TSR_TXOK1 ? 0  :
 8003f74:	2200      	movs	r2, #0
 8003f76:	e7c5      	b.n	8003f04 <can_stm32_tx_isr_handler+0x72>
			 can->TSR & CAN_TSR_TERR1 ? -EIO :
 8003f78:	f06f 0204 	mvn.w	r2, #4
 8003f7c:	e7c2      	b.n	8003f04 <can_stm32_tx_isr_handler+0x72>
			 can->TSR & CAN_TSR_ALST1 ? -EBUSY :
 8003f7e:	f06f 020f 	mvn.w	r2, #15
 8003f82:	e7bf      	b.n	8003f04 <can_stm32_tx_isr_handler+0x72>
		status = can->TSR & CAN_TSR_TXOK2 ? 0  :
 8003f84:	2200      	movs	r2, #0
 8003f86:	e7da      	b.n	8003f3e <can_stm32_tx_isr_handler+0xac>
			 can->TSR & CAN_TSR_TERR2 ? -EIO :
 8003f88:	f06f 0204 	mvn.w	r2, #4
 8003f8c:	e7d7      	b.n	8003f3e <can_stm32_tx_isr_handler+0xac>
			 can->TSR & CAN_TSR_ALST2 ? -EBUSY :
 8003f8e:	f06f 020f 	mvn.w	r2, #15
 8003f92:	e7d4      	b.n	8003f3e <can_stm32_tx_isr_handler+0xac>
}
 8003f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003f96 <can_stm32_tx_isr>:
	can_stm32_tx_isr_handler(dev);
 8003f96:	f7ff bf7c 	b.w	8003e92 <can_stm32_tx_isr_handler>

08003f9a <can_stm32_state_change_isr>:
{
 8003f9a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	CAN_TypeDef *can = cfg->can;
 8003f9e:	6843      	ldr	r3, [r0, #4]
{
 8003fa0:	4604      	mov	r4, r0
	CAN_TypeDef *can = cfg->can;
 8003fa2:	681e      	ldr	r6, [r3, #0]
	if (can->MSR & CAN_MSR_ERRI) {
 8003fa4:	6873      	ldr	r3, [r6, #4]
 8003fa6:	075b      	lsls	r3, r3, #29
 8003fa8:	d51b      	bpl.n	8003fe2 <can_stm32_state_change_isr+0x48>
		can_stm32_tx_isr_handler(dev);
 8003faa:	f7ff ff72 	bl	8003e92 <can_stm32_tx_isr_handler>
	struct can_stm32_data *data = dev->data;
 8003fae:	6925      	ldr	r5, [r4, #16]
	(void)can_stm32_get_state(dev, &state, &err_cnt);
 8003fb0:	f10d 0103 	add.w	r1, sp, #3
 8003fb4:	4620      	mov	r0, r4
	void *state_change_cb_data = data->state_change_cb_data;
 8003fb6:	e9d5 7839 	ldrd	r7, r8, [r5, #228]	; 0xe4
	(void)can_stm32_get_state(dev, &state, &err_cnt);
 8003fba:	aa01      	add	r2, sp, #4
 8003fbc:	f7ff fea6 	bl	8003d0c <can_stm32_get_state>
	if (state != data->state) {
 8003fc0:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8003fc4:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
 8003fc8:	428b      	cmp	r3, r1
 8003fca:	d006      	beq.n	8003fda <can_stm32_state_change_isr+0x40>
		data->state = state;
 8003fcc:	f885 10ec 	strb.w	r1, [r5, #236]	; 0xec
		if (cb != NULL) {
 8003fd0:	b11f      	cbz	r7, 8003fda <can_stm32_state_change_isr+0x40>
			cb(dev, state, err_cnt, state_change_cb_data);
 8003fd2:	4643      	mov	r3, r8
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	9a01      	ldr	r2, [sp, #4]
 8003fd8:	47b8      	blx	r7
		can->MSR |= CAN_MSR_ERRI;
 8003fda:	6873      	ldr	r3, [r6, #4]
 8003fdc:	f043 0304 	orr.w	r3, r3, #4
 8003fe0:	6073      	str	r3, [r6, #4]
}
 8003fe2:	b002      	add	sp, #8
 8003fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003fe8 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
 8003fe8:	f7ff b818 	b.w	800301c <z_impl_k_mutex_lock>

08003fec <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 8003fec:	f7ff b890 	b.w	8003110 <z_impl_k_mutex_unlock>

08003ff0 <can_stm32_stop>:
{
 8003ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct can_stm32_data *data = dev->data;
 8003ff4:	6905      	ldr	r5, [r0, #16]
	const struct can_stm32_config *cfg = dev->config;
 8003ff6:	f8d0 8004 	ldr.w	r8, [r0, #4]
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 8003ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
 8003ffe:	4606      	mov	r6, r0
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 8004000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004004:	4628      	mov	r0, r5
	CAN_TypeDef *can = cfg->can;
 8004006:	f8d8 7000 	ldr.w	r7, [r8]
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 800400a:	f7ff ffed 	bl	8003fe8 <k_mutex_lock.constprop.0.isra.0>
	if (!data->started) {
 800400e:	f895 30ed 	ldrb.w	r3, [r5, #237]	; 0xed
 8004012:	b383      	cbz	r3, 8004076 <can_stm32_stop+0x86>
	ret = can_stm32_enter_init_mode(can);
 8004014:	4638      	mov	r0, r7
 8004016:	f7fd fa75 	bl	8001504 <can_stm32_enter_init_mode>
	if (ret < 0) {
 800401a:	1e04      	subs	r4, r0, #0
 800401c:	db2e      	blt.n	800407c <can_stm32_stop+0x8c>
	can_stm32_signal_tx_complete(dev, &data->mb0, -ENETDOWN);
 800401e:	f06f 0272 	mvn.w	r2, #114	; 0x72
 8004022:	4630      	mov	r0, r6
 8004024:	f105 0124 	add.w	r1, r5, #36	; 0x24
 8004028:	f7ff fe66 	bl	8003cf8 <can_stm32_signal_tx_complete>
	can_stm32_signal_tx_complete(dev, &data->mb1, -ENETDOWN);
 800402c:	f06f 0272 	mvn.w	r2, #114	; 0x72
 8004030:	4630      	mov	r0, r6
 8004032:	f105 012c 	add.w	r1, r5, #44	; 0x2c
 8004036:	f7ff fe5f 	bl	8003cf8 <can_stm32_signal_tx_complete>
	can_stm32_signal_tx_complete(dev, &data->mb2, -ENETDOWN);
 800403a:	4630      	mov	r0, r6
 800403c:	f06f 0272 	mvn.w	r2, #114	; 0x72
 8004040:	f105 0134 	add.w	r1, r5, #52	; 0x34
 8004044:	f7ff fe58 	bl	8003cf8 <can_stm32_signal_tx_complete>
	can->TSR |= CAN_TSR_ABRQ2 | CAN_TSR_ABRQ1 | CAN_TSR_ABRQ0;
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f043 1380 	orr.w	r3, r3, #8388736	; 0x800080
 800404e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004052:	60bb      	str	r3, [r7, #8]
	if (cfg->phy != NULL) {
 8004054:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
 8004058:	b120      	cbz	r0, 8004064 <can_stm32_stop+0x74>
 800405a:	6883      	ldr	r3, [r0, #8]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	4798      	blx	r3
		if (ret != 0) {
 8004060:	4604      	mov	r4, r0
 8004062:	b910      	cbnz	r0, 800406a <can_stm32_stop+0x7a>
	data->started = false;
 8004064:	2300      	movs	r3, #0
 8004066:	f885 30ed 	strb.w	r3, [r5, #237]	; 0xed
	k_mutex_unlock(&data->inst_mutex);
 800406a:	4628      	mov	r0, r5
 800406c:	f7ff ffbe 	bl	8003fec <k_mutex_unlock.isra.0>
}
 8004070:	4620      	mov	r0, r4
 8004072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = -EALREADY;
 8004076:	f06f 0477 	mvn.w	r4, #119	; 0x77
 800407a:	e7f6      	b.n	800406a <can_stm32_stop+0x7a>
		ret = -EIO;
 800407c:	f06f 0404 	mvn.w	r4, #4
 8004080:	e7f3      	b.n	800406a <can_stm32_stop+0x7a>

08004082 <can_stm32_send>:
{
 8004082:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004086:	4698      	mov	r8, r3
	CAN_TypeDef *can = cfg->can;
 8004088:	6843      	ldr	r3, [r0, #4]
{
 800408a:	460d      	mov	r5, r1
	CAN_TypeDef *can = cfg->can;
 800408c:	681c      	ldr	r4, [r3, #0]
	if (frame->dlc > CAN_MAX_DLC) {
 800408e:	790b      	ldrb	r3, [r1, #4]
{
 8004090:	4617      	mov	r7, r2
	if (frame->dlc > CAN_MAX_DLC) {
 8004092:	2b08      	cmp	r3, #8
{
 8004094:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
	struct can_stm32_data *data = dev->data;
 8004098:	6906      	ldr	r6, [r0, #16]
	uint32_t transmit_status_register = can->TSR;
 800409a:	f8d4 9008 	ldr.w	r9, [r4, #8]
	if (frame->dlc > CAN_MAX_DLC) {
 800409e:	d874      	bhi.n	800418a <can_stm32_send+0x108>
	if ((frame->flags & ~(CAN_FRAME_IDE | CAN_FRAME_RTR)) != 0) {
 80040a0:	794b      	ldrb	r3, [r1, #5]
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d874      	bhi.n	8004190 <can_stm32_send+0x10e>
	if (!data->started) {
 80040a6:	f896 30ed 	ldrb.w	r3, [r6, #237]	; 0xed
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d073      	beq.n	8004196 <can_stm32_send+0x114>
	if (can->ESR & CAN_ESR_BOFF) {
 80040ae:	69a3      	ldr	r3, [r4, #24]
 80040b0:	0759      	lsls	r1, r3, #29
 80040b2:	d473      	bmi.n	800419c <can_stm32_send+0x11a>
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 80040b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040bc:	4630      	mov	r0, r6
 80040be:	f7ff ff93 	bl	8003fe8 <k_mutex_lock.constprop.0.isra.0>
		if (k_sem_take(&data->tx_int_sem, timeout)) {
 80040c2:	f106 0b14 	add.w	fp, r6, #20
	while (!(transmit_status_register & CAN_TSR_TME)) {
 80040c6:	f019 5fe0 	tst.w	r9, #469762048	; 0x1c000000
 80040ca:	d037      	beq.n	800413c <can_stm32_send+0xba>
	if (transmit_status_register & CAN_TSR_TME0) {
 80040cc:	f019 6f80 	tst.w	r9, #67108864	; 0x4000000
 80040d0:	d04b      	beq.n	800416a <can_stm32_send+0xe8>
		mailbox = &can->sTxMailBox[0];
 80040d2:	f504 73c0 	add.w	r3, r4, #384	; 0x180
		mb = &(data->mb0);
 80040d6:	f106 0224 	add.w	r2, r6, #36	; 0x24
	mb->callback_arg = user_data;
 80040da:	990b      	ldr	r1, [sp, #44]	; 0x2c
	mb->tx_callback = callback;
 80040dc:	f8c2 a000 	str.w	sl, [r2]
	mb->callback_arg = user_data;
 80040e0:	6051      	str	r1, [r2, #4]
	mailbox->TIR &= CAN_TI0R_TXRQ;
 80040e2:	681a      	ldr	r2, [r3, #0]
	k_mutex_unlock(&data->inst_mutex);
 80040e4:	4630      	mov	r0, r6
	mailbox->TIR &= CAN_TI0R_TXRQ;
 80040e6:	f002 0201 	and.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
	if ((frame->flags & CAN_FRAME_IDE) != 0) {
 80040ec:	796a      	ldrb	r2, [r5, #5]
 80040ee:	6829      	ldr	r1, [r5, #0]
 80040f0:	f012 0f01 	tst.w	r2, #1
		mailbox->TIR |= (frame->id << CAN_TI0R_EXID_Pos)
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	bf16      	itet	ne
 80040f8:	ea42 02c1 	orrne.w	r2, r2, r1, lsl #3
		mailbox->TIR |= (frame->id << CAN_TI0R_STID_Pos);
 80040fc:	ea42 5241 	orreq.w	r2, r2, r1, lsl #21
		mailbox->TIR |= (frame->id << CAN_TI0R_EXID_Pos)
 8004100:	f042 0204 	orrne.w	r2, r2, #4
		mailbox->TIR |= (frame->id << CAN_TI0R_STID_Pos);
 8004104:	601a      	str	r2, [r3, #0]
	if ((frame->flags & CAN_FRAME_RTR) != 0) {
 8004106:	796a      	ldrb	r2, [r5, #5]
 8004108:	0792      	lsls	r2, r2, #30
		mailbox->TIR |= CAN_TI1R_RTR;
 800410a:	bf42      	ittt	mi
 800410c:	681a      	ldrmi	r2, [r3, #0]
 800410e:	f042 0202 	orrmi.w	r2, r2, #2
 8004112:	601a      	strmi	r2, [r3, #0]
	mailbox->TDTR = (mailbox->TDTR & ~CAN_TDT1R_DLC) |
 8004114:	6859      	ldr	r1, [r3, #4]
			((frame->dlc & 0xF) << CAN_TDT1R_DLC_Pos);
 8004116:	792a      	ldrb	r2, [r5, #4]
	mailbox->TDTR = (mailbox->TDTR & ~CAN_TDT1R_DLC) |
 8004118:	f021 010f 	bic.w	r1, r1, #15
			((frame->dlc & 0xF) << CAN_TDT1R_DLC_Pos);
 800411c:	f002 020f 	and.w	r2, r2, #15
	mailbox->TDTR = (mailbox->TDTR & ~CAN_TDT1R_DLC) |
 8004120:	430a      	orrs	r2, r1
 8004122:	605a      	str	r2, [r3, #4]
	mailbox->TDLR = frame->data_32[0];
 8004124:	68aa      	ldr	r2, [r5, #8]
 8004126:	609a      	str	r2, [r3, #8]
	mailbox->TDHR = frame->data_32[1];
 8004128:	68ea      	ldr	r2, [r5, #12]
 800412a:	60da      	str	r2, [r3, #12]
	mailbox->TIR |= CAN_TI0R_TXRQ;
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]
	k_mutex_unlock(&data->inst_mutex);
 8004134:	f7ff ff5a 	bl	8003fec <k_mutex_unlock.isra.0>
	return 0;
 8004138:	2000      	movs	r0, #0
 800413a:	e00a      	b.n	8004152 <can_stm32_send+0xd0>
		k_mutex_unlock(&data->inst_mutex);
 800413c:	4630      	mov	r0, r6
 800413e:	f7ff ff55 	bl	8003fec <k_mutex_unlock.isra.0>
	return z_impl_k_sem_take(sem, timeout);
 8004142:	463a      	mov	r2, r7
 8004144:	4643      	mov	r3, r8
 8004146:	4658      	mov	r0, fp
 8004148:	f7ff f842 	bl	80031d0 <z_impl_k_sem_take>
		if (k_sem_take(&data->tx_int_sem, timeout)) {
 800414c:	b118      	cbz	r0, 8004156 <can_stm32_send+0xd4>
			return -EAGAIN;
 800414e:	f06f 000a 	mvn.w	r0, #10
}
 8004152:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		k_mutex_lock(&data->inst_mutex, K_FOREVER);
 8004156:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800415a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800415e:	4630      	mov	r0, r6
 8004160:	f7ff ff42 	bl	8003fe8 <k_mutex_lock.constprop.0.isra.0>
		transmit_status_register = can->TSR;
 8004164:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8004168:	e7ad      	b.n	80040c6 <can_stm32_send+0x44>
	} else if (transmit_status_register & CAN_TSR_TME1) {
 800416a:	f019 6f00 	tst.w	r9, #134217728	; 0x8000000
 800416e:	d004      	beq.n	800417a <can_stm32_send+0xf8>
		mailbox = &can->sTxMailBox[1];
 8004170:	f504 73c8 	add.w	r3, r4, #400	; 0x190
		mb = &data->mb1;
 8004174:	f106 022c 	add.w	r2, r6, #44	; 0x2c
 8004178:	e7af      	b.n	80040da <can_stm32_send+0x58>
	} else if (transmit_status_register & CAN_TSR_TME2) {
 800417a:	f019 5180 	ands.w	r1, r9, #268435456	; 0x10000000
 800417e:	d010      	beq.n	80041a2 <can_stm32_send+0x120>
		mailbox = &can->sTxMailBox[2];
 8004180:	f504 73d0 	add.w	r3, r4, #416	; 0x1a0
		mb = &data->mb2;
 8004184:	f106 0234 	add.w	r2, r6, #52	; 0x34
 8004188:	e7a7      	b.n	80040da <can_stm32_send+0x58>
		return -EINVAL;
 800418a:	f06f 0015 	mvn.w	r0, #21
 800418e:	e7e0      	b.n	8004152 <can_stm32_send+0xd0>
		return -ENOTSUP;
 8004190:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004194:	e7dd      	b.n	8004152 <can_stm32_send+0xd0>
		return -ENETDOWN;
 8004196:	f06f 0072 	mvn.w	r0, #114	; 0x72
 800419a:	e7da      	b.n	8004152 <can_stm32_send+0xd0>
		return -ENETUNREACH;
 800419c:	f06f 0071 	mvn.w	r0, #113	; 0x71
 80041a0:	e7d7      	b.n	8004152 <can_stm32_send+0xd0>
	mb->tx_callback = callback;
 80041a2:	f8c1 a000 	str.w	sl, [r1]
	mb->callback_arg = user_data;
 80041a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041a8:	604b      	str	r3, [r1, #4]
	mailbox->TIR &= CAN_TI0R_TXRQ;
 80041aa:	680b      	ldr	r3, [r1, #0]
 80041ac:	deff      	udf	#255	; 0xff

080041ae <can_stm32_set_mode>:
{
 80041ae:	b570      	push	{r4, r5, r6, lr}
	CAN_TypeDef *can = cfg->can;
 80041b0:	6843      	ldr	r3, [r0, #4]
{
 80041b2:	460d      	mov	r5, r1
	CAN_TypeDef *can = cfg->can;
 80041b4:	681c      	ldr	r4, [r3, #0]
	if ((mode & ~(CAN_MODE_LOOPBACK | CAN_MODE_LISTENONLY | CAN_MODE_ONE_SHOT)) != 0) {
 80041b6:	f031 030b 	bics.w	r3, r1, #11
	struct can_stm32_data *data = dev->data;
 80041ba:	6906      	ldr	r6, [r0, #16]
	if ((mode & ~(CAN_MODE_LOOPBACK | CAN_MODE_LISTENONLY | CAN_MODE_ONE_SHOT)) != 0) {
 80041bc:	d126      	bne.n	800420c <can_stm32_set_mode+0x5e>
	if (data->started) {
 80041be:	f896 30ed 	ldrb.w	r3, [r6, #237]	; 0xed
 80041c2:	bb33      	cbnz	r3, 8004212 <can_stm32_set_mode+0x64>
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 80041c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041c8:	4630      	mov	r0, r6
 80041ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041ce:	f7ff ff0b 	bl	8003fe8 <k_mutex_lock.constprop.0.isra.0>
		can->BTR |= CAN_BTR_LBKM;
 80041d2:	69e3      	ldr	r3, [r4, #28]
	if ((mode & CAN_MODE_LOOPBACK) != 0) {
 80041d4:	07e8      	lsls	r0, r5, #31
		can->BTR |= CAN_BTR_LBKM;
 80041d6:	bf4c      	ite	mi
 80041d8:	f043 4380 	orrmi.w	r3, r3, #1073741824	; 0x40000000
		can->BTR &= ~CAN_BTR_LBKM;
 80041dc:	f023 4380 	bicpl.w	r3, r3, #1073741824	; 0x40000000
 80041e0:	61e3      	str	r3, [r4, #28]
		can->BTR |= CAN_BTR_SILM;
 80041e2:	69e3      	ldr	r3, [r4, #28]
	if ((mode & CAN_MODE_LISTENONLY) != 0) {
 80041e4:	07a9      	lsls	r1, r5, #30
		can->BTR |= CAN_BTR_SILM;
 80041e6:	bf4c      	ite	mi
 80041e8:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
		can->BTR &= ~CAN_BTR_SILM;
 80041ec:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80041f0:	61e3      	str	r3, [r4, #28]
		can->MCR |= CAN_MCR_NART;
 80041f2:	6823      	ldr	r3, [r4, #0]
	if ((mode & CAN_MODE_ONE_SHOT) != 0) {
 80041f4:	072a      	lsls	r2, r5, #28
		can->MCR |= CAN_MCR_NART;
 80041f6:	bf4c      	ite	mi
 80041f8:	f043 0310 	orrmi.w	r3, r3, #16
		can->MCR &= ~CAN_MCR_NART;
 80041fc:	f023 0310 	bicpl.w	r3, r3, #16
	k_mutex_unlock(&data->inst_mutex);
 8004200:	4630      	mov	r0, r6
		can->MCR &= ~CAN_MCR_NART;
 8004202:	6023      	str	r3, [r4, #0]
	k_mutex_unlock(&data->inst_mutex);
 8004204:	f7ff fef2 	bl	8003fec <k_mutex_unlock.isra.0>
	return 0;
 8004208:	2000      	movs	r0, #0
}
 800420a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
 800420c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004210:	e7fb      	b.n	800420a <can_stm32_set_mode+0x5c>
		return -EBUSY;
 8004212:	f06f 000f 	mvn.w	r0, #15
 8004216:	e7f8      	b.n	800420a <can_stm32_set_mode+0x5c>

08004218 <stm32_clock_control_on>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 8004218:	680b      	ldr	r3, [r1, #0]
 800421a:	f1a3 0214 	sub.w	r2, r3, #20
 800421e:	2a08      	cmp	r2, #8
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus,
 8004220:	bf9f      	itttt	ls
 8004222:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 8004226:	f503 3304 	addls.w	r3, r3, #135168	; 0x21000
	return temp & (1 << bit);
}

static ALWAYS_INLINE void sys_set_bits(mem_addr_t addr, unsigned int mask)
{
	uint32_t temp = *(volatile uint32_t *)addr;
 800422a:	681a      	ldrls	r2, [r3, #0]

	*(volatile uint32_t *)addr = temp | mask;
 800422c:	6849      	ldrls	r1, [r1, #4]
	return 0;
 800422e:	bf9b      	ittet	ls
 8004230:	2000      	movls	r0, #0
 8004232:	430a      	orrls	r2, r1
		return -ENOTSUP;
 8004234:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
 8004238:	601a      	strls	r2, [r3, #0]
}
 800423a:	4770      	bx	lr

0800423c <stm32_clock_control_off>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 800423c:	680b      	ldr	r3, [r1, #0]
 800423e:	f1a3 0214 	sub.w	r2, r3, #20
 8004242:	2a08      	cmp	r2, #8
	sys_clear_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus,
 8004244:	bf9f      	itttt	ls
 8004246:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 800424a:	f503 3304 	addls.w	r3, r3, #135168	; 0x21000
}

static ALWAYS_INLINE void sys_clear_bits(mem_addr_t addr, unsigned int mask)
{
	uint32_t temp = *(volatile uint32_t *)addr;
 800424e:	681a      	ldrls	r2, [r3, #0]

	*(volatile uint32_t *)addr = temp & ~mask;
 8004250:	6849      	ldrls	r1, [r1, #4]
	return 0;
 8004252:	bf9b      	ittet	ls
 8004254:	2000      	movls	r0, #0
 8004256:	438a      	bicls	r2, r1
		return -ENOTSUP;
 8004258:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
 800425c:	601a      	strls	r2, [r3, #0]
}
 800425e:	4770      	bx	lr

08004260 <stm32_clock_control_get_status>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == true) {
 8004260:	6808      	ldr	r0, [r1, #0]
 8004262:	f1a0 0314 	sub.w	r3, r0, #20
 8004266:	2b08      	cmp	r3, #8
 8004268:	d80a      	bhi.n	8004280 <stm32_clock_control_get_status+0x20>
		if ((sys_read32(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus) & pclken->enr)
 800426a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800426e:	f500 3004 	add.w	r0, r0, #135168	; 0x21000
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
 8004272:	6802      	ldr	r2, [r0, #0]
 8004274:	684b      	ldr	r3, [r1, #4]
			return CLOCK_CONTROL_STATUS_ON;
 8004276:	4393      	bics	r3, r2
 8004278:	bf14      	ite	ne
 800427a:	2001      	movne	r0, #1
 800427c:	2002      	moveq	r0, #2
 800427e:	4770      	bx	lr
	switch (src_clk) {
 8004280:	2802      	cmp	r0, #2
 8004282:	d003      	beq.n	800428c <stm32_clock_control_get_status+0x2c>
 8004284:	2805      	cmp	r0, #5
 8004286:	bf0c      	ite	eq
 8004288:	2002      	moveq	r0, #2
 800428a:	2001      	movne	r0, #1
}
 800428c:	4770      	bx	lr

0800428e <stm32_clock_control_configure>:
{
 800428e:	b510      	push	{r4, lr}
	err = enabled_clock(pclken->bus);
 8004290:	680b      	ldr	r3, [r1, #0]
	switch (src_clk) {
 8004292:	2b02      	cmp	r3, #2
 8004294:	d001      	beq.n	800429a <stm32_clock_control_configure+0xc>
 8004296:	2b05      	cmp	r3, #5
 8004298:	d121      	bne.n	80042de <stm32_clock_control_configure+0x50>
	if (pclken->enr == NO_SEL) {
 800429a:	684a      	ldr	r2, [r1, #4]
 800429c:	2aff      	cmp	r2, #255	; 0xff
 800429e:	d01c      	beq.n	80042da <stm32_clock_control_configure+0x4c>
	sys_clear_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 80042a0:	b2d3      	uxtb	r3, r2
 80042a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042a6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
	uint32_t temp = *(volatile uint32_t *)addr;
 80042aa:	6818      	ldr	r0, [r3, #0]
		       STM32_CLOCK_MASK_GET(pclken->enr) << STM32_CLOCK_SHIFT_GET(pclken->enr));
 80042ac:	f3c2 3442 	ubfx	r4, r2, #13, #3
 80042b0:	f3c2 2204 	ubfx	r2, r2, #8, #5
	sys_clear_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 80042b4:	fa04 f202 	lsl.w	r2, r4, r2
	*(volatile uint32_t *)addr = temp & ~mask;
 80042b8:	ea20 0202 	bic.w	r2, r0, r2
 80042bc:	601a      	str	r2, [r3, #0]
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 80042be:	6849      	ldr	r1, [r1, #4]
 80042c0:	b2cb      	uxtb	r3, r1
 80042c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042c6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
	uint32_t temp = *(volatile uint32_t *)addr;
 80042ca:	6818      	ldr	r0, [r3, #0]
		     STM32_CLOCK_VAL_GET(pclken->enr) << STM32_CLOCK_SHIFT_GET(pclken->enr));
 80042cc:	f3c1 4202 	ubfx	r2, r1, #16, #3
 80042d0:	f3c1 2104 	ubfx	r1, r1, #8, #5
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 80042d4:	408a      	lsls	r2, r1
	*(volatile uint32_t *)addr = temp | mask;
 80042d6:	4302      	orrs	r2, r0
 80042d8:	601a      	str	r2, [r3, #0]
		return 0;
 80042da:	2000      	movs	r0, #0
}
 80042dc:	bd10      	pop	{r4, pc}
	switch (src_clk) {
 80042de:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80042e2:	e7fb      	b.n	80042dc <stm32_clock_control_configure+0x4e>

080042e4 <config_enable_default_clocks>:
	if (IS_ENABLED(STM32_LSE_ENABLED)) {
		/* Set the PWREN and BKPEN bits in the RCC_APB1ENR register */
		LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
		LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_BKP);
	}
}
 80042e4:	4770      	bx	lr

080042e6 <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80042e6:	6843      	ldr	r3, [r0, #4]
}
 80042e8:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80042ea:	685b      	ldr	r3, [r3, #4]
  return (READ_REG(GPIOx->IDR));
 80042ec:	689b      	ldr	r3, [r3, #8]
	*value = LL_GPIO_ReadInputPort(gpio);
 80042ee:	600b      	str	r3, [r1, #0]
}
 80042f0:	4770      	bx	lr

080042f2 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80042f2:	6843      	ldr	r3, [r0, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
  return (uint32_t)(READ_REG(GPIOx->ODR));
 80042f6:	68d8      	ldr	r0, [r3, #12]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 80042f8:	4042      	eors	r2, r0
 80042fa:	400a      	ands	r2, r1
 80042fc:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 80042fe:	60da      	str	r2, [r3, #12]
}
 8004300:	2000      	movs	r0, #0
 8004302:	4770      	bx	lr

08004304 <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004304:	6843      	ldr	r3, [r0, #4]
}
 8004306:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004308:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 800430a:	6119      	str	r1, [r3, #16]
}
 800430c:	4770      	bx	lr

0800430e <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800430e:	6843      	ldr	r3, [r0, #4]
}
 8004310:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004312:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BRR, pins);
 8004314:	6159      	str	r1, [r3, #20]
}
 8004316:	4770      	bx	lr

08004318 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004318:	6843      	ldr	r3, [r0, #4]
}
 800431a:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800431c:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 800431e:	68d3      	ldr	r3, [r2, #12]
 8004320:	404b      	eors	r3, r1
 8004322:	60d3      	str	r3, [r2, #12]
}
 8004324:	4770      	bx	lr

08004326 <gpio_stm32_manage_callback>:
{
 8004326:	b510      	push	{r4, lr}
	struct gpio_stm32_data *data = dev->data;
 8004328:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 800432a:	6898      	ldr	r0, [r3, #8]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 800432c:	b1f8      	cbz	r0, 800436e <gpio_stm32_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800432e:	4288      	cmp	r0, r1
 8004330:	d119      	bne.n	8004366 <gpio_stm32_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
 8004332:	68dc      	ldr	r4, [r3, #12]
	return node->next;
 8004334:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 8004336:	42a1      	cmp	r1, r4
	list->head = node;
 8004338:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 800433a:	d100      	bne.n	800433e <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 800433c:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 800433e:	2000      	movs	r0, #0
 8004340:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
 8004342:	b12a      	cbz	r2, 8004350 <gpio_stm32_manage_callback+0x2a>
	return list->head;
 8004344:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 8004346:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 8004348:	68da      	ldr	r2, [r3, #12]
	list->head = node;
 800434a:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 800434c:	b902      	cbnz	r2, 8004350 <gpio_stm32_manage_callback+0x2a>
	list->tail = node;
 800434e:	60d9      	str	r1, [r3, #12]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8004350:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->cb, callback, set);
 8004352:	e010      	b.n	8004376 <gpio_stm32_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8004354:	4281      	cmp	r1, r0
 8004356:	d106      	bne.n	8004366 <gpio_stm32_manage_callback+0x40>
	return node->next;
 8004358:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
 800435a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 800435c:	68d8      	ldr	r0, [r3, #12]
 800435e:	4281      	cmp	r1, r0
 8004360:	d1ed      	bne.n	800433e <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 8004362:	60dc      	str	r4, [r3, #12]
}
 8004364:	e7eb      	b.n	800433e <gpio_stm32_manage_callback+0x18>
	return node->next;
 8004366:	4604      	mov	r4, r0
 8004368:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800436a:	2800      	cmp	r0, #0
 800436c:	d1f2      	bne.n	8004354 <gpio_stm32_manage_callback+0x2e>
			if (!set) {
 800436e:	2a00      	cmp	r2, #0
 8004370:	d1e8      	bne.n	8004344 <gpio_stm32_manage_callback+0x1e>
				return -EINVAL;
 8004372:	f06f 0015 	mvn.w	r0, #21
}
 8004376:	bd10      	pop	{r4, pc}

08004378 <LL_GPIO_SetPinMode>:
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004378:	fa91 f3a1 	rbit	r3, r1
  return __builtin_clz(value);
 800437c:	fab3 f383 	clz	r3, r3
{
 8004380:	b570      	push	{r4, r5, r6, lr}
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8004382:	0e0d      	lsrs	r5, r1, #24
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8004384:	260f      	movs	r6, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004386:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 800438a:	fab1 f181 	clz	r1, r1
 800438e:	5944      	ldr	r4, [r0, r5]
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	fa06 f303 	lsl.w	r3, r6, r3
 8004396:	0089      	lsls	r1, r1, #2
 8004398:	ea24 0403 	bic.w	r4, r4, r3
 800439c:	408a      	lsls	r2, r1
 800439e:	4322      	orrs	r2, r4
 80043a0:	5142      	str	r2, [r0, r5]
}
 80043a2:	bd70      	pop	{r4, r5, r6, pc}

080043a4 <LL_GPIO_SetPinSpeed>:
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a4:	fa91 f3a1 	rbit	r3, r1
  return __builtin_clz(value);
 80043a8:	fab3 f383 	clz	r3, r3
{
 80043ac:	b570      	push	{r4, r5, r6, lr}
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80043ae:	0e0d      	lsrs	r5, r1, #24
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80043b0:	2603      	movs	r6, #3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b2:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 80043b6:	fab1 f181 	clz	r1, r1
 80043ba:	5944      	ldr	r4, [r0, r5]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	fa06 f303 	lsl.w	r3, r6, r3
 80043c2:	0089      	lsls	r1, r1, #2
 80043c4:	ea24 0403 	bic.w	r4, r4, r3
 80043c8:	408a      	lsls	r2, r1
 80043ca:	4322      	orrs	r2, r4
 80043cc:	5142      	str	r2, [r0, r5]
}
 80043ce:	bd70      	pop	{r4, r5, r6, pc}

080043d0 <LL_GPIO_SetPinOutputType>:
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d0:	fa91 f3a1 	rbit	r3, r1
  return __builtin_clz(value);
 80043d4:	fab3 f383 	clz	r3, r3
{
 80043d8:	b570      	push	{r4, r5, r6, lr}
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80043da:	0e0d      	lsrs	r5, r1, #24
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80043dc:	2604      	movs	r6, #4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043de:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 80043e2:	fab1 f181 	clz	r1, r1
 80043e6:	5944      	ldr	r4, [r0, r5]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	fa06 f303 	lsl.w	r3, r6, r3
 80043ee:	0089      	lsls	r1, r1, #2
 80043f0:	ea24 0403 	bic.w	r4, r4, r3
 80043f4:	408a      	lsls	r2, r1
 80043f6:	4322      	orrs	r2, r4
 80043f8:	5142      	str	r2, [r0, r5]
}
 80043fa:	bd70      	pop	{r4, r5, r6, pc}

080043fc <gpio_stm32_isr>:
{
 80043fc:	b570      	push	{r4, r5, r6, lr}
 80043fe:	460b      	mov	r3, r1
 8004400:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8004402:	b121      	cbz	r1, 800440e <gpio_stm32_isr+0x12>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8004404:	2501      	movs	r5, #1
 8004406:	685e      	ldr	r6, [r3, #4]
	return node->next;
 8004408:	680c      	ldr	r4, [r1, #0]
 800440a:	4085      	lsls	r5, r0
 800440c:	b901      	cbnz	r1, 8004410 <gpio_stm32_isr+0x14>
}
 800440e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
 8004410:	688a      	ldr	r2, [r1, #8]
 8004412:	402a      	ands	r2, r5
 8004414:	d002      	beq.n	800441c <gpio_stm32_isr+0x20>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8004416:	4630      	mov	r0, r6
 8004418:	684b      	ldr	r3, [r1, #4]
 800441a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800441c:	b11c      	cbz	r4, 8004426 <gpio_stm32_isr+0x2a>
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	4621      	mov	r1, r4
 8004422:	461c      	mov	r4, r3
 8004424:	e7f2      	b.n	800440c <gpio_stm32_isr+0x10>
 8004426:	4623      	mov	r3, r4
 8004428:	e7fa      	b.n	8004420 <gpio_stm32_isr+0x24>

0800442a <gpio_stm32_configure_raw.constprop.0.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 800442a:	b570      	push	{r4, r5, r6, lr}
	pinval = (1 << pin) << GPIO_PIN_MASK_POS;
 800442c:	2401      	movs	r4, #1
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 800442e:	4615      	mov	r5, r2
	if (pin < 8) {
 8004430:	2907      	cmp	r1, #7
	pinval = (1 << pin) << GPIO_PIN_MASK_POS;
 8004432:	fa04 f201 	lsl.w	r2, r4, r1
		pinval |= (1 << (pin % 8)) | 0x04000000;
 8004436:	bfc8      	it	gt
 8004438:	f001 0107 	andgt.w	r1, r1, #7
	pinval = (1 << pin) << GPIO_PIN_MASK_POS;
 800443c:	ea4f 2302 	mov.w	r3, r2, lsl #8
		pinval |= (1 << (pin % 8)) | 0x04000000;
 8004440:	bfc5      	ittet	gt
 8004442:	408c      	lslgt	r4, r1
 8004444:	431c      	orrgt	r4, r3
		pinval |= 1 << pin;
 8004446:	ea42 0403 	orrle.w	r4, r2, r3
		pinval |= (1 << (pin % 8)) | 0x04000000;
 800444a:	f044 6480 	orrgt.w	r4, r4, #67108864	; 0x4000000
	if (temp == STM32_MODE_INPUT) {
 800444e:	07ea      	lsls	r2, r5, #31
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004450:	6840      	ldr	r0, [r0, #4]
	if (temp == STM32_MODE_INPUT) {
 8004452:	d422      	bmi.n	800449a <gpio_stm32_configure_raw.constprop.0.isra.0+0x70>
		if (temp == STM32_CNF_IN_ANALOG) {
 8004454:	f015 0206 	ands.w	r2, r5, #6
 8004458:	d104      	bne.n	8004464 <gpio_stm32_configure_raw.constprop.0.isra.0+0x3a>
			LL_GPIO_SetPinMode(gpio, pin_ll, LL_GPIO_MODE_FLOATING);
 800445a:	4621      	mov	r1, r4
}
 800445c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LL_GPIO_SetPinMode(gpio, pin_ll, LL_GPIO_MODE_FLOATING);
 8004460:	f7ff bf8a 	b.w	8004378 <LL_GPIO_SetPinMode>
		} else if (temp == STM32_CNF_IN_FLOAT) {
 8004464:	2a02      	cmp	r2, #2
 8004466:	d101      	bne.n	800446c <gpio_stm32_configure_raw.constprop.0.isra.0+0x42>
			LL_GPIO_SetPinMode(gpio, pin_ll, LL_GPIO_MODE_FLOATING);
 8004468:	2204      	movs	r2, #4
 800446a:	e7f6      	b.n	800445a <gpio_stm32_configure_raw.constprop.0.isra.0+0x30>
			if (temp == STM32_PUPD_PULL_UP) {
 800446c:	f405 75c0 	and.w	r5, r5, #384	; 0x180
 8004470:	2d80      	cmp	r5, #128	; 0x80
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8004472:	ea6f 2614 	mvn.w	r6, r4, lsr #8
 8004476:	ea4f 2214 	mov.w	r2, r4, lsr #8
 800447a:	d10b      	bne.n	8004494 <gpio_stm32_configure_raw.constprop.0.isra.0+0x6a>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447c:	fa92 f2a2 	rbit	r2, r2
 8004480:	2301      	movs	r3, #1
  return __builtin_clz(value);
 8004482:	fab2 f282 	clz	r2, r2
 8004486:	68c1      	ldr	r1, [r0, #12]
 8004488:	4093      	lsls	r3, r2
 800448a:	4031      	ands	r1, r6
 800448c:	430b      	orrs	r3, r1
			LL_GPIO_SetPinMode(gpio, pin_ll, LL_GPIO_MODE_INPUT);
 800448e:	2208      	movs	r2, #8
 8004490:	60c3      	str	r3, [r0, #12]
 8004492:	e7e2      	b.n	800445a <gpio_stm32_configure_raw.constprop.0.isra.0+0x30>
 8004494:	68c3      	ldr	r3, [r0, #12]
 8004496:	4033      	ands	r3, r6
 8004498:	e7f9      	b.n	800448e <gpio_stm32_configure_raw.constprop.0.isra.0+0x64>
		if (temp == STM32_CNF_GP_OUTPUT) {
 800449a:	066b      	lsls	r3, r5, #25
			LL_GPIO_SetPinMode(gpio, pin_ll, LL_GPIO_MODE_OUTPUT);
 800449c:	bf54      	ite	pl
 800449e:	2201      	movpl	r2, #1
			LL_GPIO_SetPinMode(gpio, pin_ll,
 80044a0:	2209      	movmi	r2, #9
 80044a2:	4621      	mov	r1, r4
 80044a4:	f7ff ff68 	bl	8004378 <LL_GPIO_SetPinMode>
		if (temp == STM32_CNF_PUSH_PULL) {
 80044a8:	f015 0220 	ands.w	r2, r5, #32
			LL_GPIO_SetPinOutputType(gpio, pin_ll,
 80044ac:	bf18      	it	ne
 80044ae:	2204      	movne	r2, #4
 80044b0:	4621      	mov	r1, r4
 80044b2:	f005 0518 	and.w	r5, r5, #24
 80044b6:	f7ff ff8b 	bl	80043d0 <LL_GPIO_SetPinOutputType>
		if (temp == STM32_MODE_OUTPUT_MAX_2) {
 80044ba:	2d08      	cmp	r5, #8
 80044bc:	d105      	bne.n	80044ca <gpio_stm32_configure_raw.constprop.0.isra.0+0xa0>
			LL_GPIO_SetPinSpeed(gpio, pin_ll,
 80044be:	2202      	movs	r2, #2
			LL_GPIO_SetPinSpeed(gpio, pin_ll,
 80044c0:	4621      	mov	r1, r4
}
 80044c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LL_GPIO_SetPinSpeed(gpio, pin_ll,
 80044c6:	f7ff bf6d 	b.w	80043a4 <LL_GPIO_SetPinSpeed>
		} else if (temp == STM32_MODE_OUTPUT_MAX_10) {
 80044ca:	b90d      	cbnz	r5, 80044d0 <gpio_stm32_configure_raw.constprop.0.isra.0+0xa6>
			LL_GPIO_SetPinSpeed(gpio, pin_ll,
 80044cc:	2201      	movs	r2, #1
 80044ce:	e7f7      	b.n	80044c0 <gpio_stm32_configure_raw.constprop.0.isra.0+0x96>
			LL_GPIO_SetPinSpeed(gpio, pin_ll,
 80044d0:	2203      	movs	r2, #3
 80044d2:	e7f5      	b.n	80044c0 <gpio_stm32_configure_raw.constprop.0.isra.0+0x96>

080044d4 <gpio_stm32_config>:
{
 80044d4:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 80044d6:	039a      	lsls	r2, r3, #14
{
 80044d8:	b510      	push	{r4, lr}
	if ((flags & GPIO_OUTPUT) != 0) {
 80044da:	d518      	bpl.n	800450e <gpio_stm32_config+0x3a>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 80044dc:	079c      	lsls	r4, r3, #30
 80044de:	d50f      	bpl.n	8004500 <gpio_stm32_config+0x2c>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 80044e0:	075a      	lsls	r2, r3, #29
 80044e2:	d52d      	bpl.n	8004540 <gpio_stm32_config+0x6c>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 80044e4:	2221      	movs	r2, #33	; 0x21
		if ((flags & GPIO_PULL_UP) != 0) {
 80044e6:	06dc      	lsls	r4, r3, #27
 80044e8:	d50c      	bpl.n	8004504 <gpio_stm32_config+0x30>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80044ea:	f042 0284 	orr.w	r2, r2, #132	; 0x84
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 80044ee:	f413 2f00 	tst.w	r3, #524288	; 0x80000
	const struct gpio_stm32_config *cfg = dev->config;
 80044f2:	6844      	ldr	r4, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 80044f4:	d01b      	beq.n	800452e <gpio_stm32_config+0x5a>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 80044f6:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80044f8:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 80044fa:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BSRR, pins);
 80044fc:	6123      	str	r3, [r4, #16]
	return 0;
 80044fe:	e011      	b.n	8004524 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8004500:	2201      	movs	r2, #1
 8004502:	e7f0      	b.n	80044e6 <gpio_stm32_config+0x12>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8004504:	069c      	lsls	r4, r3, #26
 8004506:	d5f2      	bpl.n	80044ee <gpio_stm32_config+0x1a>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8004508:	f442 7282 	orr.w	r2, r2, #260	; 0x104
	if (err != 0) {
 800450c:	e7ef      	b.n	80044ee <gpio_stm32_config+0x1a>
	} else if  ((flags & GPIO_INPUT) != 0) {
 800450e:	f413 3280 	ands.w	r2, r3, #65536	; 0x10000
 8004512:	d007      	beq.n	8004524 <gpio_stm32_config+0x50>
		if ((flags & GPIO_PULL_UP) != 0) {
 8004514:	06dc      	lsls	r4, r3, #27
 8004516:	d411      	bmi.n	800453c <gpio_stm32_config+0x68>
			*pincfg |= STM32_PINCFG_FLOATING;
 8004518:	f013 0f20 	tst.w	r3, #32
 800451c:	bf14      	ite	ne
 800451e:	f44f 7282 	movne.w	r2, #260	; 0x104
 8004522:	2202      	moveq	r2, #2
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 8004524:	6840      	ldr	r0, [r0, #4]
 8004526:	f7ff ff80 	bl	800442a <gpio_stm32_configure_raw.constprop.0.isra.0>
	return 0;
 800452a:	2000      	movs	r0, #0
}
 800452c:	bd10      	pop	{r4, pc}
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 800452e:	035b      	lsls	r3, r3, #13
 8004530:	d5f8      	bpl.n	8004524 <gpio_stm32_config+0x50>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8004532:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004534:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8004536:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BRR, pins);
 8004538:	6163      	str	r3, [r4, #20]
	return 0;
 800453a:	e7f3      	b.n	8004524 <gpio_stm32_config+0x50>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800453c:	2284      	movs	r2, #132	; 0x84
 800453e:	e7f1      	b.n	8004524 <gpio_stm32_config+0x50>
				return -ENOTSUP;
 8004540:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004544:	e7f2      	b.n	800452c <gpio_stm32_config+0x58>

08004546 <gpio_stm32_configure>:
{
 8004546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004548:	461f      	mov	r7, r3
 800454a:	4604      	mov	r4, r0
	gpio_stm32_configure_raw(dev, pin, conf, func);
 800454c:	6840      	ldr	r0, [r0, #4]
{
 800454e:	460e      	mov	r6, r1
 8004550:	4615      	mov	r5, r2
	gpio_stm32_configure_raw(dev, pin, conf, func);
 8004552:	f7ff ff6a 	bl	800442a <gpio_stm32_configure_raw.constprop.0.isra.0>
	if (func == IS_GPIO_OUT) {
 8004556:	2f03      	cmp	r7, #3
 8004558:	d108      	bne.n	800456c <gpio_stm32_configure+0x26>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 800455a:	2301      	movs	r3, #1
 800455c:	fa03 f606 	lsl.w	r6, r3, r6
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004560:	6863      	ldr	r3, [r4, #4]
		if (gpio_out == STM32_ODR_1) {
 8004562:	05aa      	lsls	r2, r5, #22
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004564:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 8004566:	bf4c      	ite	mi
 8004568:	611e      	strmi	r6, [r3, #16]
	WRITE_REG(gpio->BRR, pins);
 800456a:	615e      	strpl	r6, [r3, #20]
}
 800456c:	2000      	movs	r0, #0
 800456e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004570 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 8004570:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 8004572:	6803      	ldr	r3, [r0, #0]
 8004574:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
 8004576:	7905      	ldrb	r5, [r0, #4]
 8004578:	6804      	ldr	r4, [r0, #0]
 800457a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800457e:	42a3      	cmp	r3, r4
 8004580:	d302      	bcc.n	8004588 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
 8004582:	f06f 0001 	mvn.w	r0, #1
}
 8004586:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 8004588:	795c      	ldrb	r4, [r3, #5]
 800458a:	428c      	cmp	r4, r1
 800458c:	d001      	beq.n	8004592 <pinctrl_lookup_state+0x22>
		(*state)++;
 800458e:	3308      	adds	r3, #8
 8004590:	e7f0      	b.n	8004574 <pinctrl_lookup_state+0x4>
			return 0;
 8004592:	2000      	movs	r0, #0
 8004594:	e7f7      	b.n	8004586 <pinctrl_lookup_state+0x16>

08004596 <LL_TIM_OC_SetCompareCH1>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004596:	6341      	str	r1, [r0, #52]	; 0x34
}
 8004598:	4770      	bx	lr

0800459a <LL_TIM_OC_SetCompareCH2>:
  WRITE_REG(TIMx->CCR2, CompareValue);
 800459a:	6381      	str	r1, [r0, #56]	; 0x38
}
 800459c:	4770      	bx	lr

0800459e <LL_TIM_OC_SetCompareCH3>:
  WRITE_REG(TIMx->CCR3, CompareValue);
 800459e:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 80045a0:	4770      	bx	lr

080045a2 <LL_TIM_OC_SetCompareCH4>:
  WRITE_REG(TIMx->CCR4, CompareValue);
 80045a2:	6401      	str	r1, [r0, #64]	; 0x40
}
 80045a4:	4770      	bx	lr

080045a6 <pwm_stm32_get_cycles_per_sec>:
	*cycles = (uint64_t)(data->tim_clk / (cfg->prescaler + 1));
 80045a6:	6841      	ldr	r1, [r0, #4]
 80045a8:	6903      	ldr	r3, [r0, #16]
 80045aa:	6849      	ldr	r1, [r1, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3101      	adds	r1, #1
 80045b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80045b4:	2000      	movs	r0, #0
 80045b6:	e9c2 3000 	strd	r3, r0, [r2]
}
 80045ba:	4770      	bx	lr

080045bc <reset_stm32_status>:
static int reset_stm32_status(const struct device *dev, uint32_t id,
			      uint8_t *status)
{
	const struct reset_stm32_config *config = dev->config;

	*status = !!sys_test_bit(config->base + STM32_RESET_SET_OFFSET(id),
 80045bc:	6843      	ldr	r3, [r0, #4]
 80045be:	f3c1 104b 	ubfx	r0, r1, #5, #12
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f001 011f 	and.w	r1, r1, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 80045c8:	58c0      	ldr	r0, [r0, r3]
	return temp & (1 << bit);
 80045ca:	2301      	movs	r3, #1
 80045cc:	408b      	lsls	r3, r1
 80045ce:	4203      	tst	r3, r0
 80045d0:	bf14      	ite	ne
 80045d2:	2301      	movne	r3, #1
 80045d4:	2300      	moveq	r3, #0
				 STM32_RESET_REG_BIT(id));

	return 0;
}
 80045d6:	2000      	movs	r0, #0
	*status = !!sys_test_bit(config->base + STM32_RESET_SET_OFFSET(id),
 80045d8:	7013      	strb	r3, [r2, #0]
}
 80045da:	4770      	bx	lr

080045dc <reset_stm32_line_assert>:

static int reset_stm32_line_assert(const struct device *dev, uint32_t id)
{
 80045dc:	b510      	push	{r4, lr}
	const struct reset_stm32_config *config = dev->config;

	sys_set_bit(config->base + STM32_RESET_SET_OFFSET(id),
 80045de:	6843      	ldr	r3, [r0, #4]
 80045e0:	f3c1 104b 	ubfx	r0, r1, #5, #12
 80045e4:	681a      	ldr	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 80045e6:	2301      	movs	r3, #1
	uint32_t temp = *(volatile uint32_t *)addr;
 80045e8:	5884      	ldr	r4, [r0, r2]
 80045ea:	f001 011f 	and.w	r1, r1, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
 80045ee:	408b      	lsls	r3, r1
 80045f0:	4323      	orrs	r3, r4
 80045f2:	5083      	str	r3, [r0, r2]
		    STM32_RESET_REG_BIT(id));

	return 0;
}
 80045f4:	2000      	movs	r0, #0
 80045f6:	bd10      	pop	{r4, pc}

080045f8 <reset_stm32_line_deassert>:
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
 80045f8:	2201      	movs	r2, #1

static int reset_stm32_line_deassert(const struct device *dev, uint32_t id)
{
 80045fa:	b510      	push	{r4, lr}

#if DT_INST_PROP(0, set_bit_to_deassert)
	sys_set_bit(config->base + STM32_RESET_CLR_OFFSET(id),
		    STM32_RESET_REG_BIT(id));
#else
	sys_clear_bit(config->base + STM32_RESET_SET_OFFSET(id),
 80045fc:	6843      	ldr	r3, [r0, #4]
 80045fe:	f3c1 144b 	ubfx	r4, r1, #5, #12
 8004602:	6818      	ldr	r0, [r3, #0]
 8004604:	f001 011f 	and.w	r1, r1, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 8004608:	5823      	ldr	r3, [r4, r0]
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
 800460a:	408a      	lsls	r2, r1
 800460c:	ea23 0302 	bic.w	r3, r3, r2
 8004610:	5023      	str	r3, [r4, r0]
		      STM32_RESET_REG_BIT(id));
#endif

	return 0;
}
 8004612:	2000      	movs	r0, #0
 8004614:	bd10      	pop	{r4, pc}

08004616 <reset_stm32_line_toggle>:

static int reset_stm32_line_toggle(const struct device *dev, uint32_t id)
{
 8004616:	b538      	push	{r3, r4, r5, lr}
 8004618:	4604      	mov	r4, r0
 800461a:	460d      	mov	r5, r1
	reset_stm32_line_assert(dev, id);
 800461c:	f7ff ffde 	bl	80045dc <reset_stm32_line_assert>
	reset_stm32_line_deassert(dev, id);
 8004620:	4629      	mov	r1, r5
 8004622:	4620      	mov	r0, r4
 8004624:	f7ff ffe8 	bl	80045f8 <reset_stm32_line_deassert>

	return 0;
}
 8004628:	2000      	movs	r0, #0
 800462a:	bd38      	pop	{r3, r4, r5, pc}

0800462c <LL_USART_ClearFlag_FE>:
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 800462c:	6803      	ldr	r3, [r0, #0]
{
 800462e:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 8004630:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8004632:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 8004634:	6843      	ldr	r3, [r0, #4]
 8004636:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8004638:	9b01      	ldr	r3, [sp, #4]
}
 800463a:	b002      	add	sp, #8
 800463c:	4770      	bx	lr

0800463e <uart_stm32_set_baudrate>:
{
 800463e:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (clock_control_get_rate(data->clock,
 8004640:	6903      	ldr	r3, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 8004642:	6845      	ldr	r5, [r0, #4]
		if (clock_control_get_rate(data->clock,
 8004644:	6858      	ldr	r0, [r3, #4]
{
 8004646:	460c      	mov	r4, r1
	if (api->get_rate == NULL) {
 8004648:	6883      	ldr	r3, [r0, #8]
					   (clock_control_subsys_t)&config->pclken[0],
 800464a:	6869      	ldr	r1, [r5, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	b1bb      	cbz	r3, 8004680 <uart_stm32_set_baudrate+0x42>
	return api->get_rate(dev, sys, rate);
 8004650:	aa01      	add	r2, sp, #4
 8004652:	4798      	blx	r3
		if (clock_control_get_rate(data->clock,
 8004654:	2800      	cmp	r0, #0
 8004656:	db13      	blt.n	8004680 <uart_stm32_set_baudrate+0x42>
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004658:	2219      	movs	r2, #25
 800465a:	9b01      	ldr	r3, [sp, #4]
 800465c:	00a4      	lsls	r4, r4, #2
 800465e:	4353      	muls	r3, r2
 8004660:	2264      	movs	r2, #100	; 0x64
 8004662:	fbb3 f1f4 	udiv	r1, r3, r4
 8004666:	fbb1 f0f2 	udiv	r0, r1, r2
 800466a:	fb02 1310 	mls	r3, r2, r0, r1
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	3332      	adds	r3, #50	; 0x32
 8004672:	fbb3 f3f2 	udiv	r3, r3, r2
		LL_USART_SetBaudRate(config->usart,
 8004676:	682d      	ldr	r5, [r5, #0]
 8004678:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800467c:	b29b      	uxth	r3, r3
 800467e:	60ab      	str	r3, [r5, #8]
}
 8004680:	b003      	add	sp, #12
 8004682:	bd30      	pop	{r4, r5, pc}

08004684 <uart_stm32_poll_in>:
{
 8004684:	b508      	push	{r3, lr}
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 8004686:	6843      	ldr	r3, [r0, #4]
 8004688:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800468a:	6803      	ldr	r3, [r0, #0]
 800468c:	071a      	lsls	r2, r3, #28
 800468e:	d501      	bpl.n	8004694 <uart_stm32_poll_in+0x10>
		LL_USART_ClearFlag_ORE(config->usart);
 8004690:	f7ff ffcc 	bl	800462c <LL_USART_ClearFlag_FE>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8004694:	6803      	ldr	r3, [r0, #0]
	if (!LL_USART_IsActiveFlag_RXNE(config->usart)) {
 8004696:	069b      	lsls	r3, r3, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8004698:	bf49      	itett	mi
 800469a:	6843      	ldrmi	r3, [r0, #4]
		return -1;
 800469c:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
	return 0;
 80046a0:	2000      	movmi	r0, #0
 80046a2:	700b      	strbmi	r3, [r1, #0]
}
 80046a4:	bd08      	pop	{r3, pc}

080046a6 <uart_stm32_poll_out>:
{
 80046a6:	b510      	push	{r4, lr}
	const struct uart_stm32_config *config = dev->config;
 80046a8:	6840      	ldr	r0, [r0, #4]
		if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 80046aa:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80046ac:	6813      	ldr	r3, [r2, #0]
 80046ae:	061b      	lsls	r3, r3, #24
 80046b0:	d5fc      	bpl.n	80046ac <uart_stm32_poll_out+0x6>
	__asm__ volatile(
 80046b2:	f04f 0210 	mov.w	r2, #16
 80046b6:	f3ef 8311 	mrs	r3, BASEPRI
 80046ba:	f382 8812 	msr	BASEPRI_MAX, r2
 80046be:	f3bf 8f6f 	isb	sy
			if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 80046c2:	6802      	ldr	r2, [r0, #0]
 80046c4:	6814      	ldr	r4, [r2, #0]
 80046c6:	0624      	lsls	r4, r4, #24
 80046c8:	d404      	bmi.n	80046d4 <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 80046d2:	e7ea      	b.n	80046aa <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 80046d4:	6051      	str	r1, [r2, #4]
	__asm__ volatile(
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
}
 80046de:	bd10      	pop	{r4, pc}

080046e0 <uart_stm32_err_check>:
{
 80046e0:	b508      	push	{r3, lr}
	const struct uart_stm32_config *config = dev->config;
 80046e2:	6841      	ldr	r1, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 80046e4:	680b      	ldr	r3, [r1, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80046e6:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	f3c2 02c0 	ubfx	r2, r2, #3, #1
	if (LL_USART_IsActiveFlag_PE(config->usart)) {
 80046ee:	07c0      	lsls	r0, r0, #31
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80046f0:	6818      	ldr	r0, [r3, #0]
		err |= UART_ERROR_PARITY;
 80046f2:	bf48      	it	mi
 80046f4:	f042 0202 	orrmi.w	r2, r2, #2
	if (LL_USART_IsActiveFlag_FE(config->usart)) {
 80046f8:	0780      	lsls	r0, r0, #30
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 80046fa:	6818      	ldr	r0, [r3, #0]
		err |= UART_ERROR_FRAMING;
 80046fc:	bf48      	it	mi
 80046fe:	f042 0204 	orrmi.w	r2, r2, #4
	if (LL_USART_IsActiveFlag_NE(config->usart)) {
 8004702:	0740      	lsls	r0, r0, #29
  return (READ_BIT(USARTx->SR, USART_SR_LBD) == (USART_SR_LBD));
 8004704:	6818      	ldr	r0, [r3, #0]
		err |= UART_ERROR_NOISE;
 8004706:	bf48      	it	mi
 8004708:	f042 0220 	orrmi.w	r2, r2, #32
	if (LL_USART_IsActiveFlag_LBD(config->usart)) {
 800470c:	05c0      	lsls	r0, r0, #23
  WRITE_REG(USARTx->SR, ~(USART_SR_LBD));
 800470e:	bf42      	ittt	mi
 8004710:	f46f 7080 	mvnmi.w	r0, #256	; 0x100
		err |= UART_BREAK;
 8004714:	f042 0208 	orrmi.w	r2, r2, #8
 8004718:	6018      	strmi	r0, [r3, #0]
	if (err & UART_ERROR_OVERRUN) {
 800471a:	07d0      	lsls	r0, r2, #31
 800471c:	d502      	bpl.n	8004724 <uart_stm32_err_check+0x44>
		LL_USART_ClearFlag_ORE(config->usart);
 800471e:	6808      	ldr	r0, [r1, #0]
 8004720:	f7ff ff84 	bl	800462c <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_PARITY) {
 8004724:	0793      	lsls	r3, r2, #30
 8004726:	d502      	bpl.n	800472e <uart_stm32_err_check+0x4e>
		LL_USART_ClearFlag_PE(config->usart);
 8004728:	6808      	ldr	r0, [r1, #0]
 800472a:	f7ff ff7f 	bl	800462c <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_FRAMING) {
 800472e:	0750      	lsls	r0, r2, #29
 8004730:	d502      	bpl.n	8004738 <uart_stm32_err_check+0x58>
		LL_USART_ClearFlag_FE(config->usart);
 8004732:	6808      	ldr	r0, [r1, #0]
 8004734:	f7ff ff7a 	bl	800462c <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_NOISE) {
 8004738:	0693      	lsls	r3, r2, #26
 800473a:	d502      	bpl.n	8004742 <uart_stm32_err_check+0x62>
		LL_USART_ClearFlag_NE(config->usart);
 800473c:	6808      	ldr	r0, [r1, #0]
 800473e:	f7ff ff75 	bl	800462c <LL_USART_ClearFlag_FE>
}
 8004742:	4610      	mov	r0, r2
 8004744:	bd08      	pop	{r3, pc}

08004746 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8004746:	6903      	ldr	r3, [r0, #16]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	600b      	str	r3, [r1, #0]
	return LL_USART_GetParity(config->usart);
 800474c:	6843      	ldr	r3, [r0, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8004756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475a:	d02f      	beq.n	80047bc <uart_stm32_config_get+0x76>
 800475c:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 8004760:	f1dc 0300 	rsbs	r3, ip, #0
 8004764:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8004768:	710b      	strb	r3, [r1, #4]
	return LL_USART_GetStopBitsLength(config->usart);
 800476a:	6843      	ldr	r3, [r0, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8004774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004778:	d022      	beq.n	80047c0 <uart_stm32_config_get+0x7a>
 800477a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800477e:	d021      	beq.n	80047c4 <uart_stm32_config_get+0x7e>
		return UART_CFG_STOP_BITS_2;
 8004780:	2b00      	cmp	r3, #0
 8004782:	bf0c      	ite	eq
 8004784:	2301      	moveq	r3, #1
 8004786:	2303      	movne	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8004788:	714b      	strb	r3, [r1, #5]
	return LL_USART_GetDataWidth(config->usart);
 800478a:	6843      	ldr	r3, [r0, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800478e:	68da      	ldr	r2, [r3, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8004790:	68db      	ldr	r3, [r3, #12]
	switch (db) {
 8004792:	04d2      	lsls	r2, r2, #19
 8004794:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004798:	d516      	bpl.n	80047c8 <uart_stm32_config_get+0x82>
			return UART_CFG_DATA_BITS_9;
 800479a:	2b00      	cmp	r3, #0
 800479c:	bf14      	ite	ne
 800479e:	2303      	movne	r3, #3
 80047a0:	2304      	moveq	r3, #4
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 80047a2:	718b      	strb	r3, [r1, #6]
	return LL_USART_GetHWFlowCtrl(config->usart);
 80047a4:	6843      	ldr	r3, [r0, #4]
}
 80047a6:	2000      	movs	r0, #0
	return LL_USART_GetHWFlowCtrl(config->usart);
 80047a8:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 80047b0:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80047b4:	4253      	negs	r3, r2
 80047b6:	4153      	adcs	r3, r2
 80047b8:	71cb      	strb	r3, [r1, #7]
}
 80047ba:	4770      	bx	lr
	switch (parity) {
 80047bc:	2302      	movs	r3, #2
 80047be:	e7d3      	b.n	8004768 <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 80047c0:	2300      	movs	r3, #0
 80047c2:	e7e1      	b.n	8004788 <uart_stm32_config_get+0x42>
		return UART_CFG_STOP_BITS_1_5;
 80047c4:	2302      	movs	r3, #2
 80047c6:	e7df      	b.n	8004788 <uart_stm32_config_get+0x42>
			return UART_CFG_DATA_BITS_8;
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	bf14      	ite	ne
 80047cc:	2302      	movne	r3, #2
 80047ce:	2303      	moveq	r3, #3
 80047d0:	e7e7      	b.n	80047a2 <uart_stm32_config_get+0x5c>

080047d2 <spi_context_get_next_buf>:
{
 80047d2:	b530      	push	{r4, r5, lr}
 80047d4:	4604      	mov	r4, r0
	while (*count) {
 80047d6:	6808      	ldr	r0, [r1, #0]
 80047d8:	b908      	cbnz	r0, 80047de <spi_context_get_next_buf+0xc>
	*buf_len = 0;
 80047da:	6010      	str	r0, [r2, #0]
	return NULL;
 80047dc:	e008      	b.n	80047f0 <spi_context_get_next_buf+0x1e>
		if (((*current)->len / dfs) != 0) {
 80047de:	6820      	ldr	r0, [r4, #0]
 80047e0:	6845      	ldr	r5, [r0, #4]
 80047e2:	429d      	cmp	r5, r3
 80047e4:	d305      	bcc.n	80047f2 <spi_context_get_next_buf+0x20>
			*buf_len = (*current)->len / dfs;
 80047e6:	fbb5 f5f3 	udiv	r5, r5, r3
 80047ea:	6015      	str	r5, [r2, #0]
			return (*current)->buf;
 80047ec:	6823      	ldr	r3, [r4, #0]
 80047ee:	6818      	ldr	r0, [r3, #0]
}
 80047f0:	bd30      	pop	{r4, r5, pc}
		++(*current);
 80047f2:	3008      	adds	r0, #8
 80047f4:	6020      	str	r0, [r4, #0]
		--(*count);
 80047f6:	6808      	ldr	r0, [r1, #0]
 80047f8:	3801      	subs	r0, #1
 80047fa:	6008      	str	r0, [r1, #0]
 80047fc:	e7eb      	b.n	80047d6 <spi_context_get_next_buf+0x4>

080047fe <spi_context_buffers_setup>:
{
 80047fe:	b570      	push	{r4, r5, r6, lr}
 8004800:	4604      	mov	r4, r0
 8004802:	4615      	mov	r5, r2
 8004804:	461e      	mov	r6, r3
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 8004806:	b9e9      	cbnz	r1, 8004844 <spi_context_buffers_setup+0x46>
 8004808:	6341      	str	r1, [r0, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800480a:	2300      	movs	r3, #0
 800480c:	63a3      	str	r3, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 800480e:	f104 0248 	add.w	r2, r4, #72	; 0x48
 8004812:	4633      	mov	r3, r6
 8004814:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8004818:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800481c:	f7ff ffd9 	bl	80047d2 <spi_context_get_next_buf>
	ctx->tx_buf = (const uint8_t *)
 8004820:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8004822:	b9ad      	cbnz	r5, 8004850 <spi_context_buffers_setup+0x52>
 8004824:	63e5      	str	r5, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8004826:	2300      	movs	r3, #0
 8004828:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 800482a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800482e:	4633      	mov	r3, r6
 8004830:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8004834:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8004838:	f7ff ffcb 	bl	80047d2 <spi_context_get_next_buf>
	ctx->sync_status = 0;
 800483c:	2300      	movs	r3, #0
	ctx->rx_buf = (uint8_t *)
 800483e:	64e0      	str	r0, [r4, #76]	; 0x4c
	ctx->sync_status = 0;
 8004840:	6323      	str	r3, [r4, #48]	; 0x30
}
 8004842:	bd70      	pop	{r4, r5, r6, pc}
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 8004844:	680b      	ldr	r3, [r1, #0]
 8004846:	6343      	str	r3, [r0, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0de      	beq.n	800480a <spi_context_buffers_setup+0xc>
 800484c:	684b      	ldr	r3, [r1, #4]
 800484e:	e7dd      	b.n	800480c <spi_context_buffers_setup+0xe>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8004850:	682b      	ldr	r3, [r5, #0]
 8004852:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0e6      	beq.n	8004826 <spi_context_buffers_setup+0x28>
 8004858:	686b      	ldr	r3, [r5, #4]
 800485a:	e7e5      	b.n	8004828 <spi_context_buffers_setup+0x2a>

0800485c <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
 800485c:	4603      	mov	r3, r0
 800485e:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8004860:	7919      	ldrb	r1, [r3, #4]
 8004862:	2301      	movs	r3, #1
{
	return gpio_pin_set(spec->port, spec->pin, value);
 8004864:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8004866:	fa03 f101 	lsl.w	r1, r3, r1
 800486a:	6903      	ldr	r3, [r0, #16]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 8004870:	bf18      	it	ne
 8004872:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 8004876:	b112      	cbz	r2, 800487e <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
 8004878:	6883      	ldr	r3, [r0, #8]
 800487a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 800487c:	4718      	bx	r3
 800487e:	6883      	ldr	r3, [r0, #8]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	e7fb      	b.n	800487c <gpio_pin_set_dt.isra.0+0x20>

08004884 <spi_context_unlock_unconditionally>:
{
 8004884:	b510      	push	{r4, lr}
	if (ctx->config && spi_cs_is_gpio(ctx->config)) {
 8004886:	6803      	ldr	r3, [r0, #0]
{
 8004888:	4604      	mov	r4, r0
	if (ctx->config && spi_cs_is_gpio(ctx->config)) {
 800488a:	b14b      	cbz	r3, 80048a0 <spi_context_unlock_unconditionally+0x1c>
 800488c:	68da      	ldr	r2, [r3, #12]
 800488e:	b13a      	cbz	r2, 80048a0 <spi_context_unlock_unconditionally+0x1c>
			k_busy_wait(ctx->config->cs.delay);
 8004890:	6958      	ldr	r0, [r3, #20]
	z_impl_k_busy_wait(usec_to_wait);
 8004892:	f7fe fa43 	bl	8002d1c <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs.gpio, 0);
 8004896:	6820      	ldr	r0, [r4, #0]
 8004898:	2100      	movs	r1, #0
 800489a:	300c      	adds	r0, #12
 800489c:	f7ff ffde 	bl	800485c <gpio_pin_set_dt.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
 80048a0:	69a3      	ldr	r3, [r4, #24]
 80048a2:	b933      	cbnz	r3, 80048b2 <spi_context_unlock_unconditionally+0x2e>
		ctx->owner = NULL;
 80048a4:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 80048a6:	f104 0010 	add.w	r0, r4, #16
}
 80048aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048ae:	f7fe bc6b 	b.w	8003188 <z_impl_k_sem_give>
 80048b2:	bd10      	pop	{r4, pc}

080048b4 <spi_stm32_release>:
{
 80048b4:	b508      	push	{r3, lr}
	spi_context_unlock_unconditionally(&data->ctx);
 80048b6:	6900      	ldr	r0, [r0, #16]
 80048b8:	f7ff ffe4 	bl	8004884 <spi_context_unlock_unconditionally>
}
 80048bc:	2000      	movs	r0, #0
 80048be:	bd08      	pop	{r3, pc}

080048c0 <LL_TIM_StructInit>:
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 80048c0:	2300      	movs	r3, #0
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 80048c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 80048c6:	8003      	strh	r3, [r0, #0]
  TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
 80048c8:	e9c0 2302 	strd	r2, r3, [r0, #8]
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
 80048cc:	6043      	str	r3, [r0, #4]
  TIM_InitStruct->RepetitionCounter = 0x00000000U;
 80048ce:	6103      	str	r3, [r0, #16]
}
 80048d0:	4770      	bx	lr

080048d2 <LL_TIM_OC_StructInit>:
  TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
 80048d2:	2300      	movs	r3, #0
  TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
 80048d4:	e9c0 3300 	strd	r3, r3, [r0]
  TIM_OC_InitStruct->CompareValue = 0x00000000U;
 80048d8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 80048dc:	e9c0 3304 	strd	r3, r3, [r0, #16]
  TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80048e0:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
 80048e4:	4770      	bx	lr

080048e6 <z_device_state_init>:
void z_device_state_init(void)
{
	STRUCT_SECTION_FOREACH(device, dev) {
		z_object_init(dev);
	}
}
 80048e6:	4770      	bx	lr

080048e8 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 80048e8:	b140      	cbz	r0, 80048fc <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 80048ea:	68c3      	ldr	r3, [r0, #12]
 80048ec:	7858      	ldrb	r0, [r3, #1]
 80048ee:	f010 0001 	ands.w	r0, r0, #1
 80048f2:	bf1e      	ittt	ne
 80048f4:	7818      	ldrbne	r0, [r3, #0]
 80048f6:	fab0 f080 	clzne	r0, r0
 80048fa:	0940      	lsrne	r0, r0, #5
}
 80048fc:	4770      	bx	lr

080048fe <arch_system_halt>:
	__asm__ volatile(
 80048fe:	f04f 0210 	mov.w	r2, #16
 8004902:	f3ef 8311 	mrs	r3, BASEPRI
 8004906:	f382 8812 	msr	BASEPRI_MAX, r2
 800490a:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 800490e:	e7fe      	b.n	800490e <arch_system_halt+0x10>

08004910 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8004910:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 8004912:	f7ff fff4 	bl	80048fe <arch_system_halt>

08004916 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8004916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004918:	4605      	mov	r5, r0
 800491a:	460e      	mov	r6, r1
 800491c:	f04f 0310 	mov.w	r3, #16
 8004920:	f3ef 8711 	mrs	r7, BASEPRI
 8004924:	f383 8812 	msr	BASEPRI_MAX, r3
 8004928:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 800492c:	f7fe fe86 	bl	800363c <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
 8004930:	4631      	mov	r1, r6
 8004932:	4604      	mov	r4, r0
 8004934:	4628      	mov	r0, r5
 8004936:	f7ff ffeb 	bl	8004910 <k_sys_fatal_error_handler>
	__asm__ volatile(
 800493a:	f387 8811 	msr	BASEPRI, r7
 800493e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8004942:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8004944:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004948:	f7fc bc58 	b.w	80011fc <z_impl_k_thread_abort>

0800494c <z_early_memset>:
	(void) memset(dst, c, n);
 800494c:	f7ff b956 	b.w	8003bfc <memset>

08004950 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
 8004950:	f7ff b949 	b.w	8003be6 <memcpy>

08004954 <idle>:
	sys_clock_idle_exit();
#endif
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8004954:	b508      	push	{r3, lr}
	__asm__ volatile(
 8004956:	f04f 0210 	mov.w	r2, #16
 800495a:	f3ef 8311 	mrs	r3, BASEPRI
 800495e:	f382 8812 	msr	BASEPRI_MAX, r2
 8004962:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8004966:	f7fc fa15 	bl	8000d94 <arch_cpu_idle>
 800496a:	e7f4      	b.n	8004956 <idle+0x2>

0800496c <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
 800496c:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8004970:	428b      	cmp	r3, r1
 8004972:	d001      	beq.n	8004978 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
 8004974:	f7fe bdb4 	b.w	80034e0 <z_set_prio>
}
 8004978:	2000      	movs	r0, #0
 800497a:	4770      	bx	lr

0800497c <z_impl_k_mutex_init>:
{
 800497c:	4603      	mov	r3, r0
	mutex->owner = NULL;
 800497e:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
 8004980:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
 8004984:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
 8004988:	4770      	bx	lr

0800498a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 800498a:	b13a      	cbz	r2, 800499c <z_impl_k_sem_init+0x12>
 800498c:	428a      	cmp	r2, r1
 800498e:	d305      	bcc.n	800499c <z_impl_k_sem_init+0x12>
	sem->limit = limit;
 8004990:	e9c0 1202 	strd	r1, r2, [r0, #8]
 8004994:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
 8004998:	2000      	movs	r0, #0
 800499a:	4770      	bx	lr
		return -EINVAL;
 800499c:	f06f 0015 	mvn.w	r0, #21
}
 80049a0:	4770      	bx	lr

080049a2 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 80049a2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 80049a6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80049a8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80049aa:	2300      	movs	r3, #0
	node->prev = NULL;
 80049ac:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 80049b0:	4770      	bx	lr

080049b2 <unpend_thread_no_timeout>:
{
 80049b2:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 80049b4:	f7ff fff5 	bl	80049a2 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80049b8:	7b43      	ldrb	r3, [r0, #13]
 80049ba:	f023 0302 	bic.w	r3, r3, #2
 80049be:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 80049c0:	2300      	movs	r3, #0
 80049c2:	6083      	str	r3, [r0, #8]
}
 80049c4:	bd08      	pop	{r3, pc}

080049c6 <add_to_waitq_locked>:
{
 80049c6:	b538      	push	{r3, r4, r5, lr}
 80049c8:	4604      	mov	r4, r0
 80049ca:	460d      	mov	r5, r1
	unready_thread(thread);
 80049cc:	f7fe fd0a 	bl	80033e4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 80049d0:	7b63      	ldrb	r3, [r4, #13]
 80049d2:	f043 0302 	orr.w	r3, r3, #2
 80049d6:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 80049d8:	b1e5      	cbz	r5, 8004a14 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
 80049da:	60a5      	str	r5, [r4, #8]
	return list->head == list;
 80049dc:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80049de:	429d      	cmp	r5, r3
 80049e0:	d109      	bne.n	80049f6 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
 80049e2:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 80049e4:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 80049e8:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80049ea:	606c      	str	r4, [r5, #4]
}
 80049ec:	e012      	b.n	8004a14 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
 80049ee:	686a      	ldr	r2, [r5, #4]
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d0f6      	beq.n	80049e2 <add_to_waitq_locked+0x1c>
 80049f4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0f3      	beq.n	80049e2 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
 80049fa:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 80049fe:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 8004a02:	428a      	cmp	r2, r1
 8004a04:	d0f3      	beq.n	80049ee <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8004a06:	4291      	cmp	r1, r2
 8004a08:	ddf1      	ble.n	80049ee <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
 8004a0a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8004a0c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8004a10:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8004a12:	605c      	str	r4, [r3, #4]
}
 8004a14:	bd38      	pop	{r3, r4, r5, pc}

08004a16 <z_ready_thread>:
{
 8004a16:	b510      	push	{r4, lr}
 8004a18:	f04f 0310 	mov.w	r3, #16
 8004a1c:	f3ef 8411 	mrs	r4, BASEPRI
 8004a20:	f383 8812 	msr	BASEPRI_MAX, r3
 8004a24:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 8004a28:	f7fe fca8 	bl	800337c <ready_thread>
	__asm__ volatile(
 8004a2c:	f384 8811 	msr	BASEPRI, r4
 8004a30:	f3bf 8f6f 	isb	sy
}
 8004a34:	bd10      	pop	{r4, pc}

08004a36 <z_sched_wake_thread>:
{
 8004a36:	b538      	push	{r3, r4, r5, lr}
 8004a38:	4604      	mov	r4, r0
	__asm__ volatile(
 8004a3a:	f04f 0310 	mov.w	r3, #16
 8004a3e:	f3ef 8511 	mrs	r5, BASEPRI
 8004a42:	f383 8812 	msr	BASEPRI_MAX, r3
 8004a46:	f3bf 8f6f 	isb	sy
		if (!killed) {
 8004a4a:	7b43      	ldrb	r3, [r0, #13]
 8004a4c:	f013 0f28 	tst.w	r3, #40	; 0x28
 8004a50:	d10b      	bne.n	8004a6a <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
 8004a52:	6883      	ldr	r3, [r0, #8]
 8004a54:	b10b      	cbz	r3, 8004a5a <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
 8004a56:	f7ff ffac 	bl	80049b2 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8004a5a:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
 8004a5c:	b951      	cbnz	r1, 8004a74 <z_sched_wake_thread+0x3e>
 8004a5e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
 8004a62:	4620      	mov	r0, r4
 8004a64:	7363      	strb	r3, [r4, #13]
 8004a66:	f7fe fc89 	bl	800337c <ready_thread>
	__asm__ volatile(
 8004a6a:	f385 8811 	msr	BASEPRI, r5
 8004a6e:	f3bf 8f6f 	isb	sy
}
 8004a72:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8004a74:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
 8004a78:	e7f3      	b.n	8004a62 <z_sched_wake_thread+0x2c>

08004a7a <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	3818      	subs	r0, #24
 8004a7e:	f7ff bfda 	b.w	8004a36 <z_sched_wake_thread>

08004a82 <z_unpend_first_thread>:
{
 8004a82:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8004a84:	f04f 0310 	mov.w	r3, #16
 8004a88:	f3ef 8511 	mrs	r5, BASEPRI
 8004a8c:	f383 8812 	msr	BASEPRI_MAX, r3
 8004a90:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8004a94:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004a96:	42a0      	cmp	r0, r4
 8004a98:	d00d      	beq.n	8004ab6 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
 8004a9a:	b134      	cbz	r4, 8004aaa <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f7ff ff88 	bl	80049b2 <unpend_thread_no_timeout>
 8004aa2:	f104 0018 	add.w	r0, r4, #24
 8004aa6:	f000 f81e 	bl	8004ae6 <z_abort_timeout>
	__asm__ volatile(
 8004aaa:	f385 8811 	msr	BASEPRI, r5
 8004aae:	f3bf 8f6f 	isb	sy
}
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	bd38      	pop	{r3, r4, r5, pc}
 8004ab6:	2400      	movs	r4, #0
 8004ab8:	e7f7      	b.n	8004aaa <z_unpend_first_thread+0x28>

08004aba <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8004aba:	4603      	mov	r3, r0
 8004abc:	b920      	cbnz	r0, 8004ac8 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004abe:	f3ef 8205 	mrs	r2, IPSR
 8004ac2:	b90a      	cbnz	r2, 8004ac8 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 8004ac4:	f7fc b9b4 	b.w	8000e30 <arch_swap>
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
}
 8004ad0:	4770      	bx	lr

08004ad2 <z_reschedule_unlocked>:
	__asm__ volatile(
 8004ad2:	f04f 0310 	mov.w	r3, #16
 8004ad6:	f3ef 8011 	mrs	r0, BASEPRI
 8004ada:	f383 8812 	msr	BASEPRI_MAX, r3
 8004ade:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8004ae2:	f7ff bfea 	b.w	8004aba <z_reschedule_irqlock>

08004ae6 <z_abort_timeout>:
{
 8004ae6:	b510      	push	{r4, lr}
 8004ae8:	f04f 0210 	mov.w	r2, #16
 8004aec:	f3ef 8411 	mrs	r4, BASEPRI
 8004af0:	f382 8812 	msr	BASEPRI_MAX, r2
 8004af4:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8004af8:	6803      	ldr	r3, [r0, #0]
 8004afa:	b13b      	cbz	r3, 8004b0c <z_abort_timeout+0x26>
			remove_timeout(to);
 8004afc:	f7fe fe48 	bl	8003790 <remove_timeout>
			ret = 0;
 8004b00:	2000      	movs	r0, #0
	__asm__ volatile(
 8004b02:	f384 8811 	msr	BASEPRI, r4
 8004b06:	f3bf 8f6f 	isb	sy
}
 8004b0a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8004b0c:	f06f 0015 	mvn.w	r0, #21
 8004b10:	e7f7      	b.n	8004b02 <z_abort_timeout+0x1c>

08004b12 <k_heap_init>:
{
 8004b12:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
 8004b14:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
 8004b18:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 8004b1c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
 8004b1e:	f7fe bfb2 	b.w	8003a86 <sys_heap_init>
	...
