
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	d0 10 00 20 01 11 00 08 15 3a 00 08 d5 10 00 08     ... .....:......
 8000010:	d5 10 00 08 d5 10 00 08 d5 10 00 08 00 00 00 00     ................
	...
 800002c:	dd 0d 00 08 d5 10 00 08 00 00 00 00 95 0d 00 08     ................
 800003c:	49 27 00 08                                         I'..

08000040 <_irq_vector_table>:
 8000040:	59 0e 00 08 59 0e 00 08 59 0e 00 08 59 0e 00 08     Y...Y...Y...Y...
 8000050:	59 0e 00 08 59 0e 00 08 59 0e 00 08 59 0e 00 08     Y...Y...Y...Y...
 8000060:	59 0e 00 08 59 0e 00 08 59 0e 00 08 59 0e 00 08     Y...Y...Y...Y...
 8000070:	59 0e 00 08 59 0e 00 08 59 0e 00 08 59 0e 00 08     Y...Y...Y...Y...
 8000080:	59 0e 00 08 59 0e 00 08 59 0e 00 08 59 0e 00 08     Y...Y...Y...Y...
 8000090:	59 0e 00 08 59 0e 00 08 59 0e 00 08 59 0e 00 08     Y...Y...Y...Y...
 80000a0:	59 0e 00 08 59 0e 00 08 59 0e 00 08 59 0e 00 08     Y...Y...Y...Y...
 80000b0:	59 0e 00 08 59 0e 00 08 59 0e 00 08 59 0e 00 08     Y...Y...Y...Y...
 80000c0:	59 0e 00 08 59 0e 00 08 59 0e 00 08 59 0e 00 08     Y...Y...Y...Y...
 80000d0:	59 0e 00 08 59 0e 00 08 59 0e 00 08 59 0e 00 08     Y...Y...Y...Y...
 80000e0:	59 0e 00 08 59 0e 00 08 59 0e 00 08                 Y...Y...Y...

Disassembly of section text:

080000f0 <__aeabi_uldivmod>:
 80000f0:	b953      	cbnz	r3, 8000108 <__aeabi_uldivmod+0x18>
 80000f2:	b94a      	cbnz	r2, 8000108 <__aeabi_uldivmod+0x18>
 80000f4:	2900      	cmp	r1, #0
 80000f6:	bf08      	it	eq
 80000f8:	2800      	cmpeq	r0, #0
 80000fa:	bf1c      	itt	ne
 80000fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000100:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000104:	f000 b80c 	b.w	8000120 <__aeabi_idiv0>
 8000108:	f1ad 0c08 	sub.w	ip, sp, #8
 800010c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000110:	f000 f808 	bl	8000124 <__udivmoddi4>
 8000114:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800011c:	b004      	add	sp, #16
 800011e:	4770      	bx	lr

08000120 <__aeabi_idiv0>:
 8000120:	4770      	bx	lr
 8000122:	bf00      	nop

08000124 <__udivmoddi4>:
 8000124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000128:	4686      	mov	lr, r0
 800012a:	468c      	mov	ip, r1
 800012c:	4608      	mov	r0, r1
 800012e:	4615      	mov	r5, r2
 8000130:	4674      	mov	r4, lr
 8000132:	4619      	mov	r1, r3
 8000134:	9e08      	ldr	r6, [sp, #32]
 8000136:	2b00      	cmp	r3, #0
 8000138:	f040 80c2 	bne.w	80002c0 <__udivmoddi4+0x19c>
 800013c:	4285      	cmp	r5, r0
 800013e:	fab2 f282 	clz	r2, r2
 8000142:	d945      	bls.n	80001d0 <__udivmoddi4+0xac>
 8000144:	b14a      	cbz	r2, 800015a <__udivmoddi4+0x36>
 8000146:	f1c2 0320 	rsb	r3, r2, #32
 800014a:	fa00 fc02 	lsl.w	ip, r0, r2
 800014e:	fa2e f303 	lsr.w	r3, lr, r3
 8000152:	4095      	lsls	r5, r2
 8000154:	ea43 0c0c 	orr.w	ip, r3, ip
 8000158:	4094      	lsls	r4, r2
 800015a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800015e:	fbbc f8fe 	udiv	r8, ip, lr
 8000162:	b2a8      	uxth	r0, r5
 8000164:	fb0e cc18 	mls	ip, lr, r8, ip
 8000168:	fb08 f900 	mul.w	r9, r8, r0
 800016c:	0c23      	lsrs	r3, r4, #16
 800016e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8000172:	4599      	cmp	r9, r3
 8000174:	d928      	bls.n	80001c8 <__udivmoddi4+0xa4>
 8000176:	18eb      	adds	r3, r5, r3
 8000178:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 800017c:	d204      	bcs.n	8000188 <__udivmoddi4+0x64>
 800017e:	4599      	cmp	r9, r3
 8000180:	d902      	bls.n	8000188 <__udivmoddi4+0x64>
 8000182:	f1a8 0702 	sub.w	r7, r8, #2
 8000186:	442b      	add	r3, r5
 8000188:	eba3 0309 	sub.w	r3, r3, r9
 800018c:	fbb3 fcfe 	udiv	ip, r3, lr
 8000190:	fb0e 331c 	mls	r3, lr, ip, r3
 8000194:	fb0c f000 	mul.w	r0, ip, r0
 8000198:	b2a4      	uxth	r4, r4
 800019a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800019e:	42a0      	cmp	r0, r4
 80001a0:	d914      	bls.n	80001cc <__udivmoddi4+0xa8>
 80001a2:	192c      	adds	r4, r5, r4
 80001a4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 80001a8:	d204      	bcs.n	80001b4 <__udivmoddi4+0x90>
 80001aa:	42a0      	cmp	r0, r4
 80001ac:	d902      	bls.n	80001b4 <__udivmoddi4+0x90>
 80001ae:	f1ac 0302 	sub.w	r3, ip, #2
 80001b2:	442c      	add	r4, r5
 80001b4:	1a24      	subs	r4, r4, r0
 80001b6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 80001ba:	b11e      	cbz	r6, 80001c4 <__udivmoddi4+0xa0>
 80001bc:	2300      	movs	r3, #0
 80001be:	40d4      	lsrs	r4, r2
 80001c0:	6034      	str	r4, [r6, #0]
 80001c2:	6073      	str	r3, [r6, #4]
 80001c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80001c8:	4647      	mov	r7, r8
 80001ca:	e7dd      	b.n	8000188 <__udivmoddi4+0x64>
 80001cc:	4663      	mov	r3, ip
 80001ce:	e7f1      	b.n	80001b4 <__udivmoddi4+0x90>
 80001d0:	bb92      	cbnz	r2, 8000238 <__udivmoddi4+0x114>
 80001d2:	2101      	movs	r1, #1
 80001d4:	1b43      	subs	r3, r0, r5
 80001d6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001da:	fbb3 fcfe 	udiv	ip, r3, lr
 80001de:	b2af      	uxth	r7, r5
 80001e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80001e4:	fb0c f807 	mul.w	r8, ip, r7
 80001e8:	0c20      	lsrs	r0, r4, #16
 80001ea:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80001ee:	4598      	cmp	r8, r3
 80001f0:	d962      	bls.n	80002b8 <__udivmoddi4+0x194>
 80001f2:	18eb      	adds	r3, r5, r3
 80001f4:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80001f8:	d204      	bcs.n	8000204 <__udivmoddi4+0xe0>
 80001fa:	4598      	cmp	r8, r3
 80001fc:	d902      	bls.n	8000204 <__udivmoddi4+0xe0>
 80001fe:	f1ac 0002 	sub.w	r0, ip, #2
 8000202:	442b      	add	r3, r5
 8000204:	eba3 0308 	sub.w	r3, r3, r8
 8000208:	fbb3 fcfe 	udiv	ip, r3, lr
 800020c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000210:	fb0c f707 	mul.w	r7, ip, r7
 8000214:	b2a4      	uxth	r4, r4
 8000216:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021a:	42a7      	cmp	r7, r4
 800021c:	d94e      	bls.n	80002bc <__udivmoddi4+0x198>
 800021e:	192c      	adds	r4, r5, r4
 8000220:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000224:	d204      	bcs.n	8000230 <__udivmoddi4+0x10c>
 8000226:	42a7      	cmp	r7, r4
 8000228:	d902      	bls.n	8000230 <__udivmoddi4+0x10c>
 800022a:	f1ac 0302 	sub.w	r3, ip, #2
 800022e:	442c      	add	r4, r5
 8000230:	1be4      	subs	r4, r4, r7
 8000232:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000236:	e7c0      	b.n	80001ba <__udivmoddi4+0x96>
 8000238:	f1c2 0320 	rsb	r3, r2, #32
 800023c:	4095      	lsls	r5, r2
 800023e:	fa20 f103 	lsr.w	r1, r0, r3
 8000242:	fa2e f303 	lsr.w	r3, lr, r3
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	fbb1 fcfe 	udiv	ip, r1, lr
 800024e:	4090      	lsls	r0, r2
 8000250:	4303      	orrs	r3, r0
 8000252:	b2af      	uxth	r7, r5
 8000254:	fb0e 101c 	mls	r0, lr, ip, r1
 8000258:	fb0c f807 	mul.w	r8, ip, r7
 800025c:	0c19      	lsrs	r1, r3, #16
 800025e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000262:	4588      	cmp	r8, r1
 8000264:	fa04 f402 	lsl.w	r4, r4, r2
 8000268:	d922      	bls.n	80002b0 <__udivmoddi4+0x18c>
 800026a:	1869      	adds	r1, r5, r1
 800026c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000270:	d204      	bcs.n	800027c <__udivmoddi4+0x158>
 8000272:	4588      	cmp	r8, r1
 8000274:	d902      	bls.n	800027c <__udivmoddi4+0x158>
 8000276:	f1ac 0002 	sub.w	r0, ip, #2
 800027a:	4429      	add	r1, r5
 800027c:	eba1 0108 	sub.w	r1, r1, r8
 8000280:	fbb1 fcfe 	udiv	ip, r1, lr
 8000284:	fb0e 111c 	mls	r1, lr, ip, r1
 8000288:	fb0c f707 	mul.w	r7, ip, r7
 800028c:	b29b      	uxth	r3, r3
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	429f      	cmp	r7, r3
 8000294:	d90e      	bls.n	80002b4 <__udivmoddi4+0x190>
 8000296:	18eb      	adds	r3, r5, r3
 8000298:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800029c:	d204      	bcs.n	80002a8 <__udivmoddi4+0x184>
 800029e:	429f      	cmp	r7, r3
 80002a0:	d902      	bls.n	80002a8 <__udivmoddi4+0x184>
 80002a2:	f1ac 0102 	sub.w	r1, ip, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1bdb      	subs	r3, r3, r7
 80002aa:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80002ae:	e792      	b.n	80001d6 <__udivmoddi4+0xb2>
 80002b0:	4660      	mov	r0, ip
 80002b2:	e7e3      	b.n	800027c <__udivmoddi4+0x158>
 80002b4:	4661      	mov	r1, ip
 80002b6:	e7f7      	b.n	80002a8 <__udivmoddi4+0x184>
 80002b8:	4660      	mov	r0, ip
 80002ba:	e7a3      	b.n	8000204 <__udivmoddi4+0xe0>
 80002bc:	4663      	mov	r3, ip
 80002be:	e7b7      	b.n	8000230 <__udivmoddi4+0x10c>
 80002c0:	4283      	cmp	r3, r0
 80002c2:	d906      	bls.n	80002d2 <__udivmoddi4+0x1ae>
 80002c4:	b916      	cbnz	r6, 80002cc <__udivmoddi4+0x1a8>
 80002c6:	2100      	movs	r1, #0
 80002c8:	4608      	mov	r0, r1
 80002ca:	e77b      	b.n	80001c4 <__udivmoddi4+0xa0>
 80002cc:	e9c6 e000 	strd	lr, r0, [r6]
 80002d0:	e7f9      	b.n	80002c6 <__udivmoddi4+0x1a2>
 80002d2:	fab3 f783 	clz	r7, r3
 80002d6:	b98f      	cbnz	r7, 80002fc <__udivmoddi4+0x1d8>
 80002d8:	4283      	cmp	r3, r0
 80002da:	d301      	bcc.n	80002e0 <__udivmoddi4+0x1bc>
 80002dc:	4572      	cmp	r2, lr
 80002de:	d808      	bhi.n	80002f2 <__udivmoddi4+0x1ce>
 80002e0:	ebbe 0402 	subs.w	r4, lr, r2
 80002e4:	eb60 0303 	sbc.w	r3, r0, r3
 80002e8:	2001      	movs	r0, #1
 80002ea:	469c      	mov	ip, r3
 80002ec:	b91e      	cbnz	r6, 80002f6 <__udivmoddi4+0x1d2>
 80002ee:	2100      	movs	r1, #0
 80002f0:	e768      	b.n	80001c4 <__udivmoddi4+0xa0>
 80002f2:	4638      	mov	r0, r7
 80002f4:	e7fa      	b.n	80002ec <__udivmoddi4+0x1c8>
 80002f6:	e9c6 4c00 	strd	r4, ip, [r6]
 80002fa:	e7f8      	b.n	80002ee <__udivmoddi4+0x1ca>
 80002fc:	f1c7 0c20 	rsb	ip, r7, #32
 8000300:	40bb      	lsls	r3, r7
 8000302:	fa22 f40c 	lsr.w	r4, r2, ip
 8000306:	431c      	orrs	r4, r3
 8000308:	ea4f 4914 	mov.w	r9, r4, lsr #16
 800030c:	fa20 f30c 	lsr.w	r3, r0, ip
 8000310:	fbb3 f8f9 	udiv	r8, r3, r9
 8000314:	40b8      	lsls	r0, r7
 8000316:	fa2e f10c 	lsr.w	r1, lr, ip
 800031a:	4301      	orrs	r1, r0
 800031c:	fa0e f507 	lsl.w	r5, lr, r7
 8000320:	fb09 3018 	mls	r0, r9, r8, r3
 8000324:	fa1f fe84 	uxth.w	lr, r4
 8000328:	fb08 fa0e 	mul.w	sl, r8, lr
 800032c:	0c0b      	lsrs	r3, r1, #16
 800032e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000332:	459a      	cmp	sl, r3
 8000334:	fa02 f207 	lsl.w	r2, r2, r7
 8000338:	d940      	bls.n	80003bc <__udivmoddi4+0x298>
 800033a:	18e3      	adds	r3, r4, r3
 800033c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000340:	d204      	bcs.n	800034c <__udivmoddi4+0x228>
 8000342:	459a      	cmp	sl, r3
 8000344:	d902      	bls.n	800034c <__udivmoddi4+0x228>
 8000346:	f1a8 0002 	sub.w	r0, r8, #2
 800034a:	4423      	add	r3, r4
 800034c:	eba3 030a 	sub.w	r3, r3, sl
 8000350:	fbb3 f8f9 	udiv	r8, r3, r9
 8000354:	fb09 3318 	mls	r3, r9, r8, r3
 8000358:	fb08 fe0e 	mul.w	lr, r8, lr
 800035c:	b289      	uxth	r1, r1
 800035e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000362:	458e      	cmp	lr, r1
 8000364:	d92c      	bls.n	80003c0 <__udivmoddi4+0x29c>
 8000366:	1861      	adds	r1, r4, r1
 8000368:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800036c:	d204      	bcs.n	8000378 <__udivmoddi4+0x254>
 800036e:	458e      	cmp	lr, r1
 8000370:	d902      	bls.n	8000378 <__udivmoddi4+0x254>
 8000372:	f1a8 0302 	sub.w	r3, r8, #2
 8000376:	4421      	add	r1, r4
 8000378:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800037c:	fba0 9802 	umull	r9, r8, r0, r2
 8000380:	eba1 010e 	sub.w	r1, r1, lr
 8000384:	4541      	cmp	r1, r8
 8000386:	46ce      	mov	lr, r9
 8000388:	4643      	mov	r3, r8
 800038a:	d302      	bcc.n	8000392 <__udivmoddi4+0x26e>
 800038c:	d106      	bne.n	800039c <__udivmoddi4+0x278>
 800038e:	454d      	cmp	r5, r9
 8000390:	d204      	bcs.n	800039c <__udivmoddi4+0x278>
 8000392:	ebb9 0e02 	subs.w	lr, r9, r2
 8000396:	eb68 0304 	sbc.w	r3, r8, r4
 800039a:	3801      	subs	r0, #1
 800039c:	2e00      	cmp	r6, #0
 800039e:	d0a6      	beq.n	80002ee <__udivmoddi4+0x1ca>
 80003a0:	ebb5 020e 	subs.w	r2, r5, lr
 80003a4:	eb61 0103 	sbc.w	r1, r1, r3
 80003a8:	fa01 fc0c 	lsl.w	ip, r1, ip
 80003ac:	fa22 f307 	lsr.w	r3, r2, r7
 80003b0:	ea4c 0303 	orr.w	r3, ip, r3
 80003b4:	40f9      	lsrs	r1, r7
 80003b6:	e9c6 3100 	strd	r3, r1, [r6]
 80003ba:	e798      	b.n	80002ee <__udivmoddi4+0x1ca>
 80003bc:	4640      	mov	r0, r8
 80003be:	e7c5      	b.n	800034c <__udivmoddi4+0x228>
 80003c0:	4643      	mov	r3, r8
 80003c2:	e7d9      	b.n	8000378 <__udivmoddi4+0x254>
 80003c4:	0000      	movs	r0, r0
	...

080003c8 <pwm_set_dt.constprop.0.isra.0>:
 *
 * @return A value from pwm_set().
 *
 * @see pwm_set_pulse_dt()
 */
static inline int pwm_set_dt(const struct pwm_dt_spec *spec, uint32_t period,
 80003c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003cc:	b087      	sub	sp, #28
			     uint32_t pulse)
{
	return pwm_set(spec->dev, spec->channel, period, pulse, spec->flags);
 80003ce:	e9d0 5300 	ldrd	r5, r3, [r0]
 80003d2:	9302      	str	r3, [sp, #8]
 80003d4:	8983      	ldrh	r3, [r0, #12]
 80003d6:	9303      	str	r3, [sp, #12]
	return api->get_cycles_per_sec(dev, channel, cycles);
 80003d8:	68ab      	ldr	r3, [r5, #8]
 80003da:	4628      	mov	r0, r5
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	9902      	ldr	r1, [sp, #8]
 80003e0:	aa04      	add	r2, sp, #16
 80003e2:	4798      	blx	r3
	if (err < 0) {
 80003e4:	2800      	cmp	r0, #0
 80003e6:	db31      	blt.n	800044c <pwm_set_dt.constprop.0.isra.0+0x84>
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
 80003e8:	e9dd 4a04 	ldrd	r4, sl, [sp, #16]
 80003ec:	4f1c      	ldr	r7, [pc, #112]	; (8000460 <pwm_set_dt.constprop.0.isra.0+0x98>)
	if (period_cycles > UINT32_MAX) {
 80003ee:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
 80003f2:	fba4 b207 	umull	fp, r2, r4, r7
 80003f6:	fb07 270a 	mla	r7, r7, sl, r2
 80003fa:	a317      	add	r3, pc, #92	; (adr r3, 8000458 <pwm_set_dt.constprop.0.isra.0+0x90>)
 80003fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000400:	4658      	mov	r0, fp
 8000402:	4639      	mov	r1, r7
 8000404:	f7ff fe74 	bl	80000f0 <__aeabi_uldivmod>
	if (period_cycles > UINT32_MAX) {
 8000408:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8000464 <pwm_set_dt.constprop.0.isra.0+0x9c>
 800040c:	45d9      	cmp	r9, fp
 800040e:	eb78 0307 	sbcs.w	r3, r8, r7
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
 8000412:	4606      	mov	r6, r0
	if (period_cycles > UINT32_MAX) {
 8000414:	d31a      	bcc.n	800044c <pwm_set_dt.constprop.0.isra.0+0x84>
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
 8000416:	4b14      	ldr	r3, [pc, #80]	; (8000468 <pwm_set_dt.constprop.0.isra.0+0xa0>)
 8000418:	fba4 b403 	umull	fp, r4, r4, r3
 800041c:	fb03 440a 	mla	r4, r3, sl, r4
 8000420:	a30d      	add	r3, pc, #52	; (adr r3, 8000458 <pwm_set_dt.constprop.0.isra.0+0x90>)
 8000422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000426:	4621      	mov	r1, r4
 8000428:	4658      	mov	r0, fp
 800042a:	f7ff fe61 	bl	80000f0 <__aeabi_uldivmod>
	if (pulse_cycles > UINT32_MAX) {
 800042e:	45d9      	cmp	r9, fp
 8000430:	eb78 0404 	sbcs.w	r4, r8, r4
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
 8000434:	4603      	mov	r3, r0
	if (pulse_cycles > UINT32_MAX) {
 8000436:	d309      	bcc.n	800044c <pwm_set_dt.constprop.0.isra.0+0x84>
	if (pulse > period) {
 8000438:	4286      	cmp	r6, r0
	const struct pwm_driver_api *api =
 800043a:	68aa      	ldr	r2, [r5, #8]
	if (pulse > period) {
 800043c:	d306      	bcc.n	800044c <pwm_set_dt.constprop.0.isra.0+0x84>
	return api->set_cycles(dev, channel, period, pulse, flags);
 800043e:	9903      	ldr	r1, [sp, #12]
 8000440:	4628      	mov	r0, r5
 8000442:	9100      	str	r1, [sp, #0]
 8000444:	6814      	ldr	r4, [r2, #0]
 8000446:	9902      	ldr	r1, [sp, #8]
 8000448:	4632      	mov	r2, r6
 800044a:	47a0      	blx	r4
}
 800044c:	b007      	add	sp, #28
 800044e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000452:	bf00      	nop
 8000454:	f3af 8000 	nop.w
 8000458:	3b9aca00 	.word	0x3b9aca00
 800045c:	00000000 	.word	0x00000000
 8000460:	002dc6c0 	.word	0x002dc6c0
 8000464:	3b9ac9ff 	.word	0x3b9ac9ff
 8000468:	0016e360 	.word	0x0016e360

0800046c <_ZN16HikariGPIOConfig14board_led_initEv>:
#include "gpio_func.hpp"

uint8_t HikariGPIOConfig::board_led_init(){
 800046c:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 800046e:	4811      	ldr	r0, [pc, #68]	; (80004b4 <_ZN16HikariGPIOConfig14board_led_initEv+0x48>)
 8000470:	f004 f925 	bl	80046be <z_device_is_ready>

    bool err = INIT_VALUE_0;

    if(!(err = gpio_is_ready_dt(&BOARD_LED_A))){
 8000474:	b920      	cbnz	r0, 8000480 <_ZN16HikariGPIOConfig14board_led_initEv+0x14>
        printk(">>>GPIO A READY FAIL!<<< \r\n");
 8000476:	4810      	ldr	r0, [pc, #64]	; (80004b8 <_ZN16HikariGPIOConfig14board_led_initEv+0x4c>)
        return MY_FUNC_CRASH;
    }

    if(!(err = gpio_is_ready_dt(&BOARD_LED_B))){
        printk(">>>GPIO B READY FAIL!<<< \r\n");
 8000478:	f003 f9e7 	bl	800384a <printk>
        return MY_FUNC_CRASH;
 800047c:	2001      	movs	r0, #1
    gpio_pin_configure_dt(&BOARD_LED_A, GPIO_OUTPUT_ACTIVE);
    gpio_pin_configure_dt(&BOARD_LED_B, GPIO_OUTPUT_ACTIVE);
    gpio_pin_configure_dt(&BOARD_LED_C, GPIO_OUTPUT_ACTIVE);
    printk("GPIO A&B&C READY!\r\n");
    return MY_FUNC_OK;
}
 800047e:	bd08      	pop	{r3, pc}
 8000480:	480c      	ldr	r0, [pc, #48]	; (80004b4 <_ZN16HikariGPIOConfig14board_led_initEv+0x48>)
 8000482:	f004 f91c 	bl	80046be <z_device_is_ready>
    if(!(err = gpio_is_ready_dt(&BOARD_LED_B))){
 8000486:	b908      	cbnz	r0, 800048c <_ZN16HikariGPIOConfig14board_led_initEv+0x20>
        printk(">>>GPIO B READY FAIL!<<< \r\n");
 8000488:	480c      	ldr	r0, [pc, #48]	; (80004bc <_ZN16HikariGPIOConfig14board_led_initEv+0x50>)
 800048a:	e7f5      	b.n	8000478 <_ZN16HikariGPIOConfig14board_led_initEv+0xc>
 800048c:	4809      	ldr	r0, [pc, #36]	; (80004b4 <_ZN16HikariGPIOConfig14board_led_initEv+0x48>)
 800048e:	f004 f916 	bl	80046be <z_device_is_ready>
    if(!(err = gpio_is_ready_dt(&BOARD_LED_C))){
 8000492:	b908      	cbnz	r0, 8000498 <_ZN16HikariGPIOConfig14board_led_initEv+0x2c>
        printk(">>>GPIO C READY FAIL!<<< \r\n");
 8000494:	480a      	ldr	r0, [pc, #40]	; (80004c0 <_ZN16HikariGPIOConfig14board_led_initEv+0x54>)
 8000496:	e7ef      	b.n	8000478 <_ZN16HikariGPIOConfig14board_led_initEv+0xc>
    gpio_pin_configure_dt(&BOARD_LED_A, GPIO_OUTPUT_ACTIVE);
 8000498:	480a      	ldr	r0, [pc, #40]	; (80004c4 <_ZN16HikariGPIOConfig14board_led_initEv+0x58>)
 800049a:	f003 f9ba 	bl	8003812 <gpio_pin_configure_dt.constprop.0.isra.0>
    gpio_pin_configure_dt(&BOARD_LED_B, GPIO_OUTPUT_ACTIVE);
 800049e:	480a      	ldr	r0, [pc, #40]	; (80004c8 <_ZN16HikariGPIOConfig14board_led_initEv+0x5c>)
 80004a0:	f003 f9b7 	bl	8003812 <gpio_pin_configure_dt.constprop.0.isra.0>
    gpio_pin_configure_dt(&BOARD_LED_C, GPIO_OUTPUT_ACTIVE);
 80004a4:	4809      	ldr	r0, [pc, #36]	; (80004cc <_ZN16HikariGPIOConfig14board_led_initEv+0x60>)
 80004a6:	f003 f9b4 	bl	8003812 <gpio_pin_configure_dt.constprop.0.isra.0>
    printk("GPIO A&B&C READY!\r\n");
 80004aa:	4809      	ldr	r0, [pc, #36]	; (80004d0 <_ZN16HikariGPIOConfig14board_led_initEv+0x64>)
 80004ac:	f003 f9cd 	bl	800384a <printk>
    return MY_FUNC_OK;
 80004b0:	2000      	movs	r0, #0
 80004b2:	e7e4      	b.n	800047e <_ZN16HikariGPIOConfig14board_led_initEv+0x12>
 80004b4:	08004a40 	.word	0x08004a40
 80004b8:	08005072 	.word	0x08005072
 80004bc:	0800508e 	.word	0x0800508e
 80004c0:	080050aa 	.word	0x080050aa
 80004c4:	08004d70 	.word	0x08004d70
 80004c8:	08004d68 	.word	0x08004d68
 80004cc:	08004d60 	.word	0x08004d60
 80004d0:	080050c6 	.word	0x080050c6

080004d4 <main>:
SDI_COLOR_STRUCT array_test = {
	{0x00},{0x00},{0xFF}
};

int main(void)
{	
 80004d4:	b508      	push	{r3, lr}
	// HikariSPIControler *spi_def;
	HikariGPIOConfig *def;

	def->board_led_init();
 80004d6:	2000      	movs	r0, #0
 80004d8:	f7ff ffc8 	bl	800046c <_ZN16HikariGPIOConfig14board_led_initEv>
	// def->pwm_init();
	// def->pwm_as_sdi_on();
    pwm_set_dt(&PWM_AS_SCK, PWM_USEC(3000), PWM_USEC(1500));
 80004dc:	4803      	ldr	r0, [pc, #12]	; (80004ec <main+0x18>)
 80004de:	f7ff ff73 	bl	80003c8 <pwm_set_dt.constprop.0.isra.0>
	pwm_set_dt(&PWM_AS_SDI, PWM_USEC(3000), PWM_USEC(1500));
 80004e2:	4803      	ldr	r0, [pc, #12]	; (80004f0 <main+0x1c>)
 80004e4:	f7ff ff70 	bl	80003c8 <pwm_set_dt.constprop.0.isra.0>

	while (1)
 80004e8:	e7fe      	b.n	80004e8 <main+0x14>
 80004ea:	bf00      	nop
 80004ec:	08004d88 	.word	0x08004d88
 80004f0:	08004d78 	.word	0x08004d78

080004f4 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
 80004f4:	4b01      	ldr	r3, [pc, #4]	; (80004fc <char_out+0x8>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4718      	bx	r3
 80004fa:	bf00      	nop
 80004fc:	20000000 	.word	0x20000000

08000500 <__printk_hook_install>:
	_char_out = fn;
 8000500:	4b01      	ldr	r3, [pc, #4]	; (8000508 <__printk_hook_install+0x8>)
 8000502:	6018      	str	r0, [r3, #0]
}
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000000 	.word	0x20000000

0800050c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 800050c:	b507      	push	{r0, r1, r2, lr}
 800050e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 8000510:	2100      	movs	r1, #0
 8000512:	4602      	mov	r2, r0
 8000514:	9100      	str	r1, [sp, #0]
 8000516:	4803      	ldr	r0, [pc, #12]	; (8000524 <vprintk+0x18>)
 8000518:	f000 f806 	bl	8000528 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 800051c:	b003      	add	sp, #12
 800051e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000522:	bf00      	nop
 8000524:	080004f5 	.word	0x080004f5

08000528 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
 8000528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800052c:	4681      	mov	r9, r0
 800052e:	468b      	mov	fp, r1
 8000530:	4617      	mov	r7, r2
 8000532:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8000534:	2500      	movs	r5, #0
{
 8000536:	b095      	sub	sp, #84	; 0x54
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8000538:	7838      	ldrb	r0, [r7, #0]
 800053a:	b908      	cbnz	r0, 8000540 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
 800053c:	4628      	mov	r0, r5
 800053e:	e357      	b.n	8000bf0 <z_cbvprintf_impl+0x6c8>
			OUTC(*fp++);
 8000540:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
 8000542:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 8000544:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
 8000546:	d006      	beq.n	8000556 <z_cbvprintf_impl+0x2e>
			OUTC('%');
 8000548:	4659      	mov	r1, fp
 800054a:	47c8      	blx	r9
 800054c:	2800      	cmp	r0, #0
 800054e:	f2c0 834f 	blt.w	8000bf0 <z_cbvprintf_impl+0x6c8>
 8000552:	3501      	adds	r5, #1
		if (bps == NULL) {
 8000554:	e1fb      	b.n	800094e <z_cbvprintf_impl+0x426>
		} state = {
 8000556:	2218      	movs	r2, #24
 8000558:	2100      	movs	r1, #0
 800055a:	a80e      	add	r0, sp, #56	; 0x38
 800055c:	f003 fa7c 	bl	8003a58 <memset>
	if (*sp == '%') {
 8000560:	787b      	ldrb	r3, [r7, #1]
 8000562:	2b25      	cmp	r3, #37	; 0x25
 8000564:	d07d      	beq.n	8000662 <z_cbvprintf_impl+0x13a>
 8000566:	2300      	movs	r3, #0
 8000568:	4698      	mov	r8, r3
 800056a:	469e      	mov	lr, r3
 800056c:	469c      	mov	ip, r3
 800056e:	461e      	mov	r6, r3
 8000570:	1c78      	adds	r0, r7, #1
 8000572:	4601      	mov	r1, r0
		switch (*sp) {
 8000574:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000578:	2a2b      	cmp	r2, #43	; 0x2b
 800057a:	f000 80a1 	beq.w	80006c0 <z_cbvprintf_impl+0x198>
 800057e:	f200 8098 	bhi.w	80006b2 <z_cbvprintf_impl+0x18a>
 8000582:	2a20      	cmp	r2, #32
 8000584:	f000 809f 	beq.w	80006c6 <z_cbvprintf_impl+0x19e>
 8000588:	2a23      	cmp	r2, #35	; 0x23
 800058a:	f000 809f 	beq.w	80006cc <z_cbvprintf_impl+0x1a4>
 800058e:	b12b      	cbz	r3, 800059c <z_cbvprintf_impl+0x74>
 8000590:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000598:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800059c:	f1b8 0f00 	cmp.w	r8, #0
 80005a0:	d005      	beq.n	80005ae <z_cbvprintf_impl+0x86>
 80005a2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80005a6:	f043 0320 	orr.w	r3, r3, #32
 80005aa:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80005ae:	f1be 0f00 	cmp.w	lr, #0
 80005b2:	d005      	beq.n	80005c0 <z_cbvprintf_impl+0x98>
 80005b4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80005b8:	f043 0310 	orr.w	r3, r3, #16
 80005bc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80005c0:	f1bc 0f00 	cmp.w	ip, #0
 80005c4:	d005      	beq.n	80005d2 <z_cbvprintf_impl+0xaa>
 80005c6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80005ca:	f043 0308 	orr.w	r3, r3, #8
 80005ce:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80005d2:	b12e      	cbz	r6, 80005e0 <z_cbvprintf_impl+0xb8>
 80005d4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80005d8:	f043 0304 	orr.w	r3, r3, #4
 80005dc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
 80005e0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80005e4:	f003 0044 	and.w	r0, r3, #68	; 0x44
 80005e8:	2844      	cmp	r0, #68	; 0x44
 80005ea:	d103      	bne.n	80005f4 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
 80005ec:	f36f 1386 	bfc	r3, #6, #1
 80005f0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
 80005f4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 80005f8:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
 80005fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005fe:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 8000602:	d17f      	bne.n	8000704 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
 8000604:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
 8000608:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 800060a:	f042 0201 	orr.w	r2, r2, #1
 800060e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
 8000612:	781a      	ldrb	r2, [r3, #0]
 8000614:	2a2e      	cmp	r2, #46	; 0x2e
 8000616:	bf0c      	ite	eq
 8000618:	2101      	moveq	r1, #1
 800061a:	2100      	movne	r1, #0
 800061c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000620:	f361 0241 	bfi	r2, r1, #1, #1
 8000624:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
 8000628:	d178      	bne.n	800071c <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
 800062a:	785a      	ldrb	r2, [r3, #1]
 800062c:	2a2a      	cmp	r2, #42	; 0x2a
 800062e:	d06e      	beq.n	800070e <z_cbvprintf_impl+0x1e6>
	size_t val = 0;
 8000630:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 8000632:	f04f 0c0a 	mov.w	ip, #10
	++sp;
 8000636:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8000638:	4619      	mov	r1, r3
 800063a:	f811 0b01 	ldrb.w	r0, [r1], #1
 800063e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8000642:	2e09      	cmp	r6, #9
 8000644:	f240 8095 	bls.w	8000772 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
 8000648:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
 800064c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
 800064e:	f3c1 0040 	ubfx	r0, r1, #1, #1
 8000652:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
 8000656:	460a      	mov	r2, r1
 8000658:	f360 0241 	bfi	r2, r0, #1, #1
 800065c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 8000660:	e05c      	b.n	800071c <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
 8000662:	1cba      	adds	r2, r7, #2
 8000664:	9203      	str	r2, [sp, #12]
 8000666:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
 800066a:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 800066e:	07da      	lsls	r2, r3, #31
 8000670:	f140 812e 	bpl.w	80008d0 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
 8000674:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
 8000678:	f1b8 0f00 	cmp.w	r8, #0
 800067c:	da07      	bge.n	800068e <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
 800067e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
 8000682:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
 8000686:	f042 0204 	orr.w	r2, r2, #4
 800068a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
 800068e:	075e      	lsls	r6, r3, #29
 8000690:	f140 8127 	bpl.w	80008e2 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
 8000694:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
 8000698:	f1ba 0f00 	cmp.w	sl, #0
 800069c:	f280 8126 	bge.w	80008ec <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
 80006a0:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80006a4:	f36f 0341 	bfc	r3, #1, #1
 80006a8:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
 80006ac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80006b0:	e11c      	b.n	80008ec <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
 80006b2:	2a2d      	cmp	r2, #45	; 0x2d
 80006b4:	d00d      	beq.n	80006d2 <z_cbvprintf_impl+0x1aa>
 80006b6:	2a30      	cmp	r2, #48	; 0x30
 80006b8:	f47f af69 	bne.w	800058e <z_cbvprintf_impl+0x66>
 80006bc:	2301      	movs	r3, #1
	} while (loop);
 80006be:	e758      	b.n	8000572 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
 80006c0:	f04f 0c01 	mov.w	ip, #1
 80006c4:	e755      	b.n	8000572 <z_cbvprintf_impl+0x4a>
 80006c6:	f04f 0e01 	mov.w	lr, #1
 80006ca:	e752      	b.n	8000572 <z_cbvprintf_impl+0x4a>
 80006cc:	f04f 0801 	mov.w	r8, #1
 80006d0:	e74f      	b.n	8000572 <z_cbvprintf_impl+0x4a>
 80006d2:	2601      	movs	r6, #1
 80006d4:	e74d      	b.n	8000572 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
 80006d6:	4603      	mov	r3, r0
 80006d8:	fb0e 6202 	mla	r2, lr, r2, r6
 80006dc:	3a30      	subs	r2, #48	; 0x30
 80006de:	4618      	mov	r0, r3
 80006e0:	f810 6b01 	ldrb.w	r6, [r0], #1
 80006e4:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 80006e8:	f1bc 0f09 	cmp.w	ip, #9
 80006ec:	d9f3      	bls.n	80006d6 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
 80006ee:	4299      	cmp	r1, r3
 80006f0:	d08f      	beq.n	8000612 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 80006f2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
 80006f6:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
 80006f8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 80006fa:	f362 0141 	bfi	r1, r2, #1, #1
 80006fe:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 8000702:	e786      	b.n	8000612 <z_cbvprintf_impl+0xea>
 8000704:	460b      	mov	r3, r1
	size_t val = 0;
 8000706:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 8000708:	f04f 0e0a 	mov.w	lr, #10
 800070c:	e7e7      	b.n	80006de <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
 800070e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
 8000712:	3302      	adds	r3, #2
		conv->prec_star = true;
 8000714:	f042 0204 	orr.w	r2, r2, #4
 8000718:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
 800071c:	781a      	ldrb	r2, [r3, #0]
 800071e:	2a6c      	cmp	r2, #108	; 0x6c
 8000720:	d047      	beq.n	80007b2 <z_cbvprintf_impl+0x28a>
 8000722:	d82b      	bhi.n	800077c <z_cbvprintf_impl+0x254>
 8000724:	2a68      	cmp	r2, #104	; 0x68
 8000726:	d031      	beq.n	800078c <z_cbvprintf_impl+0x264>
 8000728:	2a6a      	cmp	r2, #106	; 0x6a
 800072a:	d04b      	beq.n	80007c4 <z_cbvprintf_impl+0x29c>
 800072c:	2a4c      	cmp	r2, #76	; 0x4c
 800072e:	d051      	beq.n	80007d4 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
 8000730:	461a      	mov	r2, r3
 8000732:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
 8000736:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
 8000738:	9203      	str	r2, [sp, #12]
 800073a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
 800073e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
 8000742:	f200 80be 	bhi.w	80008c2 <z_cbvprintf_impl+0x39a>
 8000746:	2b6d      	cmp	r3, #109	; 0x6d
 8000748:	d851      	bhi.n	80007ee <z_cbvprintf_impl+0x2c6>
 800074a:	2b69      	cmp	r3, #105	; 0x69
 800074c:	f200 80b9 	bhi.w	80008c2 <z_cbvprintf_impl+0x39a>
 8000750:	2b57      	cmp	r3, #87	; 0x57
 8000752:	d867      	bhi.n	8000824 <z_cbvprintf_impl+0x2fc>
 8000754:	2b41      	cmp	r3, #65	; 0x41
 8000756:	d003      	beq.n	8000760 <z_cbvprintf_impl+0x238>
 8000758:	3b45      	subs	r3, #69	; 0x45
 800075a:	2b02      	cmp	r3, #2
 800075c:	f200 80b1 	bhi.w	80008c2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
 8000760:	2204      	movs	r2, #4
 8000762:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000766:	f362 0302 	bfi	r3, r2, #0, #3
 800076a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
 800076e:	2301      	movs	r3, #1
			break;
 8000770:	e073      	b.n	800085a <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
 8000772:	fb0c 0202 	mla	r2, ip, r2, r0
 8000776:	460b      	mov	r3, r1
 8000778:	3a30      	subs	r2, #48	; 0x30
 800077a:	e75d      	b.n	8000638 <z_cbvprintf_impl+0x110>
	switch (*sp) {
 800077c:	2a74      	cmp	r2, #116	; 0x74
 800077e:	d025      	beq.n	80007cc <z_cbvprintf_impl+0x2a4>
 8000780:	2a7a      	cmp	r2, #122	; 0x7a
 8000782:	d1d5      	bne.n	8000730 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
 8000784:	2106      	movs	r1, #6
 8000786:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800078a:	e00c      	b.n	80007a6 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
 800078c:	785a      	ldrb	r2, [r3, #1]
 800078e:	2a68      	cmp	r2, #104	; 0x68
 8000790:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000794:	d106      	bne.n	80007a4 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
 8000796:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 8000798:	f361 02c6 	bfi	r2, r1, #3, #4
 800079c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
 80007a0:	3302      	adds	r3, #2
 80007a2:	e7c5      	b.n	8000730 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
 80007a4:	2102      	movs	r1, #2
 80007a6:	f361 02c6 	bfi	r2, r1, #3, #4
 80007aa:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
 80007ae:	3301      	adds	r3, #1
 80007b0:	e7be      	b.n	8000730 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
 80007b2:	785a      	ldrb	r2, [r3, #1]
 80007b4:	2a6c      	cmp	r2, #108	; 0x6c
 80007b6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80007ba:	d101      	bne.n	80007c0 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
 80007bc:	2104      	movs	r1, #4
 80007be:	e7eb      	b.n	8000798 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
 80007c0:	2103      	movs	r1, #3
 80007c2:	e7f0      	b.n	80007a6 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
 80007c4:	2105      	movs	r1, #5
 80007c6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80007ca:	e7ec      	b.n	80007a6 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
 80007cc:	2107      	movs	r1, #7
 80007ce:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80007d2:	e7e8      	b.n	80007a6 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
 80007d4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80007d8:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80007dc:	f022 0202 	bic.w	r2, r2, #2
 80007e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80007e4:	f042 0202 	orr.w	r2, r2, #2
 80007e8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
 80007ec:	e7df      	b.n	80007ae <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
 80007ee:	3b6e      	subs	r3, #110	; 0x6e
 80007f0:	b2d9      	uxtb	r1, r3
 80007f2:	2301      	movs	r3, #1
 80007f4:	408b      	lsls	r3, r1
 80007f6:	f240 4182 	movw	r1, #1154	; 0x482
 80007fa:	420b      	tst	r3, r1
 80007fc:	d137      	bne.n	800086e <z_cbvprintf_impl+0x346>
 80007fe:	f013 0f24 	tst.w	r3, #36	; 0x24
 8000802:	d151      	bne.n	80008a8 <z_cbvprintf_impl+0x380>
 8000804:	07d8      	lsls	r0, r3, #31
 8000806:	d55c      	bpl.n	80008c2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
 8000808:	2103      	movs	r1, #3
 800080a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800080e:	f361 0302 	bfi	r3, r1, #0, #3
 8000812:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000816:	f002 0378 	and.w	r3, r2, #120	; 0x78
 800081a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 800081e:	424b      	negs	r3, r1
 8000820:	414b      	adcs	r3, r1
 8000822:	e01a      	b.n	800085a <z_cbvprintf_impl+0x332>
 8000824:	2001      	movs	r0, #1
	switch (conv->specifier) {
 8000826:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
 800082a:	b2c9      	uxtb	r1, r1
 800082c:	fa00 f101 	lsl.w	r1, r0, r1
 8000830:	f411 4f62 	tst.w	r1, #57856	; 0xe200
 8000834:	d194      	bne.n	8000760 <z_cbvprintf_impl+0x238>
 8000836:	f640 0601 	movw	r6, #2049	; 0x801
 800083a:	4231      	tst	r1, r6
 800083c:	d11d      	bne.n	800087a <z_cbvprintf_impl+0x352>
 800083e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
 8000842:	d03e      	beq.n	80008c2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
 8000844:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000848:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 800084c:	f002 0278 	and.w	r2, r2, #120	; 0x78
 8000850:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
 8000852:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000856:	d034      	beq.n	80008c2 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
 8000858:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
 800085a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800085e:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8000862:	430b      	orrs	r3, r1
 8000864:	f363 0241 	bfi	r2, r3, #1, #1
 8000868:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 800086c:	e6fd      	b.n	800066a <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
 800086e:	2102      	movs	r1, #2
 8000870:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000874:	f361 0302 	bfi	r3, r1, #0, #3
 8000878:	e7e8      	b.n	800084c <z_cbvprintf_impl+0x324>
 800087a:	2002      	movs	r0, #2
 800087c:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000880:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 8000884:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000888:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 800088a:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
 800088e:	bf02      	ittt	eq
 8000890:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
 8000894:	f041 0101 	orreq.w	r1, r1, #1
 8000898:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
 800089c:	2b63      	cmp	r3, #99	; 0x63
 800089e:	d1db      	bne.n	8000858 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
 80008a0:	1e13      	subs	r3, r2, #0
 80008a2:	bf18      	it	ne
 80008a4:	2301      	movne	r3, #1
 80008a6:	e7d8      	b.n	800085a <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
 80008a8:	2103      	movs	r1, #3
 80008aa:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
 80008ae:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 80008b2:	f361 0302 	bfi	r3, r1, #0, #3
 80008b6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
 80008ba:	bf14      	ite	ne
 80008bc:	2301      	movne	r3, #1
 80008be:	2300      	moveq	r3, #0
 80008c0:	e7cb      	b.n	800085a <z_cbvprintf_impl+0x332>
		conv->invalid = true;
 80008c2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80008c6:	f043 0301 	orr.w	r3, r3, #1
 80008ca:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
 80008ce:	e7c3      	b.n	8000858 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
 80008d0:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
 80008d4:	2a00      	cmp	r2, #0
		int width = -1;
 80008d6:	bfac      	ite	ge
 80008d8:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
			width = conv->width_value;
 80008dc:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
 80008e0:	e6d5      	b.n	800068e <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
 80008e2:	0798      	lsls	r0, r3, #30
 80008e4:	f57f aee2 	bpl.w	80006ac <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
 80008e8:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
 80008ec:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 80008ee:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
 80008f2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
 80008f6:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		enum specifier_cat_enum specifier_cat
 80008fa:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 80008fe:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 8000900:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 8000904:	d133      	bne.n	800096e <z_cbvprintf_impl+0x446>
			switch (length_mod) {
 8000906:	1ecb      	subs	r3, r1, #3
 8000908:	2b04      	cmp	r3, #4
 800090a:	d804      	bhi.n	8000916 <z_cbvprintf_impl+0x3ee>
 800090c:	e8df f003 	tbb	[pc, r3]
 8000910:	21464621 	.word	0x21464621
 8000914:	21          	.byte	0x21
 8000915:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 8000916:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
 8000918:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
 800091a:	ea4f 72e3 	mov.w	r2, r3, asr #31
 800091e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 8000922:	d11c      	bne.n	800095e <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
 8000924:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
 8000928:	17da      	asrs	r2, r3, #31
 800092a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
 800092e:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
 8000930:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000934:	f013 0603 	ands.w	r6, r3, #3
 8000938:	d050      	beq.n	80009dc <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
 800093a:	463a      	mov	r2, r7
 800093c:	4659      	mov	r1, fp
 800093e:	4648      	mov	r0, r9
 8000940:	9b03      	ldr	r3, [sp, #12]
 8000942:	f003 f843 	bl	80039cc <outs>
 8000946:	2800      	cmp	r0, #0
 8000948:	f2c0 8152 	blt.w	8000bf0 <z_cbvprintf_impl+0x6c8>
 800094c:	4405      	add	r5, r0
			continue;
 800094e:	9f03      	ldr	r7, [sp, #12]
 8000950:	e5f2      	b.n	8000538 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000952:	f854 3b04 	ldr.w	r3, [r4], #4
 8000956:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
 8000958:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 800095c:	e7e8      	b.n	8000930 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
 800095e:	2902      	cmp	r1, #2
 8000960:	d1e5      	bne.n	800092e <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
 8000962:	b21a      	sxth	r2, r3
 8000964:	f343 33c0 	sbfx	r3, r3, #15, #1
 8000968:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800096c:	e7df      	b.n	800092e <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
 800096e:	2b02      	cmp	r3, #2
 8000970:	d124      	bne.n	80009bc <z_cbvprintf_impl+0x494>
			switch (length_mod) {
 8000972:	1ecb      	subs	r3, r1, #3
 8000974:	2b04      	cmp	r3, #4
 8000976:	d804      	bhi.n	8000982 <z_cbvprintf_impl+0x45a>
 8000978:	e8df f003 	tbb	[pc, r3]
 800097c:	18101018 	.word	0x18101018
 8000980:	18          	.byte	0x18
 8000981:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
 8000982:	2901      	cmp	r1, #1
 8000984:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
 8000988:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 800098c:	d014      	beq.n	80009b8 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
 800098e:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
 8000990:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
 8000994:	d1cc      	bne.n	8000930 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
 8000996:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
 8000998:	930e      	str	r3, [sp, #56]	; 0x38
 800099a:	e7c9      	b.n	8000930 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
 800099c:	3407      	adds	r4, #7
 800099e:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
 80009a2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 80009a6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 80009aa:	e7c1      	b.n	8000930 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
 80009ac:	f854 3b04 	ldr.w	r3, [r4], #4
 80009b0:	930e      	str	r3, [sp, #56]	; 0x38
 80009b2:	2300      	movs	r3, #0
 80009b4:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
 80009b6:	e7bb      	b.n	8000930 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	e7cd      	b.n	8000958 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
 80009bc:	2b04      	cmp	r3, #4
 80009be:	d108      	bne.n	80009d2 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
 80009c0:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
 80009c2:	f024 0407 	bic.w	r4, r4, #7
 80009c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80009ca:	3408      	adds	r4, #8
 80009cc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80009d0:	e7ae      	b.n	8000930 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
 80009d2:	2b03      	cmp	r3, #3
 80009d4:	d1ac      	bne.n	8000930 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
 80009d6:	f854 3b04 	ldr.w	r3, [r4], #4
 80009da:	e7dd      	b.n	8000998 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
 80009dc:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 80009e0:	2878      	cmp	r0, #120	; 0x78
 80009e2:	d8b4      	bhi.n	800094e <z_cbvprintf_impl+0x426>
 80009e4:	2862      	cmp	r0, #98	; 0x62
 80009e6:	d81c      	bhi.n	8000a22 <z_cbvprintf_impl+0x4fa>
 80009e8:	2825      	cmp	r0, #37	; 0x25
 80009ea:	f43f adad 	beq.w	8000548 <z_cbvprintf_impl+0x20>
 80009ee:	2858      	cmp	r0, #88	; 0x58
 80009f0:	d1ad      	bne.n	800094e <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
 80009f2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80009f6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	aa10      	add	r2, sp, #64	; 0x40
 80009fe:	ab08      	add	r3, sp, #32
 8000a00:	f002 ff9e 	bl	8003940 <encode_uint>
			if (precision >= 0) {
 8000a04:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000a08:	4607      	mov	r7, r0
			if (precision >= 0) {
 8000a0a:	f280 8099 	bge.w	8000b40 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
 8000a0e:	2f00      	cmp	r7, #0
 8000a10:	d09d      	beq.n	800094e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
 8000a12:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000a16:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
 8000a18:	2e00      	cmp	r6, #0
 8000a1a:	f000 80c0 	beq.w	8000b9e <z_cbvprintf_impl+0x676>
			nj_len += 1U;
 8000a1e:	3001      	adds	r0, #1
 8000a20:	e0bd      	b.n	8000b9e <z_cbvprintf_impl+0x676>
		switch (conv->specifier) {
 8000a22:	3863      	subs	r0, #99	; 0x63
 8000a24:	2815      	cmp	r0, #21
 8000a26:	d892      	bhi.n	800094e <z_cbvprintf_impl+0x426>
 8000a28:	a201      	add	r2, pc, #4	; (adr r2, 8000a30 <z_cbvprintf_impl+0x508>)
 8000a2a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8000a2e:	bf00      	nop
 8000a30:	08000b05 	.word	0x08000b05
 8000a34:	08000b17 	.word	0x08000b17
 8000a38:	0800094f 	.word	0x0800094f
 8000a3c:	0800094f 	.word	0x0800094f
 8000a40:	0800094f 	.word	0x0800094f
 8000a44:	0800094f 	.word	0x0800094f
 8000a48:	08000b17 	.word	0x08000b17
 8000a4c:	0800094f 	.word	0x0800094f
 8000a50:	0800094f 	.word	0x0800094f
 8000a54:	0800094f 	.word	0x0800094f
 8000a58:	0800094f 	.word	0x0800094f
 8000a5c:	08000ba3 	.word	0x08000ba3
 8000a60:	08000b3b 	.word	0x08000b3b
 8000a64:	08000b61 	.word	0x08000b61
 8000a68:	0800094f 	.word	0x0800094f
 8000a6c:	0800094f 	.word	0x0800094f
 8000a70:	08000a89 	.word	0x08000a89
 8000a74:	0800094f 	.word	0x0800094f
 8000a78:	08000b3b 	.word	0x08000b3b
 8000a7c:	0800094f 	.word	0x0800094f
 8000a80:	0800094f 	.word	0x0800094f
 8000a84:	08000b3b 	.word	0x08000b3b
			if (precision >= 0) {
 8000a88:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
 8000a8c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
 8000a8e:	db35      	blt.n	8000afc <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
 8000a90:	4651      	mov	r1, sl
 8000a92:	4638      	mov	r0, r7
 8000a94:	f002 ffcc 	bl	8003a30 <strnlen>
			bpe = bps + len;
 8000a98:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
 8000a9c:	2f00      	cmp	r7, #0
 8000a9e:	f43f af56 	beq.w	800094e <z_cbvprintf_impl+0x426>
		char sign = 0;
 8000aa2:	2600      	movs	r6, #0
		if (conv->altform_0c) {
 8000aa4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000aa8:	f013 0210 	ands.w	r2, r3, #16
 8000aac:	9205      	str	r2, [sp, #20]
 8000aae:	f000 8092 	beq.w	8000bd6 <z_cbvprintf_impl+0x6ae>
			nj_len += 2U;
 8000ab2:	3002      	adds	r0, #2
		if (conv->pad_fp) {
 8000ab4:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
 8000ab6:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
 8000ab8:	bf48      	it	mi
 8000aba:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
 8000abc:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
 8000abe:	bf48      	it	mi
 8000ac0:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
 8000ac2:	f1b8 0f00 	cmp.w	r8, #0
		nj_len += conv->pad0_value;
 8000ac6:	9204      	str	r2, [sp, #16]
		if (width > 0) {
 8000ac8:	f340 809f 	ble.w	8000c0a <z_cbvprintf_impl+0x6e2>
			if (!conv->flag_dash) {
 8000acc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
 8000ad0:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
 8000ad4:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8000ad8:	0750      	lsls	r0, r2, #29
 8000ada:	9306      	str	r3, [sp, #24]
 8000adc:	f100 8095 	bmi.w	8000c0a <z_cbvprintf_impl+0x6e2>
				if (conv->flag_zero) {
 8000ae0:	0651      	lsls	r1, r2, #25
 8000ae2:	f140 8088 	bpl.w	8000bf6 <z_cbvprintf_impl+0x6ce>
					if (sign != 0) {
 8000ae6:	b13e      	cbz	r6, 8000af8 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
 8000ae8:	4659      	mov	r1, fp
 8000aea:	4630      	mov	r0, r6
 8000aec:	47c8      	blx	r9
 8000aee:	2800      	cmp	r0, #0
 8000af0:	db7e      	blt.n	8000bf0 <z_cbvprintf_impl+0x6c8>
 8000af2:	9b06      	ldr	r3, [sp, #24]
 8000af4:	3501      	adds	r5, #1
 8000af6:	461e      	mov	r6, r3
					pad = '0';
 8000af8:	2230      	movs	r2, #48	; 0x30
 8000afa:	e07d      	b.n	8000bf8 <z_cbvprintf_impl+0x6d0>
				len = strlen(bps);
 8000afc:	4638      	mov	r0, r7
 8000afe:	f002 ff90 	bl	8003a22 <strlen>
 8000b02:	e7c9      	b.n	8000a98 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8000b04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
 8000b06:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
 8000b08:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8000b0a:	f88d 3020 	strb.w	r3, [sp, #32]
			bps = buf;
 8000b0e:	af08      	add	r7, sp, #32
			bpe = buf + 1;
 8000b10:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
 8000b14:	e7c6      	b.n	8000aa4 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
 8000b16:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
 8000b18:	bf5a      	itte	pl
 8000b1a:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
 8000b1e:	015e      	lslpl	r6, r3, #5
				sign = '+';
 8000b20:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
 8000b22:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f6bf af63 	bge.w	80009f2 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
 8000b2c:	4252      	negs	r2, r2
 8000b2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
 8000b32:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
 8000b34:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000b38:	e75b      	b.n	80009f2 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
 8000b3a:	2600      	movs	r6, #0
 8000b3c:	e759      	b.n	80009f2 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
 8000b3e:	2600      	movs	r6, #0
				conv->flag_zero = false;
 8000b40:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
 8000b44:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000b48:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
 8000b4a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8000b4e:	459a      	cmp	sl, r3
				conv->flag_zero = false;
 8000b50:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
 8000b54:	f67f af5b 	bls.w	8000a0e <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
 8000b58:	ebaa 0303 	sub.w	r3, sl, r3
 8000b5c:	9311      	str	r3, [sp, #68]	; 0x44
 8000b5e:	e756      	b.n	8000a0e <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
 8000b60:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000b62:	b390      	cbz	r0, 8000bca <z_cbvprintf_impl+0x6a2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000b64:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	ab08      	add	r3, sp, #32
 8000b6e:	aa10      	add	r2, sp, #64	; 0x40
 8000b70:	f002 fee6 	bl	8003940 <encode_uint>
				conv->altform_0c = true;
 8000b74:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
 8000b78:	f1ba 0f00 	cmp.w	sl, #0
				conv->altform_0c = true;
 8000b7c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000b80:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8000b84:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000b88:	4607      	mov	r7, r0
				conv->altform_0c = true;
 8000b8a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
 8000b8e:	dad6      	bge.n	8000b3e <z_cbvprintf_impl+0x616>
		if (bps == NULL) {
 8000b90:	2800      	cmp	r0, #0
 8000b92:	f43f aedc 	beq.w	800094e <z_cbvprintf_impl+0x426>
		char sign = 0;
 8000b96:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
 8000b98:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000b9c:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
 8000b9e:	469a      	mov	sl, r3
 8000ba0:	e780      	b.n	8000aa4 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
 8000ba2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
 8000ba4:	2907      	cmp	r1, #7
 8000ba6:	f63f aed2 	bhi.w	800094e <z_cbvprintf_impl+0x426>
 8000baa:	e8df f001 	tbb	[pc, r1]
 8000bae:	040c      	.short	0x040c
 8000bb0:	08080c06 	.word	0x08080c06
 8000bb4:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
 8000bb6:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
 8000bb8:	e6c9      	b.n	800094e <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
 8000bba:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
 8000bbc:	e6c7      	b.n	800094e <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
 8000bbe:	17ea      	asrs	r2, r5, #31
 8000bc0:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
 8000bc4:	e6c3      	b.n	800094e <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8000bc6:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
 8000bc8:	e6c1      	b.n	800094e <z_cbvprintf_impl+0x426>
 8000bca:	4f2f      	ldr	r7, [pc, #188]	; (8000c88 <z_cbvprintf_impl+0x760>)
		char sign = 0;
 8000bcc:	4606      	mov	r6, r0
			bpe = bps + 5;
 8000bce:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
 8000bd2:	2005      	movs	r0, #5
 8000bd4:	e766      	b.n	8000aa4 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
 8000bd6:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
 8000bd8:	bf48      	it	mi
 8000bda:	3001      	addmi	r0, #1
 8000bdc:	e76a      	b.n	8000ab4 <z_cbvprintf_impl+0x58c>
					OUTC(pad);
 8000bde:	4610      	mov	r0, r2
 8000be0:	9307      	str	r3, [sp, #28]
 8000be2:	9206      	str	r2, [sp, #24]
 8000be4:	4659      	mov	r1, fp
 8000be6:	47c8      	blx	r9
 8000be8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000bec:	2800      	cmp	r0, #0
 8000bee:	da04      	bge.n	8000bfa <z_cbvprintf_impl+0x6d2>
#undef OUTS
#undef OUTC
}
 8000bf0:	b015      	add	sp, #84	; 0x54
 8000bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 8000bf6:	2220      	movs	r2, #32
					pad = '0';
 8000bf8:	4643      	mov	r3, r8
				while (width-- > 0) {
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000c02:	dcec      	bgt.n	8000bde <z_cbvprintf_impl+0x6b6>
 8000c04:	4445      	add	r5, r8
 8000c06:	4698      	mov	r8, r3
 8000c08:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
 8000c0a:	b12e      	cbz	r6, 8000c18 <z_cbvprintf_impl+0x6f0>
			OUTC(sign);
 8000c0c:	4659      	mov	r1, fp
 8000c0e:	4630      	mov	r0, r6
 8000c10:	47c8      	blx	r9
 8000c12:	2800      	cmp	r0, #0
 8000c14:	dbec      	blt.n	8000bf0 <z_cbvprintf_impl+0x6c8>
 8000c16:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 8000c18:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000c1c:	06da      	lsls	r2, r3, #27
 8000c1e:	d401      	bmi.n	8000c24 <z_cbvprintf_impl+0x6fc>
 8000c20:	071b      	lsls	r3, r3, #28
 8000c22:	d505      	bpl.n	8000c30 <z_cbvprintf_impl+0x708>
				OUTC('0');
 8000c24:	4659      	mov	r1, fp
 8000c26:	2030      	movs	r0, #48	; 0x30
 8000c28:	47c8      	blx	r9
 8000c2a:	2800      	cmp	r0, #0
 8000c2c:	dbe0      	blt.n	8000bf0 <z_cbvprintf_impl+0x6c8>
 8000c2e:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 8000c30:	9b05      	ldr	r3, [sp, #20]
 8000c32:	b133      	cbz	r3, 8000c42 <z_cbvprintf_impl+0x71a>
				OUTC(conv->specifier);
 8000c34:	4659      	mov	r1, fp
 8000c36:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 8000c3a:	47c8      	blx	r9
 8000c3c:	2800      	cmp	r0, #0
 8000c3e:	dbd7      	blt.n	8000bf0 <z_cbvprintf_impl+0x6c8>
 8000c40:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000c42:	9e04      	ldr	r6, [sp, #16]
 8000c44:	442e      	add	r6, r5
 8000c46:	e005      	b.n	8000c54 <z_cbvprintf_impl+0x72c>
				OUTC('0');
 8000c48:	4659      	mov	r1, fp
 8000c4a:	2030      	movs	r0, #48	; 0x30
 8000c4c:	47c8      	blx	r9
 8000c4e:	2800      	cmp	r0, #0
 8000c50:	dbce      	blt.n	8000bf0 <z_cbvprintf_impl+0x6c8>
 8000c52:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000c54:	1b73      	subs	r3, r6, r5
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	dcf6      	bgt.n	8000c48 <z_cbvprintf_impl+0x720>
			OUTS(bps, bpe);
 8000c5a:	4653      	mov	r3, sl
 8000c5c:	463a      	mov	r2, r7
 8000c5e:	4659      	mov	r1, fp
 8000c60:	4648      	mov	r0, r9
 8000c62:	f002 feb3 	bl	80039cc <outs>
 8000c66:	2800      	cmp	r0, #0
 8000c68:	dbc2      	blt.n	8000bf0 <z_cbvprintf_impl+0x6c8>
 8000c6a:	4405      	add	r5, r0
		while (width > 0) {
 8000c6c:	44a8      	add	r8, r5
 8000c6e:	eba8 0305 	sub.w	r3, r8, r5
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f77f ae6b 	ble.w	800094e <z_cbvprintf_impl+0x426>
			OUTC(' ');
 8000c78:	4659      	mov	r1, fp
 8000c7a:	2020      	movs	r0, #32
 8000c7c:	47c8      	blx	r9
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	dbb6      	blt.n	8000bf0 <z_cbvprintf_impl+0x6c8>
 8000c82:	3501      	adds	r5, #1
			--width;
 8000c84:	e7f3      	b.n	8000c6e <z_cbvprintf_impl+0x746>
 8000c86:	bf00      	nop
 8000c88:	080050eb 	.word	0x080050eb

08000c8c <stm32f1_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8000c8c:	f04f 0210 	mov.w	r2, #16
 8000c90:	f3ef 8311 	mrs	r3, BASEPRI
 8000c94:	f382 8812 	msr	BASEPRI_MAX, r2
 8000c98:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000c9c:	f383 8811 	msr	BASEPRI, r3
 8000ca0:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 8 MHz from HSI */
	SystemCoreClock = 8000000;
 8000ca4:	4b02      	ldr	r3, [pc, #8]	; (8000cb0 <stm32f1_init+0x24>)
 8000ca6:	4a03      	ldr	r2, [pc, #12]	; (8000cb4 <stm32f1_init+0x28>)

	return 0;
}
 8000ca8:	2000      	movs	r0, #0
	SystemCoreClock = 8000000;
 8000caa:	601a      	str	r2, [r3, #0]
}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000088 	.word	0x20000088
 8000cb4:	007a1200 	.word	0x007a1200

08000cb8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8000cb8:	4901      	ldr	r1, [pc, #4]	; (8000cc0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8000cba:	2210      	movs	r2, #16
	str	r2, [r1]
 8000cbc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8000cbe:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8000cc0:	e000ed10 	.word	0xe000ed10

08000cc4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8000cc4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8000cc6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8000cc8:	f380 8811 	msr	BASEPRI, r0
	isb
 8000ccc:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
 8000cd0:	f3bf 8f4f 	dsb	sy
 8000cd4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8000cd6:	b662      	cpsie	i
	isb
 8000cd8:	f3bf 8f6f 	isb	sy

	bx	lr
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8000ce0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000ce2:	2800      	cmp	r0, #0
 8000ce4:	db07      	blt.n	8000cf6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	0941      	lsrs	r1, r0, #5
 8000cea:	4a03      	ldr	r2, [pc, #12]	; (8000cf8 <arch_irq_enable+0x18>)
 8000cec:	f000 001f 	and.w	r0, r0, #31
 8000cf0:	4083      	lsls	r3, r0
 8000cf2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000cf6:	4770      	bx	lr
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8000cfc:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000cfe:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
 8000d00:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	bfac      	ite	ge
 8000d06:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	4b06      	ldrlt	r3, [pc, #24]	; (8000d24 <z_arm_irq_priority_set+0x28>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0c:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8000d10:	b2c9      	uxtb	r1, r1
 8000d12:	bfab      	itete	ge
 8000d14:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d18:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d20:	5419      	strblt	r1, [r3, r0]
}
 8000d22:	4770      	bx	lr
 8000d24:	e000ed14 	.word	0xe000ed14

08000d28 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8000d28:	bf30      	wfi
    b z_SysNmiOnReset
 8000d2a:	f7ff bffd 	b.w	8000d28 <z_SysNmiOnReset>
 8000d2e:	bf00      	nop

08000d30 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8000d30:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <z_arm_prep_c+0x28>)
 8000d34:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <z_arm_prep_c+0x2c>)
 8000d36:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000d3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000d3e:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d44:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8000d48:	f001 ff58 	bl	8002bfc <z_bss_zero>
	z_data_copy();
 8000d4c:	f002 fbde 	bl	800350c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8000d50:	f000 f9ca 	bl	80010e8 <z_arm_interrupt_init>
	z_cstart();
 8000d54:	f001 ff92 	bl	8002c7c <z_cstart>
 8000d58:	08000000 	.word	0x08000000
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8000d60:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8000d62:	490a      	ldr	r1, [pc, #40]	; (8000d8c <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8000d64:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8000d66:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
 8000d68:	6698      	str	r0, [r3, #104]	; 0x68
	_current->arch.swap_return_value = _k_neg_eagain;
 8000d6a:	66d9      	str	r1, [r3, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000d6c:	4908      	ldr	r1, [pc, #32]	; (8000d90 <arch_swap+0x30>)
 8000d6e:	684b      	ldr	r3, [r1, #4]
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d74:	604b      	str	r3, [r1, #4]
 8000d76:	2300      	movs	r3, #0
 8000d78:	f383 8811 	msr	BASEPRI, r3
 8000d7c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8000d80:	6893      	ldr	r3, [r2, #8]
}
 8000d82:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000398 	.word	0x20000398
 8000d8c:	08005050 	.word	0x08005050
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8000d94:	490f      	ldr	r1, [pc, #60]	; (8000dd4 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8000d96:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8000d98:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8000d9c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8000d9e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8000da2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8000da6:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8000da8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8000dac:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8000db0:	4f09      	ldr	r7, [pc, #36]	; (8000dd8 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8000db2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8000db6:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8000db8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8000dba:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8000dbc:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs r3, #0
 8000dbe:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8000dc0:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8000dc2:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8000dc6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8000dca:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8000dce:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8000dd2:	4770      	bx	lr
    ldr r1, =_kernel
 8000dd4:	20000398 	.word	0x20000398
    ldr v4, =_SCS_ICSR
 8000dd8:	e000ed04 	.word	0xe000ed04

08000ddc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8000ddc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8000de0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8000de2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8000de6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8000dea:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8000dec:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8000df0:	2902      	cmp	r1, #2
    beq _oops
 8000df2:	d0ff      	beq.n	8000df4 <_oops>

08000df4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8000df4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 8000df6:	f002 fe05 	bl	8003a04 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 8000dfa:	bd01      	pop	{r0, pc}

08000dfc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8000dfc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8000e00:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
 8000e02:	490b      	ldr	r1, [pc, #44]	; (8000e30 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
 8000e04:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 8000e08:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
 8000e0a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
 8000e0e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8000e12:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
 8000e14:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
 8000e18:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8000e1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e20:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8000e24:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8000e26:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8000e28:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8000e2a:	6683      	str	r3, [r0, #104]	; 0x68
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	08003865 	.word	0x08003865

08000e34 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <arch_switch_to_main_thread+0x20>)
 8000e36:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8000e38:	4610      	mov	r0, r2
 8000e3a:	f381 8809 	msr	PSP, r1
 8000e3e:	2100      	movs	r1, #0
 8000e40:	b663      	cpsie	if
 8000e42:	f381 8811 	msr	BASEPRI, r1
 8000e46:	f3bf 8f6f 	isb	sy
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f002 fd09 	bl	8003864 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8000e52:	bf00      	nop
 8000e54:	20000398 	.word	0x20000398

08000e58 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8000e58:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8000e5a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8000e5e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8000e62:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8000e66:	4904      	ldr	r1, [pc, #16]	; (8000e78 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8000e68:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8000e6a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8000e6c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8000e6e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8000e72:	4902      	ldr	r1, [pc, #8]	; (8000e7c <_isr_wrapper+0x24>)
	bx r1
 8000e74:	4708      	bx	r1
 8000e76:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8000e78:	08004b18 	.word	0x08004b18
	ldr r1, =z_arm_int_exit
 8000e7c:	08000e81 	.word	0x08000e81

08000e80 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8000e82:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8000e84:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8000e86:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8000e88:	d003      	beq.n	8000e92 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8000e8a:	4903      	ldr	r1, [pc, #12]	; (8000e98 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8000e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8000e90:	600a      	str	r2, [r1, #0]

08000e92 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8000e92:	4770      	bx	lr
	ldr r3, =_kernel
 8000e94:	20000398 	.word	0x20000398
	ldr r1, =_SCS_ICSR
 8000e98:	e000ed04 	.word	0xe000ed04

08000e9c <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <usage_fault.constprop.0+0x50>)
 8000e9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
 8000ea0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8000ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
 8000ea6:	bf14      	ite	ne
 8000ea8:	201e      	movne	r0, #30
 8000eaa:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
 8000eac:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8000eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
 8000eb2:	bf18      	it	ne
 8000eb4:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
 8000eb6:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8000eba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
 8000ebc:	bf18      	it	ne
 8000ebe:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
 8000ec0:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8000ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
 8000ec6:	bf18      	it	ne
 8000ec8:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
 8000eca:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8000ece:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
 8000ed0:	bf18      	it	ne
 8000ed2:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
 8000ed4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8000ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	return reason;
}
 8000eda:	bf18      	it	ne
 8000edc:	2024      	movne	r0, #36	; 0x24
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8000ede:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8000ee2:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8000ef0:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <bus_fault.constprop.0+0x5c>)
 8000ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8000ef6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
 8000ef8:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000efc:	bf14      	ite	ne
 8000efe:	2217      	movne	r2, #23
 8000f00:	2216      	moveq	r2, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
 8000f02:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8000f06:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
 8000f08:	bf18      	it	ne
 8000f0a:	2218      	movne	r2, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8000f0c:	05a4      	lsls	r4, r4, #22
 8000f0e:	d509      	bpl.n	8000f24 <bus_fault.constprop.0+0x34>
		STORE_xFAR(bfar, SCB->BFAR);
 8000f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8000f12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f14:	0412      	lsls	r2, r2, #16
 8000f16:	d504      	bpl.n	8000f22 <bus_fault.constprop.0+0x32>
			if (from_hard_fault != 0) {
 8000f18:	b118      	cbz	r0, 8000f22 <bus_fault.constprop.0+0x32>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8000f1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f20:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
 8000f22:	2219      	movs	r2, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <bus_fault.constprop.0+0x5c>)
 8000f26:	6a98      	ldr	r0, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
 8000f28:	f410 6f80 	tst.w	r0, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8000f2c:	6a98      	ldr	r0, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
 8000f2e:	bf18      	it	ne
 8000f30:	221a      	movne	r2, #26
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
 8000f32:	f410 7f80 	tst.w	r0, #256	; 0x100
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8000f36:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000f38:	f440 407f 	orr.w	r0, r0, #65280	; 0xff00
 8000f3c:	6298      	str	r0, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8000f3e:	f04f 0300 	mov.w	r3, #0
}
 8000f42:	bf0c      	ite	eq
 8000f44:	4610      	moveq	r0, r2
 8000f46:	201b      	movne	r0, #27
	*recoverable = memory_fault_recoverable(esf, true);
 8000f48:	700b      	strb	r3, [r1, #0]
}
 8000f4a:	bd10      	pop	{r4, pc}
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
 8000f50:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <mem_manage_fault.constprop.0+0x58>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
 8000f54:	4602      	mov	r2, r0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8000f56:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8000f58:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
 8000f5a:	f010 0f10 	tst.w	r0, #16
 8000f5e:	bf14      	ite	ne
 8000f60:	2011      	movne	r0, #17
 8000f62:	2010      	moveq	r0, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
 8000f64:	f014 0f08 	tst.w	r4, #8
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8000f68:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
 8000f6a:	bf18      	it	ne
 8000f6c:	2012      	movne	r0, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8000f6e:	07a4      	lsls	r4, r4, #30
 8000f70:	d509      	bpl.n	8000f86 <mem_manage_fault.constprop.0+0x36>
		uint32_t temp = SCB->MMFAR;
 8000f72:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8000f74:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000f76:	0600      	lsls	r0, r0, #24
 8000f78:	d504      	bpl.n	8000f84 <mem_manage_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
 8000f7a:	b11a      	cbz	r2, 8000f84 <mem_manage_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8000f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f82:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
 8000f84:	2013      	movs	r0, #19
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <mem_manage_fault.constprop.0+0x58>)
 8000f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
 8000f8a:	f012 0f01 	tst.w	r2, #1
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8000f8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
 8000f90:	bf18      	it	ne
 8000f92:	2014      	movne	r0, #20
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8000f94:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8000f96:	bf58      	it	pl
 8000f98:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8000f9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f9c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	700b      	strb	r3, [r1, #0]
}
 8000fa6:	bd10      	pop	{r4, pc}
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8000fac:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8000fae:	4b44      	ldr	r3, [pc, #272]	; (80010c0 <z_arm_fault+0x114>)
{
 8000fb0:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2500      	movs	r5, #0
{
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fbc:	f385 8811 	msr	BASEPRI, r5
 8000fc0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8000fc4:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
 8000fc8:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 8000fcc:	d111      	bne.n	8000ff2 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8000fce:	f002 000c 	and.w	r0, r2, #12
 8000fd2:	2808      	cmp	r0, #8
 8000fd4:	d00d      	beq.n	8000ff2 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8000fd6:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 8000fd8:	bf4c      	ite	mi
 8000fda:	460e      	movmi	r6, r1
			*nested_exc = true;
 8000fdc:	2501      	movpl	r5, #1
	*recoverable = false;
 8000fde:	2200      	movs	r2, #0
	switch (fault) {
 8000fe0:	3b03      	subs	r3, #3
	*recoverable = false;
 8000fe2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d805      	bhi.n	8000ff6 <z_arm_fault+0x4a>
 8000fea:	e8df f003 	tbb	[pc, r3]
 8000fee:	5c1e      	.short	0x5c1e
 8000ff0:	5960      	.short	0x5960
		return NULL;
 8000ff2:	462e      	mov	r6, r5
 8000ff4:	e7f3      	b.n	8000fde <z_arm_fault+0x32>
 8000ff6:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8000ff8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000ffc:	b99b      	cbnz	r3, 8001026 <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8000ffe:	2220      	movs	r2, #32
 8001000:	4631      	mov	r1, r6
 8001002:	a802      	add	r0, sp, #8
 8001004:	f002 fd1d 	bl	8003a42 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 8001008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800100a:	2d00      	cmp	r5, #0
 800100c:	d053      	beq.n	80010b6 <z_arm_fault+0x10a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 800100e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001012:	b922      	cbnz	r2, 800101e <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8001014:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8001018:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800101c:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
 800101e:	4620      	mov	r0, r4
 8001020:	a902      	add	r1, sp, #8
 8001022:	f002 fced 	bl	8003a00 <z_arm_fatal_error>
}
 8001026:	b00a      	add	sp, #40	; 0x28
 8001028:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <z_arm_fault+0x114>)
 800102c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800102e:	0791      	lsls	r1, r2, #30
 8001030:	d4e1      	bmi.n	8000ff6 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8001032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001034:	2a00      	cmp	r2, #0
 8001036:	dbde      	blt.n	8000ff6 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8001038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800103a:	0052      	lsls	r2, r2, #1
 800103c:	d5db      	bpl.n	8000ff6 <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 800103e:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 8001040:	69b1      	ldr	r1, [r6, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 8001042:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001046:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001048:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800104c:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8001050:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
 8001052:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8001056:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800105a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800105c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001060:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8001064:	f64d 7202 	movw	r2, #57090	; 0xdf02
 8001068:	4291      	cmp	r1, r2
 800106a:	d009      	beq.n	8001080 <z_arm_fault+0xd4>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
 800106c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	b142      	cbz	r2, 8001084 <z_arm_fault+0xd8>
			reason = mem_manage_fault(esf, 1, recoverable);
 8001072:	2001      	movs	r0, #1
 8001074:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
 8001078:	f7ff ff6a 	bl	8000f50 <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
 800107c:	4604      	mov	r4, r0
		break;
 800107e:	e7bb      	b.n	8000ff8 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
 8001080:	6834      	ldr	r4, [r6, #0]
 8001082:	e7b9      	b.n	8000ff8 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
 8001084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001086:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
 800108a:	d005      	beq.n	8001098 <z_arm_fault+0xec>
			reason = bus_fault(esf, 1, recoverable);
 800108c:	2001      	movs	r0, #1
 800108e:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
 8001092:	f7ff ff2d 	bl	8000ef0 <bus_fault.constprop.0>
 8001096:	e7f1      	b.n	800107c <z_arm_fault+0xd0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
 8001098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800109e:	d3aa      	bcc.n	8000ff6 <z_arm_fault+0x4a>
		reason = usage_fault(esf);
 80010a0:	f7ff fefc 	bl	8000e9c <usage_fault.constprop.0>
 80010a4:	e7ea      	b.n	800107c <z_arm_fault+0xd0>
		reason = mem_manage_fault(esf, 0, recoverable);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f10d 0107 	add.w	r1, sp, #7
 80010ac:	e7e4      	b.n	8001078 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
 80010ae:	2000      	movs	r0, #0
 80010b0:	f10d 0107 	add.w	r1, sp, #7
 80010b4:	e7ed      	b.n	8001092 <z_arm_fault+0xe6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80010b6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80010ba:	f023 0301 	bic.w	r3, r3, #1
 80010be:	e7ad      	b.n	800101c <z_arm_fault+0x70>
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80010c4:	4a02      	ldr	r2, [pc, #8]	; (80010d0 <z_arm_fault_init+0xc>)
 80010c6:	6953      	ldr	r3, [r2, #20]
 80010c8:	f043 0310 	orr.w	r3, r3, #16
 80010cc:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 80010d4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 80010d8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 80010dc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 80010de:	4672      	mov	r2, lr
	bl z_arm_fault
 80010e0:	f7ff ff64 	bl	8000fac <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 80010e4:	bd01      	pop	{r0, pc}
 80010e6:	bf00      	nop

080010e8 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 80010e8:	2300      	movs	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ea:	2110      	movs	r1, #16
 80010ec:	4803      	ldr	r0, [pc, #12]	; (80010fc <z_arm_interrupt_init+0x14>)
 80010ee:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80010f0:	3301      	adds	r3, #1
 80010f2:	2b2b      	cmp	r3, #43	; 0x2b
 80010f4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 80010f8:	d1f9      	bne.n	80010ee <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 80010fa:	4770      	bx	lr
 80010fc:	e000e100 	.word	0xe000e100

08001100 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8001100:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8001102:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8001106:	4808      	ldr	r0, [pc, #32]	; (8001128 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8001108:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 800110c:	1840      	adds	r0, r0, r1
    msr PSP, r0
 800110e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8001112:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8001116:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8001118:	4308      	orrs	r0, r1
    msr CONTROL, r0
 800111a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 800111e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8001122:	f7ff fe05 	bl	8000d30 <z_arm_prep_c>
 8001126:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8001128:	200003d0 	.word	0x200003d0

0800112c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <z_impl_k_thread_abort+0x24>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	4283      	cmp	r3, r0
 8001132:	d10b      	bne.n	800114c <z_impl_k_thread_abort+0x20>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001134:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8001138:	b143      	cbz	r3, 800114c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <z_impl_k_thread_abort+0x28>)
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001142:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 8001144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001146:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 800114c:	f002 b97e 	b.w	800344c <z_thread_abort>
 8001150:	20000398 	.word	0x20000398
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
 8001158:	4b01      	ldr	r3, [pc, #4]	; (8001160 <__stdout_hook_install+0x8>)
 800115a:	6018      	str	r0, [r3, #0]
}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000004 	.word	0x20000004

08001164 <stm32_exti_isr>:
 * Check EXTI lines in exti_range for pending interrupts
 *
 * @param *exti_range Pointer to a exti_range structure
 */
static void stm32_exti_isr(const void *exti_range)
{
 8001164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001168:	4605      	mov	r5, r0
	struct stm32_exti_data *data = dev->data;
	const struct stm32_exti_range *range = exti_range;
	int line;

	/* see which bits are set */
	for (int i = 0; i <= range->len; i++) {
 800116a:	2400      	movs	r4, #0
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800116c:	f04f 0801 	mov.w	r8, #1
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001170:	4e0c      	ldr	r6, [pc, #48]	; (80011a4 <stm32_exti_isr+0x40>)
		if (stm32_exti_is_pending(line)) {
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 8001172:	4f0d      	ldr	r7, [pc, #52]	; (80011a8 <stm32_exti_isr+0x44>)
		line = range->start + i;
 8001174:	782b      	ldrb	r3, [r5, #0]
 8001176:	1918      	adds	r0, r3, r4
	if (line < 32) {
 8001178:	281f      	cmp	r0, #31
 800117a:	dc0d      	bgt.n	8001198 <stm32_exti_isr+0x34>
 800117c:	6972      	ldr	r2, [r6, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800117e:	fa08 f300 	lsl.w	r3, r8, r0
		if (stm32_exti_is_pending(line)) {
 8001182:	ea33 0202 	bics.w	r2, r3, r2
 8001186:	d107      	bne.n	8001198 <stm32_exti_isr+0x34>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8001188:	6173      	str	r3, [r6, #20]
			if (!data->cb[line].cb) {
 800118a:	f857 3030 	ldr.w	r3, [r7, r0, lsl #3]
 800118e:	b11b      	cbz	r3, 8001198 <stm32_exti_isr+0x34>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8001190:	eb07 02c0 	add.w	r2, r7, r0, lsl #3
 8001194:	6851      	ldr	r1, [r2, #4]
 8001196:	4798      	blx	r3
	for (int i = 0; i <= range->len; i++) {
 8001198:	786b      	ldrb	r3, [r5, #1]
 800119a:	3401      	adds	r4, #1
 800119c:	42a3      	cmp	r3, r4
 800119e:	dae9      	bge.n	8001174 <stm32_exti_isr+0x10>
		}
	}
}
 80011a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011a4:	40010400 	.word	0x40010400
 80011a8:	200001a8 	.word	0x200001a8

080011ac <stm32_fill_irq_table>:

static void stm32_fill_irq_table(int8_t start, int8_t len, int32_t irqn)
{
	for (int i = 0; i < len; i++) {
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <stm32_fill_irq_table+0x14>)
 80011ae:	4418      	add	r0, r3
 80011b0:	2300      	movs	r3, #0
 80011b2:	3301      	adds	r3, #1
 80011b4:	4299      	cmp	r1, r3
		exti_irq_table[start + i] = irqn;
 80011b6:	f800 2b01 	strb.w	r2, [r0], #1
	for (int i = 0; i < len; i++) {
 80011ba:	dcfa      	bgt.n	80011b2 <stm32_fill_irq_table+0x6>
	}
}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000094 	.word	0x20000094

080011c4 <stm32_exti_enable>:
{
 80011c4:	b410      	push	{r4}
	irqnum = exti_irq_table[line];
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <stm32_exti_enable+0x1c>)
{
 80011c8:	4602      	mov	r2, r0
	irqnum = exti_irq_table[line];
 80011ca:	5618      	ldrsb	r0, [r3, r0]
	LL_EXTI_EnableIT_0_31(1 << line);
 80011cc:	2301      	movs	r3, #1
  SET_BIT(EXTI->IMR, ExtiLine);
 80011ce:	4905      	ldr	r1, [pc, #20]	; (80011e4 <stm32_exti_enable+0x20>)
 80011d0:	4093      	lsls	r3, r2
 80011d2:	680c      	ldr	r4, [r1, #0]
 80011d4:	4323      	orrs	r3, r4
 80011d6:	600b      	str	r3, [r1, #0]
}
 80011d8:	bc10      	pop	{r4}
	irq_enable(irqnum);
 80011da:	f7ff bd81 	b.w	8000ce0 <arch_irq_enable>
 80011de:	bf00      	nop
 80011e0:	20000094 	.word	0x20000094
 80011e4:	40010400 	.word	0x40010400

080011e8 <stm32_exti_disable>:
	if (line < 32) {
 80011e8:	281f      	cmp	r0, #31
 80011ea:	dc06      	bgt.n	80011fa <stm32_exti_disable+0x12>
		LL_EXTI_DisableIT_0_31(1 << line);
 80011ec:	2201      	movs	r2, #1
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80011ee:	4903      	ldr	r1, [pc, #12]	; (80011fc <stm32_exti_disable+0x14>)
 80011f0:	4082      	lsls	r2, r0
 80011f2:	680b      	ldr	r3, [r1, #0]
 80011f4:	ea23 0302 	bic.w	r3, r3, r2
 80011f8:	600b      	str	r3, [r1, #0]
}
 80011fa:	4770      	bx	lr
 80011fc:	40010400 	.word	0x40010400

08001200 <stm32_exti_trigger>:
	switch (trigger) {
 8001200:	2903      	cmp	r1, #3
 8001202:	d82a      	bhi.n	800125a <stm32_exti_trigger+0x5a>
 8001204:	e8df f001 	tbb	[pc, r1]
 8001208:	1f140e02 	.word	0x1f140e02
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 800120c:	2201      	movs	r2, #1
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <stm32_exti_trigger+0x5c>)
 8001210:	4082      	lsls	r2, r0
 8001212:	6899      	ldr	r1, [r3, #8]
 8001214:	ea21 0102 	bic.w	r1, r1, r2
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001218:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800121a:	68d9      	ldr	r1, [r3, #12]
 800121c:	ea21 0202 	bic.w	r2, r1, r2
 8001220:	60da      	str	r2, [r3, #12]
}
 8001222:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8001224:	2201      	movs	r2, #1
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001226:	4b0d      	ldr	r3, [pc, #52]	; (800125c <stm32_exti_trigger+0x5c>)
 8001228:	4082      	lsls	r2, r0
 800122a:	6899      	ldr	r1, [r3, #8]
 800122c:	4311      	orrs	r1, r2
 800122e:	e7f3      	b.n	8001218 <stm32_exti_trigger+0x18>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8001230:	2201      	movs	r2, #1
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <stm32_exti_trigger+0x5c>)
 8001234:	4082      	lsls	r2, r0
 8001236:	68d9      	ldr	r1, [r3, #12]
 8001238:	4311      	orrs	r1, r2
 800123a:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800123c:	6899      	ldr	r1, [r3, #8]
 800123e:	ea21 0202 	bic.w	r2, r1, r2
 8001242:	609a      	str	r2, [r3, #8]
}
 8001244:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8001246:	2301      	movs	r3, #1
 8001248:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <stm32_exti_trigger+0x5c>)
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	4302      	orrs	r2, r0
 8001252:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	4310      	orrs	r0, r2
 8001258:	60d8      	str	r0, [r3, #12]
}
 800125a:	4770      	bx	lr
 800125c:	40010400 	.word	0x40010400

08001260 <stm32_exti_set_callback>:

/**
 * @brief set & unset for the interrupt callbacks
 */
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
 8001260:	b510      	push	{r4, lr}
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <stm32_exti_set_callback+0x20>)
{
 8001264:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 8001266:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 800126a:	b928      	cbnz	r0, 8001278 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 800126c:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 8001270:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001274:	605a      	str	r2, [r3, #4]

	return 0;
}
 8001276:	bd10      	pop	{r4, pc}
		return -EBUSY;
 8001278:	f06f 000f 	mvn.w	r0, #15
 800127c:	e7fb      	b.n	8001276 <stm32_exti_set_callback+0x16>
 800127e:	bf00      	nop
 8001280:	200001a8 	.word	0x200001a8

08001284 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8001284:	2200      	movs	r2, #0
 8001286:	4b03      	ldr	r3, [pc, #12]	; (8001294 <stm32_exti_unset_callback+0x10>)
 8001288:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 800128c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8001290:	605a      	str	r2, [r3, #4]
}
 8001292:	4770      	bx	lr
 8001294:	200001a8 	.word	0x200001a8

08001298 <z_impl_can_calc_timing>:
	return sp_err_min == UINT16_MAX ? -ENOTSUP : (int)sp_err_min;
}

int z_impl_can_calc_timing(const struct device *dev, struct can_timing *res,
			   uint32_t bitrate, uint16_t sample_pnt)
{
 8001298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800129c:	4689      	mov	r9, r1
 800129e:	4690      	mov	r8, r2
 80012a0:	469a      	mov	sl, r3
 80012a2:	b087      	sub	sp, #28
 */
__syscall const struct can_timing *can_get_timing_min(const struct device *dev);

static inline const struct can_timing *z_impl_can_get_timing_min(const struct device *dev)
{
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
 80012a4:	6883      	ldr	r3, [r0, #8]
 80012a6:	9301      	str	r3, [sp, #4]
	const struct can_timing *min = can_get_timing_min(dev);
	const struct can_timing *max = can_get_timing_max(dev);
	uint32_t core_clock;
	int ret;

	if (bitrate > 1000000) {
 80012a8:	4b53      	ldr	r3, [pc, #332]	; (80013f8 <z_impl_can_calc_timing+0x160>)
 */
__syscall const struct can_timing *can_get_timing_max(const struct device *dev);

static inline const struct can_timing *z_impl_can_get_timing_max(const struct device *dev)
{
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
 80012aa:	6887      	ldr	r7, [r0, #8]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	f200 809f 	bhi.w	80013f0 <z_impl_can_calc_timing+0x158>
	return api->get_core_clock(dev, rate);
 80012b2:	6883      	ldr	r3, [r0, #8]
 80012b4:	a905      	add	r1, sp, #20
 80012b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b8:	4798      	blx	r3
		return -EINVAL;
	}

	ret = can_get_core_clock(dev, &core_clock);
	if (ret != 0) {
 80012ba:	2800      	cmp	r0, #0
 80012bc:	f040 8093 	bne.w	80013e6 <z_impl_can_calc_timing+0x14e>
		return ret;
	}

	return can_calc_timing_int(core_clock, res, min, max, bitrate, sample_pnt);
 80012c0:	9b05      	ldr	r3, [sp, #20]
	uint32_t ts = max->prop_seg + max->phase_seg1 + max->phase_seg2 +
 80012c2:	f8b7 4040 	ldrh.w	r4, [r7, #64]	; 0x40
	return can_calc_timing_int(core_clock, res, min, max, bitrate, sample_pnt);
 80012c6:	9300      	str	r3, [sp, #0]
	uint32_t ts = max->prop_seg + max->phase_seg1 + max->phase_seg2 +
 80012c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80012cc:	441c      	add	r4, r3
 80012ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80012d2:	441c      	add	r4, r3
 80012d4:	3401      	adds	r4, #1
	if (bitrate == 0 || sp >= 1000) {
 80012d6:	f1b8 0f00 	cmp.w	r8, #0
 80012da:	f000 8089 	beq.w	80013f0 <z_impl_can_calc_timing+0x158>
 80012de:	f5ba 7f7a 	cmp.w	sl, #1000	; 0x3e8
 80012e2:	f080 8085 	bcs.w	80013f0 <z_impl_can_calc_timing+0x158>
	for (int prescaler = MAX(core_clock / (ts * bitrate), 1);
 80012e6:	fb04 f408 	mul.w	r4, r4, r8
 80012ea:	9b00      	ldr	r3, [sp, #0]
	uint16_t sp_err_min = UINT16_MAX;
 80012ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
	for (int prescaler = MAX(core_clock / (ts * bitrate), 1);
 80012f0:	fbb3 f4f4 	udiv	r4, r3, r4
 80012f4:	2c01      	cmp	r4, #1
 80012f6:	bf38      	it	cc
 80012f8:	2401      	movcc	r4, #1
 80012fa:	fb04 f108 	mul.w	r1, r4, r8
	     prescaler <= max->prescaler; ++prescaler) {
 80012fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001302:	429c      	cmp	r4, r3
 8001304:	dd06      	ble.n	8001314 <z_impl_can_calc_timing+0x7c>
	return sp_err_min == UINT16_MAX ? -ENOTSUP : (int)sp_err_min;
 8001306:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800130a:	4298      	cmp	r0, r3
 800130c:	d16b      	bne.n	80013e6 <z_impl_can_calc_timing+0x14e>
 800130e:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return can_calc_timing_int(core_clock, res, min, max, bitrate, sample_pnt);
 8001312:	e068      	b.n	80013e6 <z_impl_can_calc_timing+0x14e>
		if (core_clock % (prescaler * bitrate)) {
 8001314:	9b00      	ldr	r3, [sp, #0]
 8001316:	fbb3 fef1 	udiv	lr, r3, r1
 800131a:	fb01 331e 	mls	r3, r1, lr, r3
 800131e:	bb83      	cbnz	r3, 8001382 <z_impl_can_calc_timing+0xea>
	ts2 = ts - (ts * sp) / 1000;
 8001320:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001324:	fb0a fc0e 	mul.w	ip, sl, lr
 8001328:	fbbc fcf6 	udiv	ip, ip, r6
	uint16_t ts1_max = max->phase_seg1 + max->prop_seg;
 800132c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001330:	f8b7 5042 	ldrh.w	r5, [r7, #66]	; 0x42
 8001334:	9302      	str	r3, [sp, #8]
 8001336:	441d      	add	r5, r3
	uint16_t ts1_min = min->phase_seg1 + min->prop_seg;
 8001338:	9b01      	ldr	r3, [sp, #4]
	ts2 = CLAMP(ts2, min->phase_seg2, max->phase_seg2);
 800133a:	9e01      	ldr	r6, [sp, #4]
	uint16_t ts1_min = min->phase_seg1 + min->prop_seg;
 800133c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
	ts2 = CLAMP(ts2, min->phase_seg2, max->phase_seg2);
 800133e:	f8b6 b03a 	ldrh.w	fp, [r6, #58]	; 0x3a
	uint16_t ts1_min = min->phase_seg1 + min->prop_seg;
 8001342:	9303      	str	r3, [sp, #12]
 8001344:	9b01      	ldr	r3, [sp, #4]
	uint16_t ts1_max = max->phase_seg1 + max->prop_seg;
 8001346:	b2ad      	uxth	r5, r5
	uint16_t ts1_min = min->phase_seg1 + min->prop_seg;
 8001348:	8eda      	ldrh	r2, [r3, #54]	; 0x36
	ts2 = ts - (ts * sp) / 1000;
 800134a:	fa1f f38e 	uxth.w	r3, lr
 800134e:	eba3 0c0c 	sub.w	ip, r3, ip
 8001352:	fa1f fc8c 	uxth.w	ip, ip
	ts2 = CLAMP(ts2, min->phase_seg2, max->phase_seg2);
 8001356:	45dc      	cmp	ip, fp
 8001358:	d916      	bls.n	8001388 <z_impl_can_calc_timing+0xf0>
 800135a:	f8b7 6044 	ldrh.w	r6, [r7, #68]	; 0x44
 800135e:	4566      	cmp	r6, ip
 8001360:	bf28      	it	cs
 8001362:	4666      	movcs	r6, ip
	ts1 = ts - CAN_SYNC_SEG - ts2;
 8001364:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 8001368:	ebac 0c06 	sub.w	ip, ip, r6
 800136c:	fa1f fc8c 	uxth.w	ip, ip
	if (ts1 > ts1_max) {
 8001370:	4565      	cmp	r5, ip
 8001372:	d20b      	bcs.n	800138c <z_impl_can_calc_timing+0xf4>
		ts2 = ts - CAN_SYNC_SEG - ts1;
 8001374:	1b5e      	subs	r6, r3, r5
 8001376:	3e01      	subs	r6, #1
		if (ts2 > max->phase_seg2) {
 8001378:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
		ts2 = ts - CAN_SYNC_SEG - ts1;
 800137c:	b2b6      	uxth	r6, r6
		if (ts2 > max->phase_seg2) {
 800137e:	42b3      	cmp	r3, r6
 8001380:	d20d      	bcs.n	800139e <z_impl_can_calc_timing+0x106>
	     prescaler <= max->prescaler; ++prescaler) {
 8001382:	3401      	adds	r4, #1
 8001384:	4441      	add	r1, r8
 8001386:	e7ba      	b.n	80012fe <z_impl_can_calc_timing+0x66>
 8001388:	465e      	mov	r6, fp
 800138a:	e7eb      	b.n	8001364 <z_impl_can_calc_timing+0xcc>
	uint16_t ts1_min = min->phase_seg1 + min->prop_seg;
 800138c:	9d03      	ldr	r5, [sp, #12]
 800138e:	4415      	add	r5, r2
 8001390:	b2ad      	uxth	r5, r5
	} else if (ts1 < ts1_min) {
 8001392:	4565      	cmp	r5, ip
 8001394:	d92a      	bls.n	80013ec <z_impl_can_calc_timing+0x154>
		ts2 = ts - ts1;
 8001396:	1b5b      	subs	r3, r3, r5
 8001398:	b29e      	uxth	r6, r3
		if (ts2 < min->phase_seg2) {
 800139a:	45b3      	cmp	fp, r6
 800139c:	d8f1      	bhi.n	8001382 <z_impl_can_calc_timing+0xea>
	res->prop_seg = CLAMP(ts1 / 2, min->prop_seg, max->prop_seg);
 800139e:	ebb2 0f55 	cmp.w	r2, r5, lsr #1
 80013a2:	ea4f 0355 	mov.w	r3, r5, lsr #1
 80013a6:	d203      	bcs.n	80013b0 <z_impl_can_calc_timing+0x118>
 80013a8:	9a02      	ldr	r2, [sp, #8]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	bf28      	it	cs
 80013ae:	461a      	movcs	r2, r3
	sp_calc = (CAN_SYNC_SEG + ts1) * 1000 / ts;
 80013b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b4:	fb05 3303 	mla	r3, r5, r3, r3
 80013b8:	fbb3 f3fe 	udiv	r3, r3, lr
	return sp_calc > sp ? sp_calc - sp : sp - sp_calc;
 80013bc:	459a      	cmp	sl, r3
 80013be:	bf34      	ite	cc
 80013c0:	eba3 030a 	subcc.w	r3, r3, sl
 80013c4:	ebaa 0303 	subcs.w	r3, sl, r3
		if (sp_err < sp_err_min) {
 80013c8:	4298      	cmp	r0, r3
 80013ca:	d9da      	bls.n	8001382 <z_impl_can_calc_timing+0xea>
	res->phase_seg1 = ts1 - res->prop_seg;
 80013cc:	1aad      	subs	r5, r5, r2
			sp_err_min = sp_err;
 80013ce:	b298      	uxth	r0, r3
			res->prop_seg = tmp_res.prop_seg;
 80013d0:	f8a9 2002 	strh.w	r2, [r9, #2]
			res->phase_seg1 = tmp_res.phase_seg1;
 80013d4:	f8a9 5004 	strh.w	r5, [r9, #4]
			res->phase_seg2 = tmp_res.phase_seg2;
 80013d8:	f8a9 6006 	strh.w	r6, [r9, #6]
			res->prescaler = (uint16_t)prescaler;
 80013dc:	f8a9 4008 	strh.w	r4, [r9, #8]
			if (sp_err == 0) {
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1ce      	bne.n	8001382 <z_impl_can_calc_timing+0xea>
			sp_err_min = sp_err;
 80013e4:	4618      	mov	r0, r3
}
 80013e6:	b007      	add	sp, #28
 80013e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013ec:	4665      	mov	r5, ip
 80013ee:	e7d6      	b.n	800139e <z_impl_can_calc_timing+0x106>
		return -EINVAL;
 80013f0:	f06f 0015 	mvn.w	r0, #21
 80013f4:	e7f7      	b.n	80013e6 <z_impl_can_calc_timing+0x14e>
 80013f6:	bf00      	nop
 80013f8:	000f4240 	.word	0x000f4240

080013fc <can_stm32_enter_init_mode>:
}

#endif

static int can_stm32_enter_init_mode(CAN_TypeDef *can)
{
 80013fc:	b570      	push	{r4, r5, r6, lr}
	uint32_t start_time;

	can->MCR |= CAN_MCR_INRQ;
 80013fe:	6803      	ldr	r3, [r0, #0]
{
 8001400:	4604      	mov	r4, r0
	can->MCR |= CAN_MCR_INRQ;
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6003      	str	r3, [r0, #0]
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 8001408:	f001 fa4e 	bl	80028a8 <sys_clock_cycle_get_32>
 800140c:	4605      	mov	r5, r0
	start_time = k_cycle_get_32();

	while ((can->MSR & CAN_MSR_INAK) == 0U) {
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 800140e:	4e09      	ldr	r6, [pc, #36]	; (8001434 <can_stm32_enter_init_mode+0x38>)
	while ((can->MSR & CAN_MSR_INAK) == 0U) {
 8001410:	6863      	ldr	r3, [r4, #4]
 8001412:	07db      	lsls	r3, r3, #31
 8001414:	d501      	bpl.n	800141a <can_stm32_enter_init_mode+0x1e>
			can->MCR &= ~CAN_MCR_INRQ;
			return -EAGAIN;
		}
	}

	return 0;
 8001416:	2000      	movs	r0, #0
 8001418:	e00a      	b.n	8001430 <can_stm32_enter_init_mode+0x34>
 800141a:	f001 fa45 	bl	80028a8 <sys_clock_cycle_get_32>
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 800141e:	1b40      	subs	r0, r0, r5
 8001420:	42b0      	cmp	r0, r6
 8001422:	d9f5      	bls.n	8001410 <can_stm32_enter_init_mode+0x14>
			return -EAGAIN;
 8001424:	f06f 000a 	mvn.w	r0, #10
			can->MCR &= ~CAN_MCR_INRQ;
 8001428:	6823      	ldr	r3, [r4, #0]
 800142a:	f023 0301 	bic.w	r3, r3, #1
 800142e:	6023      	str	r3, [r4, #0]
}
 8001430:	bd70      	pop	{r4, r5, r6, pc}
 8001432:	bf00      	nop
 8001434:	000afc80 	.word	0x000afc80

08001438 <can_stm32_get_core_clock>:

	return 0;
}

static int can_stm32_get_core_clock(const struct device *dev, uint32_t *rate)
{
 8001438:	b508      	push	{r3, lr}
 800143a:	460a      	mov	r2, r1
	int ret;

	clock = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);

	ret = clock_control_get_rate(clock,
				     (clock_control_subsys_t *) &cfg->pclken,
 800143c:	6841      	ldr	r1, [r0, #4]
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <can_stm32_get_core_clock+0x1c>)
 8001440:	3114      	adds	r1, #20
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 8001442:	6883      	ldr	r3, [r0, #8]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	b10b      	cbz	r3, 800144c <can_stm32_get_core_clock+0x14>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8001448:	4798      	blx	r3
				     rate);
	if (ret != 0) {
 800144a:	b108      	cbz	r0, 8001450 <can_stm32_get_core_clock+0x18>
		LOG_ERR("Failed call clock_control_get_rate: return [%d]", ret);
		return -EIO;
 800144c:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
 8001450:	bd08      	pop	{r3, pc}
 8001452:	bf00      	nop
 8001454:	080049c8 	.word	0x080049c8

08001458 <can_stm32_set_timing>:
{
 8001458:	b570      	push	{r4, r5, r6, lr}
	CAN_TypeDef *can = cfg->can;
 800145a:	6843      	ldr	r3, [r0, #4]
	struct can_stm32_data *data = dev->data;
 800145c:	6905      	ldr	r5, [r0, #16]
	CAN_TypeDef *can = cfg->can;
 800145e:	681c      	ldr	r4, [r3, #0]
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 8001460:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001468:	4628      	mov	r0, r5
{
 800146a:	460e      	mov	r6, r1
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 800146c:	f002 fce1 	bl	8003e32 <k_mutex_lock.constprop.0.isra.0>
	if (data->started) {
 8001470:	f895 30ed 	ldrb.w	r3, [r5, #237]	; 0xed
 8001474:	b12b      	cbz	r3, 8001482 <can_stm32_set_timing+0x2a>
		k_mutex_unlock(&data->inst_mutex);
 8001476:	4628      	mov	r0, r5
 8001478:	f002 fcdd 	bl	8003e36 <k_mutex_unlock.isra.0>
		return -EBUSY;
 800147c:	f06f 000f 	mvn.w	r0, #15
}
 8001480:	bd70      	pop	{r4, r5, r6, pc}
	     (((timing->prescaler  - 1) << CAN_BTR_BRP_Pos) & CAN_BTR_BRP_Msk);
 8001482:	8933      	ldrh	r3, [r6, #8]
	can->BTR = (can->BTR & ~(CAN_BTR_BRP_Msk | CAN_BTR_TS1_Msk | CAN_BTR_TS2_Msk)) |
 8001484:	69e1      	ldr	r1, [r4, #28]
 8001486:	4a11      	ldr	r2, [pc, #68]	; (80014cc <can_stm32_set_timing+0x74>)
	     (((timing->prescaler  - 1) << CAN_BTR_BRP_Pos) & CAN_BTR_BRP_Msk);
 8001488:	3b01      	subs	r3, #1
	can->BTR = (can->BTR & ~(CAN_BTR_BRP_Msk | CAN_BTR_TS1_Msk | CAN_BTR_TS2_Msk)) |
 800148a:	400a      	ands	r2, r1
	     (((timing->prescaler  - 1) << CAN_BTR_BRP_Pos) & CAN_BTR_BRP_Msk);
 800148c:	f3c3 0309 	ubfx	r3, r3, #0, #10
	     (((timing->phase_seg2 - 1) << CAN_BTR_TS2_Pos) & CAN_BTR_TS2_Msk) |
 8001490:	4313      	orrs	r3, r2
	     (((timing->phase_seg1 - 1) << CAN_BTR_TS1_Pos) & CAN_BTR_TS1_Msk) |
 8001492:	88b2      	ldrh	r2, [r6, #4]
 8001494:	3a01      	subs	r2, #1
 8001496:	0412      	lsls	r2, r2, #16
 8001498:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
	     (((timing->phase_seg2 - 1) << CAN_BTR_TS2_Pos) & CAN_BTR_TS2_Msk) |
 800149c:	4313      	orrs	r3, r2
 800149e:	88f2      	ldrh	r2, [r6, #6]
 80014a0:	3a01      	subs	r2, #1
 80014a2:	0512      	lsls	r2, r2, #20
 80014a4:	f402 02e0 	and.w	r2, r2, #7340032	; 0x700000
 80014a8:	4313      	orrs	r3, r2
	can->BTR = (can->BTR & ~(CAN_BTR_BRP_Msk | CAN_BTR_TS1_Msk | CAN_BTR_TS2_Msk)) |
 80014aa:	61e3      	str	r3, [r4, #28]
	if (timing->sjw != CAN_SJW_NO_CHANGE) {
 80014ac:	8833      	ldrh	r3, [r6, #0]
 80014ae:	b143      	cbz	r3, 80014c2 <can_stm32_set_timing+0x6a>
		can->BTR = (can->BTR & ~CAN_BTR_SJW_Msk) |
 80014b0:	69e2      	ldr	r2, [r4, #28]
			   (((timing->sjw - 1) << CAN_BTR_SJW_Pos) & CAN_BTR_SJW_Msk);
 80014b2:	3b01      	subs	r3, #1
 80014b4:	061b      	lsls	r3, r3, #24
 80014b6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
		can->BTR = (can->BTR & ~CAN_BTR_SJW_Msk) |
 80014ba:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014be:	4313      	orrs	r3, r2
 80014c0:	61e3      	str	r3, [r4, #28]
	k_mutex_unlock(&data->inst_mutex);
 80014c2:	4628      	mov	r0, r5
 80014c4:	f002 fcb7 	bl	8003e36 <k_mutex_unlock.isra.0>
	return 0;
 80014c8:	2000      	movs	r0, #0
 80014ca:	e7d9      	b.n	8001480 <can_stm32_set_timing+0x28>
 80014cc:	ff80fc00 	.word	0xff80fc00

080014d0 <can_stm32_add_rx_filter>:
 *
 * Currently, all filter banks are assigned to FIFO 0 and FIFO 1 is not used.
 */
static int can_stm32_add_rx_filter(const struct device *dev, can_rx_callback_t cb,
				   void *cb_arg, const struct can_filter *filter)
{
 80014d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014d4:	461d      	mov	r5, r3
	struct can_stm32_data *data = dev->data;
	int filter_id;

	if ((filter->flags & ~(CAN_FILTER_IDE | CAN_FILTER_DATA | CAN_FILTER_RTR)) != 0) {
 80014d6:	7a1b      	ldrb	r3, [r3, #8]
{
 80014d8:	4604      	mov	r4, r0
	if ((filter->flags & ~(CAN_FILTER_IDE | CAN_FILTER_DATA | CAN_FILTER_RTR)) != 0) {
 80014da:	2b07      	cmp	r3, #7
{
 80014dc:	4688      	mov	r8, r1
 80014de:	4617      	mov	r7, r2
	struct can_stm32_data *data = dev->data;
 80014e0:	6906      	ldr	r6, [r0, #16]
	if ((filter->flags & ~(CAN_FILTER_IDE | CAN_FILTER_DATA | CAN_FILTER_RTR)) != 0) {
 80014e2:	f200 80a1 	bhi.w	8001628 <can_stm32_add_rx_filter+0x158>
		LOG_ERR("unsupported CAN filter flags 0x%02x", filter->flags);
		return -ENOTSUP;
	}

	k_mutex_lock(&filter_mutex, K_FOREVER);
 80014e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ee:	4850      	ldr	r0, [pc, #320]	; (8001630 <can_stm32_add_rx_filter+0x160>)
 80014f0:	f002 fc9f 	bl	8003e32 <k_mutex_lock.constprop.0.isra.0>
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014fc:	4630      	mov	r0, r6
 80014fe:	f002 fc98 	bl	8003e32 <k_mutex_lock.constprop.0.isra.0>
	const struct can_stm32_config *cfg = dev->config;
 8001502:	6861      	ldr	r1, [r4, #4]
	if ((filter->flags & CAN_FILTER_IDE) != 0) {
 8001504:	f895 c008 	ldrb.w	ip, [r5, #8]
	if (cfg->can != cfg->master_can) {
 8001508:	c906      	ldmia	r1, {r1, r2}
		bank_offset = CAN_STM32_NUM_FILTER_BANKS;
 800150a:	428a      	cmp	r2, r1
 800150c:	bf14      	ite	ne
 800150e:	210e      	movne	r1, #14
 8001510:	2100      	moveq	r1, #0
	if ((filter->flags & CAN_FILTER_IDE) != 0) {
 8001512:	f01c 0e01 	ands.w	lr, ip, #1
	struct can_stm32_data *data = dev->data;
 8001516:	6923      	ldr	r3, [r4, #16]
	if ((filter->flags & CAN_FILTER_IDE) != 0) {
 8001518:	d055      	beq.n	80015c6 <can_stm32_add_rx_filter+0xf6>
		for (int i = 0; i < CONFIG_CAN_MAX_EXT_ID_FILTER; i++) {
 800151a:	2400      	movs	r4, #0
 800151c:	3370      	adds	r3, #112	; 0x70
			if (data->rx_cb_ext[i] == NULL) {
 800151e:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8001522:	2800      	cmp	r0, #0
 8001524:	d141      	bne.n	80015aa <can_stm32_add_rx_filter+0xda>
		(1U << CAN_STM32_FIRX_EXT_RTR_POS) : 0U) |
 8001526:	f00c 0302 	and.w	r3, ip, #2
		(CAN_FILTER_DATA | CAN_FILTER_RTR) ? 1U : 0U;
 800152a:	f00c 0c06 	and.w	ip, ip, #6
 800152e:	f1bc 0c06 	subs.w	ip, ip, #6
 8001532:	bf18      	it	ne
 8001534:	f04f 0c01 	movne.w	ip, #1
	return  (filter->id << CAN_STM32_FIRX_EXT_EXT_ID_POS) |
 8001538:	6828      	ldr	r0, [r5, #0]
				bank_num = bank_offset + i;
 800153a:	4421      	add	r1, r4
	return  (filter->id << CAN_STM32_FIRX_EXT_EXT_ID_POS) |
 800153c:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
	return  (filter->mask << CAN_STM32_FIRX_EXT_EXT_ID_POS) |
 8001540:	6868      	ldr	r0, [r5, #4]
		(1U << CAN_STM32_FIRX_EXT_RTR_POS) : 0U) |
 8001542:	f043 0304 	orr.w	r3, r3, #4
	return  (filter->mask << CAN_STM32_FIRX_EXT_EXT_ID_POS) |
 8001546:	00c0      	lsls	r0, r0, #3
 8001548:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
		(rtr_mask << CAN_STM32_FIRX_EXT_RTR_POS) |
 800154c:	f040 0004 	orr.w	r0, r0, #4
		can->FMR |= CAN_FMR_FINIT;
 8001550:	f8d2 c200 	ldr.w	ip, [r2, #512]	; 0x200
 8001554:	f04c 0c01 	orr.w	ip, ip, #1
 8001558:	f8c2 c200 	str.w	ip, [r2, #512]	; 0x200
		can_stm32_set_filter_bank(filter_id, &can->sFilterRegister[bank_num],
 800155c:	f895 c008 	ldrb.w	ip, [r5, #8]
	if (ide) {
 8001560:	f01c 0f01 	tst.w	ip, #1
 8001564:	d053      	beq.n	800160e <can_stm32_add_rx_filter+0x13e>
		filter_reg->FR1 = id;
 8001566:	eb02 0cc1 	add.w	ip, r2, r1, lsl #3
 800156a:	f8cc 3240 	str.w	r3, [ip, #576]	; 0x240
		filter_reg->FR2 = mask;
 800156e:	f8cc 0244 	str.w	r0, [ip, #580]	; 0x244
		can->FA1R |= 1U << bank_num;
 8001572:	2301      	movs	r3, #1
 8001574:	f8d2 021c 	ldr.w	r0, [r2, #540]	; 0x21c
 8001578:	408b      	lsls	r3, r1
 800157a:	4303      	orrs	r3, r0
 800157c:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
		can->FMR &= ~(CAN_FMR_FINIT);
 8001580:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8001584:	f023 0301 	bic.w	r3, r3, #1
 8001588:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	filter_id = can_stm32_set_filter(dev, filter);
	if (filter_id >= 0) {
		if ((filter->flags & CAN_FILTER_IDE) != 0) {
 800158c:	7a2b      	ldrb	r3, [r5, #8]
 800158e:	f013 0f01 	tst.w	r3, #1
 8001592:	ea4f 0384 	mov.w	r3, r4, lsl #2
 8001596:	4433      	add	r3, r6
			data->rx_cb_ext[filter_id] = cb;
 8001598:	bf19      	ittee	ne
 800159a:	f8c3 8074 	strne.w	r8, [r3, #116]	; 0x74
			data->cb_arg_ext[filter_id] = cb_arg;
 800159e:	f8c3 70c8 	strne.w	r7, [r3, #200]	; 0xc8
		} else {
			data->rx_cb_std[filter_id - CONFIG_CAN_MAX_EXT_ID_FILTER] = cb;
 80015a2:	f8c3 8020 	streq.w	r8, [r3, #32]
			data->cb_arg_std[filter_id - CONFIG_CAN_MAX_EXT_ID_FILTER] = cb_arg;
 80015a6:	675f      	streq	r7, [r3, #116]	; 0x74
 80015a8:	e004      	b.n	80015b4 <can_stm32_add_rx_filter+0xe4>
		for (int i = 0; i < CONFIG_CAN_MAX_EXT_ID_FILTER; i++) {
 80015aa:	3401      	adds	r4, #1
 80015ac:	2c07      	cmp	r4, #7
 80015ae:	d1b6      	bne.n	800151e <can_stm32_add_rx_filter+0x4e>
 80015b0:	f06f 041b 	mvn.w	r4, #27
		}
	}

	k_mutex_unlock(&data->inst_mutex);
 80015b4:	4630      	mov	r0, r6
 80015b6:	f002 fc3e 	bl	8003e36 <k_mutex_unlock.isra.0>
	k_mutex_unlock(&filter_mutex);
 80015ba:	481d      	ldr	r0, [pc, #116]	; (8001630 <can_stm32_add_rx_filter+0x160>)
 80015bc:	f002 fc3b 	bl	8003e36 <k_mutex_unlock.isra.0>

	return filter_id;
}
 80015c0:	4620      	mov	r0, r4
 80015c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015c6:	3338      	adds	r3, #56	; 0x38
			if (data->rx_cb_std[i] == NULL) {
 80015c8:	f853 0f04 	ldr.w	r0, [r3, #4]!
 80015cc:	b9c8      	cbnz	r0, 8001602 <can_stm32_add_rx_filter+0x132>
		(((filter->flags & CAN_FILTER_RTR) != 0) ? (1U << CAN_STM32_FIRX_STD_RTR_POS) : 0U);
 80015ce:	ea4f 03cc 	mov.w	r3, ip, lsl #3
		(CAN_FILTER_DATA | CAN_FILTER_RTR) ? 1U : 0U;
 80015d2:	f00c 0c06 	and.w	ip, ip, #6
 80015d6:	f1bc 0c06 	subs.w	ip, ip, #6
 80015da:	bf18      	it	ne
 80015dc:	f04f 0c01 	movne.w	ip, #1
	return  (filter->id  << CAN_STM32_FIRX_STD_ID_POS) |
 80015e0:	6828      	ldr	r0, [r5, #0]
		(((filter->flags & CAN_FILTER_RTR) != 0) ? (1U << CAN_STM32_FIRX_STD_RTR_POS) : 0U);
 80015e2:	f003 0310 	and.w	r3, r3, #16
	return  (filter->id  << CAN_STM32_FIRX_STD_ID_POS) |
 80015e6:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	return  (filter->mask << CAN_STM32_FIRX_STD_ID_POS) |
 80015ea:	6868      	ldr	r0, [r5, #4]
				bank_num = bank_offset + CONFIG_CAN_MAX_EXT_ID_FILTER + i / 2;
 80015ec:	3107      	adds	r1, #7
	return  (filter->mask << CAN_STM32_FIRX_STD_ID_POS) |
 80015ee:	0140      	lsls	r0, r0, #5
 80015f0:	ea40 100c 	orr.w	r0, r0, ip, lsl #4
		(rtr_mask << CAN_STM32_FIRX_STD_RTR_POS) |
 80015f4:	f040 0008 	orr.w	r0, r0, #8
				filter_id = CONFIG_CAN_MAX_EXT_ID_FILTER + i;
 80015f8:	f10e 0407 	add.w	r4, lr, #7
				bank_num = bank_offset + CONFIG_CAN_MAX_EXT_ID_FILTER + i / 2;
 80015fc:	eb01 016e 	add.w	r1, r1, lr, asr #1
	if (filter_id != -ENOSPC) {
 8001600:	e7a6      	b.n	8001550 <can_stm32_add_rx_filter+0x80>
		for (int i = 0; i < CONFIG_CAN_MAX_STD_ID_FILTER; i++) {
 8001602:	f10e 0e01 	add.w	lr, lr, #1
 8001606:	f1be 0f0e 	cmp.w	lr, #14
 800160a:	d1dd      	bne.n	80015c8 <can_stm32_add_rx_filter+0xf8>
 800160c:	e7d0      	b.n	80015b0 <can_stm32_add_rx_filter+0xe0>
			filter_reg->FR1 = id | (mask << 16);
 800160e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
		if ((filter_id - CONFIG_CAN_MAX_EXT_ID_FILTER) % 2 == 0) {
 8001612:	f014 0f01 	tst.w	r4, #1
 8001616:	f101 0048 	add.w	r0, r1, #72	; 0x48
			filter_reg->FR2 = id | (mask << 16);
 800161a:	bf0a      	itet	eq
 800161c:	eb02 00c0 	addeq.w	r0, r2, r0, lsl #3
			filter_reg->FR1 = id | (mask << 16);
 8001620:	f842 3030 	strne.w	r3, [r2, r0, lsl #3]
			filter_reg->FR2 = id | (mask << 16);
 8001624:	6043      	streq	r3, [r0, #4]
 8001626:	e7a4      	b.n	8001572 <can_stm32_add_rx_filter+0xa2>
		return -ENOTSUP;
 8001628:	f06f 0485 	mvn.w	r4, #133	; 0x85
 800162c:	e7c8      	b.n	80015c0 <can_stm32_add_rx_filter+0xf0>
 800162e:	bf00      	nop
 8001630:	20000318 	.word	0x20000318

08001634 <can_stm32_init>:
{
 8001634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct can_stm32_config *cfg = dev->config;
 8001638:	6845      	ldr	r5, [r0, #4]
{
 800163a:	4607      	mov	r7, r0
	struct can_stm32_data *data = dev->data;
 800163c:	f8d0 8010 	ldr.w	r8, [r0, #16]
	CAN_TypeDef *can = cfg->can;
 8001640:	682e      	ldr	r6, [r5, #0]
{
 8001642:	b085      	sub	sp, #20
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_init(mutex);
 8001644:	4854      	ldr	r0, [pc, #336]	; (8001798 <can_stm32_init+0x164>)
 8001646:	f003 f884 	bl	8004752 <z_impl_k_mutex_init>
 800164a:	4640      	mov	r0, r8
 800164c:	f003 f881 	bl	8004752 <z_impl_k_mutex_init>
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
 8001650:	2201      	movs	r2, #1
 8001652:	2100      	movs	r1, #0
 8001654:	f108 0014 	add.w	r0, r8, #20
 8001658:	f003 f882 	bl	8004760 <z_impl_k_sem_init>
	if (cfg->phy != NULL) {
 800165c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800165e:	b950      	cbnz	r0, 8001676 <can_stm32_init+0x42>
 8001660:	4c4e      	ldr	r4, [pc, #312]	; (800179c <can_stm32_init+0x168>)
 8001662:	4620      	mov	r0, r4
 8001664:	f003 f82b 	bl	80046be <z_device_is_ready>
	if (!device_is_ready(clock)) {
 8001668:	b950      	cbnz	r0, 8001680 <can_stm32_init+0x4c>
			return -ENODEV;
 800166a:	f06f 0412 	mvn.w	r4, #18
}
 800166e:	4620      	mov	r0, r4
 8001670:	b005      	add	sp, #20
 8001672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001676:	f003 f822 	bl	80046be <z_device_is_ready>
		if (!device_is_ready(cfg->phy)) {
 800167a:	2800      	cmp	r0, #0
 800167c:	d1f0      	bne.n	8001660 <can_stm32_init+0x2c>
 800167e:	e7f4      	b.n	800166a <can_stm32_init+0x36>
	return api->on(dev, sys);
 8001680:	68a3      	ldr	r3, [r4, #8]
 8001682:	4620      	mov	r0, r4
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f105 0114 	add.w	r1, r5, #20
 800168a:	4798      	blx	r3
	if (ret != 0) {
 800168c:	4681      	mov	r9, r0
 800168e:	b110      	cbz	r0, 8001696 <can_stm32_init+0x62>
		return -EIO;
 8001690:	f06f 0404 	mvn.w	r4, #4
 8001694:	e7eb      	b.n	800166e <can_stm32_init+0x3a>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 8001696:	4601      	mov	r1, r0
 8001698:	aa01      	add	r2, sp, #4
 800169a:	6a28      	ldr	r0, [r5, #32]
 800169c:	f002 fe66 	bl	800436c <pinctrl_lookup_state>
	if (ret < 0) {
 80016a0:	1e04      	subs	r4, r0, #0
 80016a2:	dbe4      	blt.n	800166e <can_stm32_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 80016a4:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 80016a6:	464a      	mov	r2, r9
 80016a8:	7919      	ldrb	r1, [r3, #4]
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	f000 fa94 	bl	8001bd8 <pinctrl_configure_pins>
	if (ret < 0) {
 80016b0:	1e04      	subs	r4, r0, #0
 80016b2:	dbdc      	blt.n	800166e <can_stm32_init+0x3a>
	can->MCR &= ~CAN_MCR_SLEEP;
 80016b4:	6833      	ldr	r3, [r6, #0]
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 80016b6:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80017a0 <can_stm32_init+0x16c>
	can->MCR &= ~CAN_MCR_SLEEP;
 80016ba:	f023 0302 	bic.w	r3, r3, #2
 80016be:	6033      	str	r3, [r6, #0]
 80016c0:	f001 f8f2 	bl	80028a8 <sys_clock_cycle_get_32>
 80016c4:	4604      	mov	r4, r0
	while ((can->MSR & CAN_MSR_SLAK) != 0) {
 80016c6:	6873      	ldr	r3, [r6, #4]
 80016c8:	079b      	lsls	r3, r3, #30
 80016ca:	d44f      	bmi.n	800176c <can_stm32_init+0x138>
	ret = can_stm32_enter_init_mode(can);
 80016cc:	4630      	mov	r0, r6
 80016ce:	f7ff fe95 	bl	80013fc <can_stm32_enter_init_mode>
	if (ret) {
 80016d2:	4604      	mov	r4, r0
 80016d4:	2800      	cmp	r0, #0
 80016d6:	d1ca      	bne.n	800166e <can_stm32_init+0x3a>
	bank_offset = (cfg->can == cfg->master_can) ? 0 : CAN_STM32_NUM_FILTER_BANKS;
 80016d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80016dc:	429a      	cmp	r2, r3
 80016de:	bf18      	it	ne
 80016e0:	240e      	movne	r4, #14
	cfg->master_can->FMR |= CAN_FMR_FINIT;
 80016e2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80016e6:	f042 0201 	orr.w	r2, r2, #1
 80016ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	cfg->master_can->FS1R |= ((1U << CONFIG_CAN_MAX_EXT_ID_FILTER) - 1) << bank_offset;
 80016ee:	237f      	movs	r3, #127	; 0x7f
 80016f0:	686a      	ldr	r2, [r5, #4]
 80016f2:	40a3      	lsls	r3, r4
 80016f4:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 80016f8:	430b      	orrs	r3, r1
 80016fa:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
	cfg->master_can->FMR &= ~CAN_FMR_FINIT;
 80016fe:	686a      	ldr	r2, [r5, #4]
 8001700:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8001704:	f023 0301 	bic.w	r3, r3, #1
 8001708:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	can->MCR &= ~CAN_MCR_TTCM & ~CAN_MCR_ABOM & ~CAN_MCR_AWUM &
 800170c:	6833      	ldr	r3, [r6, #0]
 800170e:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8001712:	6033      	str	r3, [r6, #0]
	can->MCR |= CAN_MCR_ABOM;
 8001714:	6833      	ldr	r3, [r6, #0]
 8001716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800171a:	6033      	str	r3, [r6, #0]
	timing.sjw = cfg->sjw;
 800171c:	7bab      	ldrb	r3, [r5, #14]
 800171e:	f8ad 3004 	strh.w	r3, [sp, #4]
	if (cfg->sample_point && USE_SP_ALGO) {
 8001722:	89ab      	ldrh	r3, [r5, #12]
 8001724:	b353      	cbz	r3, 800177c <can_stm32_init+0x148>
		ret = can_calc_timing(dev, &timing, cfg->bus_speed,
 8001726:	68aa      	ldr	r2, [r5, #8]
		union { uintptr_t x; uint16_t val; } parm3 = { .val = sample_pnt };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_CAN_CALC_TIMING);
	}
#endif
	compiler_barrier();
	return z_impl_can_calc_timing(dev, res, bitrate, sample_pnt);
 8001728:	4638      	mov	r0, r7
 800172a:	a901      	add	r1, sp, #4
 800172c:	f7ff fdb4 	bl	8001298 <z_impl_can_calc_timing>
		if (ret == -EINVAL) {
 8001730:	3016      	adds	r0, #22
 8001732:	d0ad      	beq.n	8001690 <can_stm32_init+0x5c>
	ret = can_stm32_set_timing(dev, &timing);
 8001734:	4638      	mov	r0, r7
 8001736:	a901      	add	r1, sp, #4
 8001738:	f7ff fe8e 	bl	8001458 <can_stm32_set_timing>
	if (ret) {
 800173c:	4604      	mov	r4, r0
 800173e:	2800      	cmp	r0, #0
 8001740:	d195      	bne.n	800166e <can_stm32_init+0x3a>
	ret = can_stm32_set_mode(dev, CAN_MODE_NORMAL);
 8001742:	4601      	mov	r1, r0
 8001744:	4638      	mov	r0, r7
 8001746:	f002 fc57 	bl	8003ff8 <can_stm32_set_mode>
	if (ret) {
 800174a:	4604      	mov	r4, r0
 800174c:	2800      	cmp	r0, #0
 800174e:	d18e      	bne.n	800166e <can_stm32_init+0x3a>
	(void)can_stm32_get_state(dev, &data->state, NULL);
 8001750:	4602      	mov	r2, r0
 8001752:	f108 01ec 	add.w	r1, r8, #236	; 0xec
 8001756:	4638      	mov	r0, r7
 8001758:	f002 f9fd 	bl	8003b56 <can_stm32_get_state>
	cfg->config_irq(can);
 800175c:	69eb      	ldr	r3, [r5, #28]
 800175e:	4630      	mov	r0, r6
 8001760:	4798      	blx	r3
	can->IER |= CAN_IER_TMEIE;
 8001762:	6973      	ldr	r3, [r6, #20]
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6173      	str	r3, [r6, #20]
	return 0;
 800176a:	e780      	b.n	800166e <can_stm32_init+0x3a>
 800176c:	f001 f89c 	bl	80028a8 <sys_clock_cycle_get_32>
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 8001770:	1b00      	subs	r0, r0, r4
 8001772:	4548      	cmp	r0, r9
 8001774:	d9a7      	bls.n	80016c6 <can_stm32_init+0x92>
			return -EAGAIN;
 8001776:	f06f 040a 	mvn.w	r4, #10
 800177a:	e778      	b.n	800166e <can_stm32_init+0x3a>
		timing.prop_seg = 0;
 800177c:	f8ad 3006 	strh.w	r3, [sp, #6]
		timing.phase_seg1 = cfg->prop_ts1;
 8001780:	7beb      	ldrb	r3, [r5, #15]
		ret = can_calc_prescaler(dev, &timing, cfg->bus_speed);
 8001782:	4638      	mov	r0, r7
		timing.phase_seg1 = cfg->prop_ts1;
 8001784:	f8ad 3008 	strh.w	r3, [sp, #8]
		timing.phase_seg2 = cfg->ts2;
 8001788:	7c2b      	ldrb	r3, [r5, #16]
		ret = can_calc_prescaler(dev, &timing, cfg->bus_speed);
 800178a:	a901      	add	r1, sp, #4
		timing.phase_seg2 = cfg->ts2;
 800178c:	f8ad 300a 	strh.w	r3, [sp, #10]
		ret = can_calc_prescaler(dev, &timing, cfg->bus_speed);
 8001790:	68aa      	ldr	r2, [r5, #8]
 8001792:	f002 f9b6 	bl	8003b02 <can_calc_prescaler>
		if (ret) {
 8001796:	e7cd      	b.n	8001734 <can_stm32_init+0x100>
 8001798:	20000318 	.word	0x20000318
 800179c:	080049c8 	.word	0x080049c8
 80017a0:	000afc80 	.word	0x000afc80

080017a4 <can_stm32_remove_rx_filter>:

static void can_stm32_remove_rx_filter(const struct device *dev, int filter_id)
{
 80017a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017a6:	460e      	mov	r6, r1
	const struct can_stm32_config *cfg = dev->config;
 80017a8:	6847      	ldr	r7, [r0, #4]
	struct can_stm32_data *data = dev->data;
 80017aa:	6905      	ldr	r5, [r0, #16]
	int bank_num;
	bool bank_unused;

	__ASSERT_NO_MSG(filter_id >= 0 && filter_id < CAN_STM32_MAX_FILTER_ID);

	k_mutex_lock(&filter_mutex, K_FOREVER);
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017b4:	483b      	ldr	r0, [pc, #236]	; (80018a4 <can_stm32_remove_rx_filter+0x100>)
	CAN_TypeDef *can = cfg->master_can;
 80017b6:	687c      	ldr	r4, [r7, #4]
	k_mutex_lock(&filter_mutex, K_FOREVER);
 80017b8:	f002 fb3b 	bl	8003e32 <k_mutex_lock.constprop.0.isra.0>
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017c4:	4628      	mov	r0, r5
 80017c6:	f002 fb34 	bl	8003e32 <k_mutex_lock.constprop.0.isra.0>

	if (cfg->can != cfg->master_can) {
 80017ca:	e9d7 3200 	ldrd	r3, r2, [r7]
	int bank_offset = 0;
 80017ce:	4293      	cmp	r3, r2
 80017d0:	bf14      	ite	ne
 80017d2:	230e      	movne	r3, #14
 80017d4:	2300      	moveq	r3, #0
		bank_offset = CAN_STM32_NUM_FILTER_BANKS;
	}

	if (filter_id < CONFIG_CAN_MAX_EXT_ID_FILTER) {
 80017d6:	2e06      	cmp	r6, #6
 80017d8:	ea4f 0286 	mov.w	r2, r6, lsl #2
 80017dc:	dc1d      	bgt.n	800181a <can_stm32_remove_rx_filter+0x76>
		ide = true;
		bank_num = bank_offset + filter_id;

		data->rx_cb_ext[filter_id] = NULL;
 80017de:	2100      	movs	r1, #0
 80017e0:	442a      	add	r2, r5
 80017e2:	6751      	str	r1, [r2, #116]	; 0x74
		data->cb_arg_ext[filter_id] = NULL;
 80017e4:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8
		}
	}

	LOG_DBG("Removing filter_id %d, ide %d", filter_id, ide);

	can->FMR |= CAN_FMR_FINIT;
 80017e8:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
		bank_num = bank_offset + filter_id;
 80017ec:	4433      	add	r3, r6
	can->FMR |= CAN_FMR_FINIT;
 80017ee:	f042 0201 	orr.w	r2, r2, #1
 80017f2:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
		filter_reg->FR1 = id;
 80017f6:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 80017fa:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
		filter_reg->FR2 = mask;
 80017fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001802:	f8c2 1244 	str.w	r1, [r2, #580]	; 0x244

	can_stm32_set_filter_bank(filter_id, &can->sFilterRegister[bank_num],
				  ide, 0, 0xFFFFFFFF);

	if (bank_unused) {
		can->FA1R &= ~(1U << bank_num);
 8001806:	2101      	movs	r1, #1
 8001808:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 800180c:	fa01 f303 	lsl.w	r3, r1, r3
 8001810:	ea22 0303 	bic.w	r3, r2, r3
 8001814:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
		LOG_DBG("Filter bank %d is unused -> deactivate", bank_num);
 8001818:	e01c      	b.n	8001854 <can_stm32_remove_rx_filter+0xb0>
		data->rx_cb_std[filter_index] = NULL;
 800181a:	2100      	movs	r1, #0
		int filter_index = filter_id - CONFIG_CAN_MAX_EXT_ID_FILTER;
 800181c:	3e07      	subs	r6, #7
		bank_num = bank_offset + CONFIG_CAN_MAX_EXT_ID_FILTER +
 800181e:	3307      	adds	r3, #7
 8001820:	442a      	add	r2, r5
 8001822:	eb03 0366 	add.w	r3, r3, r6, asr #1
		if (filter_index % 2 == 1) {
 8001826:	f016 0f01 	tst.w	r6, #1
		data->rx_cb_std[filter_index] = NULL;
 800182a:	6211      	str	r1, [r2, #32]
		data->cb_arg_std[filter_index] = NULL;
 800182c:	6751      	str	r1, [r2, #116]	; 0x74
		if (filter_index % 2 == 1) {
 800182e:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001832:	d01d      	beq.n	8001870 <can_stm32_remove_rx_filter+0xcc>
			bank_unused = data->rx_cb_std[filter_index - 1] == NULL;
 8001834:	69d2      	ldr	r2, [r2, #28]
	can->FMR |= CAN_FMR_FINIT;
 8001836:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
			bank_unused = data->rx_cb_std[filter_index - 1] == NULL;
 800183a:	fab2 f282 	clz	r2, r2
	can->FMR |= CAN_FMR_FINIT;
 800183e:	f040 0001 	orr.w	r0, r0, #1
 8001842:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
			filter_reg->FR2 = id | (mask << 16);
 8001846:	4818      	ldr	r0, [pc, #96]	; (80018a8 <can_stm32_remove_rx_filter+0x104>)
 8001848:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
			bank_unused = data->rx_cb_std[filter_index - 1] == NULL;
 800184c:	0952      	lsrs	r2, r2, #5
			filter_reg->FR2 = id | (mask << 16);
 800184e:	6048      	str	r0, [r1, #4]
	if (bank_unused) {
 8001850:	2a00      	cmp	r2, #0
 8001852:	d1d8      	bne.n	8001806 <can_stm32_remove_rx_filter+0x62>
	}

	can->FMR &= ~(CAN_FMR_FINIT);
 8001854:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200

	k_mutex_unlock(&data->inst_mutex);
 8001858:	4628      	mov	r0, r5
	can->FMR &= ~(CAN_FMR_FINIT);
 800185a:	f023 0301 	bic.w	r3, r3, #1
 800185e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
	k_mutex_unlock(&data->inst_mutex);
 8001862:	f002 fae8 	bl	8003e36 <k_mutex_unlock.isra.0>
	k_mutex_unlock(&filter_mutex);
}
 8001866:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&filter_mutex);
 800186a:	480e      	ldr	r0, [pc, #56]	; (80018a4 <can_stm32_remove_rx_filter+0x100>)
 800186c:	f002 bae3 	b.w	8003e36 <k_mutex_unlock.isra.0>
		} else if (filter_index + 1 < CONFIG_CAN_MAX_STD_ID_FILTER) {
 8001870:	2e0c      	cmp	r6, #12
 8001872:	dc0d      	bgt.n	8001890 <can_stm32_remove_rx_filter+0xec>
			bank_unused = data->rx_cb_std[filter_index + 1] == NULL;
 8001874:	6a52      	ldr	r2, [r2, #36]	; 0x24
	can->FMR |= CAN_FMR_FINIT;
 8001876:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
			bank_unused = data->rx_cb_std[filter_index + 1] == NULL;
 800187a:	fab2 f282 	clz	r2, r2
	can->FMR |= CAN_FMR_FINIT;
 800187e:	f040 0001 	orr.w	r0, r0, #1
 8001882:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
			filter_reg->FR1 = id | (mask << 16);
 8001886:	4808      	ldr	r0, [pc, #32]	; (80018a8 <can_stm32_remove_rx_filter+0x104>)
			bank_unused = data->rx_cb_std[filter_index + 1] == NULL;
 8001888:	0952      	lsrs	r2, r2, #5
			filter_reg->FR1 = id | (mask << 16);
 800188a:	f844 0031 	str.w	r0, [r4, r1, lsl #3]
 800188e:	e7df      	b.n	8001850 <can_stm32_remove_rx_filter+0xac>
	can->FMR |= CAN_FMR_FINIT;
 8001890:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 8001894:	f042 0201 	orr.w	r2, r2, #1
 8001898:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
			filter_reg->FR1 = id | (mask << 16);
 800189c:	4a02      	ldr	r2, [pc, #8]	; (80018a8 <can_stm32_remove_rx_filter+0x104>)
 800189e:	f844 2031 	str.w	r2, [r4, r1, lsl #3]
	if (bank_unused) {
 80018a2:	e7b0      	b.n	8001806 <can_stm32_remove_rx_filter+0x62>
 80018a4:	20000318 	.word	0x20000318
 80018a8:	ffff0000 	.word	0xffff0000

080018ac <can_stm32_start>:
{
 80018ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct can_stm32_data *data = dev->data;
 80018b0:	6905      	ldr	r5, [r0, #16]
	const struct can_stm32_config *cfg = dev->config;
 80018b2:	6846      	ldr	r6, [r0, #4]
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018bc:	4628      	mov	r0, r5
	CAN_TypeDef *can = cfg->can;
 80018be:	6837      	ldr	r7, [r6, #0]
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 80018c0:	f002 fab7 	bl	8003e32 <k_mutex_lock.constprop.0.isra.0>
	if (data->started) {
 80018c4:	f895 30ed 	ldrb.w	r3, [r5, #237]	; 0xed
 80018c8:	bb63      	cbnz	r3, 8001924 <can_stm32_start+0x78>
	if (cfg->phy != NULL) {
 80018ca:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80018cc:	b980      	cbnz	r0, 80018f0 <can_stm32_start+0x44>
	can->MCR &= ~CAN_MCR_INRQ;
 80018ce:	683b      	ldr	r3, [r7, #0]
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 80018d0:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800192c <can_stm32_start+0x80>
	can->MCR &= ~CAN_MCR_INRQ;
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	f000 ffe5 	bl	80028a8 <sys_clock_cycle_get_32>
 80018de:	4680      	mov	r8, r0
	while ((can->MSR & CAN_MSR_INAK) != 0U) {
 80018e0:	687c      	ldr	r4, [r7, #4]
 80018e2:	f014 0401 	ands.w	r4, r4, #1
 80018e6:	d10f      	bne.n	8001908 <can_stm32_start+0x5c>
	data->started = true;
 80018e8:	2301      	movs	r3, #1
 80018ea:	f885 30ed 	strb.w	r3, [r5, #237]	; 0xed
 80018ee:	e005      	b.n	80018fc <can_stm32_start+0x50>
static inline int can_transceiver_enable(const struct device *dev)
{
	const struct can_transceiver_driver_api *api =
		(const struct can_transceiver_driver_api *)dev->api;

	return api->enable(dev);
 80018f0:	6883      	ldr	r3, [r0, #8]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4798      	blx	r3
		if (ret != 0) {
 80018f6:	4604      	mov	r4, r0
 80018f8:	2800      	cmp	r0, #0
 80018fa:	d0e8      	beq.n	80018ce <can_stm32_start+0x22>
	k_mutex_unlock(&data->inst_mutex);
 80018fc:	4628      	mov	r0, r5
 80018fe:	f002 fa9a 	bl	8003e36 <k_mutex_unlock.isra.0>
}
 8001902:	4620      	mov	r0, r4
 8001904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001908:	f000 ffce 	bl	80028a8 <sys_clock_cycle_get_32>
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 800190c:	eba0 0008 	sub.w	r0, r0, r8
 8001910:	4548      	cmp	r0, r9
 8001912:	d9e5      	bls.n	80018e0 <can_stm32_start+0x34>
		if (cfg->phy != NULL) {
 8001914:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8001916:	b110      	cbz	r0, 800191e <can_stm32_start+0x72>
static inline int can_transceiver_disable(const struct device *dev)
{
	const struct can_transceiver_driver_api *api =
		(const struct can_transceiver_driver_api *)dev->api;

	return api->disable(dev);
 8001918:	6883      	ldr	r3, [r0, #8]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	4798      	blx	r3
		ret = -EIO;
 800191e:	f06f 0404 	mvn.w	r4, #4
 8001922:	e7eb      	b.n	80018fc <can_stm32_start+0x50>
		ret = -EALREADY;
 8001924:	f06f 0477 	mvn.w	r4, #119	; 0x77
 8001928:	e7e8      	b.n	80018fc <can_stm32_start+0x50>
 800192a:	bf00      	nop
 800192c:	000afc80 	.word	0x000afc80

08001930 <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 8001930:	4b0e      	ldr	r3, [pc, #56]	; (800196c <stm32_clock_control_get_subsys_rate+0x3c>)
 8001932:	6818      	ldr	r0, [r3, #0]
	}
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8001934:	680b      	ldr	r3, [r1, #0]
 8001936:	2b05      	cmp	r3, #5
 8001938:	d80b      	bhi.n	8001952 <stm32_clock_control_get_subsys_rate+0x22>
 800193a:	b183      	cbz	r3, 800195e <stm32_clock_control_get_subsys_rate+0x2e>
 800193c:	3b02      	subs	r3, #2
 800193e:	2b03      	cmp	r3, #3
 8001940:	d803      	bhi.n	800194a <stm32_clock_control_get_subsys_rate+0x1a>
 8001942:	e8df f003 	tbb	[pc, r3]
 8001946:	0211      	.short	0x0211
 8001948:	0302      	.short	0x0302
 800194a:	2000      	movs	r0, #0
		*rate = get_msi_frequency();
		break;
#endif
#if defined(STM32_SRC_HSE)
	case STM32_SRC_HSE:
		*rate = STM32_HSE_FREQ;
 800194c:	6010      	str	r0, [r2, #0]
#endif /* STM32_HSI48_ENABLED */
	default:
		return -ENOTSUP;
	}

	return 0;
 800194e:	2000      	movs	r0, #0
 8001950:	4770      	bx	lr
	switch (pclken->bus) {
 8001952:	2b18      	cmp	r3, #24
 8001954:	d0fa      	beq.n	800194c <stm32_clock_control_get_subsys_rate+0x1c>
 8001956:	2b1c      	cmp	r3, #28
 8001958:	d004      	beq.n	8001964 <stm32_clock_control_get_subsys_rate+0x34>
 800195a:	2b14      	cmp	r3, #20
 800195c:	d0f6      	beq.n	800194c <stm32_clock_control_get_subsys_rate+0x1c>
 800195e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8001962:	4770      	bx	lr
	return clock / prescaler;
 8001964:	0840      	lsrs	r0, r0, #1
		break;
 8001966:	e7f1      	b.n	800194c <stm32_clock_control_get_subsys_rate+0x1c>
		break;
 8001968:	4801      	ldr	r0, [pc, #4]	; (8001970 <stm32_clock_control_get_subsys_rate+0x40>)
 800196a:	e7ef      	b.n	800194c <stm32_clock_control_get_subsys_rate+0x1c>
 800196c:	20000088 	.word	0x20000088
 8001970:	007a1200 	.word	0x007a1200

08001974 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8001974:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(dev);

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8001976:	f002 fbb3 	bl	80040e0 <config_enable_default_clocks>

#if defined(FLASH_ACR_LATENCY)
	uint32_t old_flash_freq;
	uint32_t new_flash_freq;

	old_flash_freq = RCC_CALC_FLASH_FREQ(HAL_RCC_GetSysClockFreq(),
 800197a:	f000 ffab 	bl	80028d4 <HAL_RCC_GetSysClockFreq>
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800197e:	4c32      	ldr	r4, [pc, #200]	; (8001a48 <stm32_clock_control_init+0xd4>)
 8001980:	4a32      	ldr	r2, [pc, #200]	; (8001a4c <stm32_clock_control_init+0xd8>)
 8001982:	6863      	ldr	r3, [r4, #4]

	new_flash_freq = RCC_CALC_FLASH_FREQ(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC,
				      STM32_FLASH_PRESCALER);

	/* If freq increases, set flash latency before any clock setting */
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8001984:	4e32      	ldr	r6, [pc, #200]	; (8001a50 <stm32_clock_control_init+0xdc>)
	old_flash_freq = RCC_CALC_FLASH_FREQ(HAL_RCC_GetSysClockFreq(),
 8001986:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800198a:	5cd3      	ldrb	r3, [r2, r3]
 800198c:	fa20 f503 	lsr.w	r5, r0, r3
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8001990:	42b5      	cmp	r5, r6
 8001992:	d802      	bhi.n	800199a <stm32_clock_control_init+0x26>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 8001994:	482f      	ldr	r0, [pc, #188]	; (8001a54 <stm32_clock_control_init+0xe0>)
 8001996:	f001 f8cf 	bl	8002b38 <LL_SetFlashLatency>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800199a:	6823      	ldr	r3, [r4, #0]
 800199c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a0:	6023      	str	r3, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80019a2:	6823      	ldr	r3, [r4, #0]
 80019a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a8:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80019aa:	6823      	ldr	r3, [r4, #0]
		while (LL_RCC_HSE_IsReady() != 1) {
 80019ac:	0398      	lsls	r0, r3, #14
 80019ae:	d5fc      	bpl.n	80019aa <stm32_clock_control_init+0x36>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019b0:	6863      	ldr	r3, [r4, #4]
 80019b2:	f003 030c 	and.w	r3, r3, #12
	if (LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d115      	bne.n	80019e6 <stm32_clock_control_init+0x72>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80019ba:	6863      	ldr	r3, [r4, #4]
 80019bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019c0:	6063      	str	r3, [r4, #4]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80019c2:	6823      	ldr	r3, [r4, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 80019c4:	0799      	lsls	r1, r3, #30
 80019c6:	d406      	bmi.n	80019d6 <stm32_clock_control_init+0x62>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80019c8:	6823      	ldr	r3, [r4, #0]
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80019d0:	6823      	ldr	r3, [r4, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 80019d2:	079a      	lsls	r2, r3, #30
 80019d4:	d5fc      	bpl.n	80019d0 <stm32_clock_control_init+0x5c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80019d6:	6863      	ldr	r3, [r4, #4]
 80019d8:	f023 0303 	bic.w	r3, r3, #3
 80019dc:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019de:	6863      	ldr	r3, [r4, #4]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 80019e0:	f013 0f0c 	tst.w	r3, #12
 80019e4:	d1fb      	bne.n	80019de <stm32_clock_control_init+0x6a>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80019e6:	6823      	ldr	r3, [r4, #0]
 80019e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019ec:	6023      	str	r3, [r4, #0]
	config_pll_sysclock();
 80019ee:	f000 f835 	bl	8001a5c <config_pll_sysclock>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80019f2:	6823      	ldr	r3, [r4, #0]
 80019f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019f8:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80019fa:	6823      	ldr	r3, [r4, #0]
	while (LL_RCC_PLL_IsReady() != 1U) {
 80019fc:	019b      	lsls	r3, r3, #6
 80019fe:	d5fc      	bpl.n	80019fa <stm32_clock_control_init+0x86>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001a00:	6863      	ldr	r3, [r4, #4]
 8001a02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a06:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001a08:	6863      	ldr	r3, [r4, #4]
 8001a0a:	f023 0303 	bic.w	r3, r3, #3
 8001a0e:	f043 0302 	orr.w	r3, r3, #2
 8001a12:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a14:	6863      	ldr	r3, [r4, #4]
 8001a16:	f003 030c 	and.w	r3, r3, #12
	}

#if STM32_SYSCLK_SRC_PLL
	/* Set PLL as System Clock Source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d1fa      	bne.n	8001a14 <stm32_clock_control_init+0xa0>
		LL_RCC_SetAHBPrescaler(ahb_prescaler(STM32_CORE_PRESCALER));
	}

#if defined(FLASH_ACR_LATENCY)
	/* If freq not increased, set flash latency after all clock setting */
	if (old_flash_freq >= CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8001a1e:	42b5      	cmp	r5, r6
 8001a20:	d902      	bls.n	8001a28 <stm32_clock_control_init+0xb4>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 8001a22:	480c      	ldr	r0, [pc, #48]	; (8001a54 <stm32_clock_control_init+0xe0>)
 8001a24:	f001 f888 	bl	8002b38 <LL_SetFlashLatency>
	}
#endif /* FLASH_ACR_LATENCY */

	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <stm32_clock_control_init+0xe4>)
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <stm32_clock_control_init+0xe0>)

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8001a2c:	2000      	movs	r0, #0
	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 8001a2e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001a30:	6863      	ldr	r3, [r4, #4]
 8001a32:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a3a:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001a3c:	6863      	ldr	r3, [r4, #4]
 8001a3e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a42:	6063      	str	r3, [r4, #4]
}
 8001a44:	bd70      	pop	{r4, r5, r6, pc}
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	080051fb 	.word	0x080051fb
 8001a50:	044aa1ff 	.word	0x044aa1ff
 8001a54:	044aa200 	.word	0x044aa200
 8001a58:	20000088 	.word	0x20000088

08001a5c <config_pll_sysclock>:
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8001a5c:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <config_pll_sysclock+0x18>)
 8001a5e:	6853      	ldr	r3, [r2, #4]
 8001a60:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001a64:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001a68:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_USBPRE, USBxSource);
 8001a6a:	6853      	ldr	r3, [r2, #4]
 8001a6c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001a70:	6053      	str	r3, [r2, #4]
#ifdef STM32_USB_PRE_ENABLED
	/* Prescaler is enabled: PLL clock is not divided */
	LL_RCC_SetUSBClockSource(IS_ENABLED(STM32_PLL_USBPRE) ?
				 STM32_USB_PRE_ENABLED : 0);
#endif
}
 8001a72:	4770      	bx	lr
 8001a74:	40021000 	.word	0x40021000

08001a78 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8001a78:	b508      	push	{r3, lr}
 8001a7a:	4807      	ldr	r0, [pc, #28]	; (8001a98 <uart_console_init+0x20>)
 8001a7c:	f002 fe1f 	bl	80046be <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
 8001a80:	b138      	cbz	r0, 8001a92 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
 8001a82:	4806      	ldr	r0, [pc, #24]	; (8001a9c <uart_console_init+0x24>)
 8001a84:	f7ff fb68 	bl	8001158 <__stdout_hook_install>
	__printk_hook_install(console_out);
 8001a88:	4804      	ldr	r0, [pc, #16]	; (8001a9c <uart_console_init+0x24>)
 8001a8a:	f7fe fd39 	bl	8000500 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 8001a8e:	2000      	movs	r0, #0
}
 8001a90:	bd08      	pop	{r3, pc}
		return -ENODEV;
 8001a92:	f06f 0012 	mvn.w	r0, #18
 8001a96:	e7fb      	b.n	8001a90 <uart_console_init+0x18>
 8001a98:	08004a88 	.word	0x08004a88
 8001a9c:	08001aa1 	.word	0x08001aa1

08001aa0 <console_out>:
	if ('\n' == c) {
 8001aa0:	280a      	cmp	r0, #10
{
 8001aa2:	b538      	push	{r3, r4, r5, lr}
 8001aa4:	4604      	mov	r4, r0
 8001aa6:	4d07      	ldr	r5, [pc, #28]	; (8001ac4 <console_out+0x24>)
	if ('\n' == c) {
 8001aa8:	d104      	bne.n	8001ab4 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8001aaa:	68ab      	ldr	r3, [r5, #8]
 8001aac:	210d      	movs	r1, #13
 8001aae:	4628      	mov	r0, r5
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4798      	blx	r3
 8001ab4:	68ab      	ldr	r3, [r5, #8]
 8001ab6:	4803      	ldr	r0, [pc, #12]	; (8001ac4 <console_out+0x24>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	b2e1      	uxtb	r1, r4
 8001abc:	4798      	blx	r3
}
 8001abe:	4620      	mov	r0, r4
 8001ac0:	bd38      	pop	{r3, r4, r5, pc}
 8001ac2:	bf00      	nop
 8001ac4:	08004a88 	.word	0x08004a88

08001ac8 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 8001ac8:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
 8001aca:	6903      	ldr	r3, [r0, #16]
{
 8001acc:	4604      	mov	r4, r0
	int ret;

	data->dev = dev;
 8001ace:	6058      	str	r0, [r3, #4]
 8001ad0:	4d08      	ldr	r5, [pc, #32]	; (8001af4 <gpio_stm32_init+0x2c>)
 8001ad2:	4628      	mov	r0, r5
 8001ad4:	f002 fdf3 	bl	80046be <z_device_is_ready>

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 8001ad8:	b140      	cbz	r0, 8001aec <gpio_stm32_init+0x24>
					(clock_control_subsys_t *)&cfg->pclken);
 8001ada:	6861      	ldr	r1, [r4, #4]
 8001adc:	68ab      	ldr	r3, [r5, #8]
 8001ade:	4628      	mov	r0, r5
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	310c      	adds	r1, #12
 8001ae4:	4798      	blx	r3
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
	if (ret < 0) {
 8001ae6:	ea00 70e0 	and.w	r0, r0, r0, asr #31

	pm_device_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 8001aea:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
 8001aec:	f06f 0012 	mvn.w	r0, #18
 8001af0:	e7fb      	b.n	8001aea <gpio_stm32_init+0x22>
 8001af2:	bf00      	nop
 8001af4:	080049c8 	.word	0x080049c8

08001af8 <gpio_stm32_pin_interrupt_configure>:
{
 8001af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001afa:	4617      	mov	r7, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 8001afc:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
{
 8001b00:	460c      	mov	r4, r1
 8001b02:	461d      	mov	r5, r3
	const struct gpio_stm32_config *cfg = dev->config;
 8001b04:	6846      	ldr	r6, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8001b06:	6902      	ldr	r2, [r0, #16]
	if (mode == GPIO_INT_MODE_DISABLED) {
 8001b08:	d123      	bne.n	8001b52 <gpio_stm32_pin_interrupt_configure+0x5a>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8001b0a:	230f      	movs	r3, #15
 8001b0c:	f001 0203 	and.w	r2, r1, #3
 8001b10:	3204      	adds	r2, #4
 8001b12:	0092      	lsls	r2, r2, #2
 8001b14:	4093      	lsls	r3, r2
 8001b16:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  *         @arg @ref LL_GPIO_AF_EXTI_PORTF
  *         @arg @ref LL_GPIO_AF_EXTI_PORTG
  */
__STATIC_INLINE uint32_t LL_GPIO_AF_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(AFIO->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	492c      	ldr	r1, [pc, #176]	; (8001bd0 <gpio_stm32_pin_interrupt_configure+0xd8>)
 8001b1e:	3202      	adds	r2, #2
 8001b20:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001b24:	0c19      	lsrs	r1, r3, #16
 8001b26:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2a:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 8001b2e:	fab2 f282 	clz	r2, r2
 8001b32:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8001b34:	68b2      	ldr	r2, [r6, #8]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d109      	bne.n	8001b4e <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	f7ff fb54 	bl	80011e8 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8001b40:	4620      	mov	r0, r4
 8001b42:	f7ff fb9f 	bl	8001284 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8001b46:	2100      	movs	r1, #0
 8001b48:	4620      	mov	r0, r4
 8001b4a:	f7ff fb59 	bl	8001200 <stm32_exti_trigger>
	int err = 0;
 8001b4e:	2000      	movs	r0, #0
}
 8001b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
 8001b52:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
 8001b56:	d035      	beq.n	8001bc4 <gpio_stm32_pin_interrupt_configure+0xcc>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8001b58:	4620      	mov	r0, r4
 8001b5a:	491e      	ldr	r1, [pc, #120]	; (8001bd4 <gpio_stm32_pin_interrupt_configure+0xdc>)
 8001b5c:	f7ff fb80 	bl	8001260 <stm32_exti_set_callback>
 8001b60:	bb98      	cbnz	r0, 8001bca <gpio_stm32_pin_interrupt_configure+0xd2>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8001b62:	220f      	movs	r2, #15
 8001b64:	f004 0303 	and.w	r3, r4, #3
 8001b68:	3304      	adds	r3, #4
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	ea42 0294 	orr.w	r2, r2, r4, lsr #2
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001b72:	b2d3      	uxtb	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b7a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	LL_GPIO_AF_SetEXTISource(port, line);
 8001b7e:	68b1      	ldr	r1, [r6, #8]
 8001b80:	689e      	ldr	r6, [r3, #8]
 8001b82:	0c10      	lsrs	r0, r2, #16
 8001b84:	ea26 4612 	bic.w	r6, r6, r2, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	fa90 f2a0 	rbit	r2, r0
  return __builtin_clz(value);
 8001b8c:	fab2 f282 	clz	r2, r2
 8001b90:	fa01 f202 	lsl.w	r2, r1, r2
 8001b94:	4332      	orrs	r2, r6
	switch (trig) {
 8001b96:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	d00e      	beq.n	8001bbc <gpio_stm32_pin_interrupt_configure+0xc4>
 8001b9e:	f1b5 6fc0 	cmp.w	r5, #100663296	; 0x6000000
 8001ba2:	d00d      	beq.n	8001bc0 <gpio_stm32_pin_interrupt_configure+0xc8>
 8001ba4:	f105 437e 	add.w	r3, r5, #4261412864	; 0xfe000000
 8001ba8:	4259      	negs	r1, r3
 8001baa:	4159      	adcs	r1, r3
 8001bac:	0049      	lsls	r1, r1, #1
	stm32_exti_trigger(pin, edge);
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f7ff fb26 	bl	8001200 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	f7ff fb05 	bl	80011c4 <stm32_exti_enable>
 8001bba:	e7c8      	b.n	8001b4e <gpio_stm32_pin_interrupt_configure+0x56>
		edge = STM32_EXTI_TRIG_RISING;
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	e7f6      	b.n	8001bae <gpio_stm32_pin_interrupt_configure+0xb6>
		edge = STM32_EXTI_TRIG_BOTH;
 8001bc0:	2103      	movs	r1, #3
 8001bc2:	e7f4      	b.n	8001bae <gpio_stm32_pin_interrupt_configure+0xb6>
		err = -ENOTSUP;
 8001bc4:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8001bc8:	e7c2      	b.n	8001b50 <gpio_stm32_pin_interrupt_configure+0x58>
		err = -EBUSY;
 8001bca:	f06f 000f 	mvn.w	r0, #15
	return err;
 8001bce:	e7bf      	b.n	8001b50 <gpio_stm32_pin_interrupt_configure+0x58>
 8001bd0:	40010000 	.word	0x40010000
 8001bd4:	080041f9 	.word	0x080041f9

08001bd8 <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 8001bd8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	remap = (uint16_t)STM32_DT_PINMUX_REMAP(pins[0].pinmux);
 8001bdc:	6803      	ldr	r3, [r0, #0]
{
 8001bde:	4604      	mov	r4, r0
	remap = (uint16_t)STM32_DT_PINMUX_REMAP(pins[0].pinmux);
 8001be0:	f3c3 258f 	ubfx	r5, r3, #10, #16
 8001be4:	f3c3 2389 	ubfx	r3, r3, #10, #10
	if (remap == NO_REMAP) {
 8001be8:	b1fb      	cbz	r3, 8001c2a <pinctrl_configure_pins+0x52>
	for (size_t i = 1U; i < pin_cnt; i++) {
 8001bea:	2201      	movs	r2, #1
 8001bec:	428a      	cmp	r2, r1
 8001bee:	d323      	bcc.n	8001c38 <pinctrl_configure_pins+0x60>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001bf0:	4a33      	ldr	r2, [pc, #204]	; (8001cc0 <pinctrl_configure_pins+0xe8>)
	if (STM32_REMAP_REG_GET(remap) == 0U) {
 8001bf2:	f015 0f01 	tst.w	r5, #1
 8001bf6:	6990      	ldr	r0, [r2, #24]
 8001bf8:	f040 0001 	orr.w	r0, r0, #1
 8001bfc:	6190      	str	r0, [r2, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001bfe:	6992      	ldr	r2, [r2, #24]
		reg_val |= STM32_REMAP_VAL_GET(remap) << STM32_REMAP_SHIFT_GET(remap);
 8001c00:	ea4f 2013 	mov.w	r0, r3, lsr #8
 8001c04:	f002 0201 	and.w	r2, r2, #1
 8001c08:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001c0a:	9a01      	ldr	r2, [sp, #4]
	if (STM32_REMAP_REG_GET(remap) == 0U) {
 8001c0c:	4a2d      	ldr	r2, [pc, #180]	; (8001cc4 <pinctrl_configure_pins+0xec>)
		reg_val |= STM32_REMAP_VAL_GET(remap) << STM32_REMAP_SHIFT_GET(remap);
 8001c0e:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8001c12:	fa00 f003 	lsl.w	r0, r0, r3
		reg_val = AFIO->MAPR & ~AFIO_MAPR_SWJ_CFG;
 8001c16:	bf09      	itett	eq
 8001c18:	6853      	ldreq	r3, [r2, #4]
		reg_val = AFIO->MAPR2;
 8001c1a:	69d3      	ldrne	r3, [r2, #28]
		reg_val |= STM32_REMAP_VAL_GET(remap) << STM32_REMAP_SHIFT_GET(remap);
 8001c1c:	4303      	orreq	r3, r0
		AFIO->MAPR = reg_val | AFIO_MAPR_SWJ_CFG;
 8001c1e:	f043 63e0 	orreq.w	r3, r3, #117440512	; 0x7000000
		reg_val |= STM32_REMAP_VAL_GET(remap) << STM32_REMAP_SHIFT_GET(remap);
 8001c22:	bf16      	itet	ne
 8001c24:	4303      	orrne	r3, r0
		AFIO->MAPR = reg_val | AFIO_MAPR_SWJ_CFG;
 8001c26:	6053      	streq	r3, [r2, #4]
		AFIO->MAPR2 = reg_val;
 8001c28:	61d3      	strne	r3, [r2, #28]
	port_device = gpio_ports[STM32_PORT(pin)];
 8001c2a:	4f27      	ldr	r7, [pc, #156]	; (8001cc8 <pinctrl_configure_pins+0xf0>)
 8001c2c:	eb04 06c1 	add.w	r6, r4, r1, lsl #3
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8001c30:	42a6      	cmp	r6, r4
 8001c32:	d10e      	bne.n	8001c52 <pinctrl_configure_pins+0x7a>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 8001c34:	2000      	movs	r0, #0
 8001c36:	e007      	b.n	8001c48 <pinctrl_configure_pins+0x70>
		if (STM32_DT_PINMUX_REMAP(pins[i].pinmux) != remap) {
 8001c38:	f854 0032 	ldr.w	r0, [r4, r2, lsl #3]
 8001c3c:	f3c0 2089 	ubfx	r0, r0, #10, #10
 8001c40:	4298      	cmp	r0, r3
 8001c42:	d004      	beq.n	8001c4e <pinctrl_configure_pins+0x76>
	for (size_t i = 1U; i < pin_cnt; i++) {
 8001c44:	f06f 0015 	mvn.w	r0, #21
}
 8001c48:	b002      	add	sp, #8
 8001c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (size_t i = 1U; i < pin_cnt; i++) {
 8001c4e:	3201      	adds	r2, #1
 8001c50:	e7cc      	b.n	8001bec <pinctrl_configure_pins+0x14>
			pin_cgf = pins[i].pincfg | STM32_MODE_OUTPUT | STM32_CNF_ALT_FUNC;
 8001c52:	e9d4 2500 	ldrd	r2, r5, [r4]
		if (STM32_DT_PINMUX_FUNC(mux) == ALTERNATE) {
 8001c56:	f012 0903 	ands.w	r9, r2, #3
 8001c5a:	d10f      	bne.n	8001c7c <pinctrl_configure_pins+0xa4>
			pin_cgf = pins[i].pincfg | STM32_MODE_OUTPUT | STM32_CNF_ALT_FUNC;
 8001c5c:	f045 0541 	orr.w	r5, r5, #65	; 0x41
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8001c60:	f3c2 0a87 	ubfx	sl, r2, #2, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 8001c64:	f3c2 1283 	ubfx	r2, r2, #6, #4
 8001c68:	2a0a      	cmp	r2, #10
 8001c6a:	d8eb      	bhi.n	8001c44 <pinctrl_configure_pins+0x6c>
	port_device = gpio_ports[STM32_PORT(pin)];
 8001c6c:	f857 8022 	ldr.w	r8, [r7, r2, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8001c70:	f1b8 0f00 	cmp.w	r8, #0
 8001c74:	d113      	bne.n	8001c9e <pinctrl_configure_pins+0xc6>
		return -ENODEV;
 8001c76:	f06f 0012 	mvn.w	r0, #18
 8001c7a:	e7e5      	b.n	8001c48 <pinctrl_configure_pins+0x70>
		} else if (STM32_DT_PINMUX_FUNC(mux) == ANALOG) {
 8001c7c:	f1b9 0f02 	cmp.w	r9, #2
 8001c80:	d0ee      	beq.n	8001c60 <pinctrl_configure_pins+0x88>
		} else if (STM32_DT_PINMUX_FUNC(mux) == GPIO_IN) {
 8001c82:	f1b9 0f01 	cmp.w	r9, #1
 8001c86:	d107      	bne.n	8001c98 <pinctrl_configure_pins+0xc0>
			if (pupd == STM32_PUPD_NO_PULL) {
 8001c88:	f415 7fc0 	tst.w	r5, #384	; 0x180
				pin_cgf = pin_cgf | STM32_CNF_IN_FLOAT;
 8001c8c:	bf0c      	ite	eq
 8001c8e:	f045 0502 	orreq.w	r5, r5, #2
				pin_cgf = pin_cgf | STM32_CNF_IN_PUPD;
 8001c92:	f045 0504 	orrne.w	r5, r5, #4
 8001c96:	e7e3      	b.n	8001c60 <pinctrl_configure_pins+0x88>
			pin_cgf = pins[i].pincfg | STM32_MODE_OUTPUT | STM32_CNF_GP_OUTPUT;
 8001c98:	f045 0501 	orr.w	r5, r5, #1
 8001c9c:	e7e0      	b.n	8001c60 <pinctrl_configure_pins+0x88>
 8001c9e:	4640      	mov	r0, r8
 8001ca0:	f002 fd0d 	bl	80046be <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	d0e6      	beq.n	8001c76 <pinctrl_configure_pins+0x9e>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
 8001ca8:	464b      	mov	r3, r9
 8001caa:	462a      	mov	r2, r5
 8001cac:	4640      	mov	r0, r8
 8001cae:	f00a 010f 	and.w	r1, sl, #15
 8001cb2:	f002 fb46 	bl	8004342 <gpio_stm32_configure>
		if (ret < 0) {
 8001cb6:	2800      	cmp	r0, #0
 8001cb8:	f104 0408 	add.w	r4, r4, #8
 8001cbc:	dab8      	bge.n	8001c30 <pinctrl_configure_pins+0x58>
 8001cbe:	e7c3      	b.n	8001c48 <pinctrl_configure_pins+0x70>
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40010000 	.word	0x40010000
 8001cc8:	08004eb4 	.word	0x08004eb4

08001ccc <pwm_stm32_set_cycles>:
}

static int pwm_stm32_set_cycles(const struct device *dev, uint32_t channel,
				uint32_t period_cycles, uint32_t pulse_cycles,
				pwm_flags_t flags)
{
 8001ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cd0:	461f      	mov	r7, r3
	const struct pwm_stm32_config *cfg = dev->config;

	uint32_t ll_channel;
	uint32_t current_ll_channel; /* complementary output if used */

	if (channel < 1u || channel > TIMER_MAX_CH) {
 8001cd2:	1e4b      	subs	r3, r1, #1
{
 8001cd4:	b089      	sub	sp, #36	; 0x24
	if (channel < 1u || channel > TIMER_MAX_CH) {
 8001cd6:	2b03      	cmp	r3, #3
{
 8001cd8:	f8bd 4040 	ldrh.w	r4, [sp, #64]	; 0x40
	const struct pwm_stm32_config *cfg = dev->config;
 8001cdc:	6846      	ldr	r6, [r0, #4]
	if (channel < 1u || channel > TIMER_MAX_CH) {
 8001cde:	f200 80b8 	bhi.w	8001e52 <pwm_stm32_set_cycles+0x186>

	/*
	 * Non 32-bit timers count from 0 up to the value in the ARR register
	 * (16-bit). Thus period_cycles cannot be greater than UINT16_MAX + 1.
	 */
	if (!IS_TIM_32B_COUNTER_INSTANCE(cfg->timer) &&
 8001ce2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001ce6:	f200 80b7 	bhi.w	8001e58 <pwm_stm32_set_cycles+0x18c>
			return -EBUSY;
		}
	}
#endif /* CONFIG_PWM_CAPTURE */

	ll_channel = ch2ll[channel - 1u];
 8001cea:	485d      	ldr	r0, [pc, #372]	; (8001e60 <pwm_stm32_set_cycles+0x194>)

	/* in LL_TIM_CC_DisableChannel and LL_TIM_CC_IsEnabledChannel,
	 * the channel param could be the complementary one
	 */
	if ((flags & STM32_PWM_COMPLEMENTARY_MASK) == STM32_PWM_COMPLEMENTARY) {
 8001cec:	f414 7980 	ands.w	r9, r4, #256	; 0x100
	ll_channel = ch2ll[channel - 1u];
 8001cf0:	f850 8023 	ldr.w	r8, [r0, r3, lsl #2]
	if ((flags & STM32_PWM_COMPLEMENTARY_MASK) == STM32_PWM_COMPLEMENTARY) {
 8001cf4:	d00d      	beq.n	8001d12 <pwm_stm32_set_cycles+0x46>
		if (channel > ARRAY_SIZE(ch2ll_n)) {
 8001cf6:	2904      	cmp	r1, #4
 8001cf8:	f000 80ab 	beq.w	8001e52 <pwm_stm32_set_cycles+0x186>
			/* setting a flag on a channel that has not this capability */
			LOG_ERR("Channel %d has NO complementary output", channel);
			return -EINVAL;
		}
		current_ll_channel = ch2ll_n[channel - 1u];
 8001cfc:	4959      	ldr	r1, [pc, #356]	; (8001e64 <pwm_stm32_set_cycles+0x198>)
 8001cfe:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	} else {
		current_ll_channel = ll_channel;
	}

	if (period_cycles == 0u) {
 8001d02:	b942      	cbnz	r2, 8001d16 <pwm_stm32_set_cycles+0x4a>
		LL_TIM_CC_DisableChannel(cfg->timer, current_ll_channel);
 8001d04:	6832      	ldr	r2, [r6, #0]
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  CLEAR_BIT(TIMx->CCER, Channels);
 8001d06:	6a13      	ldr	r3, [r2, #32]
 8001d08:	ea23 0300 	bic.w	r3, r3, r0
 8001d0c:	6213      	str	r3, [r2, #32]
		return 0;
 8001d0e:	2000      	movs	r0, #0
 8001d10:	e05b      	b.n	8001dca <pwm_stm32_set_cycles+0xfe>
		current_ll_channel = ll_channel;
 8001d12:	4640      	mov	r0, r8
 8001d14:	e7f5      	b.n	8001d02 <pwm_stm32_set_cycles+0x36>
	}

	if (cfg->countermode == LL_TIM_COUNTERMODE_UP) {
 8001d16:	68b1      	ldr	r1, [r6, #8]
 8001d18:	bb71      	cbnz	r1, 8001d78 <pwm_stm32_set_cycles+0xac>
		period_cycles -= 1U;
	} else if (cfg->countermode == LL_TIM_COUNTERMODE_DOWN) {
		/* remove 1 pulse cycle, accounts for 1 extra high cycle */
		pulse_cycles -= 1U;
		/* remove 1 period cycle, accounts for 1 extra low cycle */
		period_cycles -= 1U;
 8001d1a:	1e55      	subs	r5, r2, #1
		period_cycles /= 2U;
	} else {
		return -ENOTSUP;
	}

	if (!LL_TIM_CC_IsEnabledChannel(cfg->timer, current_ll_channel)) {
 8001d1c:	6831      	ldr	r1, [r6, #0]
	if ((flags & PWM_POLARITY_MASK) == PWM_POLARITY_NORMAL) {
 8001d1e:	f004 0401 	and.w	r4, r4, #1
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8001d22:	6a0a      	ldr	r2, [r1, #32]
 8001d24:	0064      	lsls	r4, r4, #1
 8001d26:	ea30 0202 	bics.w	r2, r0, r2
 8001d2a:	d13a      	bne.n	8001da2 <pwm_stm32_set_cycles+0xd6>
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001d2c:	2840      	cmp	r0, #64	; 0x40
 8001d2e:	f000 8088 	beq.w	8001e42 <pwm_stm32_set_cycles+0x176>
 8001d32:	d82e      	bhi.n	8001d92 <pwm_stm32_set_cycles+0xc6>
 8001d34:	2804      	cmp	r0, #4
 8001d36:	f000 8086 	beq.w	8001e46 <pwm_stm32_set_cycles+0x17a>
 8001d3a:	2810      	cmp	r0, #16
 8001d3c:	f000 8085 	beq.w	8001e4a <pwm_stm32_set_cycles+0x17e>
 8001d40:	2801      	cmp	r0, #1
 8001d42:	bf08      	it	eq
 8001d44:	2200      	moveq	r2, #0
 8001d46:	bf18      	it	ne
 8001d48:	2206      	movne	r2, #6
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8001d4a:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8001e68 <pwm_stm32_set_cycles+0x19c>
 8001d4e:	6a08      	ldr	r0, [r1, #32]
 8001d50:	f81c c002 	ldrb.w	ip, [ip, r2]
 8001d54:	2202      	movs	r2, #2
 8001d56:	fa02 f20c 	lsl.w	r2, r2, ip
 8001d5a:	ea20 0202 	bic.w	r2, r0, r2
 8001d5e:	fa04 f40c 	lsl.w	r4, r4, ip
 8001d62:	4314      	orrs	r4, r2
		LL_TIM_SetAutoReload(cfg->timer, period_cycles);
		LL_TIM_GenerateEvent_UPDATE(cfg->timer);
	} else {
		/* in LL_TIM_OC_SetPolarity, the channel could be the complementary one */
		LL_TIM_OC_SetPolarity(cfg->timer, current_ll_channel, get_polarity(flags));
		set_timer_compare[channel - 1u](cfg->timer, pulse_cycles);
 8001d64:	4a41      	ldr	r2, [pc, #260]	; (8001e6c <pwm_stm32_set_cycles+0x1a0>)
 8001d66:	620c      	str	r4, [r1, #32]
 8001d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6c:	4639      	mov	r1, r7
 8001d6e:	6830      	ldr	r0, [r6, #0]
 8001d70:	4798      	blx	r3
		LL_TIM_SetAutoReload(cfg->timer, period_cycles);
 8001d72:	6833      	ldr	r3, [r6, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001d74:	62dd      	str	r5, [r3, #44]	; 0x2c
}
 8001d76:	e7ca      	b.n	8001d0e <pwm_stm32_set_cycles+0x42>
	} else if (cfg->countermode == LL_TIM_COUNTERMODE_DOWN) {
 8001d78:	2910      	cmp	r1, #16
 8001d7a:	d101      	bne.n	8001d80 <pwm_stm32_set_cycles+0xb4>
		pulse_cycles -= 1U;
 8001d7c:	3f01      	subs	r7, #1
 8001d7e:	e7cc      	b.n	8001d1a <pwm_stm32_set_cycles+0x4e>
		(ll_countermode == LL_TIM_COUNTERMODE_CENTER_UP) ||
 8001d80:	f021 0540 	bic.w	r5, r1, #64	; 0x40
 8001d84:	2d20      	cmp	r5, #32
 8001d86:	d001      	beq.n	8001d8c <pwm_stm32_set_cycles+0xc0>
	return ((ll_countermode == LL_TIM_COUNTERMODE_CENTER_DOWN) ||
 8001d88:	2940      	cmp	r1, #64	; 0x40
 8001d8a:	d165      	bne.n	8001e58 <pwm_stm32_set_cycles+0x18c>
		pulse_cycles /= 2U;
 8001d8c:	087f      	lsrs	r7, r7, #1
		period_cycles /= 2U;
 8001d8e:	0855      	lsrs	r5, r2, #1
 8001d90:	e7c4      	b.n	8001d1c <pwm_stm32_set_cycles+0x50>
 8001d92:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8001d96:	d05a      	beq.n	8001e4e <pwm_stm32_set_cycles+0x182>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001d98:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8001d9c:	bf08      	it	eq
 8001d9e:	2205      	moveq	r2, #5
 8001da0:	e7d1      	b.n	8001d46 <pwm_stm32_set_cycles+0x7a>
		LL_TIM_OC_StructInit(&oc_init);
 8001da2:	4668      	mov	r0, sp
 8001da4:	f002 fc80 	bl	80046a8 <LL_TIM_OC_StructInit>
		oc_init.OCMode = LL_TIM_OCMODE_PWM1;
 8001da8:	2360      	movs	r3, #96	; 0x60
 8001daa:	9300      	str	r3, [sp, #0]
		if ((flags & STM32_PWM_COMPLEMENTARY_MASK) == STM32_PWM_COMPLEMENTARY) {
 8001dac:	2301      	movs	r3, #1
 8001dae:	f1b9 0f00 	cmp.w	r9, #0
 8001db2:	d00d      	beq.n	8001dd0 <pwm_stm32_set_cycles+0x104>
			oc_init.OCNState = LL_TIM_OCSTATE_ENABLE;
 8001db4:	9302      	str	r3, [sp, #8]
			oc_init.OCNPolarity = get_polarity(flags);
 8001db6:	9405      	str	r4, [sp, #20]
		oc_init.CompareValue = pulse_cycles;
 8001db8:	9703      	str	r7, [sp, #12]
		if (LL_TIM_OC_Init(cfg->timer, ll_channel, &oc_init) != SUCCESS) {
 8001dba:	466a      	mov	r2, sp
 8001dbc:	4641      	mov	r1, r8
 8001dbe:	6830      	ldr	r0, [r6, #0]
 8001dc0:	f000 fdf2 	bl	80029a8 <LL_TIM_OC_Init>
 8001dc4:	b138      	cbz	r0, 8001dd6 <pwm_stm32_set_cycles+0x10a>
			return -EIO;
 8001dc6:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
 8001dca:	b009      	add	sp, #36	; 0x24
 8001dcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 8001dd0:	9301      	str	r3, [sp, #4]
			oc_init.OCPolarity = get_polarity(flags);
 8001dd2:	9404      	str	r4, [sp, #16]
 8001dd4:	e7f0      	b.n	8001db8 <pwm_stm32_set_cycles+0xec>
		LL_TIM_EnableARRPreload(cfg->timer);
 8001dd6:	6832      	ldr	r2, [r6, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001dd8:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
 8001ddc:	6813      	ldr	r3, [r2, #0]
 8001dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de2:	6013      	str	r3, [r2, #0]
		LL_TIM_OC_EnablePreload(cfg->timer, ll_channel);
 8001de4:	6832      	ldr	r2, [r6, #0]
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001de6:	d024      	beq.n	8001e32 <pwm_stm32_set_cycles+0x166>
 8001de8:	d81b      	bhi.n	8001e22 <pwm_stm32_set_cycles+0x156>
 8001dea:	f1b8 0f04 	cmp.w	r8, #4
 8001dee:	d022      	beq.n	8001e36 <pwm_stm32_set_cycles+0x16a>
 8001df0:	f1b8 0f10 	cmp.w	r8, #16
 8001df4:	d021      	beq.n	8001e3a <pwm_stm32_set_cycles+0x16e>
 8001df6:	f1b8 0f01 	cmp.w	r8, #1
 8001dfa:	bf18      	it	ne
 8001dfc:	2006      	movne	r0, #6
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <pwm_stm32_set_cycles+0x1a4>)
 8001e00:	3218      	adds	r2, #24
 8001e02:	5c19      	ldrb	r1, [r3, r0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <pwm_stm32_set_cycles+0x1a8>)
 8001e06:	5854      	ldr	r4, [r2, r1]
 8001e08:	5c18      	ldrb	r0, [r3, r0]
 8001e0a:	2308      	movs	r3, #8
 8001e0c:	4083      	lsls	r3, r0
 8001e0e:	4323      	orrs	r3, r4
 8001e10:	5053      	str	r3, [r2, r1]
		LL_TIM_SetAutoReload(cfg->timer, period_cycles);
 8001e12:	6833      	ldr	r3, [r6, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001e14:	62dd      	str	r5, [r3, #44]	; 0x2c
		LL_TIM_GenerateEvent_UPDATE(cfg->timer);
 8001e16:	6832      	ldr	r2, [r6, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001e18:	6953      	ldr	r3, [r2, #20]
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6153      	str	r3, [r2, #20]
 8001e20:	e775      	b.n	8001d0e <pwm_stm32_set_cycles+0x42>
 8001e22:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
 8001e26:	d00a      	beq.n	8001e3e <pwm_stm32_set_cycles+0x172>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001e28:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 8001e2c:	bf08      	it	eq
 8001e2e:	2005      	moveq	r0, #5
 8001e30:	e7e3      	b.n	8001dfa <pwm_stm32_set_cycles+0x12e>
		LL_TIM_OC_EnablePreload(cfg->timer, ll_channel);
 8001e32:	2003      	movs	r0, #3
 8001e34:	e7e3      	b.n	8001dfe <pwm_stm32_set_cycles+0x132>
 8001e36:	2001      	movs	r0, #1
 8001e38:	e7e1      	b.n	8001dfe <pwm_stm32_set_cycles+0x132>
 8001e3a:	2002      	movs	r0, #2
 8001e3c:	e7df      	b.n	8001dfe <pwm_stm32_set_cycles+0x132>
 8001e3e:	2004      	movs	r0, #4
 8001e40:	e7dd      	b.n	8001dfe <pwm_stm32_set_cycles+0x132>
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8001e42:	2203      	movs	r2, #3
 8001e44:	e781      	b.n	8001d4a <pwm_stm32_set_cycles+0x7e>
 8001e46:	2201      	movs	r2, #1
 8001e48:	e77f      	b.n	8001d4a <pwm_stm32_set_cycles+0x7e>
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	e77d      	b.n	8001d4a <pwm_stm32_set_cycles+0x7e>
 8001e4e:	2204      	movs	r2, #4
 8001e50:	e77b      	b.n	8001d4a <pwm_stm32_set_cycles+0x7e>
		return -EINVAL;
 8001e52:	f06f 0015 	mvn.w	r0, #21
 8001e56:	e7b8      	b.n	8001dca <pwm_stm32_set_cycles+0xfe>
		return -ENOTSUP;
 8001e58:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8001e5c:	e7b5      	b.n	8001dca <pwm_stm32_set_cycles+0xfe>
 8001e5e:	bf00      	nop
 8001e60:	08004f94 	.word	0x08004f94
 8001e64:	08004f88 	.word	0x08004f88
 8001e68:	080051a0 	.word	0x080051a0
 8001e6c:	08004f78 	.word	0x08004f78
 8001e70:	080051ae 	.word	0x080051ae
 8001e74:	080051a7 	.word	0x080051a7

08001e78 <pwm_stm32_init>:
	.disable_capture = pwm_stm32_disable_capture,
#endif /* CONFIG_PWM_CAPTURE */
};

static int pwm_stm32_init(const struct device *dev)
{
 8001e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e7c:	b086      	sub	sp, #24
	struct pwm_stm32_data *data = dev->data;
 8001e7e:	6906      	ldr	r6, [r0, #16]
	const struct pwm_stm32_config *cfg = dev->config;
 8001e80:	6844      	ldr	r4, [r0, #4]
 8001e82:	4d2c      	ldr	r5, [pc, #176]	; (8001f34 <pwm_stm32_init+0xbc>)
 8001e84:	4628      	mov	r0, r5
 8001e86:	f002 fc1a 	bl	80046be <z_device_is_ready>
	LL_TIM_InitTypeDef init;

	/* enable clock and store its speed */
	clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);

	if (!device_is_ready(clk)) {
 8001e8a:	2800      	cmp	r0, #0
 8001e8c:	d04c      	beq.n	8001f28 <pwm_stm32_init+0xb0>
	const struct clock_control_driver_api *api =
 8001e8e:	f8d5 8008 	ldr.w	r8, [r5, #8]
		LOG_ERR("clock control device not ready");
		return -ENODEV;
	}

	r = clock_control_on(clk, (clock_control_subsys_t *)&cfg->pclken);
 8001e92:	f104 070c 	add.w	r7, r4, #12
	return api->on(dev, sys);
 8001e96:	4639      	mov	r1, r7
 8001e98:	4628      	mov	r0, r5
 8001e9a:	f8d8 3000 	ldr.w	r3, [r8]
 8001e9e:	4798      	blx	r3
	if (r < 0) {
 8001ea0:	2800      	cmp	r0, #0
 8001ea2:	db04      	blt.n	8001eae <pwm_stm32_init+0x36>
	if (api->get_rate == NULL) {
 8001ea4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8001ea8:	b923      	cbnz	r3, 8001eb4 <pwm_stm32_init+0x3c>
		LOG_ERR("Could not initialize clock (%d)", r);
		return r;
	}

	r = get_tim_clk(&cfg->pclken, &data->tim_clk);
	if (r < 0) {
 8001eaa:	f06f 0057 	mvn.w	r0, #87	; 0x57
#ifdef CONFIG_PWM_CAPTURE
	cfg->irq_config_func(dev);
#endif /* CONFIG_PWM_CAPTURE */

	return 0;
}
 8001eae:	b006      	add	sp, #24
 8001eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return api->get_rate(dev, sys, rate);
 8001eb4:	4639      	mov	r1, r7
 8001eb6:	4628      	mov	r0, r5
 8001eb8:	aa01      	add	r2, sp, #4
 8001eba:	4798      	blx	r3
	if (r < 0) {
 8001ebc:	2800      	cmp	r0, #0
 8001ebe:	dbf6      	blt.n	8001eae <pwm_stm32_init+0x36>
	if (pclken->bus == STM32_CLOCK_BUS_APB1) {
 8001ec0:	68e2      	ldr	r2, [r4, #12]
		*tim_clk = bus_clk * 2u;
 8001ec2:	9b01      	ldr	r3, [sp, #4]
	if (pclken->bus == STM32_CLOCK_BUS_APB1) {
 8001ec4:	2a1c      	cmp	r2, #28
		*tim_clk = bus_clk * 2u;
 8001ec6:	bf08      	it	eq
 8001ec8:	005b      	lsleq	r3, r3, #1
		*tim_clk = bus_clk;
 8001eca:	6033      	str	r3, [r6, #0]
	ret = pinctrl_lookup_state(config, id, &state);
 8001ecc:	2100      	movs	r1, #0
 8001ece:	6960      	ldr	r0, [r4, #20]
 8001ed0:	aa01      	add	r2, sp, #4
 8001ed2:	f002 fa4b 	bl	800436c <pinctrl_lookup_state>
	if (ret < 0) {
 8001ed6:	2800      	cmp	r0, #0
 8001ed8:	dbe9      	blt.n	8001eae <pwm_stm32_init+0x36>
	return pinctrl_apply_state_direct(config, state);
 8001eda:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8001edc:	2200      	movs	r2, #0
 8001ede:	7919      	ldrb	r1, [r3, #4]
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	f7ff fe79 	bl	8001bd8 <pinctrl_configure_pins>
	if (r < 0) {
 8001ee6:	2800      	cmp	r0, #0
 8001ee8:	dbe1      	blt.n	8001eae <pwm_stm32_init+0x36>
	LL_TIM_StructInit(&init);
 8001eea:	a801      	add	r0, sp, #4
 8001eec:	f002 fbd3 	bl	8004696 <LL_TIM_StructInit>
	init.Prescaler = cfg->prescaler;
 8001ef0:	6863      	ldr	r3, [r4, #4]
	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 8001ef2:	a901      	add	r1, sp, #4
	init.Prescaler = cfg->prescaler;
 8001ef4:	f8ad 3004 	strh.w	r3, [sp, #4]
	init.CounterMode = cfg->countermode;
 8001ef8:	68a3      	ldr	r3, [r4, #8]
 8001efa:	9302      	str	r3, [sp, #8]
	init.Autoreload = 0u;
 8001efc:	2300      	movs	r3, #0
	init.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001efe:	e9cd 3303 	strd	r3, r3, [sp, #12]
	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 8001f02:	6820      	ldr	r0, [r4, #0]
 8001f04:	f000 fd20 	bl	8002948 <LL_TIM_Init>
 8001f08:	b988      	cbnz	r0, 8001f2e <pwm_stm32_init+0xb6>
	if (IS_TIM_BREAK_INSTANCE(cfg->timer)) {
 8001f0a:	6823      	ldr	r3, [r4, #0]
 8001f0c:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <pwm_stm32_init+0xc0>)
	return 0;
 8001f0e:	2000      	movs	r0, #0
	if (IS_TIM_BREAK_INSTANCE(cfg->timer)) {
 8001f10:	4293      	cmp	r3, r2
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8001f12:	bf02      	ittt	eq
 8001f14:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001f16:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001f1a:	645a      	streq	r2, [r3, #68]	; 0x44
	LL_TIM_EnableCounter(cfg->timer);
 8001f1c:	6822      	ldr	r2, [r4, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001f1e:	6813      	ldr	r3, [r2, #0]
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6013      	str	r3, [r2, #0]
	return 0;
 8001f26:	e7c2      	b.n	8001eae <pwm_stm32_init+0x36>
		return -ENODEV;
 8001f28:	f06f 0012 	mvn.w	r0, #18
 8001f2c:	e7bf      	b.n	8001eae <pwm_stm32_init+0x36>
		return -EIO;
 8001f2e:	f06f 0004 	mvn.w	r0, #4
 8001f32:	e7bc      	b.n	8001eae <pwm_stm32_init+0x36>
 8001f34:	080049c8 	.word	0x080049c8
 8001f38:	40012c00 	.word	0x40012c00

08001f3c <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8001f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f3e:	4606      	mov	r6, r0
	const struct uart_stm32_config *config = dev->config;
 8001f40:	6844      	ldr	r4, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 8001f42:	6907      	ldr	r7, [r0, #16]
	data->clock = clk;
 8001f44:	4836      	ldr	r0, [pc, #216]	; (8002020 <uart_stm32_init+0xe4>)
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	f002 fbb9 	bl	80046be <z_device_is_ready>
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);

	if (!device_is_ready(data->clock)) {
 8001f4c:	b920      	cbnz	r0, 8001f58 <uart_stm32_init+0x1c>
		LOG_ERR("clock control device not ready");
		return -ENODEV;
 8001f4e:	f06f 0512 	mvn.w	r5, #18
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8001f52:	4628      	mov	r0, r5
 8001f54:	b003      	add	sp, #12
 8001f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = clock_control_on(data->clock, (clock_control_subsys_t)&config->pclken[0]);
 8001f58:	6878      	ldr	r0, [r7, #4]
	return api->on(dev, sys);
 8001f5a:	6861      	ldr	r1, [r4, #4]
 8001f5c:	6883      	ldr	r3, [r0, #8]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4798      	blx	r3
	if (err != 0) {
 8001f62:	4605      	mov	r5, r0
 8001f64:	2800      	cmp	r0, #0
 8001f66:	d1f4      	bne.n	8001f52 <uart_stm32_init+0x16>
	ret = pinctrl_lookup_state(config, id, &state);
 8001f68:	4601      	mov	r1, r0
 8001f6a:	aa01      	add	r2, sp, #4
 8001f6c:	69a0      	ldr	r0, [r4, #24]
 8001f6e:	f002 f9fd 	bl	800436c <pinctrl_lookup_state>
	if (ret < 0) {
 8001f72:	2800      	cmp	r0, #0
 8001f74:	da01      	bge.n	8001f7a <uart_stm32_init+0x3e>
 8001f76:	4605      	mov	r5, r0
 8001f78:	e7eb      	b.n	8001f52 <uart_stm32_init+0x16>
	return pinctrl_apply_state_direct(config, state);
 8001f7a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8001f7c:	462a      	mov	r2, r5
 8001f7e:	7919      	ldrb	r1, [r3, #4]
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	f7ff fe29 	bl	8001bd8 <pinctrl_configure_pins>
	if (err < 0) {
 8001f86:	2800      	cmp	r0, #0
 8001f88:	dbf5      	blt.n	8001f76 <uart_stm32_init+0x3a>
	LL_USART_Disable(config->usart);
 8001f8a:	6822      	ldr	r2, [r4, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001f8c:	68d3      	ldr	r3, [r2, #12]
 8001f8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f92:	60d3      	str	r3, [r2, #12]
	if (!device_is_ready(data->reset.dev)) {
 8001f94:	68b8      	ldr	r0, [r7, #8]
 8001f96:	f002 fb92 	bl	80046be <z_device_is_ready>
 8001f9a:	2800      	cmp	r0, #0
 8001f9c:	d0d7      	beq.n	8001f4e <uart_stm32_init+0x12>
 *
 * @return a value from reset_line_toggle()
 */
static inline int reset_line_toggle_dt(const struct reset_dt_spec *spec)
{
	return reset_line_toggle(spec->dev, spec->id);
 8001f9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
	if (api->line_toggle == NULL) {
 8001fa2:	6883      	ldr	r3, [r0, #8]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	b103      	cbz	r3, 8001faa <uart_stm32_init+0x6e>
	return api->line_toggle(dev, id);
 8001fa8:	4798      	blx	r3
	LL_USART_SetTransferDirection(config->usart,
 8001faa:	6822      	ldr	r2, [r4, #0]
  *         @arg @ref LL_USART_DIRECTION_TX_RX
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8001fac:	68d3      	ldr	r3, [r2, #12]
 8001fae:	f043 030c 	orr.w	r3, r3, #12
 8001fb2:	60d3      	str	r3, [r2, #12]
	if (config->parity == 2) {
 8001fb4:	6923      	ldr	r3, [r4, #16]
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d029      	beq.n	800200e <uart_stm32_init+0xd2>
	} else if (config->parity == 1) {
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d12c      	bne.n	8002018 <uart_stm32_init+0xdc>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8001fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 8001fc2:	f44f 60c0 	mov.w	r0, #1536	; 0x600
	LL_USART_ConfigCharacter(config->usart,
 8001fc6:	6821      	ldr	r1, [r4, #0]
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity,
                                              uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8001fc8:	4303      	orrs	r3, r0
 8001fca:	68ca      	ldr	r2, [r1, #12]
 8001fcc:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001fd4:	690b      	ldr	r3, [r1, #16]
 8001fd6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fda:	610b      	str	r3, [r1, #16]
	if (config->hw_flow_control) {
 8001fdc:	7b23      	ldrb	r3, [r4, #12]
 8001fde:	b12b      	cbz	r3, 8001fec <uart_stm32_init+0xb0>
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 8001fe0:	6873      	ldr	r3, [r6, #4]
 8001fe2:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001fe4:	6953      	ldr	r3, [r2, #20]
 8001fe6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001fea:	6153      	str	r3, [r2, #20]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8001fec:	4630      	mov	r0, r6
 8001fee:	6839      	ldr	r1, [r7, #0]
 8001ff0:	f002 fa25 	bl	800443e <uart_stm32_set_baudrate>
	if (config->single_wire) {
 8001ff4:	7d23      	ldrb	r3, [r4, #20]
 8001ff6:	b123      	cbz	r3, 8002002 <uart_stm32_init+0xc6>
		LL_USART_EnableHalfDuplex(config->usart);
 8001ff8:	6822      	ldr	r2, [r4, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8001ffa:	6953      	ldr	r3, [r2, #20]
 8001ffc:	f043 0308 	orr.w	r3, r3, #8
 8002000:	6153      	str	r3, [r2, #20]
	LL_USART_Enable(config->usart);
 8002002:	6822      	ldr	r2, [r4, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002004:	68d3      	ldr	r3, [r2, #12]
 8002006:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800200a:	60d3      	str	r3, [r2, #12]
	return 0;
 800200c:	e7a1      	b.n	8001f52 <uart_stm32_init+0x16>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800200e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 8002012:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002016:	e7d6      	b.n	8001fc6 <uart_stm32_init+0x8a>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8002018:	2300      	movs	r3, #0
		ll_parity = LL_USART_PARITY_NONE;
 800201a:	4618      	mov	r0, r3
 800201c:	e7d3      	b.n	8001fc6 <uart_stm32_init+0x8a>
 800201e:	bf00      	nop
 8002020:	080049c8 	.word	0x080049c8

08002024 <uart_stm32_configure>:
{
 8002024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8002028:	790b      	ldrb	r3, [r1, #4]
{
 800202a:	460c      	mov	r4, r1
	switch (parity) {
 800202c:	2b01      	cmp	r3, #1
	const struct uart_stm32_config *config = dev->config;
 800202e:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 8002030:	6906      	ldr	r6, [r0, #16]
	switch (parity) {
 8002032:	d07d      	beq.n	8002130 <uart_stm32_configure+0x10c>
 8002034:	1e9a      	subs	r2, r3, #2
 8002036:	4257      	negs	r7, r2
 8002038:	4157      	adcs	r7, r2
 800203a:	02bf      	lsls	r7, r7, #10
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800203c:	7962      	ldrb	r2, [r4, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 800203e:	f894 8006 	ldrb.w	r8, [r4, #6]
 8002042:	2a02      	cmp	r2, #2
 8002044:	bf96      	itet	ls
 8002046:	494c      	ldrls	r1, [pc, #304]	; (8002178 <uart_stm32_configure+0x154>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8002048:	f44f 5c00 	movhi.w	ip, #8192	; 0x2000
 800204c:	f831 c012 	ldrhls.w	ip, [r1, r2, lsl #1]
	switch (db) {
 8002050:	f1b8 0f04 	cmp.w	r8, #4
 8002054:	d07b      	beq.n	800214e <uart_stm32_configure+0x12a>
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8002056:	f894 e007 	ldrb.w	lr, [r4, #7]
		if (p == UART_CFG_PARITY_NONE) {
 800205a:	2b00      	cmp	r3, #0
 800205c:	d16b      	bne.n	8002136 <uart_stm32_configure+0x112>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 800205e:	f1be 0f01 	cmp.w	lr, #1
 8002062:	f022 0202 	bic.w	r2, r2, #2
 8002066:	d07f      	beq.n	8002168 <uart_stm32_configure+0x144>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8002068:	2a00      	cmp	r2, #0
 800206a:	d070      	beq.n	800214e <uart_stm32_configure+0x12a>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 800206c:	f1b8 0f02 	cmp.w	r8, #2
 8002070:	d96d      	bls.n	800214e <uart_stm32_configure+0x12a>
	return LL_USART_HWCONTROL_NONE;
 8002072:	4619      	mov	r1, r3
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 8002074:	f8d5 8000 	ldr.w	r8, [r5]
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8002078:	f1be 0f00 	cmp.w	lr, #0
 800207c:	d00d      	beq.n	800209a <uart_stm32_configure+0x76>
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 800207e:	4a3f      	ldr	r2, [pc, #252]	; (800217c <uart_stm32_configure+0x158>)
 8002080:	4590      	cmp	r8, r2
 8002082:	d007      	beq.n	8002094 <uart_stm32_configure+0x70>
 8002084:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8002088:	4590      	cmp	r8, r2
 800208a:	d003      	beq.n	8002094 <uart_stm32_configure+0x70>
 800208c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002090:	4590      	cmp	r8, r2
 8002092:	d15c      	bne.n	800214e <uart_stm32_configure+0x12a>
 8002094:	f1be 0f01 	cmp.w	lr, #1
 8002098:	d159      	bne.n	800214e <uart_stm32_configure+0x12a>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800209a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800209e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020a2:	f8c8 200c 	str.w	r2, [r8, #12]
	return LL_USART_GetParity(config->usart);
 80020a6:	6842      	ldr	r2, [r0, #4]
 80020a8:	f8d2 e000 	ldr.w	lr, [r2]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80020ac:	f8de 200c 	ldr.w	r2, [lr, #12]
 80020b0:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 80020b4:	4297      	cmp	r7, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 80020b6:	bf1f      	itttt	ne
 80020b8:	f8de 200c 	ldrne.w	r2, [lr, #12]
 80020bc:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80020c0:	433a      	orrne	r2, r7
 80020c2:	f8ce 200c 	strne.w	r2, [lr, #12]
	return LL_USART_GetStopBitsLength(config->usart);
 80020c6:	6842      	ldr	r2, [r0, #4]
 80020c8:	6817      	ldr	r7, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 80020d0:	4594      	cmp	ip, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80020d2:	bf1f      	itttt	ne
 80020d4:	693a      	ldrne	r2, [r7, #16]
 80020d6:	f422 5240 	bicne.w	r2, r2, #12288	; 0x3000
 80020da:	ea42 020c 	orrne.w	r2, r2, ip
 80020de:	613a      	strne	r2, [r7, #16]
	return LL_USART_GetDataWidth(config->usart);
 80020e0:	6842      	ldr	r2, [r0, #4]
 80020e2:	6817      	ldr	r7, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 80020ea:	429a      	cmp	r2, r3
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 80020ec:	bf1f      	itttt	ne
 80020ee:	68fa      	ldrne	r2, [r7, #12]
 80020f0:	f422 5280 	bicne.w	r2, r2, #4096	; 0x1000
 80020f4:	4313      	orrne	r3, r2
 80020f6:	60fb      	strne	r3, [r7, #12]
	return LL_USART_GetHWFlowCtrl(config->usart);
 80020f8:	6843      	ldr	r3, [r0, #4]
 80020fa:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80020fc:	6953      	ldr	r3, [r2, #20]
 80020fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8002102:	4299      	cmp	r1, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002104:	bf1f      	itttt	ne
 8002106:	6953      	ldrne	r3, [r2, #20]
 8002108:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 800210c:	430b      	orrne	r3, r1
 800210e:	6153      	strne	r3, [r2, #20]
	if (cfg->baudrate != data->baud_rate) {
 8002110:	6821      	ldr	r1, [r4, #0]
 8002112:	6833      	ldr	r3, [r6, #0]
 8002114:	4299      	cmp	r1, r3
 8002116:	d003      	beq.n	8002120 <uart_stm32_configure+0xfc>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8002118:	f002 f991 	bl	800443e <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	6033      	str	r3, [r6, #0]
	return 0;
 8002120:	2000      	movs	r0, #0
	LL_USART_Enable(config->usart);
 8002122:	682a      	ldr	r2, [r5, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002124:	68d3      	ldr	r3, [r2, #12]
 8002126:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800212a:	60d3      	str	r3, [r2, #12]
};
 800212c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (parity) {
 8002130:	f44f 67c0 	mov.w	r7, #1536	; 0x600
 8002134:	e782      	b.n	800203c <uart_stm32_configure+0x18>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8002136:	3b03      	subs	r3, #3
 8002138:	f1be 0f01 	cmp.w	lr, #1
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800213c:	b2db      	uxtb	r3, r3
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 800213e:	d109      	bne.n	8002154 <uart_stm32_configure+0x130>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8002140:	2b01      	cmp	r3, #1
 8002142:	d904      	bls.n	800214e <uart_stm32_configure+0x12a>
		return LL_USART_HWCONTROL_RTS_CTS;
 8002144:	f44f 7140 	mov.w	r1, #768	; 0x300
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8002148:	f012 0ffd 	tst.w	r2, #253	; 0xfd
 800214c:	d106      	bne.n	800215c <uart_stm32_configure+0x138>
		return -ENOTSUP;
 800214e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002152:	e7eb      	b.n	800212c <uart_stm32_configure+0x108>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8002154:	2b01      	cmp	r3, #1
 8002156:	d9fa      	bls.n	800214e <uart_stm32_configure+0x12a>
	return LL_USART_HWCONTROL_NONE;
 8002158:	2100      	movs	r1, #0
 800215a:	e7f5      	b.n	8002148 <uart_stm32_configure+0x124>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 800215c:	f1b8 0f02 	cmp.w	r8, #2
 8002160:	d9f5      	bls.n	800214e <uart_stm32_configure+0x12a>
		return LL_USART_DATAWIDTH_9B;
 8002162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002166:	e785      	b.n	8002074 <uart_stm32_configure+0x50>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8002168:	2a00      	cmp	r2, #0
 800216a:	d0f0      	beq.n	800214e <uart_stm32_configure+0x12a>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 800216c:	f1b8 0f02 	cmp.w	r8, #2
 8002170:	d9ed      	bls.n	800214e <uart_stm32_configure+0x12a>
		return LL_USART_HWCONTROL_RTS_CTS;
 8002172:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002176:	e77d      	b.n	8002074 <uart_stm32_configure+0x50>
 8002178:	0800506c 	.word	0x0800506c
 800217c:	40013800 	.word	0x40013800

08002180 <spi_stm32_init>:
	return false;
#endif
}

static int spi_stm32_init(const struct device *dev)
{
 8002180:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 8002184:	6905      	ldr	r5, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 8002186:	6846      	ldr	r6, [r0, #4]
 8002188:	4c2d      	ldr	r4, [pc, #180]	; (8002240 <spi_stm32_init+0xc0>)
 800218a:	4620      	mov	r0, r4
 800218c:	f002 fa97 	bl	80046be <z_device_is_ready>
	int err;

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 8002190:	2800      	cmp	r0, #0
 8002192:	d052      	beq.n	800223a <spi_stm32_init+0xba>
 8002194:	68a3      	ldr	r3, [r4, #8]
 8002196:	4620      	mov	r0, r4
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68f1      	ldr	r1, [r6, #12]
 800219c:	4798      	blx	r3
		return -ENODEV;
	}

	err = clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
			       (clock_control_subsys_t) &cfg->pclken[0]);
	if (err < 0) {
 800219e:	2800      	cmp	r0, #0
 80021a0:	db48      	blt.n	8002234 <spi_stm32_init+0xb4>
	ret = pinctrl_lookup_state(config, id, &state);
 80021a2:	2100      	movs	r1, #0
 80021a4:	6870      	ldr	r0, [r6, #4]
 80021a6:	aa01      	add	r2, sp, #4
 80021a8:	f002 f8e0 	bl	800436c <pinctrl_lookup_state>
	if (ret < 0) {
 80021ac:	2800      	cmp	r0, #0
 80021ae:	db41      	blt.n	8002234 <spi_stm32_init+0xb4>
	return pinctrl_apply_state_direct(config, state);
 80021b0:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 80021b2:	2200      	movs	r2, #0
 80021b4:	7919      	ldrb	r1, [r3, #4]
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	f7ff fd0e 	bl	8001bd8 <pinctrl_configure_pins>
	}

	if (!spi_stm32_is_subghzspi(dev)) {
		/* Configure dt provided device signals when available */
		err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
		if (err < 0) {
 80021bc:	2800      	cmp	r0, #0
 80021be:	db39      	blt.n	8002234 <spi_stm32_init+0xb4>

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80021c0:	2601      	movs	r6, #1
 80021c2:	68ac      	ldr	r4, [r5, #8]
 80021c4:	3408      	adds	r4, #8
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 80021c6:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80021ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80021ce:	f1a4 0208 	sub.w	r2, r4, #8
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d804      	bhi.n	80021e0 <spi_stm32_init+0x60>
	err = spi_context_cs_configure_all(&data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&data->ctx);
 80021d6:	4628      	mov	r0, r5
 80021d8:	f002 fa47 	bl	800466a <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 80021dc:	2000      	movs	r0, #0

	return 0;
 80021de:	e029      	b.n	8002234 <spi_stm32_init+0xb4>
		if (!device_is_ready(cs_gpio->port)) {
 80021e0:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80021e4:	f002 fa6b 	bl	80046be <z_device_is_ready>
 80021e8:	b338      	cbz	r0, 800223a <spi_stm32_init+0xba>
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
 80021ea:	f854 0c08 	ldr.w	r0, [r4, #-8]
				  spec->pin,
 80021ee:	f814 1c04 	ldrb.w	r1, [r4, #-4]
				  spec->dt_flags | extra_flags);
 80021f2:	f834 3c02 	ldrh.w	r3, [r4, #-2]
	struct gpio_driver_data *data =
 80021f6:	f8d0 c010 	ldr.w	ip, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 80021fa:	07da      	lsls	r2, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80021fc:	f8dc 7000 	ldr.w	r7, [ip]
	return gpio_pin_configure(spec->port,
 8002200:	bf54      	ite	pl
 8002202:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8002206:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 800220a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800220e:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8002212:	07db      	lsls	r3, r3, #31
	const struct gpio_driver_api *api =
 8002214:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8002218:	bf4c      	ite	mi
 800221a:	ea4e 0707 	orrmi.w	r7, lr, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800221e:	ea27 070e 	bicpl.w	r7, r7, lr
 8002222:	f8cc 7000 	str.w	r7, [ip]
	return api->pin_configure(port, pin, flags);
 8002226:	f8d8 3000 	ldr.w	r3, [r8]
 800222a:	4798      	blx	r3
		if (ret < 0) {
 800222c:	2800      	cmp	r0, #0
 800222e:	f104 0408 	add.w	r4, r4, #8
 8002232:	dac8      	bge.n	80021c6 <spi_stm32_init+0x46>
}
 8002234:	b002      	add	sp, #8
 8002236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ENODEV;
 800223a:	f06f 0012 	mvn.w	r0, #18
	if (err < 0) {
 800223e:	e7f9      	b.n	8002234 <spi_stm32_init+0xb4>
 8002240:	080049c8 	.word	0x080049c8

08002244 <spi_stm32_transceive>:
{
 8002244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002248:	4699      	mov	r9, r3
	SPI_TypeDef *spi = cfg->spi;
 800224a:	6843      	ldr	r3, [r0, #4]
{
 800224c:	4606      	mov	r6, r0
 800224e:	4688      	mov	r8, r1
	if (!tx_bufs && !rx_bufs) {
 8002250:	4692      	mov	sl, r2
	struct spi_stm32_data *data = dev->data;
 8002252:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 8002254:	681d      	ldr	r5, [r3, #0]
{
 8002256:	b08d      	sub	sp, #52	; 0x34
	if (!tx_bufs && !rx_bufs) {
 8002258:	b912      	cbnz	r2, 8002260 <spi_stm32_transceive+0x1c>
 800225a:	f1b9 0f00 	cmp.w	r9, #0
 800225e:	d036      	beq.n	80022ce <spi_stm32_transceive+0x8a>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8002260:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002264:	049f      	lsls	r7, r3, #18
 8002266:	d436      	bmi.n	80022d6 <spi_stm32_transceive+0x92>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
 8002268:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800226c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002270:	f104 0010 	add.w	r0, r4, #16
 8002274:	f000 feb4 	bl	8002fe0 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 8002278:	f8c4 8004 	str.w	r8, [r4, #4]
	const uint32_t scaler[] = {
 800227c:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 800234c <spi_stm32_transceive+0x108>
 8002280:	af04      	add	r7, sp, #16
 8002282:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002286:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002288:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
	struct spi_stm32_data *data = dev->data;
 800228c:	f8d6 b010 	ldr.w	fp, [r6, #16]
	const uint32_t scaler[] = {
 8002290:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	if (spi_context_configured(&data->ctx, config)) {
 8002294:	f8db 3000 	ldr.w	r3, [fp]
	const struct spi_stm32_config *cfg = dev->config;
 8002298:	f8d6 c004 	ldr.w	ip, [r6, #4]
	if (spi_context_configured(&data->ctx, config)) {
 800229c:	4598      	cmp	r8, r3
 800229e:	f000 80a1 	beq.w	80023e4 <spi_stm32_transceive+0x1a0>
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 80022a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
	SPI_TypeDef *spi = cfg->spi;
 80022a6:	f8dc 7000 	ldr.w	r7, [ip]
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 80022aa:	f3c3 1245 	ubfx	r2, r3, #5, #6
 80022ae:	2a08      	cmp	r2, #8
 80022b0:	d018      	beq.n	80022e4 <spi_stm32_transceive+0xa0>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 80022b2:	2a10      	cmp	r2, #16
 80022b4:	d016      	beq.n	80022e4 <spi_stm32_transceive+0xa0>
		return -ENOTSUP;
 80022b6:	f06f 0985 	mvn.w	r9, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 80022c2:	d104      	bne.n	80022ce <spi_stm32_transceive+0x8a>
		ctx->owner = NULL;
 80022c4:	6063      	str	r3, [r4, #4]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 80022c6:	f104 0010 	add.w	r0, r4, #16
 80022ca:	f000 fe69 	bl	8002fa0 <z_impl_k_sem_give>
}
 80022ce:	4648      	mov	r0, r9
 80022d0:	b00d      	add	sp, #52	; 0x34
 80022d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 80022d6:	69a3      	ldr	r3, [r4, #24]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1c5      	bne.n	8002268 <spi_stm32_transceive+0x24>
		(k_sem_count_get(&ctx->lock) == 0) &&
 80022dc:	6863      	ldr	r3, [r4, #4]
 80022de:	4598      	cmp	r8, r3
 80022e0:	d1c2      	bne.n	8002268 <spi_stm32_transceive+0x24>
 80022e2:	e7cb      	b.n	800227c <spi_stm32_transceive+0x38>
	if ((config->operation & SPI_FRAME_FORMAT_TI) == SPI_FRAME_FORMAT_TI) {
 80022e4:	0418      	lsls	r0, r3, #16
 80022e6:	d4e6      	bmi.n	80022b6 <spi_stm32_transceive+0x72>
	const struct clock_control_driver_api *api =
 80022e8:	4819      	ldr	r0, [pc, #100]	; (8002350 <spi_stm32_transceive+0x10c>)
					   (clock_control_subsys_t) &cfg->pclken[0], &clock) < 0) {
 80022ea:	f8dc 100c 	ldr.w	r1, [ip, #12]
	if (api->get_rate == NULL) {
 80022ee:	6883      	ldr	r3, [r0, #8]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	b913      	cbnz	r3, 80022fa <spi_stm32_transceive+0xb6>
			return -EIO;
 80022f4:	f06f 0904 	mvn.w	r9, #4
 80022f8:	e7df      	b.n	80022ba <spi_stm32_transceive+0x76>
	return api->get_rate(dev, sys, rate);
 80022fa:	aa03      	add	r2, sp, #12
 80022fc:	4798      	blx	r3
		if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 80022fe:	2800      	cmp	r0, #0
 8002300:	dbf8      	blt.n	80022f4 <spi_stm32_transceive+0xb0>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8002302:	2301      	movs	r3, #1
		uint32_t clk = clock >> br;
 8002304:	9a03      	ldr	r2, [sp, #12]
		if (clk <= config->frequency) {
 8002306:	f8d8 1000 	ldr.w	r1, [r8]
		uint32_t clk = clock >> br;
 800230a:	fa22 f003 	lsr.w	r0, r2, r3
		if (clk <= config->frequency) {
 800230e:	4288      	cmp	r0, r1
 8002310:	d905      	bls.n	800231e <spi_stm32_transceive+0xda>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8002312:	3301      	adds	r3, #1
 8002314:	2b09      	cmp	r3, #9
 8002316:	d1f8      	bne.n	800230a <spi_stm32_transceive+0xc6>
		return -EINVAL;
 8002318:	f06f 0915 	mvn.w	r9, #21
 800231c:	e7cd      	b.n	80022ba <spi_stm32_transceive+0x76>
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800231e:	683a      	ldr	r2, [r7, #0]
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 8002320:	a90c      	add	r1, sp, #48	; 0x30
 8002322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002326:	603a      	str	r2, [r7, #0]
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800232e:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8002332:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8002336:	4313      	orrs	r3, r2
 8002338:	603b      	str	r3, [r7, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 800233a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800233e:	0799      	lsls	r1, r3, #30
 8002340:	d408      	bmi.n	8002354 <spi_stm32_transceive+0x110>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	f023 0302 	bic.w	r3, r3, #2
 8002348:	e007      	b.n	800235a <spi_stm32_transceive+0x116>
 800234a:	bf00      	nop
 800234c:	08004d40 	.word	0x08004d40
 8002350:	080049c8 	.word	0x080049c8
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	f043 0302 	orr.w	r3, r3, #2
 800235a:	603b      	str	r3, [r7, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 800235c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002360:	f013 0f04 	tst.w	r3, #4
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	bf14      	ite	ne
 8002368:	f043 0301 	orrne.w	r3, r3, #1
 800236c:	f023 0301 	biceq.w	r3, r3, #1
 8002370:	603b      	str	r3, [r7, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f423 4344 	bic.w	r3, r3, #50176	; 0xc400
 8002378:	603b      	str	r3, [r7, #0]
	if (config->operation & SPI_TRANSFER_LSB) {
 800237a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800237e:	f013 0f10 	tst.w	r3, #16
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	bf14      	ite	ne
 8002386:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
 800238a:	f023 0380 	biceq.w	r3, r3, #128	; 0x80
 800238e:	603b      	str	r3, [r7, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002396:	603b      	str	r3, [r7, #0]
	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 8002398:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 80d5 	beq.w	800254c <spi_stm32_transceive+0x308>
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023a8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f023 0304 	bic.w	r3, r3, #4
 80023b0:	607b      	str	r3, [r7, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 80023b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80023b6:	f013 0f01 	tst.w	r3, #1
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	bf14      	ite	ne
 80023be:	f423 7382 	bicne.w	r3, r3, #260	; 0x104
 80023c2:	f443 7382 	orreq.w	r3, r3, #260	; 0x104
 80023c6:	603b      	str	r3, [r7, #0]
	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 80023c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80023cc:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80023d0:	2b08      	cmp	r3, #8
  MODIFY_REG(SPIx->CR1, SPI_CR1_DFF, DataWidth);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	bf0c      	ite	eq
 80023d6:	f423 6300 	biceq.w	r3, r3, #2048	; 0x800
 80023da:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 80023de:	603b      	str	r3, [r7, #0]
	data->ctx.config = config;
 80023e0:	f8cb 8000 	str.w	r8, [fp]
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 80023e4:	f1ba 0f00 	cmp.w	sl, #0
 80023e8:	f040 80c0 	bne.w	800256c <spi_stm32_transceive+0x328>
 80023ec:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	63a3      	str	r3, [r4, #56]	; 0x38
	ctx->tx_buf = (const uint8_t *)
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 80023f4:	f104 0738 	add.w	r7, r4, #56	; 0x38
 80023f8:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80023fc:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8002400:	9301      	str	r3, [sp, #4]
 8002402:	4642      	mov	r2, r8
 8002404:	2301      	movs	r3, #1
 8002406:	4639      	mov	r1, r7
 8002408:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800240c:	f002 f8e1 	bl	80045d2 <spi_context_get_next_buf>
	ctx->tx_buf = (const uint8_t *)
 8002410:	6460      	str	r0, [r4, #68]	; 0x44
					 &ctx->tx_len, dfs);

	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8002412:	f1b9 0f00 	cmp.w	r9, #0
 8002416:	f040 80b2 	bne.w	800257e <spi_stm32_transceive+0x33a>
 800241a:	f8c4 903c 	str.w	r9, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 800241e:	2300      	movs	r3, #0
	ctx->rx_buf = (uint8_t *)
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 8002420:	f104 093c 	add.w	r9, r4, #60	; 0x3c
 8002424:	f104 0a40 	add.w	sl, r4, #64	; 0x40
 8002428:	f104 0b50 	add.w	fp, r4, #80	; 0x50
 800242c:	465a      	mov	r2, fp
 800242e:	4651      	mov	r1, sl
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8002430:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 8002432:	4648      	mov	r0, r9
 8002434:	2301      	movs	r3, #1
 8002436:	f002 f8cc 	bl	80045d2 <spi_context_get_next_buf>
					 &ctx->rx_len, dfs);

	ctx->sync_status = 0;
 800243a:	2200      	movs	r2, #0
	ctx->rx_buf = (uint8_t *)
 800243c:	64e0      	str	r0, [r4, #76]	; 0x4c
	ctx->sync_status = 0;
 800243e:	6322      	str	r2, [r4, #48]	; 0x30
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002440:	682b      	ldr	r3, [r5, #0]
	_spi_context_cs_control(ctx, on, false);
 8002442:	2101      	movs	r1, #1
 8002444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002448:	602b      	str	r3, [r5, #0]
 800244a:	6930      	ldr	r0, [r6, #16]
 800244c:	f002 f8eb 	bl	8004626 <_spi_context_cs_control>
	uint16_t operation = data->ctx.config->operation;
 8002450:	6823      	ldr	r3, [r4, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 8002454:	07da      	lsls	r2, r3, #31
 8002456:	f100 80d2 	bmi.w	80025fe <spi_stm32_transceive+0x3ba>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800245a:	68aa      	ldr	r2, [r5, #8]
 800245c:	0790      	lsls	r0, r2, #30
 800245e:	d5fc      	bpl.n	800245a <spi_stm32_transceive+0x216>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8002460:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8002464:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8002466:	6c62      	ldr	r2, [r4, #68]	; 0x44
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8002468:	f040 809a 	bne.w	80025a0 <spi_stm32_transceive+0x35c>
}

static ALWAYS_INLINE
bool spi_context_tx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->tx_buf && ctx->tx_len);
 800246c:	2a00      	cmp	r2, #0
 800246e:	f000 808f 	beq.w	8002590 <spi_stm32_transceive+0x34c>
 8002472:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002474:	b103      	cbz	r3, 8002478 <spi_stm32_transceive+0x234>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8002476:	7813      	ldrb	r3, [r2, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 8002478:	b2db      	uxtb	r3, r3
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 800247a:	732b      	strb	r3, [r5, #12]
	if (!ctx->tx_len) {
 800247c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800247e:	b18b      	cbz	r3, 80024a4 <spi_stm32_transceive+0x260>
	ctx->tx_len -= len;
 8002480:	3b01      	subs	r3, #1
 8002482:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
 8002484:	2b00      	cmp	r3, #0
 8002486:	f040 8085 	bne.w	8002594 <spi_stm32_transceive+0x350>
		++ctx->current_tx;
 800248a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800248c:	3308      	adds	r3, #8
 800248e:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
 8002490:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002492:	3b01      	subs	r3, #1
 8002494:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
 8002496:	2301      	movs	r3, #1
 8002498:	4642      	mov	r2, r8
 800249a:	4639      	mov	r1, r7
 800249c:	9801      	ldr	r0, [sp, #4]
 800249e:	f002 f898 	bl	80045d2 <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 80024a2:	6460      	str	r0, [r4, #68]	; 0x44
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80024a4:	68ab      	ldr	r3, [r5, #8]
 80024a6:	07d9      	lsls	r1, r3, #31
 80024a8:	d5fc      	bpl.n	80024a4 <spi_stm32_transceive+0x260>
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 80024aa:	e9d4 3113 	ldrd	r3, r1, [r4, #76]	; 0x4c
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80024ae:	6822      	ldr	r2, [r4, #0]
 80024b0:	6852      	ldr	r2, [r2, #4]
 80024b2:	f3c2 1245 	ubfx	r2, r2, #5, #6
 80024b6:	2a08      	cmp	r2, #8
 80024b8:	f040 808e 	bne.w	80025d8 <spi_stm32_transceive+0x394>
  return (*((__IO uint8_t *)&SPIx->DR));
 80024bc:	7b2a      	ldrb	r2, [r5, #12]
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	b10b      	cbz	r3, 80024c6 <spi_stm32_transceive+0x282>
 80024c2:	b101      	cbz	r1, 80024c6 <spi_stm32_transceive+0x282>
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 80024c4:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 80024c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80024c8:	b18b      	cbz	r3, 80024ee <spi_stm32_transceive+0x2aa>
	ctx->rx_len -= len;
 80024ca:	3b01      	subs	r3, #1
 80024cc:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 80e8 	bne.w	80026a4 <spi_stm32_transceive+0x460>
		++ctx->current_rx;
 80024d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024d6:	3308      	adds	r3, #8
 80024d8:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
 80024da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024dc:	3b01      	subs	r3, #1
 80024de:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
 80024e0:	2301      	movs	r3, #1
 80024e2:	465a      	mov	r2, fp
 80024e4:	4651      	mov	r1, sl
 80024e6:	4648      	mov	r0, r9
 80024e8:	f002 f873 	bl	80045d2 <spi_context_get_next_buf>
		ctx->rx_buf = (uint8_t *)
 80024ec:	64e0      	str	r0, [r4, #76]	; 0x4c
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 80024ee:	68ab      	ldr	r3, [r5, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 80024f0:	f013 0f70 	tst.w	r3, #112	; 0x70
 80024f4:	f000 80e5 	beq.w	80026c2 <spi_stm32_transceive+0x47e>
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 80024f8:	68ab      	ldr	r3, [r5, #8]
 80024fa:	0659      	lsls	r1, r3, #25
 80024fc:	d505      	bpl.n	800250a <spi_stm32_transceive+0x2c6>
  tmpreg = SPIx->DR;
 80024fe:	68eb      	ldr	r3, [r5, #12]
 8002500:	9303      	str	r3, [sp, #12]
  (void) tmpreg;
 8002502:	9b03      	ldr	r3, [sp, #12]
  tmpreg = SPIx->SR;
 8002504:	68ab      	ldr	r3, [r5, #8]
 8002506:	9303      	str	r3, [sp, #12]
  (void) tmpreg;
 8002508:	9b03      	ldr	r3, [sp, #12]
		return -EIO;
 800250a:	f06f 0904 	mvn.w	r9, #4
	_spi_context_cs_control(ctx, on, false);
 800250e:	2200      	movs	r2, #0
	SPI_TypeDef *spi = cfg->spi;
 8002510:	6873      	ldr	r3, [r6, #4]
 8002512:	4611      	mov	r1, r2
 8002514:	681d      	ldr	r5, [r3, #0]
 8002516:	6930      	ldr	r0, [r6, #16]
 8002518:	f002 f885 	bl	8004626 <_spi_context_cs_control>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 800251c:	682b      	ldr	r3, [r5, #0]
 800251e:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 8002522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002526:	d102      	bne.n	800252e <spi_stm32_transceive+0x2ea>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8002528:	68ab      	ldr	r3, [r5, #8]
 800252a:	061a      	lsls	r2, r3, #24
 800252c:	d4fc      	bmi.n	8002528 <spi_stm32_transceive+0x2e4>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 800252e:	68ab      	ldr	r3, [r5, #8]
 8002530:	069b      	lsls	r3, r3, #26
 8002532:	d506      	bpl.n	8002542 <spi_stm32_transceive+0x2fe>
  tmpreg_sr = SPIx->SR;
 8002534:	68ab      	ldr	r3, [r5, #8]
 8002536:	9304      	str	r3, [sp, #16]
  (void) tmpreg_sr;
 8002538:	9b04      	ldr	r3, [sp, #16]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800253a:	682b      	ldr	r3, [r5, #0]
 800253c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002540:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002542:	682b      	ldr	r3, [r5, #0]
 8002544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002548:	602b      	str	r3, [r5, #0]
}
 800254a:	e6b6      	b.n	80022ba <spi_stm32_transceive+0x76>
		if (config->operation & SPI_OP_MODE_SLAVE) {
 800254c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002550:	f013 0f01 	tst.w	r3, #1
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800255a:	f47f af25 	bne.w	80023a8 <spi_stm32_transceive+0x164>
 800255e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002562:	603b      	str	r3, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f043 0304 	orr.w	r3, r3, #4
 800256a:	e721      	b.n	80023b0 <spi_stm32_transceive+0x16c>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 800256c:	f8da 3000 	ldr.w	r3, [sl]
 8002570:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8002572:	2b00      	cmp	r3, #0
 8002574:	f43f af3c 	beq.w	80023f0 <spi_stm32_transceive+0x1ac>
 8002578:	f8da 3004 	ldr.w	r3, [sl, #4]
 800257c:	e739      	b.n	80023f2 <spi_stm32_transceive+0x1ae>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 800257e:	f8d9 3000 	ldr.w	r3, [r9]
 8002582:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8002584:	2b00      	cmp	r3, #0
 8002586:	f43f af4a 	beq.w	800241e <spi_stm32_transceive+0x1da>
 800258a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800258e:	e747      	b.n	8002420 <spi_stm32_transceive+0x1dc>
	uint16_t tx_frame = SPI_STM32_TX_NOP;
 8002590:	4613      	mov	r3, r2
 8002592:	e771      	b.n	8002478 <spi_stm32_transceive+0x234>
	} else if (ctx->tx_buf) {
 8002594:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002596:	2b00      	cmp	r3, #0
 8002598:	d084      	beq.n	80024a4 <spi_stm32_transceive+0x260>
		ctx->tx_buf += dfs * len;
 800259a:	3301      	adds	r3, #1
 800259c:	6463      	str	r3, [r4, #68]	; 0x44
 800259e:	e781      	b.n	80024a4 <spi_stm32_transceive+0x260>
	return !!(ctx->tx_buf && ctx->tx_len);
 80025a0:	b192      	cbz	r2, 80025c8 <spi_stm32_transceive+0x384>
 80025a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80025a4:	b103      	cbz	r3, 80025a8 <spi_stm32_transceive+0x364>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 80025a6:	8813      	ldrh	r3, [r2, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 80025a8:	81ab      	strh	r3, [r5, #12]
	if (!ctx->tx_len) {
 80025aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f43f af79 	beq.w	80024a4 <spi_stm32_transceive+0x260>
	ctx->tx_len -= len;
 80025b2:	3b01      	subs	r3, #1
 80025b4:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
 80025b6:	b94b      	cbnz	r3, 80025cc <spi_stm32_transceive+0x388>
		++ctx->current_tx;
 80025b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80025ba:	3308      	adds	r3, #8
 80025bc:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
 80025be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025c0:	3b01      	subs	r3, #1
 80025c2:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
 80025c4:	2302      	movs	r3, #2
 80025c6:	e767      	b.n	8002498 <spi_stm32_transceive+0x254>
	uint16_t tx_frame = SPI_STM32_TX_NOP;
 80025c8:	4613      	mov	r3, r2
 80025ca:	e7ed      	b.n	80025a8 <spi_stm32_transceive+0x364>
	} else if (ctx->tx_buf) {
 80025cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f43f af68 	beq.w	80024a4 <spi_stm32_transceive+0x260>
		ctx->tx_buf += dfs * len;
 80025d4:	3302      	adds	r3, #2
 80025d6:	e7e1      	b.n	800259c <spi_stm32_transceive+0x358>
  return (uint16_t)(READ_REG(SPIx->DR));
 80025d8:	68ea      	ldr	r2, [r5, #12]
	return !!(ctx->rx_buf && ctx->rx_len);
 80025da:	b10b      	cbz	r3, 80025e0 <spi_stm32_transceive+0x39c>
 80025dc:	b101      	cbz	r1, 80025e0 <spi_stm32_transceive+0x39c>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 80025de:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 80025e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d083      	beq.n	80024ee <spi_stm32_transceive+0x2aa>
	ctx->rx_len -= len;
 80025e6:	3b01      	subs	r3, #1
 80025e8:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d163      	bne.n	80026b6 <spi_stm32_transceive+0x472>
		++ctx->current_rx;
 80025ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025f0:	3308      	adds	r3, #8
 80025f2:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
 80025f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025f6:	3b01      	subs	r3, #1
 80025f8:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
 80025fa:	2302      	movs	r3, #2
 80025fc:	e771      	b.n	80024e2 <spi_stm32_transceive+0x29e>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80025fe:	68aa      	ldr	r2, [r5, #8]
 8002600:	0792      	lsls	r2, r2, #30
 8002602:	d54a      	bpl.n	800269a <spi_stm32_transceive+0x456>
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 8002604:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002606:	2a00      	cmp	r2, #0
 8002608:	d047      	beq.n	800269a <spi_stm32_transceive+0x456>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800260a:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800260e:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8002610:	6c62      	ldr	r2, [r4, #68]	; 0x44
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8002612:	d12d      	bne.n	8002670 <spi_stm32_transceive+0x42c>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8002614:	7813      	ldrb	r3, [r2, #0]
  *spidr = TxData;
 8002616:	732b      	strb	r3, [r5, #12]
	if (!ctx->tx_len) {
 8002618:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800261a:	b17b      	cbz	r3, 800263c <spi_stm32_transceive+0x3f8>
	ctx->tx_len -= len;
 800261c:	3b01      	subs	r3, #1
 800261e:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
 8002620:	bb03      	cbnz	r3, 8002664 <spi_stm32_transceive+0x420>
		++ctx->current_tx;
 8002622:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002624:	3308      	adds	r3, #8
 8002626:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
 8002628:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800262a:	3b01      	subs	r3, #1
 800262c:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
 800262e:	2301      	movs	r3, #1
 8002630:	4642      	mov	r2, r8
 8002632:	4639      	mov	r1, r7
 8002634:	9801      	ldr	r0, [sp, #4]
 8002636:	f001 ffcc 	bl	80045d2 <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 800263a:	6460      	str	r0, [r4, #68]	; 0x44
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800263c:	68ab      	ldr	r3, [r5, #8]
 800263e:	07d8      	lsls	r0, r3, #31
 8002640:	f57f af55 	bpl.w	80024ee <spi_stm32_transceive+0x2aa>
	return !!(ctx->rx_buf && ctx->rx_len);
 8002644:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002646:	2b00      	cmp	r3, #0
 8002648:	f43f af51 	beq.w	80024ee <spi_stm32_transceive+0x2aa>
 800264c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800264e:	2a00      	cmp	r2, #0
 8002650:	f43f af4d 	beq.w	80024ee <spi_stm32_transceive+0x2aa>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8002654:	6822      	ldr	r2, [r4, #0]
 8002656:	6852      	ldr	r2, [r2, #4]
 8002658:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800265c:	2a08      	cmp	r2, #8
 800265e:	d128      	bne.n	80026b2 <spi_stm32_transceive+0x46e>
  return (*((__IO uint8_t *)&SPIx->DR));
 8002660:	7b2a      	ldrb	r2, [r5, #12]
 8002662:	e72f      	b.n	80024c4 <spi_stm32_transceive+0x280>
	} else if (ctx->tx_buf) {
 8002664:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0e8      	beq.n	800263c <spi_stm32_transceive+0x3f8>
		ctx->tx_buf += dfs * len;
 800266a:	3301      	adds	r3, #1
 800266c:	6463      	str	r3, [r4, #68]	; 0x44
 800266e:	e7e5      	b.n	800263c <spi_stm32_transceive+0x3f8>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 8002670:	8813      	ldrh	r3, [r2, #0]
  *spidr = TxData;
 8002672:	81ab      	strh	r3, [r5, #12]
	if (!ctx->tx_len) {
 8002674:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0e0      	beq.n	800263c <spi_stm32_transceive+0x3f8>
	ctx->tx_len -= len;
 800267a:	3b01      	subs	r3, #1
 800267c:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
 800267e:	b93b      	cbnz	r3, 8002690 <spi_stm32_transceive+0x44c>
		++ctx->current_tx;
 8002680:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002682:	3308      	adds	r3, #8
 8002684:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
 8002686:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002688:	3b01      	subs	r3, #1
 800268a:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
 800268c:	2302      	movs	r3, #2
 800268e:	e7cf      	b.n	8002630 <spi_stm32_transceive+0x3ec>
	} else if (ctx->tx_buf) {
 8002690:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0d2      	beq.n	800263c <spi_stm32_transceive+0x3f8>
		ctx->tx_buf += dfs * len;
 8002696:	3302      	adds	r3, #2
 8002698:	e7e8      	b.n	800266c <spi_stm32_transceive+0x428>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800269a:	686b      	ldr	r3, [r5, #4]
 800269c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026a0:	606b      	str	r3, [r5, #4]
#if DT_HAS_COMPAT_STATUS_OKAY(st_stm32h7_spi)
	LL_SPI_DisableIT_TXP(spi);
#else
	LL_SPI_DisableIT_TXE(spi);
#endif /* st_stm32h7_spi */
}
 80026a2:	e7cb      	b.n	800263c <spi_stm32_transceive+0x3f8>
	} else if (ctx->rx_buf) {
 80026a4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f43f af21 	beq.w	80024ee <spi_stm32_transceive+0x2aa>
		ctx->rx_buf += dfs * len;
 80026ac:	3301      	adds	r3, #1
 80026ae:	64e3      	str	r3, [r4, #76]	; 0x4c
 80026b0:	e71d      	b.n	80024ee <spi_stm32_transceive+0x2aa>
  return (uint16_t)(READ_REG(SPIx->DR));
 80026b2:	68ea      	ldr	r2, [r5, #12]
 80026b4:	e793      	b.n	80025de <spi_stm32_transceive+0x39a>
	} else if (ctx->rx_buf) {
 80026b6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f43f af18 	beq.w	80024ee <spi_stm32_transceive+0x2aa>
		ctx->rx_buf += dfs * len;
 80026be:	3302      	adds	r3, #2
 80026c0:	e7f5      	b.n	80026ae <spi_stm32_transceive+0x46a>
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 80026c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f47f aec3 	bne.w	8002450 <spi_stm32_transceive+0x20c>
 80026ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f47f aebf 	bne.w	8002450 <spi_stm32_transceive+0x20c>
		ret = spi_stm32_shift_frames(spi, data);
 80026d2:	4699      	mov	r9, r3
 80026d4:	e71b      	b.n	800250e <spi_stm32_transceive+0x2ca>
 80026d6:	bf00      	nop

080026d8 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 80026d8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 80026dc:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 80026de:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 80026e0:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 80026e2:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 80026e4:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <elapsed+0x34>)
 80026ea:	4909      	ldr	r1, [pc, #36]	; (8002710 <elapsed+0x38>)
 80026ec:	d101      	bne.n	80026f2 <elapsed+0x1a>
	    || (val1 < val2)) {
 80026ee:	4282      	cmp	r2, r0
 80026f0:	d206      	bcs.n	8002700 <elapsed+0x28>
		overflow_cyc += last_load;
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	680c      	ldr	r4, [r1, #0]
 80026f6:	4422      	add	r2, r4
 80026f8:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 80026fa:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80026fe:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	680a      	ldr	r2, [r1, #0]
 8002704:	4413      	add	r3, r2
}
 8002706:	1a18      	subs	r0, r3, r0
 8002708:	bd10      	pop	{r4, pc}
 800270a:	bf00      	nop
 800270c:	20000388 	.word	0x20000388
 8002710:	20000394 	.word	0x20000394

08002714 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002714:	2210      	movs	r2, #16
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <sys_clock_driver_init+0x28>)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
 8002718:	2000      	movs	r0, #0
 800271a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	last_load = CYC_PER_TICK - 1;
 800271e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002722:	4b07      	ldr	r3, [pc, #28]	; (8002740 <sys_clock_driver_init+0x2c>)
 8002724:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8002726:	4b07      	ldr	r3, [pc, #28]	; (8002744 <sys_clock_driver_init+0x30>)
 8002728:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 800272a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800272e:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8002730:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	f042 0207 	orr.w	r2, r2, #7
 8002738:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 800273a:	4770      	bx	lr
 800273c:	e000ed00 	.word	0xe000ed00
 8002740:	20000394 	.word	0x20000394
 8002744:	20000388 	.word	0x20000388

08002748 <sys_clock_isr>:
{
 8002748:	b508      	push	{r3, lr}
	elapsed();
 800274a:	f7ff ffc5 	bl	80026d8 <elapsed>
	cycle_count += overflow_cyc;
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <sys_clock_isr+0x38>)
 8002750:	4a0c      	ldr	r2, [pc, #48]	; (8002784 <sys_clock_isr+0x3c>)
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	6811      	ldr	r1, [r2, #0]
 8002756:	4408      	add	r0, r1
 8002758:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 800275a:	2200      	movs	r2, #0
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 800275c:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
	overflow_cyc = 0;
 8002760:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8002762:	4a09      	ldr	r2, [pc, #36]	; (8002788 <sys_clock_isr+0x40>)
 8002764:	6813      	ldr	r3, [r2, #0]
 8002766:	1ac0      	subs	r0, r0, r3
 8002768:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 800276c:	fb01 3300 	mla	r3, r1, r0, r3
 8002770:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8002772:	f000 ffb1 	bl	80036d8 <sys_clock_announce>
}
 8002776:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 800277a:	f7fe bb81 	b.w	8000e80 <z_arm_exc_exit>
 800277e:	bf00      	nop
 8002780:	20000388 	.word	0x20000388
 8002784:	20000390 	.word	0x20000390
 8002788:	2000038c 	.word	0x2000038c

0800278c <sys_clock_set_timeout>:
{
 800278c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002790:	4e31      	ldr	r6, [pc, #196]	; (8002858 <sys_clock_set_timeout+0xcc>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8002792:	2900      	cmp	r1, #0
 8002794:	d054      	beq.n	8002840 <sys_clock_set_timeout+0xb4>
 8002796:	1c42      	adds	r2, r0, #1
 8002798:	d10a      	bne.n	80027b0 <sys_clock_set_timeout+0x24>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 800279a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800279e:	6913      	ldr	r3, [r2, #16]
 80027a0:	f023 0301 	bic.w	r3, r3, #1
 80027a4:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 80027a6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80027aa:	6033      	str	r3, [r6, #0]
}
 80027ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t last_load_ = last_load;
 80027b0:	6835      	ldr	r5, [r6, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 80027b2:	2801      	cmp	r0, #1
 80027b4:	dd4a      	ble.n	800284c <sys_clock_set_timeout+0xc0>
 80027b6:	f640 1819 	movw	r8, #2329	; 0x919
 80027ba:	4540      	cmp	r0, r8
 80027bc:	dc01      	bgt.n	80027c2 <sys_clock_set_timeout+0x36>
 80027be:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	__asm__ volatile(
 80027c2:	f04f 0310 	mov.w	r3, #16
 80027c6:	f3ef 8411 	mrs	r4, BASEPRI
 80027ca:	f383 8812 	msr	BASEPRI_MAX, r3
 80027ce:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 80027d2:	f7ff ff81 	bl	80026d8 <elapsed>
	val1 = SysTick->VAL;
 80027d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 80027da:	2100      	movs	r1, #0
	cycle_count += pending;
 80027dc:	4f1f      	ldr	r7, [pc, #124]	; (800285c <sys_clock_set_timeout+0xd0>)
	val1 = SysTick->VAL;
 80027de:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	18c2      	adds	r2, r0, r3
	overflow_cyc = 0U;
 80027e6:	4b1e      	ldr	r3, [pc, #120]	; (8002860 <sys_clock_set_timeout+0xd4>)
 80027e8:	6019      	str	r1, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 80027ea:	4b1e      	ldr	r3, [pc, #120]	; (8002864 <sys_clock_set_timeout+0xd8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 80027ee:	1ad1      	subs	r1, r2, r3
 80027f0:	d42f      	bmi.n	8002852 <sys_clock_set_timeout+0xc6>
		delay = ticks * CYC_PER_TICK;
 80027f2:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
		delay += unannounced;
 80027f6:	fb00 1108 	mla	r1, r0, r8, r1
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 80027fa:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 80027fe:	311f      	adds	r1, #31
 8002800:	fbb1 f1f0 	udiv	r1, r1, r0
		delay -= unannounced;
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	fb00 3301 	mla	r3, r0, r1, r3
		delay = MAX(delay, MIN_DELAY);
 800280a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800280e:	d920      	bls.n	8002852 <sys_clock_set_timeout+0xc6>
		if (delay > MAX_CYCLES) {
 8002810:	4915      	ldr	r1, [pc, #84]	; (8002868 <sys_clock_set_timeout+0xdc>)
 8002812:	428b      	cmp	r3, r1
 8002814:	bf28      	it	cs
 8002816:	460b      	movcs	r3, r1
	val2 = SysTick->VAL;
 8002818:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		last_load = MIN_DELAY;
 800281c:	6033      	str	r3, [r6, #0]
	SysTick->LOAD = last_load - 1;
 800281e:	3b01      	subs	r3, #1
	val2 = SysTick->VAL;
 8002820:	6988      	ldr	r0, [r1, #24]
	SysTick->LOAD = last_load - 1;
 8002822:	614b      	str	r3, [r1, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8002824:	2300      	movs	r3, #0
	if (val1 < val2) {
 8002826:	4584      	cmp	ip, r0
	SysTick->VAL = 0; /* resets timer to last_load */
 8002828:	618b      	str	r3, [r1, #24]
	if (val1 < val2) {
 800282a:	ebac 0300 	sub.w	r3, ip, r0
		cycle_count += (val1 + (last_load_ - val2));
 800282e:	bf38      	it	cc
 8002830:	195b      	addcc	r3, r3, r5
		cycle_count += (val1 - val2);
 8002832:	441a      	add	r2, r3
 8002834:	603a      	str	r2, [r7, #0]
	__asm__ volatile(
 8002836:	f384 8811 	msr	BASEPRI, r4
 800283a:	f3bf 8f6f 	isb	sy
 800283e:	e7b5      	b.n	80027ac <sys_clock_set_timeout+0x20>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8002840:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 8002842:	6835      	ldr	r5, [r6, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8002844:	d1b5      	bne.n	80027b2 <sys_clock_set_timeout+0x26>
 8002846:	f640 1019 	movw	r0, #2329	; 0x919
 800284a:	e7b8      	b.n	80027be <sys_clock_set_timeout+0x32>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800284c:	f04f 0800 	mov.w	r8, #0
 8002850:	e7b7      	b.n	80027c2 <sys_clock_set_timeout+0x36>
 8002852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002856:	e7df      	b.n	8002818 <sys_clock_set_timeout+0x8c>
 8002858:	20000394 	.word	0x20000394
 800285c:	20000390 	.word	0x20000390
 8002860:	20000388 	.word	0x20000388
 8002864:	2000038c 	.word	0x2000038c
 8002868:	00ffdf20 	.word	0x00ffdf20

0800286c <sys_clock_elapsed>:
{
 800286c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800286e:	f04f 0310 	mov.w	r3, #16
 8002872:	f3ef 8411 	mrs	r4, BASEPRI
 8002876:	f383 8812 	msr	BASEPRI_MAX, r3
 800287a:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 800287e:	f7ff ff2b 	bl	80026d8 <elapsed>
 8002882:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <sys_clock_elapsed+0x34>)
 8002884:	4a07      	ldr	r2, [pc, #28]	; (80028a4 <sys_clock_elapsed+0x38>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	1a9b      	subs	r3, r3, r2
 800288c:	4403      	add	r3, r0
	__asm__ volatile(
 800288e:	f384 8811 	msr	BASEPRI, r4
 8002892:	f3bf 8f6f 	isb	sy
}
 8002896:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
 800289a:	fbb3 f0f0 	udiv	r0, r3, r0
 800289e:	bd10      	pop	{r4, pc}
 80028a0:	20000390 	.word	0x20000390
 80028a4:	2000038c 	.word	0x2000038c

080028a8 <sys_clock_cycle_get_32>:
{
 80028a8:	b510      	push	{r4, lr}
	__asm__ volatile(
 80028aa:	f04f 0310 	mov.w	r3, #16
 80028ae:	f3ef 8411 	mrs	r4, BASEPRI
 80028b2:	f383 8812 	msr	BASEPRI_MAX, r3
 80028b6:	f3bf 8f6f 	isb	sy
	uint32_t ret = elapsed() + cycle_count;
 80028ba:	f7ff ff0d 	bl	80026d8 <elapsed>
 80028be:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <sys_clock_cycle_get_32+0x28>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4418      	add	r0, r3
	__asm__ volatile(
 80028c4:	f384 8811 	msr	BASEPRI, r4
 80028c8:	f3bf 8f6f 	isb	sy
}
 80028cc:	bd10      	pop	{r4, pc}
 80028ce:	bf00      	nop
 80028d0:	20000390 	.word	0x20000390

080028d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d4:	b530      	push	{r4, r5, lr}
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028d6:	4b18      	ldr	r3, [pc, #96]	; (8002938 <HAL_RCC_GetSysClockFreq+0x64>)
{
 80028d8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028da:	ac02      	add	r4, sp, #8
 80028dc:	f103 0510 	add.w	r5, r3, #16
 80028e0:	4622      	mov	r2, r4
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	6859      	ldr	r1, [r3, #4]
 80028e6:	3308      	adds	r3, #8
 80028e8:	c203      	stmia	r2!, {r0, r1}
 80028ea:	42ab      	cmp	r3, r5
 80028ec:	4614      	mov	r4, r2
 80028ee:	d1f7      	bne.n	80028e0 <HAL_RCC_GetSysClockFreq+0xc>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028f0:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t sysclockfreq = 0U;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028f4:	4911      	ldr	r1, [pc, #68]	; (800293c <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028f6:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80028fa:	684b      	ldr	r3, [r1, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028fc:	f003 020c 	and.w	r2, r3, #12
 8002900:	2a08      	cmp	r2, #8
 8002902:	d117      	bne.n	8002934 <HAL_RCC_GetSysClockFreq+0x60>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002904:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002908:	3218      	adds	r2, #24
 800290a:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800290c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800290e:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002912:	d50c      	bpl.n	800292e <HAL_RCC_GetSysClockFreq+0x5a>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002914:	684b      	ldr	r3, [r1, #4]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002916:	4a0a      	ldr	r2, [pc, #40]	; (8002940 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002918:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800291c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800291e:	3318      	adds	r3, #24
 8002920:	446b      	add	r3, sp
 8002922:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002926:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800292a:	b007      	add	sp, #28
 800292c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800292e:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_RCC_GetSysClockFreq+0x70>)
 8002930:	4358      	muls	r0, r3
 8002932:	e7fa      	b.n	800292a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8002934:	4802      	ldr	r0, [pc, #8]	; (8002940 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8002936:	e7f8      	b.n	800292a <HAL_RCC_GetSysClockFreq+0x56>
 8002938:	0800520b 	.word	0x0800520b
 800293c:	40021000 	.word	0x40021000
 8002940:	007a1200 	.word	0x007a1200
 8002944:	003d0900 	.word	0x003d0900

08002948 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002948:	4a16      	ldr	r2, [pc, #88]	; (80029a4 <LL_TIM_Init+0x5c>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800294a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800294c:	4290      	cmp	r0, r2
 800294e:	d00a      	beq.n	8002966 <LL_TIM_Init+0x1e>
 8002950:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002954:	d007      	beq.n	8002966 <LL_TIM_Init+0x1e>
 8002956:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800295a:	4290      	cmp	r0, r2
 800295c:	d003      	beq.n	8002966 <LL_TIM_Init+0x1e>
 800295e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002962:	4290      	cmp	r0, r2
 8002964:	d117      	bne.n	8002996 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002966:	684a      	ldr	r2, [r1, #4]
 8002968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800296e:	68ca      	ldr	r2, [r1, #12]
 8002970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002974:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002976:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002978:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 800297a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800297c:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800297e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002980:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <LL_TIM_Init+0x5c>)
 8002982:	4298      	cmp	r0, r3
 8002984:	d101      	bne.n	800298a <LL_TIM_Init+0x42>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002986:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002988:	6303      	str	r3, [r0, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800298a:	6943      	ldr	r3, [r0, #20]
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8002992:	2000      	movs	r0, #0
 8002994:	4770      	bx	lr
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002996:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002998:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 800299a:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800299c:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800299e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029a0:	e7f3      	b.n	800298a <LL_TIM_Init+0x42>
 80029a2:	bf00      	nop
 80029a4:	40012c00 	.word	0x40012c00

080029a8 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 80029a8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 80029ac:	b530      	push	{r4, r5, lr}
  switch (Channel)
 80029ae:	f000 808f 	beq.w	8002ad0 <LL_TIM_OC_Init+0x128>
 80029b2:	d805      	bhi.n	80029c0 <LL_TIM_OC_Init+0x18>
 80029b4:	2901      	cmp	r1, #1
 80029b6:	d029      	beq.n	8002a0c <LL_TIM_OC_Init+0x64>
 80029b8:	2910      	cmp	r1, #16
 80029ba:	d057      	beq.n	8002a6c <LL_TIM_OC_Init+0xc4>
 80029bc:	2001      	movs	r0, #1
    default:
      break;
  }

  return result;
}
 80029be:	bd30      	pop	{r4, r5, pc}
  switch (Channel)
 80029c0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80029c4:	d1fa      	bne.n	80029bc <LL_TIM_OC_Init+0x14>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80029c6:	6a03      	ldr	r3, [r0, #32]
 80029c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029cc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80029ce:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80029d0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80029d2:	69c1      	ldr	r1, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80029d4:	6815      	ldr	r5, [r2, #0]
 80029d6:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 80029da:	ea41 2105 	orr.w	r1, r1, r5, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80029de:	6915      	ldr	r5, [r2, #16]
 80029e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029e4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80029e8:	6855      	ldr	r5, [r2, #4]
 80029ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029ee:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029f2:	4d50      	ldr	r5, [pc, #320]	; (8002b34 <LL_TIM_OC_Init+0x18c>)
 80029f4:	42a8      	cmp	r0, r5
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80029f6:	bf02      	ittt	eq
 80029f8:	6995      	ldreq	r5, [r2, #24]
 80029fa:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
 80029fe:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002a02:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002a04:	61c1      	str	r1, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002a06:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002a08:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002a0a:	e02c      	b.n	8002a66 <LL_TIM_OC_Init+0xbe>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002a0c:	6a03      	ldr	r3, [r0, #32]
 8002a0e:	f023 0301 	bic.w	r3, r3, #1
 8002a12:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002a14:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002a16:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002a18:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002a1a:	6815      	ldr	r5, [r2, #0]
 8002a1c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8002a20:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002a22:	6915      	ldr	r5, [r2, #16]
 8002a24:	f023 0302 	bic.w	r3, r3, #2
 8002a28:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002a2a:	6855      	ldr	r5, [r2, #4]
 8002a2c:	f023 0301 	bic.w	r3, r3, #1
 8002a30:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a32:	4d40      	ldr	r5, [pc, #256]	; (8002b34 <LL_TIM_OC_Init+0x18c>)
 8002a34:	42a8      	cmp	r0, r5
 8002a36:	d112      	bne.n	8002a5e <LL_TIM_OC_Init+0xb6>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002a38:	6955      	ldr	r5, [r2, #20]
 8002a3a:	f023 0308 	bic.w	r3, r3, #8
 8002a3e:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002a42:	6895      	ldr	r5, [r2, #8]
 8002a44:	f023 0304 	bic.w	r3, r3, #4
 8002a48:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002a4c:	6995      	ldr	r5, [r2, #24]
 8002a4e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002a52:	4329      	orrs	r1, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002a54:	69d5      	ldr	r5, [r2, #28]
 8002a56:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8002a5a:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002a5e:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002a60:	6184      	str	r4, [r0, #24]
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002a62:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002a64:	6342      	str	r2, [r0, #52]	; 0x34
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002a66:	6203      	str	r3, [r0, #32]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002a68:	2000      	movs	r0, #0
 8002a6a:	e7a8      	b.n	80029be <LL_TIM_OC_Init+0x16>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002a6c:	6a03      	ldr	r3, [r0, #32]
 8002a6e:	f023 0310 	bic.w	r3, r3, #16
 8002a72:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002a74:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002a76:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002a78:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002a7a:	6815      	ldr	r5, [r2, #0]
 8002a7c:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8002a80:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002a84:	6915      	ldr	r5, [r2, #16]
 8002a86:	f023 0320 	bic.w	r3, r3, #32
 8002a8a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002a8e:	6855      	ldr	r5, [r2, #4]
 8002a90:	f023 0310 	bic.w	r3, r3, #16
 8002a94:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a98:	4d26      	ldr	r5, [pc, #152]	; (8002b34 <LL_TIM_OC_Init+0x18c>)
 8002a9a:	42a8      	cmp	r0, r5
 8002a9c:	d113      	bne.n	8002ac6 <LL_TIM_OC_Init+0x11e>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002a9e:	6955      	ldr	r5, [r2, #20]
 8002aa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aa4:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002aa8:	6895      	ldr	r5, [r2, #8]
 8002aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aae:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002ab2:	6995      	ldr	r5, [r2, #24]
 8002ab4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002ab8:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002abc:	69d5      	ldr	r5, [r2, #28]
 8002abe:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8002ac2:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002ac6:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002ac8:	6184      	str	r4, [r0, #24]
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002aca:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002acc:	6382      	str	r2, [r0, #56]	; 0x38
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002ace:	e7ca      	b.n	8002a66 <LL_TIM_OC_Init+0xbe>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002ad0:	6a03      	ldr	r3, [r0, #32]
 8002ad2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ad6:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002ad8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002ada:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002adc:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002ade:	6815      	ldr	r5, [r2, #0]
 8002ae0:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8002ae4:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002ae6:	6915      	ldr	r5, [r2, #16]
 8002ae8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002aec:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002af0:	6855      	ldr	r5, [r2, #4]
 8002af2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002af6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002afa:	4d0e      	ldr	r5, [pc, #56]	; (8002b34 <LL_TIM_OC_Init+0x18c>)
 8002afc:	42a8      	cmp	r0, r5
 8002afe:	d113      	bne.n	8002b28 <LL_TIM_OC_Init+0x180>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002b00:	6955      	ldr	r5, [r2, #20]
 8002b02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b06:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002b0a:	6895      	ldr	r5, [r2, #8]
 8002b0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b10:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002b14:	6995      	ldr	r5, [r2, #24]
 8002b16:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8002b1a:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002b1e:	69d5      	ldr	r5, [r2, #28]
 8002b20:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8002b24:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002b28:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002b2a:	61c4      	str	r4, [r0, #28]
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002b2c:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002b2e:	63c2      	str	r2, [r0, #60]	; 0x3c
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002b30:	e799      	b.n	8002a66 <LL_TIM_OC_Init+0xbe>
 8002b32:	bf00      	nop
 8002b34:	40012c00 	.word	0x40012c00

08002b38 <LL_SetFlashLatency>:
  uint32_t getlatency;
  uint32_t latency = LL_FLASH_LATENCY_0; /* default value 0WS */
  ErrorStatus status = SUCCESS;

  /* Frequency cannot be equal to 0 */
  if (Frequency == 0U)
 8002b38:	b1d8      	cbz	r0, 8002b72 <LL_SetFlashLatency+0x3a>
  {
    status = ERROR;
  }
  else
  {
    if (Frequency > UTILS_LATENCY2_FREQ)
 8002b3a:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <LL_SetFlashLatency+0x40>)
 8002b3c:	4298      	cmp	r0, r3
 8002b3e:	d816      	bhi.n	8002b6e <LL_SetFlashLatency+0x36>
      /* 48 < SYSCLK <= 72 => 2WS (3 CPU cycles) */
      latency = LL_FLASH_LATENCY_2;
    }
    else
    {
      if (Frequency > UTILS_LATENCY1_FREQ)
 8002b40:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <LL_SetFlashLatency+0x44>)
 8002b42:	4298      	cmp	r0, r3
 8002b44:	bf94      	ite	ls
 8002b46:	2000      	movls	r0, #0
 8002b48:	2001      	movhi	r0, #1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002b4a:	4a0d      	ldr	r2, [pc, #52]	; (8002b80 <LL_SetFlashLatency+0x48>)
 8002b4c:	6813      	ldr	r3, [r2, #0]
 8002b4e:	f023 0307 	bic.w	r3, r3, #7
 8002b52:	4303      	orrs	r3, r0
 8002b54:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002b56:	6813      	ldr	r3, [r2, #0]
 8002b58:	f003 0307 	and.w	r3, r3, #7
      {
        /* Wait for Flash latency to be updated */
        getlatency = LL_FLASH_GetLatency();
        timeout--;
      }
      while ((getlatency != latency) && (timeout > 0));
 8002b5c:	4298      	cmp	r0, r3
 8002b5e:	bf1c      	itt	ne
 8002b60:	6813      	ldrne	r3, [r2, #0]
 8002b62:	f003 0307 	andne.w	r3, r3, #7

      if (getlatency != latency)
 8002b66:	1ac0      	subs	r0, r0, r3
 8002b68:	bf18      	it	ne
 8002b6a:	2001      	movne	r0, #1
 8002b6c:	4770      	bx	lr
      latency = LL_FLASH_LATENCY_2;
 8002b6e:	2002      	movs	r0, #2
 8002b70:	e7eb      	b.n	8002b4a <LL_SetFlashLatency+0x12>
    status = ERROR;
 8002b72:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	02dc6c00 	.word	0x02dc6c00
 8002b7c:	016e3600 	.word	0x016e3600
 8002b80:	40022000 	.word	0x40022000

08002b84 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8002b84:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <z_sys_init_run_level+0x40>)
{
 8002b86:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8002b88:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8002b8c:	3001      	adds	r0, #1
 8002b8e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8002b92:	42a6      	cmp	r6, r4
 8002b94:	d800      	bhi.n	8002b98 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 8002b96:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 8002b98:	e9d4 3500 	ldrd	r3, r5, [r4]
 8002b9c:	4628      	mov	r0, r5
 8002b9e:	4798      	blx	r3
		if (dev != NULL) {
 8002ba0:	b16d      	cbz	r5, 8002bbe <z_sys_init_run_level+0x3a>
			if (rc != 0) {
 8002ba2:	b138      	cbz	r0, 8002bb4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 8002ba4:	2800      	cmp	r0, #0
 8002ba6:	bfb8      	it	lt
 8002ba8:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
 8002baa:	28ff      	cmp	r0, #255	; 0xff
 8002bac:	bfa8      	it	ge
 8002bae:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
 8002bb0:	68eb      	ldr	r3, [r5, #12]
 8002bb2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8002bb4:	68ea      	ldr	r2, [r5, #12]
 8002bb6:	7853      	ldrb	r3, [r2, #1]
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8002bbe:	3408      	adds	r4, #8
 8002bc0:	e7e7      	b.n	8002b92 <z_sys_init_run_level+0xe>
 8002bc2:	bf00      	nop
 8002bc4:	08005054 	.word	0x08005054

08002bc8 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 8002bc8:	2201      	movs	r2, #1
{
 8002bca:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 8002bcc:	4b09      	ldr	r3, [pc, #36]	; (8002bf4 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 8002bce:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
 8002bd0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 8002bd2:	f7ff ffd7 	bl	8002b84 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 8002bd6:	f000 fe03 	bl	80037e0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
 8002bda:	2004      	movs	r0, #4
 8002bdc:	f7ff ffd2 	bl	8002b84 <z_sys_init_run_level>

	z_init_static_threads();
 8002be0:	f000 f8dc 	bl	8002d9c <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
 8002be4:	f7fd fc76 	bl	80004d4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8002be8:	4a03      	ldr	r2, [pc, #12]	; (8002bf8 <bg_thread_main+0x30>)
 8002bea:	7b13      	ldrb	r3, [r2, #12]
 8002bec:	f023 0301 	bic.w	r3, r3, #1
 8002bf0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8002bf2:	bd08      	pop	{r3, pc}
 8002bf4:	200003cc 	.word	0x200003cc
 8002bf8:	20000130 	.word	0x20000130

08002bfc <z_bss_zero>:
{
 8002bfc:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 8002bfe:	4803      	ldr	r0, [pc, #12]	; (8002c0c <z_bss_zero+0x10>)
 8002c00:	4a03      	ldr	r2, [pc, #12]	; (8002c10 <z_bss_zero+0x14>)
 8002c02:	2100      	movs	r1, #0
 8002c04:	1a12      	subs	r2, r2, r0
 8002c06:	f001 fd8c 	bl	8004722 <z_early_memset>
}
 8002c0a:	bd08      	pop	{r3, pc}
 8002c0c:	200000c0 	.word	0x200000c0
 8002c10:	200003d0 	.word	0x200003d0

08002c14 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
 8002c14:	2370      	movs	r3, #112	; 0x70
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 8002c16:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
 8002c18:	4e13      	ldr	r6, [pc, #76]	; (8002c68 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
 8002c1a:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
 8002c1c:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
 8002c20:	2300      	movs	r3, #0
{
 8002c22:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 8002c24:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002c28:	220f      	movs	r2, #15
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8002c30:	2318      	movs	r3, #24
 8002c32:	4d0e      	ldr	r5, [pc, #56]	; (8002c6c <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
 8002c34:	490e      	ldr	r1, [pc, #56]	; (8002c70 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8002c36:	fb03 5500 	mla	r5, r3, r0, r5
{
 8002c3a:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 8002c3c:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8002c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c44:	4630      	mov	r0, r6
 8002c46:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <z_init_cpu+0x60>)
 8002c48:	9500      	str	r5, [sp, #0]
 8002c4a:	f000 f87d 	bl	8002d48 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8002c4e:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
 8002c50:	752c      	strb	r4, [r5, #20]
 8002c52:	f023 0304 	bic.w	r3, r3, #4
 8002c56:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8002c58:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <z_init_cpu+0x64>)
 8002c5a:	3401      	adds	r4, #1
 8002c5c:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 8002c60:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
 8002c62:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
 8002c64:	b006      	add	sp, #24
 8002c66:	bd70      	pop	{r4, r5, r6, pc}
 8002c68:	200000c0 	.word	0x200000c0
 8002c6c:	20000398 	.word	0x20000398
 8002c70:	20000bd0 	.word	0x20000bd0
 8002c74:	0800472b 	.word	0x0800472b
 8002c78:	200003d0 	.word	0x200003d0

08002c7c <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
 8002c7c:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 8002c7e:	2000      	movs	r0, #0
{
 8002c80:	b0a2      	sub	sp, #136	; 0x88
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 8002c82:	f7ff ff7f 	bl	8002b84 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8002c86:	4b29      	ldr	r3, [pc, #164]	; (8002d2c <z_cstart+0xb0>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8002c88:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8002c8c:	4c28      	ldr	r4, [pc, #160]	; (8002d30 <z_cstart+0xb4>)
 8002c8e:	2500      	movs	r5, #0
 8002c90:	6963      	ldr	r3, [r4, #20]

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
 8002c92:	4e28      	ldr	r6, [pc, #160]	; (8002d34 <z_cstart+0xb8>)
 8002c94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c98:	6163      	str	r3, [r4, #20]
 8002c9a:	23f0      	movs	r3, #240	; 0xf0
 8002c9c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8002ca0:	77e5      	strb	r5, [r4, #31]
 8002ca2:	7625      	strb	r5, [r4, #24]
 8002ca4:	7665      	strb	r5, [r4, #25]
 8002ca6:	76a5      	strb	r5, [r4, #26]
 8002ca8:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8002cac:	6a63      	ldr	r3, [r4, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002cae:	4f22      	ldr	r7, [pc, #136]	; (8002d38 <z_cstart+0xbc>)
 8002cb0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002cb4:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8002cb6:	f7fe fa05 	bl	80010c4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8002cba:	f7fd fffd 	bl	8000cb8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8002cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cc2:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8002cc4:	62e3      	str	r3, [r4, #44]	; 0x2c
	dummy_thread->base.user_options = K_ESSENTIAL;
 8002cc6:	f240 1301 	movw	r3, #257	; 0x101
 8002cca:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 8002cce:	ab06      	add	r3, sp, #24
 8002cd0:	60b3      	str	r3, [r6, #8]
	dummy_thread->resource_pool = NULL;
 8002cd2:	951f      	str	r5, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8002cd4:	f001 fcf2 	bl	80046bc <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
 8002cd8:	2001      	movs	r0, #1
 8002cda:	f7ff ff53 	bl	8002b84 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 8002cde:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
 8002ce0:	4c16      	ldr	r4, [pc, #88]	; (8002d3c <z_cstart+0xc0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 8002ce2:	f7ff ff4f 	bl	8002b84 <z_sys_init_run_level>
	z_sched_init();
 8002ce6:	f000 fb9f 	bl	8003428 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <z_cstart+0xc4>)
	_kernel.ready_q.cache = &z_main_thread;
 8002cec:	61b4      	str	r4, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002cee:	9305      	str	r3, [sp, #20]
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	4914      	ldr	r1, [pc, #80]	; (8002d44 <z_cstart+0xc8>)
 8002cf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cf8:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	463b      	mov	r3, r7
 8002d00:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8002d04:	9500      	str	r5, [sp, #0]
 8002d06:	f000 f81f 	bl	8002d48 <z_setup_new_thread>
 8002d0a:	4606      	mov	r6, r0
 8002d0c:	7b62      	ldrb	r2, [r4, #13]
	z_ready_thread(&z_main_thread);
 8002d0e:	4620      	mov	r0, r4
 8002d10:	f022 0204 	bic.w	r2, r2, #4
 8002d14:	7362      	strb	r2, [r4, #13]
 8002d16:	f001 fd8b 	bl	8004830 <z_ready_thread>
	z_init_cpu(0);
 8002d1a:	4628      	mov	r0, r5
 8002d1c:	f7ff ff7a 	bl	8002c14 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8002d20:	463a      	mov	r2, r7
 8002d22:	4631      	mov	r1, r6
 8002d24:	4620      	mov	r0, r4
 8002d26:	f7fe f885 	bl	8000e34 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8002d2a:	bf00      	nop
 8002d2c:	20000bd0 	.word	0x20000bd0
 8002d30:	e000ed00 	.word	0xe000ed00
 8002d34:	20000398 	.word	0x20000398
 8002d38:	08002bc9 	.word	0x08002bc9
 8002d3c:	20000130 	.word	0x20000130
 8002d40:	0800521c 	.word	0x0800521c
 8002d44:	20000cd0 	.word	0x20000cd0

08002d48 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8002d48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 8002d4a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8002d4c:	f100 0558 	add.w	r5, r0, #88	; 0x58
 8002d50:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 8002d52:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 8002d54:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
 8002d58:	2500      	movs	r5, #0
{
 8002d5a:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
 8002d5c:	7346      	strb	r6, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002d5e:	3207      	adds	r2, #7

	thread_base->prio = priority;
 8002d60:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002d62:	f022 0207 	bic.w	r2, r2, #7
	thread_base->prio = priority;
 8002d66:	7386      	strb	r6, [r0, #14]
	stack_ptr = (char *)stack + stack_obj_size;
 8002d68:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002d6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 8002d6c:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->pended_on = NULL;
 8002d70:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 8002d72:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002d74:	9202      	str	r2, [sp, #8]
 8002d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d78:	9201      	str	r2, [sp, #4]
 8002d7a:	9a08      	ldr	r2, [sp, #32]
 8002d7c:	9200      	str	r2, [sp, #0]
 8002d7e:	4632      	mov	r2, r6
 8002d80:	f7fe f83c 	bl	8000dfc <arch_new_thread>
	if (!_current) {
 8002d84:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
 8002d86:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	b103      	cbz	r3, 8002d8e <z_setup_new_thread+0x46>
	new_thread->resource_pool = _current->resource_pool;
 8002d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 8002d8e:	4630      	mov	r0, r6
 8002d90:	6663      	str	r3, [r4, #100]	; 0x64
 8002d92:	b004      	add	sp, #16
 8002d94:	bd70      	pop	{r4, r5, r6, pc}
 8002d96:	bf00      	nop
 8002d98:	20000398 	.word	0x20000398

08002d9c <z_init_static_threads>:
{
 8002d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d9e:	4c22      	ldr	r4, [pc, #136]	; (8002e28 <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 8002da0:	4d22      	ldr	r5, [pc, #136]	; (8002e2c <z_init_static_threads+0x90>)
{
 8002da2:	b087      	sub	sp, #28
 8002da4:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 8002da6:	42ae      	cmp	r6, r5
 8002da8:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8002dac:	d30b      	bcc.n	8002dc6 <z_init_static_threads+0x2a>
	k_sched_lock();
 8002dae:	f000 fb0b 	bl	80033c8 <k_sched_lock>
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8002db2:	260a      	movs	r6, #10
	_FOREACH_STATIC_THREAD(thread_data) {
 8002db4:	4c1c      	ldr	r4, [pc, #112]	; (8002e28 <z_init_static_threads+0x8c>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8002db6:	4f1e      	ldr	r7, [pc, #120]	; (8002e30 <z_init_static_threads+0x94>)
 8002db8:	42ac      	cmp	r4, r5
 8002dba:	d320      	bcc.n	8002dfe <z_init_static_threads+0x62>
}
 8002dbc:	b007      	add	sp, #28
 8002dbe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8002dc2:	f000 bb15 	b.w	80033f0 <k_sched_unlock>
		z_setup_new_thread(
 8002dc6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002dca:	9305      	str	r3, [sp, #20]
 8002dcc:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8002dd0:	9304      	str	r3, [sp, #16]
 8002dd2:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8002dd6:	9303      	str	r3, [sp, #12]
 8002dd8:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8002ddc:	9302      	str	r3, [sp, #8]
 8002dde:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8002de2:	9301      	str	r3, [sp, #4]
 8002de4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
 8002dee:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
 8002df2:	f7ff ffa9 	bl	8002d48 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8002df6:	f854 3c2c 	ldr.w	r3, [r4, #-44]
 8002dfa:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 8002dfc:	e7d2      	b.n	8002da4 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8002dfe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e00:	1c53      	adds	r3, r2, #1
 8002e02:	d009      	beq.n	8002e18 <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 8002e04:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002e08:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002e0c:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 8002e10:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002e12:	d103      	bne.n	8002e1c <z_init_static_threads+0x80>
	z_sched_start(thread);
 8002e14:	f000 faba 	bl	800338c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8002e18:	342c      	adds	r4, #44	; 0x2c
 8002e1a:	e7cd      	b.n	8002db8 <z_init_static_threads+0x1c>
 8002e1c:	4639      	mov	r1, r7
 8002e1e:	3018      	adds	r0, #24
 8002e20:	f000 fbdc 	bl	80035dc <z_add_timeout>
 8002e24:	e7f8      	b.n	8002e18 <z_init_static_threads+0x7c>
 8002e26:	bf00      	nop
 8002e28:	08004c70 	.word	0x08004c70
 8002e2c:	08004c70 	.word	0x08004c70
 8002e30:	0800479d 	.word	0x0800479d

08002e34 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 8002e34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002e38:	4604      	mov	r4, r0
 8002e3a:	4617      	mov	r7, r2
 8002e3c:	461e      	mov	r6, r3
	__asm__ volatile(
 8002e3e:	f04f 0310 	mov.w	r3, #16
 8002e42:	f3ef 8811 	mrs	r8, BASEPRI
 8002e46:	f383 8812 	msr	BASEPRI_MAX, r3
 8002e4a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8002e4e:	68c3      	ldr	r3, [r0, #12]
 8002e50:	4a33      	ldr	r2, [pc, #204]	; (8002f20 <z_impl_k_mutex_lock+0xec>)
 8002e52:	b17b      	cbz	r3, 8002e74 <z_impl_k_mutex_lock+0x40>
 8002e54:	6880      	ldr	r0, [r0, #8]
 8002e56:	6891      	ldr	r1, [r2, #8]
 8002e58:	4288      	cmp	r0, r1
 8002e5a:	d019      	beq.n	8002e90 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 8002e5c:	ea57 0306 	orrs.w	r3, r7, r6
 8002e60:	d118      	bne.n	8002e94 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
 8002e62:	f388 8811 	msr	BASEPRI, r8
 8002e66:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
 8002e6a:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 8002e6e:	b002      	add	sp, #8
 8002e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
 8002e74:	6891      	ldr	r1, [r2, #8]
 8002e76:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
 8002e7e:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 8002e80:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
 8002e82:	60a3      	str	r3, [r4, #8]
 8002e84:	f388 8811 	msr	BASEPRI, r8
 8002e88:	f3bf 8f6f 	isb	sy
		return 0;
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	e7ee      	b.n	8002e6e <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
 8002e90:	6921      	ldr	r1, [r4, #16]
 8002e92:	e7f2      	b.n	8002e7a <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 8002e94:	f991 100e 	ldrsb.w	r1, [r1, #14]
 8002e98:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 8002e9c:	f06f 027e 	mvn.w	r2, #126	; 0x7e
 8002ea0:	4299      	cmp	r1, r3
 8002ea2:	bfa8      	it	ge
 8002ea4:	4619      	movge	r1, r3
 8002ea6:	4291      	cmp	r1, r2
 8002ea8:	bfb8      	it	lt
 8002eaa:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 8002eac:	428b      	cmp	r3, r1
 8002eae:	dd2e      	ble.n	8002f0e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
 8002eb0:	f001 fc47 	bl	8004742 <adjust_owner_prio.isra.0>
 8002eb4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 8002eb6:	4622      	mov	r2, r4
 8002eb8:	4641      	mov	r1, r8
 8002eba:	e9cd 7600 	strd	r7, r6, [sp]
 8002ebe:	4819      	ldr	r0, [pc, #100]	; (8002f24 <z_impl_k_mutex_lock+0xf0>)
 8002ec0:	f000 f9ee 	bl	80032a0 <z_pend_curr>
	if (got_mutex == 0) {
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	d0e1      	beq.n	8002e8c <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
 8002ec8:	f04f 0310 	mov.w	r3, #16
 8002ecc:	f3ef 8611 	mrs	r6, BASEPRI
 8002ed0:	f383 8812 	msr	BASEPRI_MAX, r3
 8002ed4:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
 8002ed8:	68a0      	ldr	r0, [r4, #8]
 8002eda:	b1d0      	cbz	r0, 8002f12 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8002edc:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 8002ede:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002ee0:	429c      	cmp	r4, r3
 8002ee2:	d00a      	beq.n	8002efa <z_impl_k_mutex_lock+0xc6>
 8002ee4:	b14b      	cbz	r3, 8002efa <z_impl_k_mutex_lock+0xc6>
 8002ee6:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8002eea:	4299      	cmp	r1, r3
 8002eec:	bfa8      	it	ge
 8002eee:	4619      	movge	r1, r3
 8002ef0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8002ef4:	4299      	cmp	r1, r3
 8002ef6:	bfb8      	it	lt
 8002ef8:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
 8002efa:	f001 fc22 	bl	8004742 <adjust_owner_prio.isra.0>
 8002efe:	b140      	cbz	r0, 8002f12 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
 8002f00:	4631      	mov	r1, r6
 8002f02:	4808      	ldr	r0, [pc, #32]	; (8002f24 <z_impl_k_mutex_lock+0xf0>)
 8002f04:	f000 fa30 	bl	8003368 <z_reschedule>
	return -EAGAIN;
 8002f08:	f06f 000a 	mvn.w	r0, #10
 8002f0c:	e7af      	b.n	8002e6e <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
 8002f0e:	2500      	movs	r5, #0
 8002f10:	e7d1      	b.n	8002eb6 <z_impl_k_mutex_lock+0x82>
	if (resched) {
 8002f12:	2d00      	cmp	r5, #0
 8002f14:	d1f4      	bne.n	8002f00 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
 8002f16:	f386 8811 	msr	BASEPRI, r6
 8002f1a:	f3bf 8f6f 	isb	sy
 8002f1e:	e7f3      	b.n	8002f08 <z_impl_k_mutex_lock+0xd4>
 8002f20:	20000398 	.word	0x20000398
 8002f24:	200003cd 	.word	0x200003cd

08002f28 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 8002f28:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 8002f2a:	6883      	ldr	r3, [r0, #8]
{
 8002f2c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
 8002f2e:	b36b      	cbz	r3, 8002f8c <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 8002f30:	4a19      	ldr	r2, [pc, #100]	; (8002f98 <z_impl_k_mutex_unlock+0x70>)
 8002f32:	6892      	ldr	r2, [r2, #8]
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d12c      	bne.n	8002f92 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 8002f38:	68c3      	ldr	r3, [r0, #12]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d903      	bls.n	8002f46 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
 8002f42:	2000      	movs	r0, #0
}
 8002f44:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 8002f46:	f04f 0310 	mov.w	r3, #16
 8002f4a:	f3ef 8511 	mrs	r5, BASEPRI
 8002f4e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002f52:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 8002f56:	6901      	ldr	r1, [r0, #16]
 8002f58:	6880      	ldr	r0, [r0, #8]
 8002f5a:	f001 fbf2 	bl	8004742 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 8002f5e:	4620      	mov	r0, r4
 8002f60:	f001 fc76 	bl	8004850 <z_unpend_first_thread>
	mutex->owner = new_owner;
 8002f64:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 8002f66:	b158      	cbz	r0, 8002f80 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
 8002f68:	f990 200e 	ldrsb.w	r2, [r0, #14]
 8002f6c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8002f6e:	2200      	movs	r2, #0
 8002f70:	66c2      	str	r2, [r0, #108]	; 0x6c
		z_ready_thread(new_owner);
 8002f72:	f001 fc5d 	bl	8004830 <z_ready_thread>
		z_reschedule(&lock, key);
 8002f76:	4629      	mov	r1, r5
 8002f78:	4808      	ldr	r0, [pc, #32]	; (8002f9c <z_impl_k_mutex_unlock+0x74>)
 8002f7a:	f000 f9f5 	bl	8003368 <z_reschedule>
 8002f7e:	e7e0      	b.n	8002f42 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
 8002f80:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 8002f82:	f385 8811 	msr	BASEPRI, r5
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	e7da      	b.n	8002f42 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
 8002f8c:	f06f 0015 	mvn.w	r0, #21
 8002f90:	e7d8      	b.n	8002f44 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
 8002f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f96:	e7d5      	b.n	8002f44 <z_impl_k_mutex_unlock+0x1c>
 8002f98:	20000398 	.word	0x20000398
 8002f9c:	200003cd 	.word	0x200003cd

08002fa0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8002fa0:	b538      	push	{r3, r4, r5, lr}
 8002fa2:	4604      	mov	r4, r0
	__asm__ volatile(
 8002fa4:	f04f 0310 	mov.w	r3, #16
 8002fa8:	f3ef 8511 	mrs	r5, BASEPRI
 8002fac:	f383 8812 	msr	BASEPRI_MAX, r3
 8002fb0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 8002fb4:	f001 fc4c 	bl	8004850 <z_unpend_first_thread>

	if (thread != NULL) {
 8002fb8:	b148      	cbz	r0, 8002fce <z_impl_k_sem_give+0x2e>
 8002fba:	2200      	movs	r2, #0
 8002fbc:	66c2      	str	r2, [r0, #108]	; 0x6c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 8002fbe:	f001 fc37 	bl	8004830 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 8002fc2:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 8002fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 8002fc8:	4804      	ldr	r0, [pc, #16]	; (8002fdc <z_impl_k_sem_give+0x3c>)
 8002fca:	f000 b9cd 	b.w	8003368 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8002fce:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	bf18      	it	ne
 8002fd6:	3301      	addne	r3, #1
 8002fd8:	60a3      	str	r3, [r4, #8]
}
 8002fda:	e7f2      	b.n	8002fc2 <z_impl_k_sem_give+0x22>
 8002fdc:	200003cd 	.word	0x200003cd

08002fe0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 8002fe0:	b513      	push	{r0, r1, r4, lr}
 8002fe2:	f04f 0410 	mov.w	r4, #16
 8002fe6:	f3ef 8111 	mrs	r1, BASEPRI
 8002fea:	f384 8812 	msr	BASEPRI_MAX, r4
 8002fee:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 8002ff2:	6884      	ldr	r4, [r0, #8]
 8002ff4:	b144      	cbz	r4, 8003008 <z_impl_k_sem_take+0x28>
		sem->count--;
 8002ff6:	3c01      	subs	r4, #1
 8002ff8:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 8002ffa:	f381 8811 	msr	BASEPRI, r1
 8002ffe:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 8003002:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 8003004:	b002      	add	sp, #8
 8003006:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8003008:	ea52 0403 	orrs.w	r4, r2, r3
 800300c:	d106      	bne.n	800301c <z_impl_k_sem_take+0x3c>
 800300e:	f381 8811 	msr	BASEPRI, r1
 8003012:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 8003016:	f06f 000f 	mvn.w	r0, #15
 800301a:	e7f3      	b.n	8003004 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 800301c:	e9cd 2300 	strd	r2, r3, [sp]
 8003020:	4602      	mov	r2, r0
 8003022:	4802      	ldr	r0, [pc, #8]	; (800302c <z_impl_k_sem_take+0x4c>)
 8003024:	f000 f93c 	bl	80032a0 <z_pend_curr>
	return ret;
 8003028:	e7ec      	b.n	8003004 <z_impl_k_sem_take+0x24>
 800302a:	bf00      	nop
 800302c:	200003cd 	.word	0x200003cd

08003030 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
 8003030:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
 8003032:	4d07      	ldr	r5, [pc, #28]	; (8003050 <z_reset_time_slice+0x20>)
 8003034:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
 8003036:	b154      	cbz	r4, 800304e <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
 8003038:	f7ff fc18 	bl	800286c <sys_clock_elapsed>
 800303c:	4b05      	ldr	r3, [pc, #20]	; (8003054 <z_reset_time_slice+0x24>)
 800303e:	4404      	add	r4, r0
 8003040:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
 8003042:	6828      	ldr	r0, [r5, #0]
 8003044:	2100      	movs	r1, #0
	}
}
 8003046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
 800304a:	f001 bc49 	b.w	80048e0 <z_set_timeout_expiry>
}
 800304e:	bd38      	pop	{r3, r4, r5, pc}
 8003050:	200003c4 	.word	0x200003c4
 8003054:	20000398 	.word	0x20000398

08003058 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
 8003058:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
 800305a:	4d0d      	ldr	r5, [pc, #52]	; (8003090 <update_cache+0x38>)
 800305c:	462b      	mov	r3, r5
 800305e:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003062:	429c      	cmp	r4, r3
 8003064:	d000      	beq.n	8003068 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8003066:	b904      	cbnz	r4, 800306a <update_cache+0x12>
 8003068:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 800306a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 800306c:	b938      	cbnz	r0, 800307e <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
 800306e:	7b5a      	ldrb	r2, [r3, #13]
 8003070:	06d2      	lsls	r2, r2, #27
 8003072:	d104      	bne.n	800307e <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8003074:	69a2      	ldr	r2, [r4, #24]
 8003076:	b912      	cbnz	r2, 800307e <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
 8003078:	89da      	ldrh	r2, [r3, #14]
 800307a:	2a7f      	cmp	r2, #127	; 0x7f
 800307c:	d805      	bhi.n	800308a <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
 800307e:	429c      	cmp	r4, r3
 8003080:	d002      	beq.n	8003088 <update_cache+0x30>
			z_reset_time_slice(thread);
 8003082:	4620      	mov	r0, r4
 8003084:	f7ff ffd4 	bl	8003030 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
 8003088:	4623      	mov	r3, r4
 800308a:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
 800308c:	bd38      	pop	{r3, r4, r5, pc}
 800308e:	bf00      	nop
 8003090:	20000398 	.word	0x20000398

08003094 <move_thread_to_end_of_prio_q>:
{
 8003094:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 8003096:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 800309a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 800309c:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
 800309e:	7b43      	ldrb	r3, [r0, #13]
 80030a0:	da04      	bge.n	80030ac <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80030a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030a6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 80030a8:	f001 fb66 	bl	8004778 <sys_dlist_remove>
	return list->head == list;
 80030ac:	4a15      	ldr	r2, [pc, #84]	; (8003104 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
 80030ae:	7b4b      	ldrb	r3, [r1, #13]
 80030b0:	4610      	mov	r0, r2
 80030b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030b6:	734b      	strb	r3, [r1, #13]
 80030b8:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 80030bc:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80030be:	4283      	cmp	r3, r0
 80030c0:	bf08      	it	eq
 80030c2:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80030c4:	b923      	cbnz	r3, 80030d0 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
 80030c6:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
 80030ca:	6021      	str	r1, [r4, #0]
	list->tail = node;
 80030cc:	6211      	str	r1, [r2, #32]
}
 80030ce:	e00c      	b.n	80030ea <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
 80030d0:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 80030d4:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 80030d8:	42b5      	cmp	r5, r6
 80030da:	d00e      	beq.n	80030fa <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80030dc:	42ae      	cmp	r6, r5
 80030de:	dd0c      	ble.n	80030fa <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 80030e0:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 80030e2:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 80030e6:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 80030e8:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 80030ea:	6890      	ldr	r0, [r2, #8]
}
 80030ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 80030f0:	1a43      	subs	r3, r0, r1
 80030f2:	4258      	negs	r0, r3
 80030f4:	4158      	adcs	r0, r3
 80030f6:	f7ff bfaf 	b.w	8003058 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80030fa:	429c      	cmp	r4, r3
 80030fc:	d0e3      	beq.n	80030c6 <move_thread_to_end_of_prio_q+0x32>
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	e7e0      	b.n	80030c4 <move_thread_to_end_of_prio_q+0x30>
 8003102:	bf00      	nop
 8003104:	20000398 	.word	0x20000398

08003108 <ready_thread>:
{
 8003108:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 800310a:	f990 300d 	ldrsb.w	r3, [r0, #13]
 800310e:	7b42      	ldrb	r2, [r0, #13]
 8003110:	2b00      	cmp	r3, #0
 8003112:	db29      	blt.n	8003168 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8003114:	06d3      	lsls	r3, r2, #27
 8003116:	d127      	bne.n	8003168 <ready_thread+0x60>
	return node->next != NULL;
 8003118:	6983      	ldr	r3, [r0, #24]
 800311a:	bb2b      	cbnz	r3, 8003168 <ready_thread+0x60>
	return list->head == list;
 800311c:	4913      	ldr	r1, [pc, #76]	; (800316c <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
 800311e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003122:	7342      	strb	r2, [r0, #13]
 8003124:	460a      	mov	r2, r1
 8003126:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800312a:	4294      	cmp	r4, r2
 800312c:	bf18      	it	ne
 800312e:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
 8003130:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003132:	b923      	cbnz	r3, 800313e <ready_thread+0x36>
	node->prev = tail;
 8003134:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
 8003138:	6020      	str	r0, [r4, #0]
	list->tail = node;
 800313a:	6208      	str	r0, [r1, #32]
}
 800313c:	e00c      	b.n	8003158 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
 800313e:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8003142:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 8003146:	42b5      	cmp	r5, r6
 8003148:	d00a      	beq.n	8003160 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800314a:	42ae      	cmp	r6, r5
 800314c:	dd08      	ble.n	8003160 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
 800314e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8003150:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 8003154:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8003156:	6058      	str	r0, [r3, #4]
		update_cache(0);
 8003158:	2000      	movs	r0, #0
}
 800315a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 800315c:	f7ff bf7c 	b.w	8003058 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8003160:	42a3      	cmp	r3, r4
 8003162:	d0e7      	beq.n	8003134 <ready_thread+0x2c>
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	e7e4      	b.n	8003132 <ready_thread+0x2a>
}
 8003168:	bc70      	pop	{r4, r5, r6}
 800316a:	4770      	bx	lr
 800316c:	20000398 	.word	0x20000398

08003170 <unready_thread>:
{
 8003170:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 8003172:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 8003176:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8003178:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
 800317a:	7b43      	ldrb	r3, [r0, #13]
 800317c:	da04      	bge.n	8003188 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800317e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003182:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8003184:	f001 faf8 	bl	8004778 <sys_dlist_remove>
	update_cache(thread == _current);
 8003188:	4b04      	ldr	r3, [pc, #16]	; (800319c <unready_thread+0x2c>)
 800318a:	6898      	ldr	r0, [r3, #8]
 800318c:	1a43      	subs	r3, r0, r1
 800318e:	4258      	negs	r0, r3
 8003190:	4158      	adcs	r0, r3
}
 8003192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 8003196:	f7ff bf5f 	b.w	8003058 <update_cache>
 800319a:	bf00      	nop
 800319c:	20000398 	.word	0x20000398

080031a0 <pend_locked>:
{
 80031a0:	b570      	push	{r4, r5, r6, lr}
 80031a2:	4615      	mov	r5, r2
 80031a4:	461c      	mov	r4, r3
 80031a6:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
 80031a8:	f001 fb1a 	bl	80047e0 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80031ac:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80031b0:	bf08      	it	eq
 80031b2:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 80031b6:	d008      	beq.n	80031ca <pend_locked+0x2a>
 80031b8:	462a      	mov	r2, r5
 80031ba:	4623      	mov	r3, r4
 80031bc:	f106 0018 	add.w	r0, r6, #24
 80031c0:	4902      	ldr	r1, [pc, #8]	; (80031cc <pend_locked+0x2c>)
}
 80031c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80031c6:	f000 ba09 	b.w	80035dc <z_add_timeout>
 80031ca:	bd70      	pop	{r4, r5, r6, pc}
 80031cc:	0800479d 	.word	0x0800479d

080031d0 <k_sched_time_slice_set>:
{
 80031d0:	b510      	push	{r4, lr}
	__asm__ volatile(
 80031d2:	f04f 0310 	mov.w	r3, #16
 80031d6:	f3ef 8411 	mrs	r4, BASEPRI
 80031da:	f383 8812 	msr	BASEPRI_MAX, r3
 80031de:	f3bf 8f6f 	isb	sy
			return ((uint32_t)t) * (to_hz / from_hz);
 80031e2:	230a      	movs	r3, #10
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 80031e4:	2800      	cmp	r0, #0
 80031e6:	fb00 f303 	mul.w	r3, r0, r3
 80031ea:	dd02      	ble.n	80031f2 <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	bfb8      	it	lt
 80031f0:	2302      	movlt	r3, #2
		_current_cpu->slice_ticks = 0;
 80031f2:	2000      	movs	r0, #0
 80031f4:	4a06      	ldr	r2, [pc, #24]	; (8003210 <k_sched_time_slice_set+0x40>)
 80031f6:	6110      	str	r0, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
 80031f8:	4806      	ldr	r0, [pc, #24]	; (8003214 <k_sched_time_slice_set+0x44>)
 80031fa:	6003      	str	r3, [r0, #0]
		slice_max_prio = prio;
 80031fc:	4b06      	ldr	r3, [pc, #24]	; (8003218 <k_sched_time_slice_set+0x48>)
		z_reset_time_slice(_current);
 80031fe:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
 8003200:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
 8003202:	f7ff ff15 	bl	8003030 <z_reset_time_slice>
	__asm__ volatile(
 8003206:	f384 8811 	msr	BASEPRI, r4
 800320a:	f3bf 8f6f 	isb	sy
}
 800320e:	bd10      	pop	{r4, pc}
 8003210:	20000398 	.word	0x20000398
 8003214:	200003c4 	.word	0x200003c4
 8003218:	200003c0 	.word	0x200003c0

0800321c <z_time_slice>:
{
 800321c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800321e:	f04f 0310 	mov.w	r3, #16
 8003222:	f3ef 8511 	mrs	r5, BASEPRI
 8003226:	f383 8812 	msr	BASEPRI_MAX, r3
 800322a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 800322e:	4b17      	ldr	r3, [pc, #92]	; (800328c <z_time_slice+0x70>)
 8003230:	4a17      	ldr	r2, [pc, #92]	; (8003290 <z_time_slice+0x74>)
 8003232:	689c      	ldr	r4, [r3, #8]
 8003234:	6811      	ldr	r1, [r2, #0]
 8003236:	428c      	cmp	r4, r1
 8003238:	d107      	bne.n	800324a <z_time_slice+0x2e>
	z_reset_time_slice(curr);
 800323a:	4620      	mov	r0, r4
 800323c:	f7ff fef8 	bl	8003030 <z_reset_time_slice>
	__asm__ volatile(
 8003240:	f385 8811 	msr	BASEPRI, r5
 8003244:	f3bf 8f6f 	isb	sy
}
 8003248:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 800324a:	2100      	movs	r1, #0
 800324c:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
 800324e:	4a11      	ldr	r2, [pc, #68]	; (8003294 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	b1c2      	cbz	r2, 8003286 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 8003254:	89e2      	ldrh	r2, [r4, #14]
 8003256:	2a7f      	cmp	r2, #127	; 0x7f
 8003258:	d815      	bhi.n	8003286 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
 800325a:	7b62      	ldrb	r2, [r4, #13]
 800325c:	06d2      	lsls	r2, r2, #27
 800325e:	d112      	bne.n	8003286 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8003260:	4a0d      	ldr	r2, [pc, #52]	; (8003298 <z_time_slice+0x7c>)
 8003262:	f994 100e 	ldrsb.w	r1, [r4, #14]
 8003266:	6812      	ldr	r2, [r2, #0]
 8003268:	4291      	cmp	r1, r2
 800326a:	db0c      	blt.n	8003286 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 800326c:	4a0b      	ldr	r2, [pc, #44]	; (800329c <z_time_slice+0x80>)
 800326e:	4294      	cmp	r4, r2
 8003270:	d009      	beq.n	8003286 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	4282      	cmp	r2, r0
 8003276:	dc03      	bgt.n	8003280 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
 8003278:	4620      	mov	r0, r4
 800327a:	f7ff ff0b 	bl	8003094 <move_thread_to_end_of_prio_q>
 800327e:	e7dc      	b.n	800323a <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
 8003280:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
 8003282:	611a      	str	r2, [r3, #16]
 8003284:	e7dc      	b.n	8003240 <z_time_slice+0x24>
 8003286:	2200      	movs	r2, #0
 8003288:	e7fb      	b.n	8003282 <z_time_slice+0x66>
 800328a:	bf00      	nop
 800328c:	20000398 	.word	0x20000398
 8003290:	200003bc 	.word	0x200003bc
 8003294:	200003c4 	.word	0x200003c4
 8003298:	200003c0 	.word	0x200003c0
 800329c:	200000c0 	.word	0x200000c0

080032a0 <z_pend_curr>:
{
 80032a0:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
 80032a2:	480c      	ldr	r0, [pc, #48]	; (80032d4 <z_pend_curr+0x34>)
 80032a4:	4d0c      	ldr	r5, [pc, #48]	; (80032d8 <z_pend_curr+0x38>)
 80032a6:	6886      	ldr	r6, [r0, #8]
{
 80032a8:	460c      	mov	r4, r1
	pending_current = _current;
 80032aa:	602e      	str	r6, [r5, #0]
{
 80032ac:	4611      	mov	r1, r2
 80032ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
 80032b2:	f04f 0610 	mov.w	r6, #16
 80032b6:	f3ef 8511 	mrs	r5, BASEPRI
 80032ba:	f386 8812 	msr	BASEPRI_MAX, r6
 80032be:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
 80032c2:	6880      	ldr	r0, [r0, #8]
 80032c4:	f7ff ff6c 	bl	80031a0 <pend_locked>
	ret = arch_swap(key);
 80032c8:	4620      	mov	r0, r4
}
 80032ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80032ce:	f7fd bd47 	b.w	8000d60 <arch_swap>
 80032d2:	bf00      	nop
 80032d4:	20000398 	.word	0x20000398
 80032d8:	200003bc 	.word	0x200003bc

080032dc <z_set_prio>:
{
 80032dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032de:	4604      	mov	r4, r0
 80032e0:	f04f 0310 	mov.w	r3, #16
 80032e4:	f3ef 8611 	mrs	r6, BASEPRI
 80032e8:	f383 8812 	msr	BASEPRI_MAX, r3
 80032ec:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
 80032f0:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
 80032f2:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 80032f4:	06da      	lsls	r2, r3, #27
 80032f6:	d119      	bne.n	800332c <z_set_prio+0x50>
	return node->next != NULL;
 80032f8:	6985      	ldr	r5, [r0, #24]
 80032fa:	b9bd      	cbnz	r5, 800332c <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80032fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003300:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8003302:	f001 fa39 	bl	8004778 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8003306:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
 8003308:	4a16      	ldr	r2, [pc, #88]	; (8003364 <z_set_prio+0x88>)
 800330a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800330e:	7343      	strb	r3, [r0, #13]
 8003310:	4613      	mov	r3, r2
				thread->base.prio = prio;
 8003312:	7381      	strb	r1, [r0, #14]
 8003314:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003318:	4298      	cmp	r0, r3
 800331a:	bf18      	it	ne
 800331c:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
 800331e:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003320:	b95d      	cbnz	r5, 800333a <z_set_prio+0x5e>
	node->prev = tail;
 8003322:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
 8003326:	6004      	str	r4, [r0, #0]
	list->tail = node;
 8003328:	6214      	str	r4, [r2, #32]
}
 800332a:	e011      	b.n	8003350 <z_set_prio+0x74>
 800332c:	2000      	movs	r0, #0
			thread->base.prio = prio;
 800332e:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
 8003330:	f386 8811 	msr	BASEPRI, r6
 8003334:	f3bf 8f6f 	isb	sy
}
 8003338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
 800333a:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
 800333e:	42b9      	cmp	r1, r7
 8003340:	d00b      	beq.n	800335a <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8003342:	428f      	cmp	r7, r1
 8003344:	dd09      	ble.n	800335a <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
 8003346:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
 8003348:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
 800334c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800334e:	606c      	str	r4, [r5, #4]
			update_cache(1);
 8003350:	2001      	movs	r0, #1
 8003352:	f7ff fe81 	bl	8003058 <update_cache>
 8003356:	2001      	movs	r0, #1
 8003358:	e7ea      	b.n	8003330 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
 800335a:	42a8      	cmp	r0, r5
 800335c:	d0e1      	beq.n	8003322 <z_set_prio+0x46>
 800335e:	682d      	ldr	r5, [r5, #0]
 8003360:	e7de      	b.n	8003320 <z_set_prio+0x44>
 8003362:	bf00      	nop
 8003364:	20000398 	.word	0x20000398

08003368 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8003368:	b949      	cbnz	r1, 800337e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800336a:	f3ef 8005 	mrs	r0, IPSR
 800336e:	b930      	cbnz	r0, 800337e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 8003370:	4b05      	ldr	r3, [pc, #20]	; (8003388 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 8003372:	699a      	ldr	r2, [r3, #24]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	429a      	cmp	r2, r3
 8003378:	d001      	beq.n	800337e <z_reschedule+0x16>
 800337a:	f7fd bcf1 	b.w	8000d60 <arch_swap>
 800337e:	f381 8811 	msr	BASEPRI, r1
 8003382:	f3bf 8f6f 	isb	sy
}
 8003386:	4770      	bx	lr
 8003388:	20000398 	.word	0x20000398

0800338c <z_sched_start>:
{
 800338c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800338e:	f04f 0210 	mov.w	r2, #16
 8003392:	f3ef 8411 	mrs	r4, BASEPRI
 8003396:	f382 8812 	msr	BASEPRI_MAX, r2
 800339a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 800339e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 80033a0:	0751      	lsls	r1, r2, #29
 80033a2:	d404      	bmi.n	80033ae <z_sched_start+0x22>
	__asm__ volatile(
 80033a4:	f384 8811 	msr	BASEPRI, r4
 80033a8:	f3bf 8f6f 	isb	sy
}
 80033ac:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80033ae:	f022 0204 	bic.w	r2, r2, #4
 80033b2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 80033b4:	f7ff fea8 	bl	8003108 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 80033b8:	4621      	mov	r1, r4
}
 80033ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 80033be:	4801      	ldr	r0, [pc, #4]	; (80033c4 <z_sched_start+0x38>)
 80033c0:	f7ff bfd2 	b.w	8003368 <z_reschedule>
 80033c4:	200003cd 	.word	0x200003cd

080033c8 <k_sched_lock>:
	__asm__ volatile(
 80033c8:	f04f 0310 	mov.w	r3, #16
 80033cc:	f3ef 8111 	mrs	r1, BASEPRI
 80033d0:	f383 8812 	msr	BASEPRI_MAX, r3
 80033d4:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 80033d8:	4b04      	ldr	r3, [pc, #16]	; (80033ec <k_sched_lock+0x24>)
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	7bd3      	ldrb	r3, [r2, #15]
 80033de:	3b01      	subs	r3, #1
 80033e0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 80033e2:	f381 8811 	msr	BASEPRI, r1
 80033e6:	f3bf 8f6f 	isb	sy
}
 80033ea:	4770      	bx	lr
 80033ec:	20000398 	.word	0x20000398

080033f0 <k_sched_unlock>:
{
 80033f0:	b510      	push	{r4, lr}
	__asm__ volatile(
 80033f2:	f04f 0310 	mov.w	r3, #16
 80033f6:	f3ef 8411 	mrs	r4, BASEPRI
 80033fa:	f383 8812 	msr	BASEPRI_MAX, r3
 80033fe:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8003402:	4b08      	ldr	r3, [pc, #32]	; (8003424 <k_sched_unlock+0x34>)
		update_cache(0);
 8003404:	2000      	movs	r0, #0
		++_current->base.sched_locked;
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	7bd3      	ldrb	r3, [r2, #15]
 800340a:	3301      	adds	r3, #1
 800340c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 800340e:	f7ff fe23 	bl	8003058 <update_cache>
	__asm__ volatile(
 8003412:	f384 8811 	msr	BASEPRI, r4
 8003416:	f3bf 8f6f 	isb	sy
}
 800341a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 800341e:	f001 ba3f 	b.w	80048a0 <z_reschedule_unlocked>
 8003422:	bf00      	nop
 8003424:	20000398 	.word	0x20000398

08003428 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8003428:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
 800342a:	4b04      	ldr	r3, [pc, #16]	; (800343c <z_sched_init+0x14>)
 800342c:	4608      	mov	r0, r1
 800342e:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
 8003432:	e9c3 2207 	strd	r2, r2, [r3, #28]
 8003436:	f7ff becb 	b.w	80031d0 <k_sched_time_slice_set>
 800343a:	bf00      	nop
 800343c:	20000398 	.word	0x20000398

08003440 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8003440:	4b01      	ldr	r3, [pc, #4]	; (8003448 <z_impl_z_current_get+0x8>)
 8003442:	6898      	ldr	r0, [r3, #8]
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	20000398 	.word	0x20000398

0800344c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 800344c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003450:	4604      	mov	r4, r0
	__asm__ volatile(
 8003452:	f04f 0310 	mov.w	r3, #16
 8003456:	f3ef 8611 	mrs	r6, BASEPRI
 800345a:	f383 8812 	msr	BASEPRI_MAX, r3
 800345e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
 8003462:	7b03      	ldrb	r3, [r0, #12]
 8003464:	07d9      	lsls	r1, r3, #31
 8003466:	d50b      	bpl.n	8003480 <z_thread_abort+0x34>
	__asm__ volatile(
 8003468:	f386 8811 	msr	BASEPRI, r6
 800346c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
 8003470:	4040      	eors	r0, r0
 8003472:	f380 8811 	msr	BASEPRI, r0
 8003476:	f04f 0004 	mov.w	r0, #4
 800347a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 800347c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8003480:	7b43      	ldrb	r3, [r0, #13]
 8003482:	071a      	lsls	r2, r3, #28
 8003484:	d504      	bpl.n	8003490 <z_thread_abort+0x44>
 8003486:	f386 8811 	msr	BASEPRI, r6
 800348a:	f3bf 8f6f 	isb	sy
 800348e:	e7f5      	b.n	800347c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8003490:	f023 0220 	bic.w	r2, r3, #32
 8003494:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 8003498:	09d2      	lsrs	r2, r2, #7
 800349a:	d120      	bne.n	80034de <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 800349c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 800349e:	68a3      	ldr	r3, [r4, #8]
 80034a0:	b113      	cbz	r3, 80034a8 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
 80034a2:	4620      	mov	r0, r4
 80034a4:	f001 f970 	bl	8004788 <unpend_thread_no_timeout>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 80034a8:	f104 0018 	add.w	r0, r4, #24
 80034ac:	f001 fa02 	bl	80048b4 <z_abort_timeout>
 80034b0:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 80034b4:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
 80034b8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80034ba:	42bd      	cmp	r5, r7
 80034bc:	d000      	beq.n	80034c0 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 80034be:	b9b5      	cbnz	r5, 80034ee <z_thread_abort+0xa2>
		update_cache(1);
 80034c0:	2001      	movs	r0, #1
 80034c2:	f7ff fdc9 	bl	8003058 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 80034c6:	4b10      	ldr	r3, [pc, #64]	; (8003508 <z_thread_abort+0xbc>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	42a3      	cmp	r3, r4
 80034cc:	d1db      	bne.n	8003486 <z_thread_abort+0x3a>
 80034ce:	f3ef 8305 	mrs	r3, IPSR
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1d7      	bne.n	8003486 <z_thread_abort+0x3a>
 80034d6:	4630      	mov	r0, r6
 80034d8:	f7fd fc42 	bl	8000d60 <arch_swap>
	return ret;
 80034dc:	e7d3      	b.n	8003486 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80034de:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 80034e2:	f043 0308 	orr.w	r3, r3, #8
 80034e6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80034e8:	f001 f946 	bl	8004778 <sys_dlist_remove>
}
 80034ec:	e7d7      	b.n	800349e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
 80034ee:	4628      	mov	r0, r5
 80034f0:	f001 f94a 	bl	8004788 <unpend_thread_no_timeout>
 80034f4:	f105 0018 	add.w	r0, r5, #24
 80034f8:	f001 f9dc 	bl	80048b4 <z_abort_timeout>
		ready_thread(thread);
 80034fc:	4628      	mov	r0, r5
 80034fe:	f8c5 806c 	str.w	r8, [r5, #108]	; 0x6c
 8003502:	f7ff fe01 	bl	8003108 <ready_thread>
 8003506:	e7d7      	b.n	80034b8 <z_thread_abort+0x6c>
 8003508:	20000398 	.word	0x20000398

0800350c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 800350c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 800350e:	4806      	ldr	r0, [pc, #24]	; (8003528 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 8003510:	4a06      	ldr	r2, [pc, #24]	; (800352c <z_data_copy+0x20>)
 8003512:	4907      	ldr	r1, [pc, #28]	; (8003530 <z_data_copy+0x24>)
 8003514:	1a12      	subs	r2, r2, r0
 8003516:	f001 f906 	bl	8004726 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 800351a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 800351e:	4a05      	ldr	r2, [pc, #20]	; (8003534 <z_data_copy+0x28>)
 8003520:	4905      	ldr	r1, [pc, #20]	; (8003538 <z_data_copy+0x2c>)
 8003522:	4806      	ldr	r0, [pc, #24]	; (800353c <z_data_copy+0x30>)
 8003524:	f001 b8ff 	b.w	8004726 <z_early_memcpy>
 8003528:	20000000 	.word	0x20000000
 800352c:	200000c0 	.word	0x200000c0
 8003530:	08005268 	.word	0x08005268
 8003534:	00000000 	.word	0x00000000
 8003538:	08005268 	.word	0x08005268
 800353c:	20000000 	.word	0x20000000

08003540 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8003540:	4b03      	ldr	r3, [pc, #12]	; (8003550 <elapsed+0x10>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	b90b      	cbnz	r3, 800354a <elapsed+0xa>
 8003546:	f7ff b991 	b.w	800286c <sys_clock_elapsed>
}
 800354a:	2000      	movs	r0, #0
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	200003c8 	.word	0x200003c8

08003554 <next_timeout>:

static int32_t next_timeout(void)
{
 8003554:	b510      	push	{r4, lr}
	return list->head == list;
 8003556:	4b11      	ldr	r3, [pc, #68]	; (800359c <next_timeout+0x48>)
 8003558:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800355a:	429c      	cmp	r4, r3
 800355c:	d10a      	bne.n	8003574 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 800355e:	f7ff ffef 	bl	8003540 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
 8003562:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8003566:	4b0e      	ldr	r3, [pc, #56]	; (80035a0 <next_timeout+0x4c>)
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	b113      	cbz	r3, 8003572 <next_timeout+0x1e>
 800356c:	4298      	cmp	r0, r3
 800356e:	bfa8      	it	ge
 8003570:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 8003572:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
 8003574:	f7ff ffe4 	bl	8003540 <elapsed>
	if ((to == NULL) ||
 8003578:	2c00      	cmp	r4, #0
 800357a:	d0f2      	beq.n	8003562 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 800357c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8003580:	1a1b      	subs	r3, r3, r0
 8003582:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
 8003586:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800358a:	f172 0100 	sbcs.w	r1, r2, #0
 800358e:	dae8      	bge.n	8003562 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
 8003590:	2a00      	cmp	r2, #0
 8003592:	bfac      	ite	ge
 8003594:	4618      	movge	r0, r3
 8003596:	2000      	movlt	r0, #0
 8003598:	e7e5      	b.n	8003566 <next_timeout+0x12>
 800359a:	bf00      	nop
 800359c:	2000008c 	.word	0x2000008c
 80035a0:	20000398 	.word	0x20000398

080035a4 <remove_timeout>:
{
 80035a4:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80035a6:	b170      	cbz	r0, 80035c6 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <remove_timeout+0x34>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	4298      	cmp	r0, r3
 80035ae:	d00a      	beq.n	80035c6 <remove_timeout+0x22>
 80035b0:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
 80035b2:	b143      	cbz	r3, 80035c6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 80035b4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 80035b8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 80035bc:	1912      	adds	r2, r2, r4
 80035be:	eb41 0105 	adc.w	r1, r1, r5
 80035c2:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 80035c6:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
 80035ca:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80035cc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80035ce:	2300      	movs	r3, #0
	node->prev = NULL;
 80035d0:	e9c0 3300 	strd	r3, r3, [r0]
}
 80035d4:	bd30      	pop	{r4, r5, pc}
 80035d6:	bf00      	nop
 80035d8:	2000008c 	.word	0x2000008c

080035dc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035e0:	bf08      	it	eq
 80035e2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 80035e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e8:	4604      	mov	r4, r0
 80035ea:	461d      	mov	r5, r3
 80035ec:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80035ee:	d061      	beq.n	80036b4 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 80035f0:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 80035f2:	f04f 0310 	mov.w	r3, #16
 80035f6:	f3ef 8711 	mrs	r7, BASEPRI
 80035fa:	f383 8812 	msr	BASEPRI_MAX, r3
 80035fe:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 8003602:	3201      	adds	r2, #1
 8003604:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
 8003608:	da24      	bge.n	8003654 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 800360a:	f06f 0301 	mvn.w	r3, #1
 800360e:	492f      	ldr	r1, [pc, #188]	; (80036cc <z_add_timeout+0xf0>)
 8003610:	e9d1 2000 	ldrd	r2, r0, [r1]
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800361a:	eb62 0000 	sbc.w	r0, r2, r0
 800361e:	1b9e      	subs	r6, r3, r6
 8003620:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
 8003624:	2e01      	cmp	r6, #1
 8003626:	f170 0300 	sbcs.w	r3, r0, #0
 800362a:	da01      	bge.n	8003630 <z_add_timeout+0x54>
 800362c:	2601      	movs	r6, #1
 800362e:	2000      	movs	r0, #0
 8003630:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
 8003634:	4e26      	ldr	r6, [pc, #152]	; (80036d0 <z_add_timeout+0xf4>)
 8003636:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
 800363a:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800363c:	45b4      	cmp	ip, r6
 800363e:	bf08      	it	eq
 8003640:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
 8003644:	f1bc 0f00 	cmp.w	ip, #0
 8003648:	d10d      	bne.n	8003666 <z_add_timeout+0x8a>
	node->prev = tail;
 800364a:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
 800364e:	602c      	str	r4, [r5, #0]
	list->tail = node;
 8003650:	6074      	str	r4, [r6, #4]
}
 8003652:	e01c      	b.n	800368e <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
 8003654:	f7ff ff74 	bl	8003540 <elapsed>
 8003658:	3601      	adds	r6, #1
 800365a:	f145 0500 	adc.w	r5, r5, #0
 800365e:	1836      	adds	r6, r6, r0
 8003660:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 8003664:	e7e4      	b.n	8003630 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
 8003666:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
 800366a:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 800366e:	4293      	cmp	r3, r2
 8003670:	eb71 0e00 	sbcs.w	lr, r1, r0
 8003674:	da1f      	bge.n	80036b6 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
 8003676:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
 8003678:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800367c:	eb60 0001 	sbc.w	r0, r0, r1
 8003680:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
 8003684:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
 8003688:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800368a:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
 800368e:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003690:	42b3      	cmp	r3, r6
 8003692:	d00b      	beq.n	80036ac <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8003694:	429c      	cmp	r4, r3
 8003696:	d109      	bne.n	80036ac <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 8003698:	f7ff ff5c 	bl	8003554 <next_timeout>

			if (next_time == 0 ||
 800369c:	b118      	cbz	r0, 80036a6 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
 800369e:	4b0d      	ldr	r3, [pc, #52]	; (80036d4 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	4283      	cmp	r3, r0
 80036a4:	d002      	beq.n	80036ac <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
 80036a6:	2100      	movs	r1, #0
 80036a8:	f7ff f870 	bl	800278c <sys_clock_set_timeout>
	__asm__ volatile(
 80036ac:	f387 8811 	msr	BASEPRI, r7
 80036b0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 80036b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
 80036b6:	1a9b      	subs	r3, r3, r2
 80036b8:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 80036bc:	45ac      	cmp	ip, r5
 80036be:	e9c4 3104 	strd	r3, r1, [r4, #16]
 80036c2:	d0c2      	beq.n	800364a <z_add_timeout+0x6e>
 80036c4:	f8dc c000 	ldr.w	ip, [ip]
 80036c8:	e7bc      	b.n	8003644 <z_add_timeout+0x68>
 80036ca:	bf00      	nop
 80036cc:	200001a0 	.word	0x200001a0
 80036d0:	2000008c 	.word	0x2000008c
 80036d4:	20000398 	.word	0x20000398

080036d8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 80036d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036dc:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 80036de:	f7ff fd9d 	bl	800321c <z_time_slice>
	__asm__ volatile(
 80036e2:	f04f 0310 	mov.w	r3, #16
 80036e6:	f3ef 8c11 	mrs	ip, BASEPRI
 80036ea:	f383 8812 	msr	BASEPRI_MAX, r3
 80036ee:	f3bf 8f6f 	isb	sy
	return list->head == list;
 80036f2:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80037a4 <sys_clock_announce+0xcc>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 80036f6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80037a8 <sys_clock_announce+0xd0>
 80036fa:	f8da 0000 	ldr.w	r0, [sl]
 80036fe:	f8c9 4000 	str.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003702:	4550      	cmp	r0, sl
 8003704:	bf08      	it	eq
 8003706:	2000      	moveq	r0, #0
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
 8003708:	2400      	movs	r4, #0
 800370a:	2500      	movs	r5, #0
		curr_tick += dt;
 800370c:	4f27      	ldr	r7, [pc, #156]	; (80037ac <sys_clock_announce+0xd4>)
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
 800370e:	46e0      	mov	r8, ip
 8003710:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
 8003714:	f8d9 3000 	ldr.w	r3, [r9]
 8003718:	b380      	cbz	r0, 800377c <sys_clock_announce+0xa4>
 800371a:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
 800371e:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 8003722:	42b3      	cmp	r3, r6
 8003724:	eb7e 0b0c 	sbcs.w	fp, lr, ip
 8003728:	da05      	bge.n	8003736 <sys_clock_announce+0x5e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
 800372a:	1af6      	subs	r6, r6, r3
 800372c:	eb6c 040e 	sbc.w	r4, ip, lr
 8003730:	e9c0 6404 	strd	r6, r4, [r0, #16]
 8003734:	e022      	b.n	800377c <sys_clock_announce+0xa4>
		curr_tick += dt;
 8003736:	18b2      	adds	r2, r6, r2
 8003738:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
 800373c:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
 8003740:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
 8003744:	f7ff ff2e 	bl	80035a4 <remove_timeout>
	__asm__ volatile(
 8003748:	f388 8811 	msr	BASEPRI, r8
 800374c:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8003750:	6883      	ldr	r3, [r0, #8]
 8003752:	4798      	blx	r3
	__asm__ volatile(
 8003754:	f04f 0310 	mov.w	r3, #16
 8003758:	f3ef 8811 	mrs	r8, BASEPRI
 800375c:	f383 8812 	msr	BASEPRI_MAX, r3
 8003760:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
 8003764:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
 8003768:	f8da 0000 	ldr.w	r0, [sl]
 800376c:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800376e:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
 8003770:	46c4      	mov	ip, r8
 8003772:	f8c9 3000 	str.w	r3, [r9]
 8003776:	d1ca      	bne.n	800370e <sys_clock_announce+0x36>
		curr_tick += dt;
 8003778:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
 800377c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 800377e:	189a      	adds	r2, r3, r2
 8003780:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
 8003784:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
 8003788:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
 800378c:	f7ff fee2 	bl	8003554 <next_timeout>
 8003790:	4621      	mov	r1, r4
 8003792:	f7fe fffb 	bl	800278c <sys_clock_set_timeout>
	__asm__ volatile(
 8003796:	f388 8811 	msr	BASEPRI, r8
 800379a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 800379e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037a2:	bf00      	nop
 80037a4:	2000008c 	.word	0x2000008c
 80037a8:	200003c8 	.word	0x200003c8
 80037ac:	200001a0 	.word	0x200001a0

080037b0 <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 80037b0:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 80037b2:	4604      	mov	r4, r0
 80037b4:	b178      	cbz	r0, 80037d6 <z_impl_k_busy_wait+0x26>
 80037b6:	f7ff f877 	bl	80028a8 <sys_clock_cycle_get_32>
 80037ba:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 80037bc:	4806      	ldr	r0, [pc, #24]	; (80037d8 <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 80037be:	2300      	movs	r3, #0
 80037c0:	fba4 0100 	umull	r0, r1, r4, r0
 80037c4:	4a05      	ldr	r2, [pc, #20]	; (80037dc <z_impl_k_busy_wait+0x2c>)
 80037c6:	f7fc fc93 	bl	80000f0 <__aeabi_uldivmod>
 80037ca:	4604      	mov	r4, r0
 80037cc:	f7ff f86c 	bl	80028a8 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 80037d0:	1b43      	subs	r3, r0, r5
 80037d2:	42a3      	cmp	r3, r4
 80037d4:	d3fa      	bcc.n	80037cc <z_impl_k_busy_wait+0x1c>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 80037d6:	bd38      	pop	{r3, r4, r5, pc}
 80037d8:	044aa200 	.word	0x044aa200
 80037dc:	000f4240 	.word	0x000f4240

080037e0 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
 80037e0:	4801      	ldr	r0, [pc, #4]	; (80037e8 <boot_banner+0x8>)
 80037e2:	f000 b832 	b.w	800384a <printk>
 80037e6:	bf00      	nop
 80037e8:	08005224 	.word	0x08005224

080037ec <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 80037ec:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
 80037ee:	4c06      	ldr	r4, [pc, #24]	; (8003808 <statics_init+0x1c>)
 80037f0:	4d06      	ldr	r5, [pc, #24]	; (800380c <statics_init+0x20>)
 80037f2:	42ac      	cmp	r4, r5
 80037f4:	d301      	bcc.n	80037fa <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
 80037f6:	2000      	movs	r0, #0
 80037f8:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 80037fa:	4620      	mov	r0, r4
 80037fc:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8003800:	f001 f88a 	bl	8004918 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 8003804:	3414      	adds	r4, #20
 8003806:	e7f4      	b.n	80037f2 <statics_init+0x6>
 8003808:	200000c0 	.word	0x200000c0
 800380c:	200000c0 	.word	0x200000c0

08003810 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8003810:	4770      	bx	lr

08003812 <gpio_pin_configure_dt.constprop.0.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
 8003812:	4603      	mov	r3, r0
 8003814:	b4f0      	push	{r4, r5, r6, r7}
				  spec->pin,
 8003816:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
 8003818:	6800      	ldr	r0, [r0, #0]
				  spec->dt_flags | extra_flags);
 800381a:	88db      	ldrh	r3, [r3, #6]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800381c:	2501      	movs	r5, #1
	struct gpio_driver_data *data =
 800381e:	6906      	ldr	r6, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8003820:	07da      	lsls	r2, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8003822:	6834      	ldr	r4, [r6, #0]
	return gpio_pin_configure(spec->port,
 8003824:	bf54      	ite	pl
 8003826:	f443 13d0 	orrpl.w	r3, r3, #1703936	; 0x1a0000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 800382a:	f483 13b0 	eormi.w	r3, r3, #1441792	; 0x160000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800382e:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8003830:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8003834:	07db      	lsls	r3, r3, #31
	const struct gpio_driver_api *api =
 8003836:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8003838:	bf4c      	ite	mi
 800383a:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800383c:	43ac      	bicpl	r4, r5
 800383e:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
 8003840:	683b      	ldr	r3, [r7, #0]
}
 8003842:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
 8003844:	4718      	bx	r3

08003846 <arch_printk_char_out>:
}
 8003846:	2000      	movs	r0, #0
 8003848:	4770      	bx	lr

0800384a <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
 800384a:	b40f      	push	{r0, r1, r2, r3}
 800384c:	b507      	push	{r0, r1, r2, lr}
 800384e:	a904      	add	r1, sp, #16
 8003850:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 8003854:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
 8003856:	f7fc fe59 	bl	800050c <vprintk>

	va_end(ap);
}
 800385a:	b003      	add	sp, #12
 800385c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003860:	b004      	add	sp, #16
 8003862:	4770      	bx	lr

08003864 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8003864:	4604      	mov	r4, r0
 8003866:	b508      	push	{r3, lr}
 8003868:	4608      	mov	r0, r1
 800386a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 800386c:	461a      	mov	r2, r3
 800386e:	47a0      	blx	r4
	return z_impl_z_current_get();
 8003870:	f7ff fde6 	bl	8003440 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 8003874:	f7fd fc5a 	bl	800112c <z_impl_k_thread_abort>

08003878 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
 8003878:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800387c:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
 800387e:	0840      	lsrs	r0, r0, #1
 8003880:	4770      	bx	lr

08003882 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 8003882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003884:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
 8003886:	f7ff fff7 	bl	8003878 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
 800388a:	fab0 f080 	clz	r0, r0
 800388e:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
 8003892:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003896:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
 800389a:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
 800389c:	1d17      	adds	r7, r2, #4
{
 800389e:	460c      	mov	r4, r1
 80038a0:	3206      	adds	r2, #6
 80038a2:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
 80038a4:	b956      	cbnz	r6, 80038bc <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
 80038a6:	2101      	movs	r1, #1
 80038a8:	fa01 f000 	lsl.w	r0, r1, r0
 80038ac:	68d9      	ldr	r1, [r3, #12]
 80038ae:	4301      	orrs	r1, r0
 80038b0:	60d9      	str	r1, [r3, #12]
		b->next = c;
 80038b2:	f8cc 4010 	str.w	r4, [ip, #16]
 80038b6:	53dd      	strh	r5, [r3, r7]
 80038b8:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
 80038ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
 80038bc:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
 80038be:	3104      	adds	r1, #4
 80038c0:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
 80038c2:	53d8      	strh	r0, [r3, r7]
 80038c4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80038c8:	529e      	strh	r6, [r3, r2]
 80038ca:	80c5      	strh	r5, [r0, #6]
 80038cc:	525d      	strh	r5, [r3, r1]
 80038ce:	e7f4      	b.n	80038ba <free_list_add+0x38>

080038d0 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 80038d0:	b4f0      	push	{r4, r5, r6, r7}
 80038d2:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 80038d4:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 80038d6:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 80038d8:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 80038da:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 80038de:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 80038e2:	1a0e      	subs	r6, r1, r0
 80038e4:	08f3      	lsrs	r3, r6, #3
	return 31 - __builtin_clz(usable_sz);
 80038e6:	fab3 f283 	clz	r2, r3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
 80038ea:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
 80038ec:	2700      	movs	r7, #0
 80038ee:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 80038f0:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
 80038f4:	00ad      	lsls	r5, r5, #2
	h->end_chunk = heap_sz;
 80038f6:	6083      	str	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 80038f8:	3507      	adds	r5, #7
	h->avail_buckets = 0;
 80038fa:	f844 7f0c 	str.w	r7, [r4, #12]!
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 80038fe:	f1c2 0220 	rsb	r2, r2, #32
 8003902:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 8003904:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
 8003908:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
 800390c:	4294      	cmp	r4, r2
 800390e:	d1fb      	bne.n	8003908 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8003910:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8003912:	f042 0201 	orr.w	r2, r2, #1
 8003916:	8042      	strh	r2, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 8003918:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800391a:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
 800391c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8003920:	8007      	strh	r7, [r0, #0]
 8003922:	8065      	strh	r5, [r4, #2]
 8003924:	1984      	adds	r4, r0, r6
 8003926:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
 800392a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
 800392e:	8067      	strh	r7, [r4, #2]
 8003930:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8003932:	885a      	ldrh	r2, [r3, #2]
 8003934:	f042 0201 	orr.w	r2, r2, #1
 8003938:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
 800393a:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
 800393c:	f7ff bfa1 	b.w	8003882 <free_list_add>

08003940 <encode_uint>:
{
 8003940:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003944:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 8003946:	78d3      	ldrb	r3, [r2, #3]
{
 8003948:	4680      	mov	r8, r0
	switch (specifier) {
 800394a:	2b6f      	cmp	r3, #111	; 0x6f
{
 800394c:	460f      	mov	r7, r1
 800394e:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 8003950:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 8003954:	d029      	beq.n	80039aa <encode_uint+0x6a>
 8003956:	d824      	bhi.n	80039a2 <encode_uint+0x62>
		return 10;
 8003958:	2b58      	cmp	r3, #88	; 0x58
 800395a:	bf0c      	ite	eq
 800395c:	2610      	moveq	r6, #16
 800395e:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
 8003960:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 8003964:	4632      	mov	r2, r6
 8003966:	2300      	movs	r3, #0
 8003968:	4640      	mov	r0, r8
 800396a:	4639      	mov	r1, r7
 800396c:	f7fc fbc0 	bl	80000f0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003970:	2a09      	cmp	r2, #9
 8003972:	b2d4      	uxtb	r4, r2
 8003974:	d81e      	bhi.n	80039b4 <encode_uint+0x74>
 8003976:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 8003978:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 800397a:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 800397c:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003980:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 8003984:	d301      	bcc.n	800398a <encode_uint+0x4a>
 8003986:	45d1      	cmp	r9, sl
 8003988:	d811      	bhi.n	80039ae <encode_uint+0x6e>
	if (conv->flag_hash) {
 800398a:	782b      	ldrb	r3, [r5, #0]
 800398c:	069b      	lsls	r3, r3, #26
 800398e:	d505      	bpl.n	800399c <encode_uint+0x5c>
		if (radix == 8) {
 8003990:	2e08      	cmp	r6, #8
 8003992:	d115      	bne.n	80039c0 <encode_uint+0x80>
			conv->altform_0 = true;
 8003994:	78ab      	ldrb	r3, [r5, #2]
 8003996:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 800399a:	70ab      	strb	r3, [r5, #2]
}
 800399c:	4648      	mov	r0, r9
 800399e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 80039a2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
 80039a6:	2b70      	cmp	r3, #112	; 0x70
 80039a8:	e7d7      	b.n	800395a <encode_uint+0x1a>
	switch (specifier) {
 80039aa:	2608      	movs	r6, #8
 80039ac:	e7d8      	b.n	8003960 <encode_uint+0x20>
		value /= radix;
 80039ae:	4680      	mov	r8, r0
 80039b0:	460f      	mov	r7, r1
 80039b2:	e7d7      	b.n	8003964 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80039b4:	f1bb 0f19 	cmp.w	fp, #25
 80039b8:	bf94      	ite	ls
 80039ba:	3437      	addls	r4, #55	; 0x37
 80039bc:	3457      	addhi	r4, #87	; 0x57
 80039be:	e7db      	b.n	8003978 <encode_uint+0x38>
		} else if (radix == 16) {
 80039c0:	2e10      	cmp	r6, #16
 80039c2:	d1eb      	bne.n	800399c <encode_uint+0x5c>
			conv->altform_0c = true;
 80039c4:	78ab      	ldrb	r3, [r5, #2]
 80039c6:	f043 0310 	orr.w	r3, r3, #16
 80039ca:	e7e6      	b.n	800399a <encode_uint+0x5a>

080039cc <outs>:
{
 80039cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039d0:	4607      	mov	r7, r0
 80039d2:	4688      	mov	r8, r1
 80039d4:	4615      	mov	r5, r2
 80039d6:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 80039d8:	4614      	mov	r4, r2
 80039da:	42b4      	cmp	r4, r6
 80039dc:	d305      	bcc.n	80039ea <outs+0x1e>
 80039de:	b10e      	cbz	r6, 80039e4 <outs+0x18>
	return (int)count;
 80039e0:	1b60      	subs	r0, r4, r5
 80039e2:	e008      	b.n	80039f6 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 80039e4:	7823      	ldrb	r3, [r4, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0fa      	beq.n	80039e0 <outs+0x14>
		int rc = out((int)*sp++, ctx);
 80039ea:	4641      	mov	r1, r8
 80039ec:	f814 0b01 	ldrb.w	r0, [r4], #1
 80039f0:	47b8      	blx	r7
		if (rc < 0) {
 80039f2:	2800      	cmp	r0, #0
 80039f4:	daf1      	bge.n	80039da <outs+0xe>
}
 80039f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080039fa <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 80039fa:	4770      	bx	lr

080039fc <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 80039fc:	2000      	movs	r0, #0
 80039fe:	4770      	bx	lr

08003a00 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8003a00:	f000 be74 	b.w	80046ec <z_fatal_error>

08003a04 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 8003a04:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8003a06:	6800      	ldr	r0, [r0, #0]
 8003a08:	f000 be70 	b.w	80046ec <z_fatal_error>

08003a0c <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	2001      	movs	r0, #1
 8003a10:	f7ff bff6 	b.w	8003a00 <z_arm_fatal_error>

08003a14 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 8003a14:	b508      	push	{r3, lr}
	handler();
 8003a16:	f7fd f987 	bl	8000d28 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8003a1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8003a1e:	f7fd ba2f 	b.w	8000e80 <z_arm_exc_exit>

08003a22 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 8003a22:	4603      	mov	r3, r0
	size_t n = 0;
 8003a24:	2000      	movs	r0, #0

	while (*s != '\0') {
 8003a26:	5c1a      	ldrb	r2, [r3, r0]
 8003a28:	b902      	cbnz	r2, 8003a2c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 8003a2a:	4770      	bx	lr
		n++;
 8003a2c:	3001      	adds	r0, #1
 8003a2e:	e7fa      	b.n	8003a26 <strlen+0x4>

08003a30 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 8003a30:	4603      	mov	r3, r0
	size_t n = 0;
 8003a32:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 8003a34:	5c1a      	ldrb	r2, [r3, r0]
 8003a36:	b10a      	cbz	r2, 8003a3c <strnlen+0xc>
 8003a38:	4288      	cmp	r0, r1
 8003a3a:	d100      	bne.n	8003a3e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 8003a3c:	4770      	bx	lr
		n++;
 8003a3e:	3001      	adds	r0, #1
 8003a40:	e7f8      	b.n	8003a34 <strnlen+0x4>

08003a42 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
 8003a42:	b510      	push	{r4, lr}
 8003a44:	1e43      	subs	r3, r0, #1
 8003a46:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 8003a48:	4291      	cmp	r1, r2
 8003a4a:	d100      	bne.n	8003a4e <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8003a4c:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 8003a4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a52:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8003a56:	e7f7      	b.n	8003a48 <memcpy+0x6>

08003a58 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
 8003a58:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
 8003a5a:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 8003a5c:	4402      	add	r2, r0
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d100      	bne.n	8003a64 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8003a62:	4770      	bx	lr
		*(d_byte++) = c_byte;
 8003a64:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8003a68:	e7f9      	b.n	8003a5e <memset+0x6>

08003a6a <_stdout_hook_default>:
}
 8003a6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a6e:	4770      	bx	lr

08003a70 <stm32_exti_init>:
{
 8003a70:	b508      	push	{r3, lr}
	DT_FOREACH_PROP_ELEM(DT_NODELABEL(exti),
 8003a72:	2206      	movs	r2, #6
 8003a74:	2101      	movs	r1, #1
 8003a76:	2000      	movs	r0, #0
 8003a78:	f7fd fb98 	bl	80011ac <stm32_fill_irq_table>
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	2006      	movs	r0, #6
 8003a80:	4611      	mov	r1, r2
 8003a82:	f7fd f93b 	bl	8000cfc <z_arm_irq_priority_set>
 8003a86:	2101      	movs	r1, #1
 8003a88:	2207      	movs	r2, #7
 8003a8a:	4608      	mov	r0, r1
 8003a8c:	f7fd fb8e 	bl	80011ac <stm32_fill_irq_table>
 8003a90:	2200      	movs	r2, #0
 8003a92:	2007      	movs	r0, #7
 8003a94:	4611      	mov	r1, r2
 8003a96:	f7fd f931 	bl	8000cfc <z_arm_irq_priority_set>
 8003a9a:	2208      	movs	r2, #8
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	2002      	movs	r0, #2
 8003aa0:	f7fd fb84 	bl	80011ac <stm32_fill_irq_table>
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	2008      	movs	r0, #8
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	f7fd f927 	bl	8000cfc <z_arm_irq_priority_set>
 8003aae:	2209      	movs	r2, #9
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	2003      	movs	r0, #3
 8003ab4:	f7fd fb7a 	bl	80011ac <stm32_fill_irq_table>
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2009      	movs	r0, #9
 8003abc:	4611      	mov	r1, r2
 8003abe:	f7fd f91d 	bl	8000cfc <z_arm_irq_priority_set>
 8003ac2:	220a      	movs	r2, #10
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	2004      	movs	r0, #4
 8003ac8:	f7fd fb70 	bl	80011ac <stm32_fill_irq_table>
 8003acc:	2200      	movs	r2, #0
 8003ace:	200a      	movs	r0, #10
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	f7fd f913 	bl	8000cfc <z_arm_irq_priority_set>
 8003ad6:	2105      	movs	r1, #5
 8003ad8:	2217      	movs	r2, #23
 8003ada:	4608      	mov	r0, r1
 8003adc:	f7fd fb66 	bl	80011ac <stm32_fill_irq_table>
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2017      	movs	r0, #23
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	f7fd f909 	bl	8000cfc <z_arm_irq_priority_set>
 8003aea:	2228      	movs	r2, #40	; 0x28
 8003aec:	2106      	movs	r1, #6
 8003aee:	200a      	movs	r0, #10
 8003af0:	f7fd fb5c 	bl	80011ac <stm32_fill_irq_table>
 8003af4:	2200      	movs	r2, #0
 8003af6:	2028      	movs	r0, #40	; 0x28
 8003af8:	4611      	mov	r1, r2
 8003afa:	f7fd f8ff 	bl	8000cfc <z_arm_irq_priority_set>
}
 8003afe:	2000      	movs	r0, #0
 8003b00:	bd08      	pop	{r3, pc}

08003b02 <can_calc_prescaler>:
}
#endif /* CONFIG_CAN_FD_MODE */

int can_calc_prescaler(const struct device *dev, struct can_timing *timing,
		       uint32_t bitrate)
{
 8003b02:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003b06:	460e      	mov	r6, r1
 8003b08:	4614      	mov	r4, r2
	uint32_t ts = timing->prop_seg + timing->phase_seg1 + timing->phase_seg2 +
 8003b0a:	884d      	ldrh	r5, [r1, #2]
 8003b0c:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8003b10:	88cf      	ldrh	r7, [r1, #6]
 8003b12:	6883      	ldr	r3, [r0, #8]
 8003b14:	a901      	add	r1, sp, #4
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	4798      	blx	r3
		   CAN_SYNC_SEG;
	uint32_t core_clock;
	int ret;

	ret = can_get_core_clock(dev, &core_clock);
	if (ret != 0) {
 8003b1a:	b978      	cbnz	r0, 8003b3c <can_calc_prescaler+0x3a>
	uint32_t ts = timing->prop_seg + timing->phase_seg1 + timing->phase_seg2 +
 8003b1c:	eb05 0308 	add.w	r3, r5, r8
 8003b20:	443b      	add	r3, r7
		return ret;
	}

	timing->prescaler = core_clock / (bitrate * ts);
 8003b22:	fb03 4404 	mla	r4, r3, r4, r4
 8003b26:	9801      	ldr	r0, [sp, #4]
 8003b28:	fbb0 f4f4 	udiv	r4, r0, r4
 8003b2c:	8134      	strh	r4, [r6, #8]

	return core_clock % (ts * timing->prescaler);
 8003b2e:	b2a4      	uxth	r4, r4
 8003b30:	fb03 4404 	mla	r4, r3, r4, r4
 8003b34:	fbb0 f3f4 	udiv	r3, r0, r4
 8003b38:	fb04 0013 	mls	r0, r4, r3, r0
}
 8003b3c:	b002      	add	sp, #8
 8003b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003b42 <can_stm32_signal_tx_complete>:
{
 8003b42:	b510      	push	{r4, lr}
 8003b44:	460c      	mov	r4, r1
	can_tx_callback_t callback = mb->tx_callback;
 8003b46:	6823      	ldr	r3, [r4, #0]
{
 8003b48:	4611      	mov	r1, r2
	if (callback != NULL) {
 8003b4a:	b11b      	cbz	r3, 8003b54 <can_stm32_signal_tx_complete+0x12>
		callback(dev, status, mb->callback_arg);
 8003b4c:	6862      	ldr	r2, [r4, #4]
 8003b4e:	4798      	blx	r3
		mb->tx_callback = NULL;
 8003b50:	2300      	movs	r3, #0
 8003b52:	6023      	str	r3, [r4, #0]
}
 8003b54:	bd10      	pop	{r4, pc}

08003b56 <can_stm32_get_state>:
	CAN_TypeDef *can = cfg->can;
 8003b56:	6843      	ldr	r3, [r0, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
	if (state != NULL) {
 8003b5a:	b129      	cbz	r1, 8003b68 <can_stm32_get_state+0x12>
		if (!data->started) {
 8003b5c:	6900      	ldr	r0, [r0, #16]
 8003b5e:	f890 00ed 	ldrb.w	r0, [r0, #237]	; 0xed
 8003b62:	b950      	cbnz	r0, 8003b7a <can_stm32_get_state+0x24>
			*state = CAN_STATE_STOPPED;
 8003b64:	2004      	movs	r0, #4
			*state = CAN_STATE_ERROR_ACTIVE;
 8003b66:	7008      	strb	r0, [r1, #0]
	if (err_cnt != NULL) {
 8003b68:	b12a      	cbz	r2, 8003b76 <can_stm32_get_state+0x20>
			((can->ESR & CAN_ESR_TEC) >> CAN_ESR_TEC_Pos);
 8003b6a:	6999      	ldr	r1, [r3, #24]
 8003b6c:	0c09      	lsrs	r1, r1, #16
		err_cnt->tx_err_cnt =
 8003b6e:	7011      	strb	r1, [r2, #0]
			((can->ESR & CAN_ESR_REC) >> CAN_ESR_REC_Pos);
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	0e1b      	lsrs	r3, r3, #24
		err_cnt->rx_err_cnt =
 8003b74:	7053      	strb	r3, [r2, #1]
}
 8003b76:	2000      	movs	r0, #0
 8003b78:	4770      	bx	lr
		} else if (can->ESR & CAN_ESR_BOFF) {
 8003b7a:	6998      	ldr	r0, [r3, #24]
 8003b7c:	0740      	lsls	r0, r0, #29
 8003b7e:	d501      	bpl.n	8003b84 <can_stm32_get_state+0x2e>
			*state = CAN_STATE_BUS_OFF;
 8003b80:	2003      	movs	r0, #3
 8003b82:	e7f0      	b.n	8003b66 <can_stm32_get_state+0x10>
		} else if (can->ESR & CAN_ESR_EPVF) {
 8003b84:	6998      	ldr	r0, [r3, #24]
 8003b86:	0780      	lsls	r0, r0, #30
 8003b88:	d501      	bpl.n	8003b8e <can_stm32_get_state+0x38>
			*state = CAN_STATE_ERROR_PASSIVE;
 8003b8a:	2002      	movs	r0, #2
 8003b8c:	e7eb      	b.n	8003b66 <can_stm32_get_state+0x10>
		} else if (can->ESR & CAN_ESR_EWGF) {
 8003b8e:	6998      	ldr	r0, [r3, #24]
 8003b90:	f010 0001 	ands.w	r0, r0, #1
			*state = CAN_STATE_ERROR_WARNING;
 8003b94:	bf18      	it	ne
 8003b96:	2001      	movne	r0, #1
 8003b98:	e7e5      	b.n	8003b66 <can_stm32_get_state+0x10>

08003b9a <can_stm32_get_capabilities>:
	*cap = CAN_MODE_NORMAL | CAN_MODE_LOOPBACK | CAN_MODE_LISTENONLY | CAN_MODE_ONE_SHOT;
 8003b9a:	230b      	movs	r3, #11
}
 8003b9c:	2000      	movs	r0, #0
	*cap = CAN_MODE_NORMAL | CAN_MODE_LOOPBACK | CAN_MODE_LISTENONLY | CAN_MODE_ONE_SHOT;
 8003b9e:	600b      	str	r3, [r1, #0]
}
 8003ba0:	4770      	bx	lr

08003ba2 <can_stm32_get_max_bitrate>:
	*max_bitrate = config->max_bitrate;
 8003ba2:	6843      	ldr	r3, [r0, #4]
}
 8003ba4:	2000      	movs	r0, #0
	*max_bitrate = config->max_bitrate;
 8003ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba8:	600b      	str	r3, [r1, #0]
}
 8003baa:	4770      	bx	lr

08003bac <can_stm32_get_max_filters>:
		return CONFIG_CAN_MAX_EXT_ID_FILTER;
 8003bac:	2900      	cmp	r1, #0
}
 8003bae:	bf0c      	ite	eq
 8003bb0:	200e      	moveq	r0, #14
 8003bb2:	2007      	movne	r0, #7
 8003bb4:	4770      	bx	lr

08003bb6 <can_stm32_set_state_change_callback>:
{
 8003bb6:	b510      	push	{r4, lr}
	CAN_TypeDef *can = cfg->can;
 8003bb8:	6843      	ldr	r3, [r0, #4]
	struct can_stm32_data *data = dev->data;
 8003bba:	6904      	ldr	r4, [r0, #16]
	CAN_TypeDef *can = cfg->can;
 8003bbc:	681b      	ldr	r3, [r3, #0]
	data->state_change_cb_data = user_data;
 8003bbe:	e9c4 1239 	strd	r1, r2, [r4, #228]	; 0xe4
		can->IER &= ~(CAN_IER_BOFIE | CAN_IER_EPVIE | CAN_IER_EWGIE);
 8003bc2:	695a      	ldr	r2, [r3, #20]
	if (cb == NULL) {
 8003bc4:	b919      	cbnz	r1, 8003bce <can_stm32_set_state_change_callback+0x18>
		can->IER &= ~(CAN_IER_BOFIE | CAN_IER_EPVIE | CAN_IER_EWGIE);
 8003bc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
		can->IER |= CAN_IER_BOFIE | CAN_IER_EPVIE | CAN_IER_EWGIE;
 8003bca:	615a      	str	r2, [r3, #20]
}
 8003bcc:	bd10      	pop	{r4, pc}
		can->IER |= CAN_IER_BOFIE | CAN_IER_EPVIE | CAN_IER_EWGIE;
 8003bce:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003bd2:	e7fa      	b.n	8003bca <can_stm32_set_state_change_callback+0x14>

08003bd4 <config_can_0_irq>:
CAN_STM32_IRQ_INST(inst)          \
CAN_STM32_CONFIG_INST(inst)       \
CAN_STM32_DATA_INST(inst)         \
CAN_STM32_DEFINE_INST(inst)

DT_INST_FOREACH_STATUS_OKAY(CAN_STM32_INST)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	b510      	push	{r4, lr}
 8003bd8:	4611      	mov	r1, r2
 8003bda:	4604      	mov	r4, r0
 8003bdc:	2014      	movs	r0, #20
 8003bde:	f7fd f88d 	bl	8000cfc <z_arm_irq_priority_set>
 8003be2:	2014      	movs	r0, #20
 8003be4:	f7fd f87c 	bl	8000ce0 <arch_irq_enable>
 8003be8:	2200      	movs	r2, #0
 8003bea:	2013      	movs	r0, #19
 8003bec:	4611      	mov	r1, r2
 8003bee:	f7fd f885 	bl	8000cfc <z_arm_irq_priority_set>
 8003bf2:	2013      	movs	r0, #19
 8003bf4:	f7fd f874 	bl	8000ce0 <arch_irq_enable>
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	2016      	movs	r0, #22
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	f7fd f87d 	bl	8000cfc <z_arm_irq_priority_set>
 8003c02:	2016      	movs	r0, #22
 8003c04:	f7fd f86c 	bl	8000ce0 <arch_irq_enable>
 8003c08:	6963      	ldr	r3, [r4, #20]
 8003c0a:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8003c0e:	f043 0313 	orr.w	r3, r3, #19
 8003c12:	6163      	str	r3, [r4, #20]
 8003c14:	bd10      	pop	{r4, pc}

08003c16 <can_stm32_rx_isr>:
{
 8003c16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c1a:	4606      	mov	r6, r0
	can_rx_callback_t callback = NULL;
 8003c1c:	f04f 0900 	mov.w	r9, #0
	CAN_TypeDef *can = cfg->can;
 8003c20:	6843      	ldr	r3, [r0, #4]
	struct can_stm32_data *data = dev->data;
 8003c22:	6907      	ldr	r7, [r0, #16]
	CAN_TypeDef *can = cfg->can;
 8003c24:	681c      	ldr	r4, [r3, #0]
{
 8003c26:	b085      	sub	sp, #20
	while (can->RF0R & CAN_RF0R_FMP0) {
 8003c28:	68e3      	ldr	r3, [r4, #12]
 8003c2a:	079b      	lsls	r3, r3, #30
 8003c2c:	d103      	bne.n	8003c36 <can_stm32_rx_isr+0x20>
	if (can->RF0R & CAN_RF0R_FOVR0) {
 8003c2e:	68e3      	ldr	r3, [r4, #12]
}
 8003c30:	b005      	add	sp, #20
 8003c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memset(frame, 0, sizeof(*frame));
 8003c36:	2210      	movs	r2, #16
 8003c38:	2100      	movs	r1, #0
 8003c3a:	4668      	mov	r0, sp
		filter_id = ((mbox->RDTR & CAN_RDT0R_FMI) >> CAN_RDT0R_FMI_Pos);
 8003c3c:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
	memset(frame, 0, sizeof(*frame));
 8003c40:	f7ff ff0a 	bl	8003a58 <memset>
	if (mbox->RIR & CAN_RI0R_IDE) {
 8003c44:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8003c48:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8003c4c:	f013 0f04 	tst.w	r3, #4
		frame->id = mbox->RIR >> CAN_RI0R_EXID_Pos;
 8003c50:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
 8003c54:	9b00      	ldr	r3, [sp, #0]
	if (mbox->RIR & CAN_RI0R_IDE) {
 8003c56:	d033      	beq.n	8003cc0 <can_stm32_rx_isr+0xaa>
		frame->id = mbox->RIR >> CAN_RI0R_EXID_Pos;
 8003c58:	08d2      	lsrs	r2, r2, #3
 8003c5a:	f362 031c 	bfi	r3, r2, #0, #29
 8003c5e:	9300      	str	r3, [sp, #0]
		frame->flags |= CAN_FRAME_IDE;
 8003c60:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	f88d 3005 	strb.w	r3, [sp, #5]
	if ((mbox->RIR & CAN_RI0R_RTR) != 0) {
 8003c6c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8003c70:	079a      	lsls	r2, r3, #30
		frame->flags |= CAN_FRAME_RTR;
 8003c72:	bf42      	ittt	mi
 8003c74:	f89d 3005 	ldrbmi.w	r3, [sp, #5]
 8003c78:	f043 0302 	orrmi.w	r3, r3, #2
 8003c7c:	f88d 3005 	strbmi.w	r3, [sp, #5]
	frame->dlc = mbox->RDTR & (CAN_RDT0R_DLC >> CAN_RDT0R_DLC_Pos);
 8003c80:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
		if (filter_id < CONFIG_CAN_MAX_EXT_ID_FILTER) {
 8003c84:	2d06      	cmp	r5, #6
	frame->dlc = mbox->RDTR & (CAN_RDT0R_DLC >> CAN_RDT0R_DLC_Pos);
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	f88d 3004 	strb.w	r3, [sp, #4]
	frame->data_32[0] = mbox->RDLR;
 8003c8e:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8003c92:	9302      	str	r3, [sp, #8]
	frame->data_32[1] = mbox->RDHR;
 8003c94:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 8003c98:	9303      	str	r3, [sp, #12]
		if (filter_id < CONFIG_CAN_MAX_EXT_ID_FILTER) {
 8003c9a:	d816      	bhi.n	8003cca <can_stm32_rx_isr+0xb4>
			callback = data->rx_cb_ext[filter_id];
 8003c9c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8003ca0:	f8d5 9074 	ldr.w	r9, [r5, #116]	; 0x74
			cb_arg = data->cb_arg_ext[filter_id];
 8003ca4:	f8d5 80c8 	ldr.w	r8, [r5, #200]	; 0xc8
		if (callback) {
 8003ca8:	f1b9 0f00 	cmp.w	r9, #0
 8003cac:	d003      	beq.n	8003cb6 <can_stm32_rx_isr+0xa0>
			callback(dev, &frame, cb_arg);
 8003cae:	4642      	mov	r2, r8
 8003cb0:	4669      	mov	r1, sp
 8003cb2:	4630      	mov	r0, r6
 8003cb4:	47c8      	blx	r9
		can->RF0R |= CAN_RF0R_RFOM0;
 8003cb6:	68e3      	ldr	r3, [r4, #12]
 8003cb8:	f043 0320 	orr.w	r3, r3, #32
 8003cbc:	60e3      	str	r3, [r4, #12]
 8003cbe:	e7b3      	b.n	8003c28 <can_stm32_rx_isr+0x12>
		frame->id = mbox->RIR >> CAN_RI0R_STID_Pos;
 8003cc0:	0d52      	lsrs	r2, r2, #21
 8003cc2:	f362 031c 	bfi	r3, r2, #0, #29
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	e7d0      	b.n	8003c6c <can_stm32_rx_isr+0x56>
		} else if (filter_id < CAN_STM32_MAX_FILTER_ID) {
 8003cca:	2d22      	cmp	r5, #34	; 0x22
			callback = data->rx_cb_std[index];
 8003ccc:	bf9e      	ittt	ls
 8003cce:	eb07 0585 	addls.w	r5, r7, r5, lsl #2
 8003cd2:	f8d5 9020 	ldrls.w	r9, [r5, #32]
			cb_arg = data->cb_arg_std[index];
 8003cd6:	f8d5 8074 	ldrls.w	r8, [r5, #116]	; 0x74
 8003cda:	e7e5      	b.n	8003ca8 <can_stm32_rx_isr+0x92>

08003cdc <can_stm32_tx_isr_handler>:
{
 8003cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CAN_TypeDef *can = cfg->can;
 8003cde:	6843      	ldr	r3, [r0, #4]
{
 8003ce0:	4606      	mov	r6, r0
	CAN_TypeDef *can = cfg->can;
 8003ce2:	681c      	ldr	r4, [r3, #0]
	struct can_stm32_data *data = dev->data;
 8003ce4:	6907      	ldr	r7, [r0, #16]
	bus_off = can->ESR & CAN_ESR_BOFF;
 8003ce6:	69a5      	ldr	r5, [r4, #24]
	if ((can->TSR & CAN_TSR_RQCP0) | bus_off) {
 8003ce8:	68a3      	ldr	r3, [r4, #8]
	bus_off = can->ESR & CAN_ESR_BOFF;
 8003cea:	f005 0504 	and.w	r5, r5, #4
	if ((can->TSR & CAN_TSR_RQCP0) | bus_off) {
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	432b      	orrs	r3, r5
 8003cf4:	d017      	beq.n	8003d26 <can_stm32_tx_isr_handler+0x4a>
		status = can->TSR & CAN_TSR_TXOK0 ? 0  :
 8003cf6:	68a3      	ldr	r3, [r4, #8]
 8003cf8:	0798      	lsls	r0, r3, #30
 8003cfa:	d458      	bmi.n	8003dae <can_stm32_tx_isr_handler+0xd2>
			 can->TSR & CAN_TSR_TERR0 ? -EIO :
 8003cfc:	68a3      	ldr	r3, [r4, #8]
 8003cfe:	0719      	lsls	r1, r3, #28
 8003d00:	d457      	bmi.n	8003db2 <can_stm32_tx_isr_handler+0xd6>
			 can->TSR & CAN_TSR_ALST0 ? -EBUSY :
 8003d02:	68a3      	ldr	r3, [r4, #8]
 8003d04:	075b      	lsls	r3, r3, #29
 8003d06:	d457      	bmi.n	8003db8 <can_stm32_tx_isr_handler+0xdc>
					  bus_off ? -ENETUNREACH :
 8003d08:	2d00      	cmp	r5, #0
 8003d0a:	bf0c      	ite	eq
 8003d0c:	f06f 0204 	mvneq.w	r2, #4
 8003d10:	f06f 0271 	mvnne.w	r2, #113	; 0x71
		can->TSR |= CAN_TSR_RQCP0;
 8003d14:	68a3      	ldr	r3, [r4, #8]
		can_stm32_signal_tx_complete(dev, &data->mb0, status);
 8003d16:	4630      	mov	r0, r6
		can->TSR |= CAN_TSR_RQCP0;
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	60a3      	str	r3, [r4, #8]
		can_stm32_signal_tx_complete(dev, &data->mb0, status);
 8003d1e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003d22:	f7ff ff0e 	bl	8003b42 <can_stm32_signal_tx_complete>
	if ((can->TSR & CAN_TSR_RQCP1) | bus_off) {
 8003d26:	68a3      	ldr	r3, [r4, #8]
 8003d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2c:	432b      	orrs	r3, r5
 8003d2e:	d017      	beq.n	8003d60 <can_stm32_tx_isr_handler+0x84>
		status = can->TSR & CAN_TSR_TXOK1 ? 0  :
 8003d30:	68a3      	ldr	r3, [r4, #8]
 8003d32:	0598      	lsls	r0, r3, #22
 8003d34:	d443      	bmi.n	8003dbe <can_stm32_tx_isr_handler+0xe2>
			 can->TSR & CAN_TSR_TERR1 ? -EIO :
 8003d36:	68a3      	ldr	r3, [r4, #8]
 8003d38:	0519      	lsls	r1, r3, #20
 8003d3a:	d442      	bmi.n	8003dc2 <can_stm32_tx_isr_handler+0xe6>
			 can->TSR & CAN_TSR_ALST1 ? -EBUSY :
 8003d3c:	68a3      	ldr	r3, [r4, #8]
 8003d3e:	055b      	lsls	r3, r3, #21
 8003d40:	d442      	bmi.n	8003dc8 <can_stm32_tx_isr_handler+0xec>
			 bus_off                  ? -ENETUNREACH :
 8003d42:	2d00      	cmp	r5, #0
 8003d44:	bf0c      	ite	eq
 8003d46:	f06f 0204 	mvneq.w	r2, #4
 8003d4a:	f06f 0271 	mvnne.w	r2, #113	; 0x71
		can->TSR |= CAN_TSR_RQCP1;
 8003d4e:	68a3      	ldr	r3, [r4, #8]
		can_stm32_signal_tx_complete(dev, &data->mb1, status);
 8003d50:	4630      	mov	r0, r6
		can->TSR |= CAN_TSR_RQCP1;
 8003d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d56:	60a3      	str	r3, [r4, #8]
		can_stm32_signal_tx_complete(dev, &data->mb1, status);
 8003d58:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003d5c:	f7ff fef1 	bl	8003b42 <can_stm32_signal_tx_complete>
	if ((can->TSR & CAN_TSR_RQCP2) | bus_off) {
 8003d60:	68a3      	ldr	r3, [r4, #8]
 8003d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d66:	432b      	orrs	r3, r5
 8003d68:	d017      	beq.n	8003d9a <can_stm32_tx_isr_handler+0xbe>
		status = can->TSR & CAN_TSR_TXOK2 ? 0  :
 8003d6a:	68a3      	ldr	r3, [r4, #8]
 8003d6c:	0398      	lsls	r0, r3, #14
 8003d6e:	d42e      	bmi.n	8003dce <can_stm32_tx_isr_handler+0xf2>
			 can->TSR & CAN_TSR_TERR2 ? -EIO :
 8003d70:	68a3      	ldr	r3, [r4, #8]
 8003d72:	0319      	lsls	r1, r3, #12
 8003d74:	d42d      	bmi.n	8003dd2 <can_stm32_tx_isr_handler+0xf6>
			 can->TSR & CAN_TSR_ALST2 ? -EBUSY :
 8003d76:	68a3      	ldr	r3, [r4, #8]
 8003d78:	035b      	lsls	r3, r3, #13
 8003d7a:	d42d      	bmi.n	8003dd8 <can_stm32_tx_isr_handler+0xfc>
			 bus_off                  ? -ENETUNREACH :
 8003d7c:	2d00      	cmp	r5, #0
 8003d7e:	bf0c      	ite	eq
 8003d80:	f06f 0204 	mvneq.w	r2, #4
 8003d84:	f06f 0271 	mvnne.w	r2, #113	; 0x71
		can->TSR |= CAN_TSR_RQCP2;
 8003d88:	68a3      	ldr	r3, [r4, #8]
		can_stm32_signal_tx_complete(dev, &data->mb2, status);
 8003d8a:	4630      	mov	r0, r6
		can->TSR |= CAN_TSR_RQCP2;
 8003d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d90:	60a3      	str	r3, [r4, #8]
		can_stm32_signal_tx_complete(dev, &data->mb2, status);
 8003d92:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8003d96:	f7ff fed4 	bl	8003b42 <can_stm32_signal_tx_complete>
	if (can->TSR & CAN_TSR_TME) {
 8003d9a:	68a3      	ldr	r3, [r4, #8]
 8003d9c:	f013 5fe0 	tst.w	r3, #469762048	; 0x1c000000
 8003da0:	d01d      	beq.n	8003dde <can_stm32_tx_isr_handler+0x102>
	z_impl_k_sem_give(sem);
 8003da2:	f107 0014 	add.w	r0, r7, #20
}
 8003da6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003daa:	f7ff b8f9 	b.w	8002fa0 <z_impl_k_sem_give>
		status = can->TSR & CAN_TSR_TXOK0 ? 0  :
 8003dae:	2200      	movs	r2, #0
 8003db0:	e7b0      	b.n	8003d14 <can_stm32_tx_isr_handler+0x38>
			 can->TSR & CAN_TSR_TERR0 ? -EIO :
 8003db2:	f06f 0204 	mvn.w	r2, #4
 8003db6:	e7ad      	b.n	8003d14 <can_stm32_tx_isr_handler+0x38>
			 can->TSR & CAN_TSR_ALST0 ? -EBUSY :
 8003db8:	f06f 020f 	mvn.w	r2, #15
 8003dbc:	e7aa      	b.n	8003d14 <can_stm32_tx_isr_handler+0x38>
		status = can->TSR & CAN_TSR_TXOK1 ? 0  :
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	e7c5      	b.n	8003d4e <can_stm32_tx_isr_handler+0x72>
			 can->TSR & CAN_TSR_TERR1 ? -EIO :
 8003dc2:	f06f 0204 	mvn.w	r2, #4
 8003dc6:	e7c2      	b.n	8003d4e <can_stm32_tx_isr_handler+0x72>
			 can->TSR & CAN_TSR_ALST1 ? -EBUSY :
 8003dc8:	f06f 020f 	mvn.w	r2, #15
 8003dcc:	e7bf      	b.n	8003d4e <can_stm32_tx_isr_handler+0x72>
		status = can->TSR & CAN_TSR_TXOK2 ? 0  :
 8003dce:	2200      	movs	r2, #0
 8003dd0:	e7da      	b.n	8003d88 <can_stm32_tx_isr_handler+0xac>
			 can->TSR & CAN_TSR_TERR2 ? -EIO :
 8003dd2:	f06f 0204 	mvn.w	r2, #4
 8003dd6:	e7d7      	b.n	8003d88 <can_stm32_tx_isr_handler+0xac>
			 can->TSR & CAN_TSR_ALST2 ? -EBUSY :
 8003dd8:	f06f 020f 	mvn.w	r2, #15
 8003ddc:	e7d4      	b.n	8003d88 <can_stm32_tx_isr_handler+0xac>
}
 8003dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003de0 <can_stm32_tx_isr>:
	can_stm32_tx_isr_handler(dev);
 8003de0:	f7ff bf7c 	b.w	8003cdc <can_stm32_tx_isr_handler>

08003de4 <can_stm32_state_change_isr>:
{
 8003de4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	CAN_TypeDef *can = cfg->can;
 8003de8:	6843      	ldr	r3, [r0, #4]
{
 8003dea:	4604      	mov	r4, r0
	CAN_TypeDef *can = cfg->can;
 8003dec:	681e      	ldr	r6, [r3, #0]
	if (can->MSR & CAN_MSR_ERRI) {
 8003dee:	6873      	ldr	r3, [r6, #4]
 8003df0:	075b      	lsls	r3, r3, #29
 8003df2:	d51b      	bpl.n	8003e2c <can_stm32_state_change_isr+0x48>
		can_stm32_tx_isr_handler(dev);
 8003df4:	f7ff ff72 	bl	8003cdc <can_stm32_tx_isr_handler>
	struct can_stm32_data *data = dev->data;
 8003df8:	6925      	ldr	r5, [r4, #16]
	(void)can_stm32_get_state(dev, &state, &err_cnt);
 8003dfa:	f10d 0103 	add.w	r1, sp, #3
 8003dfe:	4620      	mov	r0, r4
	void *state_change_cb_data = data->state_change_cb_data;
 8003e00:	e9d5 7839 	ldrd	r7, r8, [r5, #228]	; 0xe4
	(void)can_stm32_get_state(dev, &state, &err_cnt);
 8003e04:	aa01      	add	r2, sp, #4
 8003e06:	f7ff fea6 	bl	8003b56 <can_stm32_get_state>
	if (state != data->state) {
 8003e0a:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8003e0e:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
 8003e12:	428b      	cmp	r3, r1
 8003e14:	d006      	beq.n	8003e24 <can_stm32_state_change_isr+0x40>
		data->state = state;
 8003e16:	f885 10ec 	strb.w	r1, [r5, #236]	; 0xec
		if (cb != NULL) {
 8003e1a:	b11f      	cbz	r7, 8003e24 <can_stm32_state_change_isr+0x40>
			cb(dev, state, err_cnt, state_change_cb_data);
 8003e1c:	4643      	mov	r3, r8
 8003e1e:	4620      	mov	r0, r4
 8003e20:	9a01      	ldr	r2, [sp, #4]
 8003e22:	47b8      	blx	r7
		can->MSR |= CAN_MSR_ERRI;
 8003e24:	6873      	ldr	r3, [r6, #4]
 8003e26:	f043 0304 	orr.w	r3, r3, #4
 8003e2a:	6073      	str	r3, [r6, #4]
}
 8003e2c:	b002      	add	sp, #8
 8003e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003e32 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
 8003e32:	f7fe bfff 	b.w	8002e34 <z_impl_k_mutex_lock>

08003e36 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 8003e36:	f7ff b877 	b.w	8002f28 <z_impl_k_mutex_unlock>

08003e3a <can_stm32_stop>:
{
 8003e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct can_stm32_data *data = dev->data;
 8003e3e:	6905      	ldr	r5, [r0, #16]
	const struct can_stm32_config *cfg = dev->config;
 8003e40:	f8d0 8004 	ldr.w	r8, [r0, #4]
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 8003e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
 8003e48:	4606      	mov	r6, r0
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 8003e4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e4e:	4628      	mov	r0, r5
	CAN_TypeDef *can = cfg->can;
 8003e50:	f8d8 7000 	ldr.w	r7, [r8]
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 8003e54:	f7ff ffed 	bl	8003e32 <k_mutex_lock.constprop.0.isra.0>
	if (!data->started) {
 8003e58:	f895 30ed 	ldrb.w	r3, [r5, #237]	; 0xed
 8003e5c:	b383      	cbz	r3, 8003ec0 <can_stm32_stop+0x86>
	ret = can_stm32_enter_init_mode(can);
 8003e5e:	4638      	mov	r0, r7
 8003e60:	f7fd facc 	bl	80013fc <can_stm32_enter_init_mode>
	if (ret < 0) {
 8003e64:	1e04      	subs	r4, r0, #0
 8003e66:	db2e      	blt.n	8003ec6 <can_stm32_stop+0x8c>
	can_stm32_signal_tx_complete(dev, &data->mb0, -ENETDOWN);
 8003e68:	f06f 0272 	mvn.w	r2, #114	; 0x72
 8003e6c:	4630      	mov	r0, r6
 8003e6e:	f105 0124 	add.w	r1, r5, #36	; 0x24
 8003e72:	f7ff fe66 	bl	8003b42 <can_stm32_signal_tx_complete>
	can_stm32_signal_tx_complete(dev, &data->mb1, -ENETDOWN);
 8003e76:	f06f 0272 	mvn.w	r2, #114	; 0x72
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	f105 012c 	add.w	r1, r5, #44	; 0x2c
 8003e80:	f7ff fe5f 	bl	8003b42 <can_stm32_signal_tx_complete>
	can_stm32_signal_tx_complete(dev, &data->mb2, -ENETDOWN);
 8003e84:	4630      	mov	r0, r6
 8003e86:	f06f 0272 	mvn.w	r2, #114	; 0x72
 8003e8a:	f105 0134 	add.w	r1, r5, #52	; 0x34
 8003e8e:	f7ff fe58 	bl	8003b42 <can_stm32_signal_tx_complete>
	can->TSR |= CAN_TSR_ABRQ2 | CAN_TSR_ABRQ1 | CAN_TSR_ABRQ0;
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	f043 1380 	orr.w	r3, r3, #8388736	; 0x800080
 8003e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e9c:	60bb      	str	r3, [r7, #8]
	if (cfg->phy != NULL) {
 8003e9e:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
 8003ea2:	b120      	cbz	r0, 8003eae <can_stm32_stop+0x74>
 8003ea4:	6883      	ldr	r3, [r0, #8]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	4798      	blx	r3
		if (ret != 0) {
 8003eaa:	4604      	mov	r4, r0
 8003eac:	b910      	cbnz	r0, 8003eb4 <can_stm32_stop+0x7a>
	data->started = false;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f885 30ed 	strb.w	r3, [r5, #237]	; 0xed
	k_mutex_unlock(&data->inst_mutex);
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	f7ff ffbe 	bl	8003e36 <k_mutex_unlock.isra.0>
}
 8003eba:	4620      	mov	r0, r4
 8003ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = -EALREADY;
 8003ec0:	f06f 0477 	mvn.w	r4, #119	; 0x77
 8003ec4:	e7f6      	b.n	8003eb4 <can_stm32_stop+0x7a>
		ret = -EIO;
 8003ec6:	f06f 0404 	mvn.w	r4, #4
 8003eca:	e7f3      	b.n	8003eb4 <can_stm32_stop+0x7a>

08003ecc <can_stm32_send>:
{
 8003ecc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed0:	4698      	mov	r8, r3
	CAN_TypeDef *can = cfg->can;
 8003ed2:	6843      	ldr	r3, [r0, #4]
{
 8003ed4:	460d      	mov	r5, r1
	CAN_TypeDef *can = cfg->can;
 8003ed6:	681c      	ldr	r4, [r3, #0]
	if (frame->dlc > CAN_MAX_DLC) {
 8003ed8:	790b      	ldrb	r3, [r1, #4]
{
 8003eda:	4617      	mov	r7, r2
	if (frame->dlc > CAN_MAX_DLC) {
 8003edc:	2b08      	cmp	r3, #8
{
 8003ede:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
	struct can_stm32_data *data = dev->data;
 8003ee2:	6906      	ldr	r6, [r0, #16]
	uint32_t transmit_status_register = can->TSR;
 8003ee4:	f8d4 9008 	ldr.w	r9, [r4, #8]
	if (frame->dlc > CAN_MAX_DLC) {
 8003ee8:	d874      	bhi.n	8003fd4 <can_stm32_send+0x108>
	if ((frame->flags & ~(CAN_FRAME_IDE | CAN_FRAME_RTR)) != 0) {
 8003eea:	794b      	ldrb	r3, [r1, #5]
 8003eec:	2b03      	cmp	r3, #3
 8003eee:	d874      	bhi.n	8003fda <can_stm32_send+0x10e>
	if (!data->started) {
 8003ef0:	f896 30ed 	ldrb.w	r3, [r6, #237]	; 0xed
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d073      	beq.n	8003fe0 <can_stm32_send+0x114>
	if (can->ESR & CAN_ESR_BOFF) {
 8003ef8:	69a3      	ldr	r3, [r4, #24]
 8003efa:	0759      	lsls	r1, r3, #29
 8003efc:	d473      	bmi.n	8003fe6 <can_stm32_send+0x11a>
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 8003efe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f06:	4630      	mov	r0, r6
 8003f08:	f7ff ff93 	bl	8003e32 <k_mutex_lock.constprop.0.isra.0>
		if (k_sem_take(&data->tx_int_sem, timeout)) {
 8003f0c:	f106 0b14 	add.w	fp, r6, #20
	while (!(transmit_status_register & CAN_TSR_TME)) {
 8003f10:	f019 5fe0 	tst.w	r9, #469762048	; 0x1c000000
 8003f14:	d037      	beq.n	8003f86 <can_stm32_send+0xba>
	if (transmit_status_register & CAN_TSR_TME0) {
 8003f16:	f019 6f80 	tst.w	r9, #67108864	; 0x4000000
 8003f1a:	d04b      	beq.n	8003fb4 <can_stm32_send+0xe8>
		mailbox = &can->sTxMailBox[0];
 8003f1c:	f504 73c0 	add.w	r3, r4, #384	; 0x180
		mb = &(data->mb0);
 8003f20:	f106 0224 	add.w	r2, r6, #36	; 0x24
	mb->callback_arg = user_data;
 8003f24:	990b      	ldr	r1, [sp, #44]	; 0x2c
	mb->tx_callback = callback;
 8003f26:	f8c2 a000 	str.w	sl, [r2]
	mb->callback_arg = user_data;
 8003f2a:	6051      	str	r1, [r2, #4]
	mailbox->TIR &= CAN_TI0R_TXRQ;
 8003f2c:	681a      	ldr	r2, [r3, #0]
	k_mutex_unlock(&data->inst_mutex);
 8003f2e:	4630      	mov	r0, r6
	mailbox->TIR &= CAN_TI0R_TXRQ;
 8003f30:	f002 0201 	and.w	r2, r2, #1
 8003f34:	601a      	str	r2, [r3, #0]
	if ((frame->flags & CAN_FRAME_IDE) != 0) {
 8003f36:	796a      	ldrb	r2, [r5, #5]
 8003f38:	6829      	ldr	r1, [r5, #0]
 8003f3a:	f012 0f01 	tst.w	r2, #1
		mailbox->TIR |= (frame->id << CAN_TI0R_EXID_Pos)
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	bf16      	itet	ne
 8003f42:	ea42 02c1 	orrne.w	r2, r2, r1, lsl #3
		mailbox->TIR |= (frame->id << CAN_TI0R_STID_Pos);
 8003f46:	ea42 5241 	orreq.w	r2, r2, r1, lsl #21
		mailbox->TIR |= (frame->id << CAN_TI0R_EXID_Pos)
 8003f4a:	f042 0204 	orrne.w	r2, r2, #4
		mailbox->TIR |= (frame->id << CAN_TI0R_STID_Pos);
 8003f4e:	601a      	str	r2, [r3, #0]
	if ((frame->flags & CAN_FRAME_RTR) != 0) {
 8003f50:	796a      	ldrb	r2, [r5, #5]
 8003f52:	0792      	lsls	r2, r2, #30
		mailbox->TIR |= CAN_TI1R_RTR;
 8003f54:	bf42      	ittt	mi
 8003f56:	681a      	ldrmi	r2, [r3, #0]
 8003f58:	f042 0202 	orrmi.w	r2, r2, #2
 8003f5c:	601a      	strmi	r2, [r3, #0]
	mailbox->TDTR = (mailbox->TDTR & ~CAN_TDT1R_DLC) |
 8003f5e:	6859      	ldr	r1, [r3, #4]
			((frame->dlc & 0xF) << CAN_TDT1R_DLC_Pos);
 8003f60:	792a      	ldrb	r2, [r5, #4]
	mailbox->TDTR = (mailbox->TDTR & ~CAN_TDT1R_DLC) |
 8003f62:	f021 010f 	bic.w	r1, r1, #15
			((frame->dlc & 0xF) << CAN_TDT1R_DLC_Pos);
 8003f66:	f002 020f 	and.w	r2, r2, #15
	mailbox->TDTR = (mailbox->TDTR & ~CAN_TDT1R_DLC) |
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]
	mailbox->TDLR = frame->data_32[0];
 8003f6e:	68aa      	ldr	r2, [r5, #8]
 8003f70:	609a      	str	r2, [r3, #8]
	mailbox->TDHR = frame->data_32[1];
 8003f72:	68ea      	ldr	r2, [r5, #12]
 8003f74:	60da      	str	r2, [r3, #12]
	mailbox->TIR |= CAN_TI0R_TXRQ;
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	f042 0201 	orr.w	r2, r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]
	k_mutex_unlock(&data->inst_mutex);
 8003f7e:	f7ff ff5a 	bl	8003e36 <k_mutex_unlock.isra.0>
	return 0;
 8003f82:	2000      	movs	r0, #0
 8003f84:	e00a      	b.n	8003f9c <can_stm32_send+0xd0>
		k_mutex_unlock(&data->inst_mutex);
 8003f86:	4630      	mov	r0, r6
 8003f88:	f7ff ff55 	bl	8003e36 <k_mutex_unlock.isra.0>
	return z_impl_k_sem_take(sem, timeout);
 8003f8c:	463a      	mov	r2, r7
 8003f8e:	4643      	mov	r3, r8
 8003f90:	4658      	mov	r0, fp
 8003f92:	f7ff f825 	bl	8002fe0 <z_impl_k_sem_take>
		if (k_sem_take(&data->tx_int_sem, timeout)) {
 8003f96:	b118      	cbz	r0, 8003fa0 <can_stm32_send+0xd4>
			return -EAGAIN;
 8003f98:	f06f 000a 	mvn.w	r0, #10
}
 8003f9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		k_mutex_lock(&data->inst_mutex, K_FOREVER);
 8003fa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fa8:	4630      	mov	r0, r6
 8003faa:	f7ff ff42 	bl	8003e32 <k_mutex_lock.constprop.0.isra.0>
		transmit_status_register = can->TSR;
 8003fae:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8003fb2:	e7ad      	b.n	8003f10 <can_stm32_send+0x44>
	} else if (transmit_status_register & CAN_TSR_TME1) {
 8003fb4:	f019 6f00 	tst.w	r9, #134217728	; 0x8000000
 8003fb8:	d004      	beq.n	8003fc4 <can_stm32_send+0xf8>
		mailbox = &can->sTxMailBox[1];
 8003fba:	f504 73c8 	add.w	r3, r4, #400	; 0x190
		mb = &data->mb1;
 8003fbe:	f106 022c 	add.w	r2, r6, #44	; 0x2c
 8003fc2:	e7af      	b.n	8003f24 <can_stm32_send+0x58>
	} else if (transmit_status_register & CAN_TSR_TME2) {
 8003fc4:	f019 5180 	ands.w	r1, r9, #268435456	; 0x10000000
 8003fc8:	d010      	beq.n	8003fec <can_stm32_send+0x120>
		mailbox = &can->sTxMailBox[2];
 8003fca:	f504 73d0 	add.w	r3, r4, #416	; 0x1a0
		mb = &data->mb2;
 8003fce:	f106 0234 	add.w	r2, r6, #52	; 0x34
 8003fd2:	e7a7      	b.n	8003f24 <can_stm32_send+0x58>
		return -EINVAL;
 8003fd4:	f06f 0015 	mvn.w	r0, #21
 8003fd8:	e7e0      	b.n	8003f9c <can_stm32_send+0xd0>
		return -ENOTSUP;
 8003fda:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8003fde:	e7dd      	b.n	8003f9c <can_stm32_send+0xd0>
		return -ENETDOWN;
 8003fe0:	f06f 0072 	mvn.w	r0, #114	; 0x72
 8003fe4:	e7da      	b.n	8003f9c <can_stm32_send+0xd0>
		return -ENETUNREACH;
 8003fe6:	f06f 0071 	mvn.w	r0, #113	; 0x71
 8003fea:	e7d7      	b.n	8003f9c <can_stm32_send+0xd0>
	mb->tx_callback = callback;
 8003fec:	f8c1 a000 	str.w	sl, [r1]
	mb->callback_arg = user_data;
 8003ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ff2:	604b      	str	r3, [r1, #4]
	mailbox->TIR &= CAN_TI0R_TXRQ;
 8003ff4:	680b      	ldr	r3, [r1, #0]
 8003ff6:	deff      	udf	#255	; 0xff

08003ff8 <can_stm32_set_mode>:
{
 8003ff8:	b570      	push	{r4, r5, r6, lr}
	CAN_TypeDef *can = cfg->can;
 8003ffa:	6843      	ldr	r3, [r0, #4]
{
 8003ffc:	460d      	mov	r5, r1
	CAN_TypeDef *can = cfg->can;
 8003ffe:	681c      	ldr	r4, [r3, #0]
	if ((mode & ~(CAN_MODE_LOOPBACK | CAN_MODE_LISTENONLY | CAN_MODE_ONE_SHOT)) != 0) {
 8004000:	f031 030b 	bics.w	r3, r1, #11
	struct can_stm32_data *data = dev->data;
 8004004:	6906      	ldr	r6, [r0, #16]
	if ((mode & ~(CAN_MODE_LOOPBACK | CAN_MODE_LISTENONLY | CAN_MODE_ONE_SHOT)) != 0) {
 8004006:	d126      	bne.n	8004056 <can_stm32_set_mode+0x5e>
	if (data->started) {
 8004008:	f896 30ed 	ldrb.w	r3, [r6, #237]	; 0xed
 800400c:	bb33      	cbnz	r3, 800405c <can_stm32_set_mode+0x64>
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 800400e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004012:	4630      	mov	r0, r6
 8004014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004018:	f7ff ff0b 	bl	8003e32 <k_mutex_lock.constprop.0.isra.0>
		can->BTR |= CAN_BTR_LBKM;
 800401c:	69e3      	ldr	r3, [r4, #28]
	if ((mode & CAN_MODE_LOOPBACK) != 0) {
 800401e:	07e8      	lsls	r0, r5, #31
		can->BTR |= CAN_BTR_LBKM;
 8004020:	bf4c      	ite	mi
 8004022:	f043 4380 	orrmi.w	r3, r3, #1073741824	; 0x40000000
		can->BTR &= ~CAN_BTR_LBKM;
 8004026:	f023 4380 	bicpl.w	r3, r3, #1073741824	; 0x40000000
 800402a:	61e3      	str	r3, [r4, #28]
		can->BTR |= CAN_BTR_SILM;
 800402c:	69e3      	ldr	r3, [r4, #28]
	if ((mode & CAN_MODE_LISTENONLY) != 0) {
 800402e:	07a9      	lsls	r1, r5, #30
		can->BTR |= CAN_BTR_SILM;
 8004030:	bf4c      	ite	mi
 8004032:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
		can->BTR &= ~CAN_BTR_SILM;
 8004036:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800403a:	61e3      	str	r3, [r4, #28]
		can->MCR |= CAN_MCR_NART;
 800403c:	6823      	ldr	r3, [r4, #0]
	if ((mode & CAN_MODE_ONE_SHOT) != 0) {
 800403e:	072a      	lsls	r2, r5, #28
		can->MCR |= CAN_MCR_NART;
 8004040:	bf4c      	ite	mi
 8004042:	f043 0310 	orrmi.w	r3, r3, #16
		can->MCR &= ~CAN_MCR_NART;
 8004046:	f023 0310 	bicpl.w	r3, r3, #16
	k_mutex_unlock(&data->inst_mutex);
 800404a:	4630      	mov	r0, r6
		can->MCR &= ~CAN_MCR_NART;
 800404c:	6023      	str	r3, [r4, #0]
	k_mutex_unlock(&data->inst_mutex);
 800404e:	f7ff fef2 	bl	8003e36 <k_mutex_unlock.isra.0>
	return 0;
 8004052:	2000      	movs	r0, #0
}
 8004054:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
 8004056:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800405a:	e7fb      	b.n	8004054 <can_stm32_set_mode+0x5c>
		return -EBUSY;
 800405c:	f06f 000f 	mvn.w	r0, #15
 8004060:	e7f8      	b.n	8004054 <can_stm32_set_mode+0x5c>

08004062 <stm32_clock_control_on>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 8004062:	680b      	ldr	r3, [r1, #0]
 8004064:	f1a3 0214 	sub.w	r2, r3, #20
 8004068:	2a08      	cmp	r2, #8
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus,
 800406a:	bf9f      	itttt	ls
 800406c:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 8004070:	f503 3304 	addls.w	r3, r3, #135168	; 0x21000
	return temp & (1 << bit);
}

static ALWAYS_INLINE void sys_set_bits(mem_addr_t addr, unsigned int mask)
{
	uint32_t temp = *(volatile uint32_t *)addr;
 8004074:	681a      	ldrls	r2, [r3, #0]

	*(volatile uint32_t *)addr = temp | mask;
 8004076:	6849      	ldrls	r1, [r1, #4]
	return 0;
 8004078:	bf9b      	ittet	ls
 800407a:	2000      	movls	r0, #0
 800407c:	430a      	orrls	r2, r1
		return -ENOTSUP;
 800407e:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
 8004082:	601a      	strls	r2, [r3, #0]
}
 8004084:	4770      	bx	lr

08004086 <stm32_clock_control_off>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 8004086:	680b      	ldr	r3, [r1, #0]
 8004088:	f1a3 0214 	sub.w	r2, r3, #20
 800408c:	2a08      	cmp	r2, #8
	sys_clear_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus,
 800408e:	bf9f      	itttt	ls
 8004090:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 8004094:	f503 3304 	addls.w	r3, r3, #135168	; 0x21000
}

static ALWAYS_INLINE void sys_clear_bits(mem_addr_t addr, unsigned int mask)
{
	uint32_t temp = *(volatile uint32_t *)addr;
 8004098:	681a      	ldrls	r2, [r3, #0]

	*(volatile uint32_t *)addr = temp & ~mask;
 800409a:	6849      	ldrls	r1, [r1, #4]
	return 0;
 800409c:	bf9b      	ittet	ls
 800409e:	2000      	movls	r0, #0
 80040a0:	438a      	bicls	r2, r1
		return -ENOTSUP;
 80040a2:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
 80040a6:	601a      	strls	r2, [r3, #0]
}
 80040a8:	4770      	bx	lr

080040aa <stm32_clock_control_configure>:
	err = enabled_clock(pclken->bus);
 80040aa:	680b      	ldr	r3, [r1, #0]
	switch (src_clk) {
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d001      	beq.n	80040b4 <stm32_clock_control_configure+0xa>
 80040b0:	2b05      	cmp	r3, #5
 80040b2:	d112      	bne.n	80040da <stm32_clock_control_configure+0x30>
	if (pclken->enr == NO_SEL) {
 80040b4:	684a      	ldr	r2, [r1, #4]
 80040b6:	2aff      	cmp	r2, #255	; 0xff
 80040b8:	d00d      	beq.n	80040d6 <stm32_clock_control_configure+0x2c>
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 80040ba:	b2d3      	uxtb	r3, r2
 80040bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040c0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
	uint32_t temp = *(volatile uint32_t *)addr;
 80040c4:	6818      	ldr	r0, [r3, #0]
		     STM32_CLOCK_VAL_GET(pclken->enr) << STM32_CLOCK_SHIFT_GET(pclken->enr));
 80040c6:	f3c2 4102 	ubfx	r1, r2, #16, #3
 80040ca:	f3c2 2204 	ubfx	r2, r2, #8, #5
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 80040ce:	fa01 f202 	lsl.w	r2, r1, r2
	*(volatile uint32_t *)addr = temp | mask;
 80040d2:	4302      	orrs	r2, r0
 80040d4:	601a      	str	r2, [r3, #0]
		return 0;
 80040d6:	2000      	movs	r0, #0
 80040d8:	4770      	bx	lr
	switch (src_clk) {
 80040da:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 80040de:	4770      	bx	lr

080040e0 <config_enable_default_clocks>:
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
	/* Nothing for now */
}
 80040e0:	4770      	bx	lr

080040e2 <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80040e2:	6843      	ldr	r3, [r0, #4]
}
 80040e4:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80040e6:	685b      	ldr	r3, [r3, #4]
  return (READ_REG(GPIOx->IDR));
 80040e8:	689b      	ldr	r3, [r3, #8]
	*value = LL_GPIO_ReadInputPort(gpio);
 80040ea:	600b      	str	r3, [r1, #0]
}
 80040ec:	4770      	bx	lr

080040ee <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80040ee:	6843      	ldr	r3, [r0, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
  return (uint32_t)(READ_REG(GPIOx->ODR));
 80040f2:	68d8      	ldr	r0, [r3, #12]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 80040f4:	4042      	eors	r2, r0
 80040f6:	400a      	ands	r2, r1
 80040f8:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 80040fa:	60da      	str	r2, [r3, #12]
}
 80040fc:	2000      	movs	r0, #0
 80040fe:	4770      	bx	lr

08004100 <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004100:	6843      	ldr	r3, [r0, #4]
}
 8004102:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004104:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 8004106:	6119      	str	r1, [r3, #16]
}
 8004108:	4770      	bx	lr

0800410a <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800410a:	6843      	ldr	r3, [r0, #4]
}
 800410c:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800410e:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BRR, pins);
 8004110:	6159      	str	r1, [r3, #20]
}
 8004112:	4770      	bx	lr

08004114 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004114:	6843      	ldr	r3, [r0, #4]
}
 8004116:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004118:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 800411a:	68d3      	ldr	r3, [r2, #12]
 800411c:	404b      	eors	r3, r1
 800411e:	60d3      	str	r3, [r2, #12]
}
 8004120:	4770      	bx	lr

08004122 <gpio_stm32_manage_callback>:
{
 8004122:	b510      	push	{r4, lr}
	struct gpio_stm32_data *data = dev->data;
 8004124:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 8004126:	6898      	ldr	r0, [r3, #8]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8004128:	b1f8      	cbz	r0, 800416a <gpio_stm32_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800412a:	4288      	cmp	r0, r1
 800412c:	d119      	bne.n	8004162 <gpio_stm32_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
 800412e:	68dc      	ldr	r4, [r3, #12]
	return node->next;
 8004130:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 8004132:	42a1      	cmp	r1, r4
	list->head = node;
 8004134:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8004136:	d100      	bne.n	800413a <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 8004138:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 800413a:	2000      	movs	r0, #0
 800413c:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
 800413e:	b12a      	cbz	r2, 800414c <gpio_stm32_manage_callback+0x2a>
	return list->head;
 8004140:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 8004142:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 8004144:	68da      	ldr	r2, [r3, #12]
	list->head = node;
 8004146:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8004148:	b902      	cbnz	r2, 800414c <gpio_stm32_manage_callback+0x2a>
	list->tail = node;
 800414a:	60d9      	str	r1, [r3, #12]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 800414c:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->cb, callback, set);
 800414e:	e010      	b.n	8004172 <gpio_stm32_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8004150:	4281      	cmp	r1, r0
 8004152:	d106      	bne.n	8004162 <gpio_stm32_manage_callback+0x40>
	return node->next;
 8004154:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
 8004156:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 8004158:	68d8      	ldr	r0, [r3, #12]
 800415a:	4281      	cmp	r1, r0
 800415c:	d1ed      	bne.n	800413a <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 800415e:	60dc      	str	r4, [r3, #12]
}
 8004160:	e7eb      	b.n	800413a <gpio_stm32_manage_callback+0x18>
	return node->next;
 8004162:	4604      	mov	r4, r0
 8004164:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8004166:	2800      	cmp	r0, #0
 8004168:	d1f2      	bne.n	8004150 <gpio_stm32_manage_callback+0x2e>
			if (!set) {
 800416a:	2a00      	cmp	r2, #0
 800416c:	d1e8      	bne.n	8004140 <gpio_stm32_manage_callback+0x1e>
				return -EINVAL;
 800416e:	f06f 0015 	mvn.w	r0, #21
}
 8004172:	bd10      	pop	{r4, pc}

08004174 <LL_GPIO_SetPinMode>:
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004174:	fa91 f3a1 	rbit	r3, r1
  return __builtin_clz(value);
 8004178:	fab3 f383 	clz	r3, r3
{
 800417c:	b570      	push	{r4, r5, r6, lr}
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800417e:	0e0d      	lsrs	r5, r1, #24
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8004180:	260f      	movs	r6, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004182:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 8004186:	fab1 f181 	clz	r1, r1
 800418a:	5944      	ldr	r4, [r0, r5]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	fa06 f303 	lsl.w	r3, r6, r3
 8004192:	0089      	lsls	r1, r1, #2
 8004194:	ea24 0403 	bic.w	r4, r4, r3
 8004198:	408a      	lsls	r2, r1
 800419a:	4322      	orrs	r2, r4
 800419c:	5142      	str	r2, [r0, r5]
}
 800419e:	bd70      	pop	{r4, r5, r6, pc}

080041a0 <LL_GPIO_SetPinSpeed>:
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	fa91 f3a1 	rbit	r3, r1
  return __builtin_clz(value);
 80041a4:	fab3 f383 	clz	r3, r3
{
 80041a8:	b570      	push	{r4, r5, r6, lr}
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80041aa:	0e0d      	lsrs	r5, r1, #24
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80041ac:	2603      	movs	r6, #3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ae:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 80041b2:	fab1 f181 	clz	r1, r1
 80041b6:	5944      	ldr	r4, [r0, r5]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	fa06 f303 	lsl.w	r3, r6, r3
 80041be:	0089      	lsls	r1, r1, #2
 80041c0:	ea24 0403 	bic.w	r4, r4, r3
 80041c4:	408a      	lsls	r2, r1
 80041c6:	4322      	orrs	r2, r4
 80041c8:	5142      	str	r2, [r0, r5]
}
 80041ca:	bd70      	pop	{r4, r5, r6, pc}

080041cc <LL_GPIO_SetPinOutputType>:
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041cc:	fa91 f3a1 	rbit	r3, r1
  return __builtin_clz(value);
 80041d0:	fab3 f383 	clz	r3, r3
{
 80041d4:	b570      	push	{r4, r5, r6, lr}
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80041d6:	0e0d      	lsrs	r5, r1, #24
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80041d8:	2604      	movs	r6, #4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041da:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 80041de:	fab1 f181 	clz	r1, r1
 80041e2:	5944      	ldr	r4, [r0, r5]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	fa06 f303 	lsl.w	r3, r6, r3
 80041ea:	0089      	lsls	r1, r1, #2
 80041ec:	ea24 0403 	bic.w	r4, r4, r3
 80041f0:	408a      	lsls	r2, r1
 80041f2:	4322      	orrs	r2, r4
 80041f4:	5142      	str	r2, [r0, r5]
}
 80041f6:	bd70      	pop	{r4, r5, r6, pc}

080041f8 <gpio_stm32_isr>:
{
 80041f8:	b570      	push	{r4, r5, r6, lr}
 80041fa:	460b      	mov	r3, r1
 80041fc:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 80041fe:	b121      	cbz	r1, 800420a <gpio_stm32_isr+0x12>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8004200:	2501      	movs	r5, #1
 8004202:	685e      	ldr	r6, [r3, #4]
	return node->next;
 8004204:	680c      	ldr	r4, [r1, #0]
 8004206:	4085      	lsls	r5, r0
 8004208:	b901      	cbnz	r1, 800420c <gpio_stm32_isr+0x14>
}
 800420a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
 800420c:	688a      	ldr	r2, [r1, #8]
 800420e:	402a      	ands	r2, r5
 8004210:	d002      	beq.n	8004218 <gpio_stm32_isr+0x20>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8004212:	4630      	mov	r0, r6
 8004214:	684b      	ldr	r3, [r1, #4]
 8004216:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8004218:	b11c      	cbz	r4, 8004222 <gpio_stm32_isr+0x2a>
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	4621      	mov	r1, r4
 800421e:	461c      	mov	r4, r3
 8004220:	e7f2      	b.n	8004208 <gpio_stm32_isr+0x10>
 8004222:	4623      	mov	r3, r4
 8004224:	e7fa      	b.n	800421c <gpio_stm32_isr+0x24>

08004226 <gpio_stm32_configure_raw.constprop.0.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 8004226:	b570      	push	{r4, r5, r6, lr}
	pinval = (1 << pin) << GPIO_PIN_MASK_POS;
 8004228:	2401      	movs	r4, #1
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 800422a:	4615      	mov	r5, r2
	if (pin < 8) {
 800422c:	2907      	cmp	r1, #7
	pinval = (1 << pin) << GPIO_PIN_MASK_POS;
 800422e:	fa04 f201 	lsl.w	r2, r4, r1
		pinval |= (1 << (pin % 8)) | 0x04000000;
 8004232:	bfc8      	it	gt
 8004234:	f001 0107 	andgt.w	r1, r1, #7
	pinval = (1 << pin) << GPIO_PIN_MASK_POS;
 8004238:	ea4f 2302 	mov.w	r3, r2, lsl #8
		pinval |= (1 << (pin % 8)) | 0x04000000;
 800423c:	bfc5      	ittet	gt
 800423e:	408c      	lslgt	r4, r1
 8004240:	431c      	orrgt	r4, r3
		pinval |= 1 << pin;
 8004242:	ea42 0403 	orrle.w	r4, r2, r3
		pinval |= (1 << (pin % 8)) | 0x04000000;
 8004246:	f044 6480 	orrgt.w	r4, r4, #67108864	; 0x4000000
	if (temp == STM32_MODE_INPUT) {
 800424a:	07ea      	lsls	r2, r5, #31
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800424c:	6840      	ldr	r0, [r0, #4]
	if (temp == STM32_MODE_INPUT) {
 800424e:	d422      	bmi.n	8004296 <gpio_stm32_configure_raw.constprop.0.isra.0+0x70>
		if (temp == STM32_CNF_IN_ANALOG) {
 8004250:	f015 0206 	ands.w	r2, r5, #6
 8004254:	d104      	bne.n	8004260 <gpio_stm32_configure_raw.constprop.0.isra.0+0x3a>
			LL_GPIO_SetPinMode(gpio, pin_ll, LL_GPIO_MODE_FLOATING);
 8004256:	4621      	mov	r1, r4
}
 8004258:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LL_GPIO_SetPinMode(gpio, pin_ll, LL_GPIO_MODE_FLOATING);
 800425c:	f7ff bf8a 	b.w	8004174 <LL_GPIO_SetPinMode>
		} else if (temp == STM32_CNF_IN_FLOAT) {
 8004260:	2a02      	cmp	r2, #2
 8004262:	d101      	bne.n	8004268 <gpio_stm32_configure_raw.constprop.0.isra.0+0x42>
			LL_GPIO_SetPinMode(gpio, pin_ll, LL_GPIO_MODE_FLOATING);
 8004264:	2204      	movs	r2, #4
 8004266:	e7f6      	b.n	8004256 <gpio_stm32_configure_raw.constprop.0.isra.0+0x30>
			if (temp == STM32_PUPD_PULL_UP) {
 8004268:	f405 75c0 	and.w	r5, r5, #384	; 0x180
 800426c:	2d80      	cmp	r5, #128	; 0x80
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800426e:	ea6f 2614 	mvn.w	r6, r4, lsr #8
 8004272:	ea4f 2214 	mov.w	r2, r4, lsr #8
 8004276:	d10b      	bne.n	8004290 <gpio_stm32_configure_raw.constprop.0.isra.0+0x6a>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004278:	fa92 f2a2 	rbit	r2, r2
 800427c:	2301      	movs	r3, #1
  return __builtin_clz(value);
 800427e:	fab2 f282 	clz	r2, r2
 8004282:	68c1      	ldr	r1, [r0, #12]
 8004284:	4093      	lsls	r3, r2
 8004286:	4031      	ands	r1, r6
 8004288:	430b      	orrs	r3, r1
			LL_GPIO_SetPinMode(gpio, pin_ll, LL_GPIO_MODE_INPUT);
 800428a:	2208      	movs	r2, #8
 800428c:	60c3      	str	r3, [r0, #12]
 800428e:	e7e2      	b.n	8004256 <gpio_stm32_configure_raw.constprop.0.isra.0+0x30>
 8004290:	68c3      	ldr	r3, [r0, #12]
 8004292:	4033      	ands	r3, r6
 8004294:	e7f9      	b.n	800428a <gpio_stm32_configure_raw.constprop.0.isra.0+0x64>
		if (temp == STM32_CNF_GP_OUTPUT) {
 8004296:	066b      	lsls	r3, r5, #25
			LL_GPIO_SetPinMode(gpio, pin_ll, LL_GPIO_MODE_OUTPUT);
 8004298:	bf54      	ite	pl
 800429a:	2201      	movpl	r2, #1
			LL_GPIO_SetPinMode(gpio, pin_ll,
 800429c:	2209      	movmi	r2, #9
 800429e:	4621      	mov	r1, r4
 80042a0:	f7ff ff68 	bl	8004174 <LL_GPIO_SetPinMode>
		if (temp == STM32_CNF_PUSH_PULL) {
 80042a4:	f015 0220 	ands.w	r2, r5, #32
			LL_GPIO_SetPinOutputType(gpio, pin_ll,
 80042a8:	bf18      	it	ne
 80042aa:	2204      	movne	r2, #4
 80042ac:	4621      	mov	r1, r4
 80042ae:	f005 0518 	and.w	r5, r5, #24
 80042b2:	f7ff ff8b 	bl	80041cc <LL_GPIO_SetPinOutputType>
		if (temp == STM32_MODE_OUTPUT_MAX_2) {
 80042b6:	2d08      	cmp	r5, #8
 80042b8:	d105      	bne.n	80042c6 <gpio_stm32_configure_raw.constprop.0.isra.0+0xa0>
			LL_GPIO_SetPinSpeed(gpio, pin_ll,
 80042ba:	2202      	movs	r2, #2
			LL_GPIO_SetPinSpeed(gpio, pin_ll,
 80042bc:	4621      	mov	r1, r4
}
 80042be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LL_GPIO_SetPinSpeed(gpio, pin_ll,
 80042c2:	f7ff bf6d 	b.w	80041a0 <LL_GPIO_SetPinSpeed>
		} else if (temp == STM32_MODE_OUTPUT_MAX_10) {
 80042c6:	b90d      	cbnz	r5, 80042cc <gpio_stm32_configure_raw.constprop.0.isra.0+0xa6>
			LL_GPIO_SetPinSpeed(gpio, pin_ll,
 80042c8:	2201      	movs	r2, #1
 80042ca:	e7f7      	b.n	80042bc <gpio_stm32_configure_raw.constprop.0.isra.0+0x96>
			LL_GPIO_SetPinSpeed(gpio, pin_ll,
 80042cc:	2203      	movs	r2, #3
 80042ce:	e7f5      	b.n	80042bc <gpio_stm32_configure_raw.constprop.0.isra.0+0x96>

080042d0 <gpio_stm32_config>:
{
 80042d0:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 80042d2:	039a      	lsls	r2, r3, #14
{
 80042d4:	b510      	push	{r4, lr}
	if ((flags & GPIO_OUTPUT) != 0) {
 80042d6:	d518      	bpl.n	800430a <gpio_stm32_config+0x3a>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 80042d8:	079c      	lsls	r4, r3, #30
 80042da:	d50f      	bpl.n	80042fc <gpio_stm32_config+0x2c>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 80042dc:	075a      	lsls	r2, r3, #29
 80042de:	d52d      	bpl.n	800433c <gpio_stm32_config+0x6c>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 80042e0:	2221      	movs	r2, #33	; 0x21
		if ((flags & GPIO_PULL_UP) != 0) {
 80042e2:	06dc      	lsls	r4, r3, #27
 80042e4:	d50c      	bpl.n	8004300 <gpio_stm32_config+0x30>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80042e6:	f042 0284 	orr.w	r2, r2, #132	; 0x84
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 80042ea:	f413 2f00 	tst.w	r3, #524288	; 0x80000
	const struct gpio_stm32_config *cfg = dev->config;
 80042ee:	6844      	ldr	r4, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 80042f0:	d01b      	beq.n	800432a <gpio_stm32_config+0x5a>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 80042f2:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80042f4:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 80042f6:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BSRR, pins);
 80042f8:	6123      	str	r3, [r4, #16]
	return 0;
 80042fa:	e011      	b.n	8004320 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 80042fc:	2201      	movs	r2, #1
 80042fe:	e7f0      	b.n	80042e2 <gpio_stm32_config+0x12>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8004300:	069c      	lsls	r4, r3, #26
 8004302:	d5f2      	bpl.n	80042ea <gpio_stm32_config+0x1a>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8004304:	f442 7282 	orr.w	r2, r2, #260	; 0x104
	if (err != 0) {
 8004308:	e7ef      	b.n	80042ea <gpio_stm32_config+0x1a>
	} else if  ((flags & GPIO_INPUT) != 0) {
 800430a:	f413 3280 	ands.w	r2, r3, #65536	; 0x10000
 800430e:	d007      	beq.n	8004320 <gpio_stm32_config+0x50>
		if ((flags & GPIO_PULL_UP) != 0) {
 8004310:	06dc      	lsls	r4, r3, #27
 8004312:	d411      	bmi.n	8004338 <gpio_stm32_config+0x68>
			*pincfg |= STM32_PINCFG_FLOATING;
 8004314:	f013 0f20 	tst.w	r3, #32
 8004318:	bf14      	ite	ne
 800431a:	f44f 7282 	movne.w	r2, #260	; 0x104
 800431e:	2202      	moveq	r2, #2
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 8004320:	6840      	ldr	r0, [r0, #4]
 8004322:	f7ff ff80 	bl	8004226 <gpio_stm32_configure_raw.constprop.0.isra.0>
	return 0;
 8004326:	2000      	movs	r0, #0
}
 8004328:	bd10      	pop	{r4, pc}
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 800432a:	035b      	lsls	r3, r3, #13
 800432c:	d5f8      	bpl.n	8004320 <gpio_stm32_config+0x50>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 800432e:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004330:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8004332:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BRR, pins);
 8004334:	6163      	str	r3, [r4, #20]
	return 0;
 8004336:	e7f3      	b.n	8004320 <gpio_stm32_config+0x50>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8004338:	2284      	movs	r2, #132	; 0x84
 800433a:	e7f1      	b.n	8004320 <gpio_stm32_config+0x50>
				return -ENOTSUP;
 800433c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004340:	e7f2      	b.n	8004328 <gpio_stm32_config+0x58>

08004342 <gpio_stm32_configure>:
{
 8004342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004344:	461f      	mov	r7, r3
 8004346:	4604      	mov	r4, r0
	gpio_stm32_configure_raw(dev, pin, conf, func);
 8004348:	6840      	ldr	r0, [r0, #4]
{
 800434a:	460e      	mov	r6, r1
 800434c:	4615      	mov	r5, r2
	gpio_stm32_configure_raw(dev, pin, conf, func);
 800434e:	f7ff ff6a 	bl	8004226 <gpio_stm32_configure_raw.constprop.0.isra.0>
	if (func == IS_GPIO_OUT) {
 8004352:	2f03      	cmp	r7, #3
 8004354:	d108      	bne.n	8004368 <gpio_stm32_configure+0x26>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8004356:	2301      	movs	r3, #1
 8004358:	fa03 f606 	lsl.w	r6, r3, r6
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800435c:	6863      	ldr	r3, [r4, #4]
		if (gpio_out == STM32_ODR_1) {
 800435e:	05aa      	lsls	r2, r5, #22
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004360:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 8004362:	bf4c      	ite	mi
 8004364:	611e      	strmi	r6, [r3, #16]
	WRITE_REG(gpio->BRR, pins);
 8004366:	615e      	strpl	r6, [r3, #20]
}
 8004368:	2000      	movs	r0, #0
 800436a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800436c <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 800436c:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 800436e:	6803      	ldr	r3, [r0, #0]
 8004370:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
 8004372:	7905      	ldrb	r5, [r0, #4]
 8004374:	6804      	ldr	r4, [r0, #0]
 8004376:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800437a:	42a3      	cmp	r3, r4
 800437c:	d302      	bcc.n	8004384 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
 800437e:	f06f 0001 	mvn.w	r0, #1
}
 8004382:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 8004384:	795c      	ldrb	r4, [r3, #5]
 8004386:	428c      	cmp	r4, r1
 8004388:	d001      	beq.n	800438e <pinctrl_lookup_state+0x22>
		(*state)++;
 800438a:	3308      	adds	r3, #8
 800438c:	e7f0      	b.n	8004370 <pinctrl_lookup_state+0x4>
			return 0;
 800438e:	2000      	movs	r0, #0
 8004390:	e7f7      	b.n	8004382 <pinctrl_lookup_state+0x16>

08004392 <LL_TIM_OC_SetCompareCH1>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004392:	6341      	str	r1, [r0, #52]	; 0x34
}
 8004394:	4770      	bx	lr

08004396 <LL_TIM_OC_SetCompareCH2>:
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004396:	6381      	str	r1, [r0, #56]	; 0x38
}
 8004398:	4770      	bx	lr

0800439a <LL_TIM_OC_SetCompareCH3>:
  WRITE_REG(TIMx->CCR3, CompareValue);
 800439a:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 800439c:	4770      	bx	lr

0800439e <LL_TIM_OC_SetCompareCH4>:
  WRITE_REG(TIMx->CCR4, CompareValue);
 800439e:	6401      	str	r1, [r0, #64]	; 0x40
}
 80043a0:	4770      	bx	lr

080043a2 <pwm_stm32_get_cycles_per_sec>:
	*cycles = (uint64_t)(data->tim_clk / (cfg->prescaler + 1));
 80043a2:	6841      	ldr	r1, [r0, #4]
 80043a4:	6903      	ldr	r3, [r0, #16]
 80043a6:	6849      	ldr	r1, [r1, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3101      	adds	r1, #1
 80043ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80043b0:	2000      	movs	r0, #0
 80043b2:	e9c2 3000 	strd	r3, r0, [r2]
}
 80043b6:	4770      	bx	lr

080043b8 <reset_stm32_status>:
static int reset_stm32_status(const struct device *dev, uint32_t id,
			      uint8_t *status)
{
	const struct reset_stm32_config *config = dev->config;

	*status = !!sys_test_bit(config->base + STM32_RESET_SET_OFFSET(id),
 80043b8:	6843      	ldr	r3, [r0, #4]
 80043ba:	f3c1 104b 	ubfx	r0, r1, #5, #12
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f001 011f 	and.w	r1, r1, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 80043c4:	58c0      	ldr	r0, [r0, r3]
	return temp & (1 << bit);
 80043c6:	2301      	movs	r3, #1
 80043c8:	408b      	lsls	r3, r1
 80043ca:	4203      	tst	r3, r0
 80043cc:	bf14      	ite	ne
 80043ce:	2301      	movne	r3, #1
 80043d0:	2300      	moveq	r3, #0
				 STM32_RESET_REG_BIT(id));

	return 0;
}
 80043d2:	2000      	movs	r0, #0
	*status = !!sys_test_bit(config->base + STM32_RESET_SET_OFFSET(id),
 80043d4:	7013      	strb	r3, [r2, #0]
}
 80043d6:	4770      	bx	lr

080043d8 <reset_stm32_line_assert>:

static int reset_stm32_line_assert(const struct device *dev, uint32_t id)
{
 80043d8:	b510      	push	{r4, lr}
	const struct reset_stm32_config *config = dev->config;

	sys_set_bit(config->base + STM32_RESET_SET_OFFSET(id),
 80043da:	6843      	ldr	r3, [r0, #4]
 80043dc:	f3c1 104b 	ubfx	r0, r1, #5, #12
 80043e0:	681a      	ldr	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 80043e2:	2301      	movs	r3, #1
	uint32_t temp = *(volatile uint32_t *)addr;
 80043e4:	5884      	ldr	r4, [r0, r2]
 80043e6:	f001 011f 	and.w	r1, r1, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
 80043ea:	408b      	lsls	r3, r1
 80043ec:	4323      	orrs	r3, r4
 80043ee:	5083      	str	r3, [r0, r2]
		    STM32_RESET_REG_BIT(id));

	return 0;
}
 80043f0:	2000      	movs	r0, #0
 80043f2:	bd10      	pop	{r4, pc}

080043f4 <reset_stm32_line_deassert>:
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
 80043f4:	2201      	movs	r2, #1

static int reset_stm32_line_deassert(const struct device *dev, uint32_t id)
{
 80043f6:	b510      	push	{r4, lr}

#if DT_INST_PROP(0, set_bit_to_deassert)
	sys_set_bit(config->base + STM32_RESET_CLR_OFFSET(id),
		    STM32_RESET_REG_BIT(id));
#else
	sys_clear_bit(config->base + STM32_RESET_SET_OFFSET(id),
 80043f8:	6843      	ldr	r3, [r0, #4]
 80043fa:	f3c1 144b 	ubfx	r4, r1, #5, #12
 80043fe:	6818      	ldr	r0, [r3, #0]
 8004400:	f001 011f 	and.w	r1, r1, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 8004404:	5823      	ldr	r3, [r4, r0]
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
 8004406:	408a      	lsls	r2, r1
 8004408:	ea23 0302 	bic.w	r3, r3, r2
 800440c:	5023      	str	r3, [r4, r0]
		      STM32_RESET_REG_BIT(id));
#endif

	return 0;
}
 800440e:	2000      	movs	r0, #0
 8004410:	bd10      	pop	{r4, pc}

08004412 <reset_stm32_line_toggle>:

static int reset_stm32_line_toggle(const struct device *dev, uint32_t id)
{
 8004412:	b538      	push	{r3, r4, r5, lr}
 8004414:	4604      	mov	r4, r0
 8004416:	460d      	mov	r5, r1
	reset_stm32_line_assert(dev, id);
 8004418:	f7ff ffde 	bl	80043d8 <reset_stm32_line_assert>
	reset_stm32_line_deassert(dev, id);
 800441c:	4629      	mov	r1, r5
 800441e:	4620      	mov	r0, r4
 8004420:	f7ff ffe8 	bl	80043f4 <reset_stm32_line_deassert>

	return 0;
}
 8004424:	2000      	movs	r0, #0
 8004426:	bd38      	pop	{r3, r4, r5, pc}

08004428 <reset_stm32_init>:

static int reset_stm32_init(const struct device *dev)
{
	return 0;
}
 8004428:	2000      	movs	r0, #0
 800442a:	4770      	bx	lr

0800442c <LL_USART_ClearFlag_FE>:
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 800442c:	6803      	ldr	r3, [r0, #0]
{
 800442e:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 8004430:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8004432:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 8004434:	6843      	ldr	r3, [r0, #4]
 8004436:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8004438:	9b01      	ldr	r3, [sp, #4]
}
 800443a:	b002      	add	sp, #8
 800443c:	4770      	bx	lr

0800443e <uart_stm32_set_baudrate>:
{
 800443e:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (clock_control_get_rate(data->clock,
 8004440:	6903      	ldr	r3, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 8004442:	6845      	ldr	r5, [r0, #4]
		if (clock_control_get_rate(data->clock,
 8004444:	6858      	ldr	r0, [r3, #4]
{
 8004446:	460c      	mov	r4, r1
	if (api->get_rate == NULL) {
 8004448:	6883      	ldr	r3, [r0, #8]
					   (clock_control_subsys_t)&config->pclken[0],
 800444a:	6869      	ldr	r1, [r5, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	b1bb      	cbz	r3, 8004480 <uart_stm32_set_baudrate+0x42>
	return api->get_rate(dev, sys, rate);
 8004450:	aa01      	add	r2, sp, #4
 8004452:	4798      	blx	r3
		if (clock_control_get_rate(data->clock,
 8004454:	2800      	cmp	r0, #0
 8004456:	db13      	blt.n	8004480 <uart_stm32_set_baudrate+0x42>
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004458:	2219      	movs	r2, #25
 800445a:	9b01      	ldr	r3, [sp, #4]
 800445c:	00a4      	lsls	r4, r4, #2
 800445e:	4353      	muls	r3, r2
 8004460:	2264      	movs	r2, #100	; 0x64
 8004462:	fbb3 f1f4 	udiv	r1, r3, r4
 8004466:	fbb1 f0f2 	udiv	r0, r1, r2
 800446a:	fb02 1310 	mls	r3, r2, r0, r1
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	3332      	adds	r3, #50	; 0x32
 8004472:	fbb3 f3f2 	udiv	r3, r3, r2
		LL_USART_SetBaudRate(config->usart,
 8004476:	682d      	ldr	r5, [r5, #0]
 8004478:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800447c:	b29b      	uxth	r3, r3
 800447e:	60ab      	str	r3, [r5, #8]
}
 8004480:	b003      	add	sp, #12
 8004482:	bd30      	pop	{r4, r5, pc}

08004484 <uart_stm32_poll_in>:
{
 8004484:	b508      	push	{r3, lr}
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 8004486:	6843      	ldr	r3, [r0, #4]
 8004488:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800448a:	6803      	ldr	r3, [r0, #0]
 800448c:	071a      	lsls	r2, r3, #28
 800448e:	d501      	bpl.n	8004494 <uart_stm32_poll_in+0x10>
		LL_USART_ClearFlag_ORE(config->usart);
 8004490:	f7ff ffcc 	bl	800442c <LL_USART_ClearFlag_FE>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8004494:	6803      	ldr	r3, [r0, #0]
	if (!LL_USART_IsActiveFlag_RXNE(config->usart)) {
 8004496:	069b      	lsls	r3, r3, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8004498:	bf49      	itett	mi
 800449a:	6843      	ldrmi	r3, [r0, #4]
		return -1;
 800449c:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
	return 0;
 80044a0:	2000      	movmi	r0, #0
 80044a2:	700b      	strbmi	r3, [r1, #0]
}
 80044a4:	bd08      	pop	{r3, pc}

080044a6 <uart_stm32_poll_out>:
{
 80044a6:	b510      	push	{r4, lr}
	const struct uart_stm32_config *config = dev->config;
 80044a8:	6840      	ldr	r0, [r0, #4]
		if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 80044aa:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80044ac:	6813      	ldr	r3, [r2, #0]
 80044ae:	061b      	lsls	r3, r3, #24
 80044b0:	d5fc      	bpl.n	80044ac <uart_stm32_poll_out+0x6>
	__asm__ volatile(
 80044b2:	f04f 0210 	mov.w	r2, #16
 80044b6:	f3ef 8311 	mrs	r3, BASEPRI
 80044ba:	f382 8812 	msr	BASEPRI_MAX, r2
 80044be:	f3bf 8f6f 	isb	sy
			if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 80044c2:	6802      	ldr	r2, [r0, #0]
 80044c4:	6814      	ldr	r4, [r2, #0]
 80044c6:	0624      	lsls	r4, r4, #24
 80044c8:	d404      	bmi.n	80044d4 <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 80044d2:	e7ea      	b.n	80044aa <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 80044d4:	6051      	str	r1, [r2, #4]
	__asm__ volatile(
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
}
 80044de:	bd10      	pop	{r4, pc}

080044e0 <uart_stm32_err_check>:
{
 80044e0:	b508      	push	{r3, lr}
	const struct uart_stm32_config *config = dev->config;
 80044e2:	6841      	ldr	r1, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 80044e4:	680b      	ldr	r3, [r1, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80044e6:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 80044e8:	6818      	ldr	r0, [r3, #0]
 80044ea:	f3c2 02c0 	ubfx	r2, r2, #3, #1
	if (LL_USART_IsActiveFlag_PE(config->usart)) {
 80044ee:	07c0      	lsls	r0, r0, #31
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80044f0:	6818      	ldr	r0, [r3, #0]
		err |= UART_ERROR_PARITY;
 80044f2:	bf48      	it	mi
 80044f4:	f042 0202 	orrmi.w	r2, r2, #2
	if (LL_USART_IsActiveFlag_FE(config->usart)) {
 80044f8:	0780      	lsls	r0, r0, #30
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 80044fa:	6818      	ldr	r0, [r3, #0]
		err |= UART_ERROR_FRAMING;
 80044fc:	bf48      	it	mi
 80044fe:	f042 0204 	orrmi.w	r2, r2, #4
	if (LL_USART_IsActiveFlag_NE(config->usart)) {
 8004502:	0740      	lsls	r0, r0, #29
  return (READ_BIT(USARTx->SR, USART_SR_LBD) == (USART_SR_LBD));
 8004504:	6818      	ldr	r0, [r3, #0]
		err |= UART_ERROR_NOISE;
 8004506:	bf48      	it	mi
 8004508:	f042 0220 	orrmi.w	r2, r2, #32
	if (LL_USART_IsActiveFlag_LBD(config->usart)) {
 800450c:	05c0      	lsls	r0, r0, #23
  WRITE_REG(USARTx->SR, ~(USART_SR_LBD));
 800450e:	bf42      	ittt	mi
 8004510:	f46f 7080 	mvnmi.w	r0, #256	; 0x100
		err |= UART_BREAK;
 8004514:	f042 0208 	orrmi.w	r2, r2, #8
 8004518:	6018      	strmi	r0, [r3, #0]
	if (err & UART_ERROR_OVERRUN) {
 800451a:	07d0      	lsls	r0, r2, #31
 800451c:	d502      	bpl.n	8004524 <uart_stm32_err_check+0x44>
		LL_USART_ClearFlag_ORE(config->usart);
 800451e:	6808      	ldr	r0, [r1, #0]
 8004520:	f7ff ff84 	bl	800442c <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_PARITY) {
 8004524:	0793      	lsls	r3, r2, #30
 8004526:	d502      	bpl.n	800452e <uart_stm32_err_check+0x4e>
		LL_USART_ClearFlag_PE(config->usart);
 8004528:	6808      	ldr	r0, [r1, #0]
 800452a:	f7ff ff7f 	bl	800442c <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_FRAMING) {
 800452e:	0750      	lsls	r0, r2, #29
 8004530:	d502      	bpl.n	8004538 <uart_stm32_err_check+0x58>
		LL_USART_ClearFlag_FE(config->usart);
 8004532:	6808      	ldr	r0, [r1, #0]
 8004534:	f7ff ff7a 	bl	800442c <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_NOISE) {
 8004538:	0693      	lsls	r3, r2, #26
 800453a:	d502      	bpl.n	8004542 <uart_stm32_err_check+0x62>
		LL_USART_ClearFlag_NE(config->usart);
 800453c:	6808      	ldr	r0, [r1, #0]
 800453e:	f7ff ff75 	bl	800442c <LL_USART_ClearFlag_FE>
}
 8004542:	4610      	mov	r0, r2
 8004544:	bd08      	pop	{r3, pc}

08004546 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8004546:	6903      	ldr	r3, [r0, #16]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	600b      	str	r3, [r1, #0]
	return LL_USART_GetParity(config->usart);
 800454c:	6843      	ldr	r3, [r0, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8004556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800455a:	d02f      	beq.n	80045bc <uart_stm32_config_get+0x76>
 800455c:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 8004560:	f1dc 0300 	rsbs	r3, ip, #0
 8004564:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8004568:	710b      	strb	r3, [r1, #4]
	return LL_USART_GetStopBitsLength(config->usart);
 800456a:	6843      	ldr	r3, [r0, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8004574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004578:	d022      	beq.n	80045c0 <uart_stm32_config_get+0x7a>
 800457a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800457e:	d021      	beq.n	80045c4 <uart_stm32_config_get+0x7e>
		return UART_CFG_STOP_BITS_2;
 8004580:	2b00      	cmp	r3, #0
 8004582:	bf0c      	ite	eq
 8004584:	2301      	moveq	r3, #1
 8004586:	2303      	movne	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8004588:	714b      	strb	r3, [r1, #5]
	return LL_USART_GetDataWidth(config->usart);
 800458a:	6843      	ldr	r3, [r0, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800458e:	68da      	ldr	r2, [r3, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8004590:	68db      	ldr	r3, [r3, #12]
	switch (db) {
 8004592:	04d2      	lsls	r2, r2, #19
 8004594:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004598:	d516      	bpl.n	80045c8 <uart_stm32_config_get+0x82>
			return UART_CFG_DATA_BITS_9;
 800459a:	2b00      	cmp	r3, #0
 800459c:	bf14      	ite	ne
 800459e:	2303      	movne	r3, #3
 80045a0:	2304      	moveq	r3, #4
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 80045a2:	718b      	strb	r3, [r1, #6]
	return LL_USART_GetHWFlowCtrl(config->usart);
 80045a4:	6843      	ldr	r3, [r0, #4]
}
 80045a6:	2000      	movs	r0, #0
	return LL_USART_GetHWFlowCtrl(config->usart);
 80045a8:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 80045b0:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80045b4:	4253      	negs	r3, r2
 80045b6:	4153      	adcs	r3, r2
 80045b8:	71cb      	strb	r3, [r1, #7]
}
 80045ba:	4770      	bx	lr
	switch (parity) {
 80045bc:	2302      	movs	r3, #2
 80045be:	e7d3      	b.n	8004568 <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 80045c0:	2300      	movs	r3, #0
 80045c2:	e7e1      	b.n	8004588 <uart_stm32_config_get+0x42>
		return UART_CFG_STOP_BITS_1_5;
 80045c4:	2302      	movs	r3, #2
 80045c6:	e7df      	b.n	8004588 <uart_stm32_config_get+0x42>
			return UART_CFG_DATA_BITS_8;
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf14      	ite	ne
 80045cc:	2302      	movne	r3, #2
 80045ce:	2303      	moveq	r3, #3
 80045d0:	e7e7      	b.n	80045a2 <uart_stm32_config_get+0x5c>

080045d2 <spi_context_get_next_buf>:
{
 80045d2:	b530      	push	{r4, r5, lr}
 80045d4:	4604      	mov	r4, r0
	while (*count) {
 80045d6:	6808      	ldr	r0, [r1, #0]
 80045d8:	b908      	cbnz	r0, 80045de <spi_context_get_next_buf+0xc>
	*buf_len = 0;
 80045da:	6010      	str	r0, [r2, #0]
	return NULL;
 80045dc:	e008      	b.n	80045f0 <spi_context_get_next_buf+0x1e>
		if (((*current)->len / dfs) != 0) {
 80045de:	6820      	ldr	r0, [r4, #0]
 80045e0:	6845      	ldr	r5, [r0, #4]
 80045e2:	429d      	cmp	r5, r3
 80045e4:	d305      	bcc.n	80045f2 <spi_context_get_next_buf+0x20>
			*buf_len = (*current)->len / dfs;
 80045e6:	fbb5 f5f3 	udiv	r5, r5, r3
 80045ea:	6015      	str	r5, [r2, #0]
			return (*current)->buf;
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	6818      	ldr	r0, [r3, #0]
}
 80045f0:	bd30      	pop	{r4, r5, pc}
		++(*current);
 80045f2:	3008      	adds	r0, #8
 80045f4:	6020      	str	r0, [r4, #0]
		--(*count);
 80045f6:	6808      	ldr	r0, [r1, #0]
 80045f8:	3801      	subs	r0, #1
 80045fa:	6008      	str	r0, [r1, #0]
 80045fc:	e7eb      	b.n	80045d6 <spi_context_get_next_buf+0x4>

080045fe <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
 80045fe:	4603      	mov	r3, r0
 8004600:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8004602:	7919      	ldrb	r1, [r3, #4]
 8004604:	2301      	movs	r3, #1
{
	return gpio_pin_set(spec->port, spec->pin, value);
 8004606:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8004608:	fa03 f101 	lsl.w	r1, r3, r1
 800460c:	6903      	ldr	r3, [r0, #16]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 8004612:	bf18      	it	ne
 8004614:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 8004618:	b112      	cbz	r2, 8004620 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
 800461a:	6883      	ldr	r3, [r0, #8]
 800461c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 800461e:	4718      	bx	r3
 8004620:	6883      	ldr	r3, [r0, #8]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	e7fb      	b.n	800461e <gpio_pin_set_dt.isra.0+0x20>

08004626 <_spi_context_cs_control>:
{
 8004626:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8004628:	6803      	ldr	r3, [r0, #0]
{
 800462a:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 800462c:	b1e3      	cbz	r3, 8004668 <_spi_context_cs_control+0x42>
 800462e:	68d8      	ldr	r0, [r3, #12]
 8004630:	b1d0      	cbz	r0, 8004668 <_spi_context_cs_control+0x42>
 8004632:	6805      	ldr	r5, [r0, #0]
 8004634:	b1c5      	cbz	r5, 8004668 <_spi_context_cs_control+0x42>
		if (on) {
 8004636:	b149      	cbz	r1, 800464c <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
 8004638:	2101      	movs	r1, #1
 800463a:	f7ff ffe0 	bl	80045fe <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	6898      	ldr	r0, [r3, #8]
}
 8004644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
 8004648:	f7ff b8b2 	b.w	80037b0 <z_impl_k_busy_wait>
			if (!force_off &&
 800464c:	b912      	cbnz	r2, 8004654 <_spi_context_cs_control+0x2e>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
 800464e:	685b      	ldr	r3, [r3, #4]
			if (!force_off &&
 8004650:	04db      	lsls	r3, r3, #19
 8004652:	d409      	bmi.n	8004668 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
 8004654:	6880      	ldr	r0, [r0, #8]
 8004656:	f7ff f8ab 	bl	80037b0 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	2100      	movs	r1, #0
 800465e:	68d8      	ldr	r0, [r3, #12]
}
 8004660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8004664:	f7ff bfcb 	b.w	80045fe <gpio_pin_set_dt.isra.0>
}
 8004668:	bd38      	pop	{r3, r4, r5, pc}

0800466a <spi_context_unlock_unconditionally>:
{
 800466a:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
 800466c:	2201      	movs	r2, #1
 800466e:	2100      	movs	r1, #0
{
 8004670:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
 8004672:	f7ff ffd8 	bl	8004626 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
 8004676:	69a3      	ldr	r3, [r4, #24]
 8004678:	b933      	cbnz	r3, 8004688 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
 800467a:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 800467c:	f104 0010 	add.w	r0, r4, #16
}
 8004680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004684:	f7fe bc8c 	b.w	8002fa0 <z_impl_k_sem_give>
 8004688:	bd10      	pop	{r4, pc}

0800468a <spi_stm32_release>:
{
 800468a:	b508      	push	{r3, lr}
	spi_context_unlock_unconditionally(&data->ctx);
 800468c:	6900      	ldr	r0, [r0, #16]
 800468e:	f7ff ffec 	bl	800466a <spi_context_unlock_unconditionally>
}
 8004692:	2000      	movs	r0, #0
 8004694:	bd08      	pop	{r3, pc}

08004696 <LL_TIM_StructInit>:
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 8004696:	2300      	movs	r3, #0
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 8004698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 800469c:	8003      	strh	r3, [r0, #0]
  TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
 800469e:	e9c0 2302 	strd	r2, r3, [r0, #8]
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
 80046a2:	6043      	str	r3, [r0, #4]
  TIM_InitStruct->RepetitionCounter = 0x00000000U;
 80046a4:	6103      	str	r3, [r0, #16]
}
 80046a6:	4770      	bx	lr

080046a8 <LL_TIM_OC_StructInit>:
  TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
 80046a8:	2300      	movs	r3, #0
  TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
 80046aa:	e9c0 3300 	strd	r3, r3, [r0]
  TIM_OC_InitStruct->CompareValue = 0x00000000U;
 80046ae:	e9c0 3302 	strd	r3, r3, [r0, #8]
  TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 80046b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
  TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80046b6:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
 80046ba:	4770      	bx	lr

080046bc <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
 80046bc:	4770      	bx	lr

080046be <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 80046be:	b140      	cbz	r0, 80046d2 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 80046c0:	68c3      	ldr	r3, [r0, #12]
 80046c2:	7858      	ldrb	r0, [r3, #1]
 80046c4:	f010 0001 	ands.w	r0, r0, #1
 80046c8:	bf1e      	ittt	ne
 80046ca:	7818      	ldrbne	r0, [r3, #0]
 80046cc:	fab0 f080 	clzne	r0, r0
 80046d0:	0940      	lsrne	r0, r0, #5
}
 80046d2:	4770      	bx	lr

080046d4 <arch_system_halt>:
	__asm__ volatile(
 80046d4:	f04f 0210 	mov.w	r2, #16
 80046d8:	f3ef 8311 	mrs	r3, BASEPRI
 80046dc:	f382 8812 	msr	BASEPRI_MAX, r2
 80046e0:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 80046e4:	e7fe      	b.n	80046e4 <arch_system_halt+0x10>

080046e6 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 80046e6:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 80046e8:	f7ff fff4 	bl	80046d4 <arch_system_halt>

080046ec <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 80046ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ee:	4605      	mov	r5, r0
 80046f0:	460e      	mov	r6, r1
 80046f2:	f04f 0310 	mov.w	r3, #16
 80046f6:	f3ef 8711 	mrs	r7, BASEPRI
 80046fa:	f383 8812 	msr	BASEPRI_MAX, r3
 80046fe:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 8004702:	f7fe fe9d 	bl	8003440 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
 8004706:	4631      	mov	r1, r6
 8004708:	4604      	mov	r4, r0
 800470a:	4628      	mov	r0, r5
 800470c:	f7ff ffeb 	bl	80046e6 <k_sys_fatal_error_handler>
	__asm__ volatile(
 8004710:	f387 8811 	msr	BASEPRI, r7
 8004714:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8004718:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 800471a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800471e:	f7fc bd05 	b.w	800112c <z_impl_k_thread_abort>

08004722 <z_early_memset>:
	(void) memset(dst, c, n);
 8004722:	f7ff b999 	b.w	8003a58 <memset>

08004726 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
 8004726:	f7ff b98c 	b.w	8003a42 <memcpy>

0800472a <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 800472a:	b508      	push	{r3, lr}
	__asm__ volatile(
 800472c:	f04f 0210 	mov.w	r2, #16
 8004730:	f3ef 8311 	mrs	r3, BASEPRI
 8004734:	f382 8812 	msr	BASEPRI_MAX, r2
 8004738:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 800473c:	f7fc fac2 	bl	8000cc4 <arch_cpu_idle>
 8004740:	e7f4      	b.n	800472c <idle+0x2>

08004742 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
 8004742:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8004746:	428b      	cmp	r3, r1
 8004748:	d001      	beq.n	800474e <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
 800474a:	f7fe bdc7 	b.w	80032dc <z_set_prio>
}
 800474e:	2000      	movs	r0, #0
 8004750:	4770      	bx	lr

08004752 <z_impl_k_mutex_init>:
{
 8004752:	4603      	mov	r3, r0
	mutex->owner = NULL;
 8004754:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
 8004756:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
 800475a:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
 800475e:	4770      	bx	lr

08004760 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 8004760:	b13a      	cbz	r2, 8004772 <z_impl_k_sem_init+0x12>
 8004762:	428a      	cmp	r2, r1
 8004764:	d305      	bcc.n	8004772 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
 8004766:	e9c0 1202 	strd	r1, r2, [r0, #8]
 800476a:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
 800476e:	2000      	movs	r0, #0
 8004770:	4770      	bx	lr
		return -EINVAL;
 8004772:	f06f 0015 	mvn.w	r0, #21
}
 8004776:	4770      	bx	lr

08004778 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 8004778:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 800477c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800477e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8004780:	2300      	movs	r3, #0
	node->prev = NULL;
 8004782:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 8004786:	4770      	bx	lr

08004788 <unpend_thread_no_timeout>:
{
 8004788:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 800478a:	f7ff fff5 	bl	8004778 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800478e:	7b43      	ldrb	r3, [r0, #13]
 8004790:	f023 0302 	bic.w	r3, r3, #2
 8004794:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 8004796:	2300      	movs	r3, #0
 8004798:	6083      	str	r3, [r0, #8]
}
 800479a:	bd08      	pop	{r3, pc}

0800479c <z_thread_timeout>:
{
 800479c:	4601      	mov	r1, r0
 800479e:	b510      	push	{r4, lr}
 80047a0:	f04f 0310 	mov.w	r3, #16
 80047a4:	f3ef 8411 	mrs	r4, BASEPRI
 80047a8:	f383 8812 	msr	BASEPRI_MAX, r3
 80047ac:	f3bf 8f6f 	isb	sy
		if (!killed) {
 80047b0:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 80047b4:	f013 0f28 	tst.w	r3, #40	; 0x28
 80047b8:	d10d      	bne.n	80047d6 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 80047ba:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 80047be:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 80047c0:	b10b      	cbz	r3, 80047c6 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 80047c2:	f7ff ffe1 	bl	8004788 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 80047c6:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 80047ca:	f023 0314 	bic.w	r3, r3, #20
 80047ce:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 80047d2:	f7fe fc99 	bl	8003108 <ready_thread>
	__asm__ volatile(
 80047d6:	f384 8811 	msr	BASEPRI, r4
 80047da:	f3bf 8f6f 	isb	sy
}
 80047de:	bd10      	pop	{r4, pc}

080047e0 <add_to_waitq_locked>:
{
 80047e0:	b538      	push	{r3, r4, r5, lr}
 80047e2:	4604      	mov	r4, r0
 80047e4:	460d      	mov	r5, r1
	unready_thread(thread);
 80047e6:	f7fe fcc3 	bl	8003170 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 80047ea:	7b63      	ldrb	r3, [r4, #13]
 80047ec:	f043 0302 	orr.w	r3, r3, #2
 80047f0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 80047f2:	b1e5      	cbz	r5, 800482e <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
 80047f4:	60a5      	str	r5, [r4, #8]
	return list->head == list;
 80047f6:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80047f8:	429d      	cmp	r5, r3
 80047fa:	d109      	bne.n	8004810 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
 80047fc:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 80047fe:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 8004802:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8004804:	606c      	str	r4, [r5, #4]
}
 8004806:	e012      	b.n	800482e <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
 8004808:	686a      	ldr	r2, [r5, #4]
 800480a:	4293      	cmp	r3, r2
 800480c:	d0f6      	beq.n	80047fc <add_to_waitq_locked+0x1c>
 800480e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0f3      	beq.n	80047fc <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
 8004814:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 8004818:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 800481c:	428a      	cmp	r2, r1
 800481e:	d0f3      	beq.n	8004808 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8004820:	4291      	cmp	r1, r2
 8004822:	ddf1      	ble.n	8004808 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
 8004824:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8004826:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 800482a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 800482c:	605c      	str	r4, [r3, #4]
}
 800482e:	bd38      	pop	{r3, r4, r5, pc}

08004830 <z_ready_thread>:
{
 8004830:	b510      	push	{r4, lr}
	__asm__ volatile(
 8004832:	f04f 0310 	mov.w	r3, #16
 8004836:	f3ef 8411 	mrs	r4, BASEPRI
 800483a:	f383 8812 	msr	BASEPRI_MAX, r3
 800483e:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 8004842:	f7fe fc61 	bl	8003108 <ready_thread>
	__asm__ volatile(
 8004846:	f384 8811 	msr	BASEPRI, r4
 800484a:	f3bf 8f6f 	isb	sy
}
 800484e:	bd10      	pop	{r4, pc}

08004850 <z_unpend_first_thread>:
{
 8004850:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8004852:	f04f 0310 	mov.w	r3, #16
 8004856:	f3ef 8511 	mrs	r5, BASEPRI
 800485a:	f383 8812 	msr	BASEPRI_MAX, r3
 800485e:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8004862:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004864:	42a0      	cmp	r0, r4
 8004866:	d00d      	beq.n	8004884 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
 8004868:	b134      	cbz	r4, 8004878 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
 800486a:	4620      	mov	r0, r4
 800486c:	f7ff ff8c 	bl	8004788 <unpend_thread_no_timeout>
 8004870:	f104 0018 	add.w	r0, r4, #24
 8004874:	f000 f81e 	bl	80048b4 <z_abort_timeout>
	__asm__ volatile(
 8004878:	f385 8811 	msr	BASEPRI, r5
 800487c:	f3bf 8f6f 	isb	sy
}
 8004880:	4620      	mov	r0, r4
 8004882:	bd38      	pop	{r3, r4, r5, pc}
 8004884:	2400      	movs	r4, #0
 8004886:	e7f7      	b.n	8004878 <z_unpend_first_thread+0x28>

08004888 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8004888:	4603      	mov	r3, r0
 800488a:	b920      	cbnz	r0, 8004896 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800488c:	f3ef 8205 	mrs	r2, IPSR
 8004890:	b90a      	cbnz	r2, 8004896 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 8004892:	f7fc ba65 	b.w	8000d60 <arch_swap>
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
}
 800489e:	4770      	bx	lr

080048a0 <z_reschedule_unlocked>:
	__asm__ volatile(
 80048a0:	f04f 0310 	mov.w	r3, #16
 80048a4:	f3ef 8011 	mrs	r0, BASEPRI
 80048a8:	f383 8812 	msr	BASEPRI_MAX, r3
 80048ac:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 80048b0:	f7ff bfea 	b.w	8004888 <z_reschedule_irqlock>

080048b4 <z_abort_timeout>:
{
 80048b4:	b510      	push	{r4, lr}
 80048b6:	f04f 0210 	mov.w	r2, #16
 80048ba:	f3ef 8411 	mrs	r4, BASEPRI
 80048be:	f382 8812 	msr	BASEPRI_MAX, r2
 80048c2:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 80048c6:	6803      	ldr	r3, [r0, #0]
 80048c8:	b13b      	cbz	r3, 80048da <z_abort_timeout+0x26>
			remove_timeout(to);
 80048ca:	f7fe fe6b 	bl	80035a4 <remove_timeout>
			ret = 0;
 80048ce:	2000      	movs	r0, #0
	__asm__ volatile(
 80048d0:	f384 8811 	msr	BASEPRI, r4
 80048d4:	f3bf 8f6f 	isb	sy
}
 80048d8:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 80048da:	f06f 0015 	mvn.w	r0, #21
 80048de:	e7f7      	b.n	80048d0 <z_abort_timeout+0x1c>

080048e0 <z_set_timeout_expiry>:
{
 80048e0:	b570      	push	{r4, r5, r6, lr}
 80048e2:	4604      	mov	r4, r0
 80048e4:	460d      	mov	r5, r1
	__asm__ volatile(
 80048e6:	f04f 0310 	mov.w	r3, #16
 80048ea:	f3ef 8611 	mrs	r6, BASEPRI
 80048ee:	f383 8812 	msr	BASEPRI_MAX, r3
 80048f2:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 80048f6:	f7fe fe2d 	bl	8003554 <next_timeout>
			      || (ticks <= next_to);
 80048fa:	2801      	cmp	r0, #1
 80048fc:	dd07      	ble.n	800490e <z_set_timeout_expiry+0x2e>
 80048fe:	42a0      	cmp	r0, r4
 8004900:	db05      	blt.n	800490e <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 8004902:	42a0      	cmp	r0, r4
 8004904:	4629      	mov	r1, r5
 8004906:	bfa8      	it	ge
 8004908:	4620      	movge	r0, r4
 800490a:	f7fd ff3f 	bl	800278c <sys_clock_set_timeout>
	__asm__ volatile(
 800490e:	f386 8811 	msr	BASEPRI, r6
 8004912:	f3bf 8f6f 	isb	sy
}
 8004916:	bd70      	pop	{r4, r5, r6, pc}

08004918 <k_heap_init>:
{
 8004918:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
 800491a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
 800491e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 8004922:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
 8004924:	f7fe bfd4 	b.w	80038d0 <sys_heap_init>
