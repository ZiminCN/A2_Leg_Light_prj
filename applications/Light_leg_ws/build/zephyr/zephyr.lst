
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	50 11 00 20 a9 12 00 08 ff 3c 00 08 7d 12 00 08     P.. .....<..}...
 8000010:	7d 12 00 08 7d 12 00 08 7d 12 00 08 00 00 00 00     }...}...}.......
	...
 800002c:	85 0f 00 08 7d 12 00 08 00 00 00 00 3d 0f 00 08     ....}.......=...
 800003c:	fd 27 00 08                                         .'..

08000040 <_irq_vector_table>:
 8000040:	01 10 00 08 01 10 00 08 01 10 00 08 01 10 00 08     ................
 8000050:	01 10 00 08 01 10 00 08 01 10 00 08 01 10 00 08     ................
 8000060:	01 10 00 08 01 10 00 08 01 10 00 08 01 10 00 08     ................
 8000070:	01 10 00 08 01 10 00 08 01 10 00 08 01 10 00 08     ................
 8000080:	01 10 00 08 01 10 00 08 01 10 00 08 01 10 00 08     ................
 8000090:	01 10 00 08 01 10 00 08 01 10 00 08 01 10 00 08     ................
 80000a0:	01 10 00 08 01 10 00 08 01 10 00 08 01 10 00 08     ................
 80000b0:	01 10 00 08 01 10 00 08 01 10 00 08 01 10 00 08     ................
 80000c0:	01 10 00 08 01 10 00 08 01 10 00 08 01 10 00 08     ................
 80000d0:	01 10 00 08 01 10 00 08 01 10 00 08 01 10 00 08     ................
 80000e0:	01 10 00 08 01 10 00 08 01 10 00 08                 ............

Disassembly of section text:

080000f0 <__aeabi_uldivmod>:
 80000f0:	b953      	cbnz	r3, 8000108 <__aeabi_uldivmod+0x18>
 80000f2:	b94a      	cbnz	r2, 8000108 <__aeabi_uldivmod+0x18>
 80000f4:	2900      	cmp	r1, #0
 80000f6:	bf08      	it	eq
 80000f8:	2800      	cmpeq	r0, #0
 80000fa:	bf1c      	itt	ne
 80000fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000100:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000104:	f000 b80c 	b.w	8000120 <__aeabi_idiv0>
 8000108:	f1ad 0c08 	sub.w	ip, sp, #8
 800010c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000110:	f000 f808 	bl	8000124 <__udivmoddi4>
 8000114:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800011c:	b004      	add	sp, #16
 800011e:	4770      	bx	lr

08000120 <__aeabi_idiv0>:
 8000120:	4770      	bx	lr
 8000122:	bf00      	nop

08000124 <__udivmoddi4>:
 8000124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000128:	4686      	mov	lr, r0
 800012a:	468c      	mov	ip, r1
 800012c:	4608      	mov	r0, r1
 800012e:	4615      	mov	r5, r2
 8000130:	4674      	mov	r4, lr
 8000132:	4619      	mov	r1, r3
 8000134:	9e08      	ldr	r6, [sp, #32]
 8000136:	2b00      	cmp	r3, #0
 8000138:	f040 80c2 	bne.w	80002c0 <__udivmoddi4+0x19c>
 800013c:	4285      	cmp	r5, r0
 800013e:	fab2 f282 	clz	r2, r2
 8000142:	d945      	bls.n	80001d0 <__udivmoddi4+0xac>
 8000144:	b14a      	cbz	r2, 800015a <__udivmoddi4+0x36>
 8000146:	f1c2 0320 	rsb	r3, r2, #32
 800014a:	fa00 fc02 	lsl.w	ip, r0, r2
 800014e:	fa2e f303 	lsr.w	r3, lr, r3
 8000152:	4095      	lsls	r5, r2
 8000154:	ea43 0c0c 	orr.w	ip, r3, ip
 8000158:	4094      	lsls	r4, r2
 800015a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800015e:	fbbc f8fe 	udiv	r8, ip, lr
 8000162:	b2a8      	uxth	r0, r5
 8000164:	fb0e cc18 	mls	ip, lr, r8, ip
 8000168:	fb08 f900 	mul.w	r9, r8, r0
 800016c:	0c23      	lsrs	r3, r4, #16
 800016e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8000172:	4599      	cmp	r9, r3
 8000174:	d928      	bls.n	80001c8 <__udivmoddi4+0xa4>
 8000176:	18eb      	adds	r3, r5, r3
 8000178:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 800017c:	d204      	bcs.n	8000188 <__udivmoddi4+0x64>
 800017e:	4599      	cmp	r9, r3
 8000180:	d902      	bls.n	8000188 <__udivmoddi4+0x64>
 8000182:	f1a8 0702 	sub.w	r7, r8, #2
 8000186:	442b      	add	r3, r5
 8000188:	eba3 0309 	sub.w	r3, r3, r9
 800018c:	fbb3 fcfe 	udiv	ip, r3, lr
 8000190:	fb0e 331c 	mls	r3, lr, ip, r3
 8000194:	fb0c f000 	mul.w	r0, ip, r0
 8000198:	b2a4      	uxth	r4, r4
 800019a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800019e:	42a0      	cmp	r0, r4
 80001a0:	d914      	bls.n	80001cc <__udivmoddi4+0xa8>
 80001a2:	192c      	adds	r4, r5, r4
 80001a4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 80001a8:	d204      	bcs.n	80001b4 <__udivmoddi4+0x90>
 80001aa:	42a0      	cmp	r0, r4
 80001ac:	d902      	bls.n	80001b4 <__udivmoddi4+0x90>
 80001ae:	f1ac 0302 	sub.w	r3, ip, #2
 80001b2:	442c      	add	r4, r5
 80001b4:	1a24      	subs	r4, r4, r0
 80001b6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 80001ba:	b11e      	cbz	r6, 80001c4 <__udivmoddi4+0xa0>
 80001bc:	2300      	movs	r3, #0
 80001be:	40d4      	lsrs	r4, r2
 80001c0:	6034      	str	r4, [r6, #0]
 80001c2:	6073      	str	r3, [r6, #4]
 80001c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80001c8:	4647      	mov	r7, r8
 80001ca:	e7dd      	b.n	8000188 <__udivmoddi4+0x64>
 80001cc:	4663      	mov	r3, ip
 80001ce:	e7f1      	b.n	80001b4 <__udivmoddi4+0x90>
 80001d0:	bb92      	cbnz	r2, 8000238 <__udivmoddi4+0x114>
 80001d2:	2101      	movs	r1, #1
 80001d4:	1b43      	subs	r3, r0, r5
 80001d6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001da:	fbb3 fcfe 	udiv	ip, r3, lr
 80001de:	b2af      	uxth	r7, r5
 80001e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80001e4:	fb0c f807 	mul.w	r8, ip, r7
 80001e8:	0c20      	lsrs	r0, r4, #16
 80001ea:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80001ee:	4598      	cmp	r8, r3
 80001f0:	d962      	bls.n	80002b8 <__udivmoddi4+0x194>
 80001f2:	18eb      	adds	r3, r5, r3
 80001f4:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80001f8:	d204      	bcs.n	8000204 <__udivmoddi4+0xe0>
 80001fa:	4598      	cmp	r8, r3
 80001fc:	d902      	bls.n	8000204 <__udivmoddi4+0xe0>
 80001fe:	f1ac 0002 	sub.w	r0, ip, #2
 8000202:	442b      	add	r3, r5
 8000204:	eba3 0308 	sub.w	r3, r3, r8
 8000208:	fbb3 fcfe 	udiv	ip, r3, lr
 800020c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000210:	fb0c f707 	mul.w	r7, ip, r7
 8000214:	b2a4      	uxth	r4, r4
 8000216:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021a:	42a7      	cmp	r7, r4
 800021c:	d94e      	bls.n	80002bc <__udivmoddi4+0x198>
 800021e:	192c      	adds	r4, r5, r4
 8000220:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000224:	d204      	bcs.n	8000230 <__udivmoddi4+0x10c>
 8000226:	42a7      	cmp	r7, r4
 8000228:	d902      	bls.n	8000230 <__udivmoddi4+0x10c>
 800022a:	f1ac 0302 	sub.w	r3, ip, #2
 800022e:	442c      	add	r4, r5
 8000230:	1be4      	subs	r4, r4, r7
 8000232:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000236:	e7c0      	b.n	80001ba <__udivmoddi4+0x96>
 8000238:	f1c2 0320 	rsb	r3, r2, #32
 800023c:	4095      	lsls	r5, r2
 800023e:	fa20 f103 	lsr.w	r1, r0, r3
 8000242:	fa2e f303 	lsr.w	r3, lr, r3
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	fbb1 fcfe 	udiv	ip, r1, lr
 800024e:	4090      	lsls	r0, r2
 8000250:	4303      	orrs	r3, r0
 8000252:	b2af      	uxth	r7, r5
 8000254:	fb0e 101c 	mls	r0, lr, ip, r1
 8000258:	fb0c f807 	mul.w	r8, ip, r7
 800025c:	0c19      	lsrs	r1, r3, #16
 800025e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000262:	4588      	cmp	r8, r1
 8000264:	fa04 f402 	lsl.w	r4, r4, r2
 8000268:	d922      	bls.n	80002b0 <__udivmoddi4+0x18c>
 800026a:	1869      	adds	r1, r5, r1
 800026c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000270:	d204      	bcs.n	800027c <__udivmoddi4+0x158>
 8000272:	4588      	cmp	r8, r1
 8000274:	d902      	bls.n	800027c <__udivmoddi4+0x158>
 8000276:	f1ac 0002 	sub.w	r0, ip, #2
 800027a:	4429      	add	r1, r5
 800027c:	eba1 0108 	sub.w	r1, r1, r8
 8000280:	fbb1 fcfe 	udiv	ip, r1, lr
 8000284:	fb0e 111c 	mls	r1, lr, ip, r1
 8000288:	fb0c f707 	mul.w	r7, ip, r7
 800028c:	b29b      	uxth	r3, r3
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	429f      	cmp	r7, r3
 8000294:	d90e      	bls.n	80002b4 <__udivmoddi4+0x190>
 8000296:	18eb      	adds	r3, r5, r3
 8000298:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800029c:	d204      	bcs.n	80002a8 <__udivmoddi4+0x184>
 800029e:	429f      	cmp	r7, r3
 80002a0:	d902      	bls.n	80002a8 <__udivmoddi4+0x184>
 80002a2:	f1ac 0102 	sub.w	r1, ip, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1bdb      	subs	r3, r3, r7
 80002aa:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80002ae:	e792      	b.n	80001d6 <__udivmoddi4+0xb2>
 80002b0:	4660      	mov	r0, ip
 80002b2:	e7e3      	b.n	800027c <__udivmoddi4+0x158>
 80002b4:	4661      	mov	r1, ip
 80002b6:	e7f7      	b.n	80002a8 <__udivmoddi4+0x184>
 80002b8:	4660      	mov	r0, ip
 80002ba:	e7a3      	b.n	8000204 <__udivmoddi4+0xe0>
 80002bc:	4663      	mov	r3, ip
 80002be:	e7b7      	b.n	8000230 <__udivmoddi4+0x10c>
 80002c0:	4283      	cmp	r3, r0
 80002c2:	d906      	bls.n	80002d2 <__udivmoddi4+0x1ae>
 80002c4:	b916      	cbnz	r6, 80002cc <__udivmoddi4+0x1a8>
 80002c6:	2100      	movs	r1, #0
 80002c8:	4608      	mov	r0, r1
 80002ca:	e77b      	b.n	80001c4 <__udivmoddi4+0xa0>
 80002cc:	e9c6 e000 	strd	lr, r0, [r6]
 80002d0:	e7f9      	b.n	80002c6 <__udivmoddi4+0x1a2>
 80002d2:	fab3 f783 	clz	r7, r3
 80002d6:	b98f      	cbnz	r7, 80002fc <__udivmoddi4+0x1d8>
 80002d8:	4283      	cmp	r3, r0
 80002da:	d301      	bcc.n	80002e0 <__udivmoddi4+0x1bc>
 80002dc:	4572      	cmp	r2, lr
 80002de:	d808      	bhi.n	80002f2 <__udivmoddi4+0x1ce>
 80002e0:	ebbe 0402 	subs.w	r4, lr, r2
 80002e4:	eb60 0303 	sbc.w	r3, r0, r3
 80002e8:	2001      	movs	r0, #1
 80002ea:	469c      	mov	ip, r3
 80002ec:	b91e      	cbnz	r6, 80002f6 <__udivmoddi4+0x1d2>
 80002ee:	2100      	movs	r1, #0
 80002f0:	e768      	b.n	80001c4 <__udivmoddi4+0xa0>
 80002f2:	4638      	mov	r0, r7
 80002f4:	e7fa      	b.n	80002ec <__udivmoddi4+0x1c8>
 80002f6:	e9c6 4c00 	strd	r4, ip, [r6]
 80002fa:	e7f8      	b.n	80002ee <__udivmoddi4+0x1ca>
 80002fc:	f1c7 0c20 	rsb	ip, r7, #32
 8000300:	40bb      	lsls	r3, r7
 8000302:	fa22 f40c 	lsr.w	r4, r2, ip
 8000306:	431c      	orrs	r4, r3
 8000308:	ea4f 4914 	mov.w	r9, r4, lsr #16
 800030c:	fa20 f30c 	lsr.w	r3, r0, ip
 8000310:	fbb3 f8f9 	udiv	r8, r3, r9
 8000314:	40b8      	lsls	r0, r7
 8000316:	fa2e f10c 	lsr.w	r1, lr, ip
 800031a:	4301      	orrs	r1, r0
 800031c:	fa0e f507 	lsl.w	r5, lr, r7
 8000320:	fb09 3018 	mls	r0, r9, r8, r3
 8000324:	fa1f fe84 	uxth.w	lr, r4
 8000328:	fb08 fa0e 	mul.w	sl, r8, lr
 800032c:	0c0b      	lsrs	r3, r1, #16
 800032e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000332:	459a      	cmp	sl, r3
 8000334:	fa02 f207 	lsl.w	r2, r2, r7
 8000338:	d940      	bls.n	80003bc <__udivmoddi4+0x298>
 800033a:	18e3      	adds	r3, r4, r3
 800033c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000340:	d204      	bcs.n	800034c <__udivmoddi4+0x228>
 8000342:	459a      	cmp	sl, r3
 8000344:	d902      	bls.n	800034c <__udivmoddi4+0x228>
 8000346:	f1a8 0002 	sub.w	r0, r8, #2
 800034a:	4423      	add	r3, r4
 800034c:	eba3 030a 	sub.w	r3, r3, sl
 8000350:	fbb3 f8f9 	udiv	r8, r3, r9
 8000354:	fb09 3318 	mls	r3, r9, r8, r3
 8000358:	fb08 fe0e 	mul.w	lr, r8, lr
 800035c:	b289      	uxth	r1, r1
 800035e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000362:	458e      	cmp	lr, r1
 8000364:	d92c      	bls.n	80003c0 <__udivmoddi4+0x29c>
 8000366:	1861      	adds	r1, r4, r1
 8000368:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800036c:	d204      	bcs.n	8000378 <__udivmoddi4+0x254>
 800036e:	458e      	cmp	lr, r1
 8000370:	d902      	bls.n	8000378 <__udivmoddi4+0x254>
 8000372:	f1a8 0302 	sub.w	r3, r8, #2
 8000376:	4421      	add	r1, r4
 8000378:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800037c:	fba0 9802 	umull	r9, r8, r0, r2
 8000380:	eba1 010e 	sub.w	r1, r1, lr
 8000384:	4541      	cmp	r1, r8
 8000386:	46ce      	mov	lr, r9
 8000388:	4643      	mov	r3, r8
 800038a:	d302      	bcc.n	8000392 <__udivmoddi4+0x26e>
 800038c:	d106      	bne.n	800039c <__udivmoddi4+0x278>
 800038e:	454d      	cmp	r5, r9
 8000390:	d204      	bcs.n	800039c <__udivmoddi4+0x278>
 8000392:	ebb9 0e02 	subs.w	lr, r9, r2
 8000396:	eb68 0304 	sbc.w	r3, r8, r4
 800039a:	3801      	subs	r0, #1
 800039c:	2e00      	cmp	r6, #0
 800039e:	d0a6      	beq.n	80002ee <__udivmoddi4+0x1ca>
 80003a0:	ebb5 020e 	subs.w	r2, r5, lr
 80003a4:	eb61 0103 	sbc.w	r1, r1, r3
 80003a8:	fa01 fc0c 	lsl.w	ip, r1, ip
 80003ac:	fa22 f307 	lsr.w	r3, r2, r7
 80003b0:	ea4c 0303 	orr.w	r3, ip, r3
 80003b4:	40f9      	lsrs	r1, r7
 80003b6:	e9c6 3100 	strd	r3, r1, [r6]
 80003ba:	e798      	b.n	80002ee <__udivmoddi4+0x1ca>
 80003bc:	4640      	mov	r0, r8
 80003be:	e7c5      	b.n	800034c <__udivmoddi4+0x228>
 80003c0:	4643      	mov	r3, r8
 80003c2:	e7d9      	b.n	8000378 <__udivmoddi4+0x254>
 80003c4:	0000      	movs	r0, r0
	...

080003c8 <pwm_set_dt.constprop.0.isra.0>:
 *
 * @return A value from pwm_set().
 *
 * @see pwm_set_pulse_dt()
 */
static inline int pwm_set_dt(const struct pwm_dt_spec *spec, uint32_t period,
 80003c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003cc:	4606      	mov	r6, r0
 80003ce:	460d      	mov	r5, r1
 80003d0:	b087      	sub	sp, #28
	return api->get_cycles_per_sec(dev, channel, cycles);
 80003d2:	4f21      	ldr	r7, [pc, #132]	; (8000458 <pwm_set_dt.constprop.0.isra.0+0x90>)
 80003d4:	2104      	movs	r1, #4
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	4638      	mov	r0, r7
 80003da:	9302      	str	r3, [sp, #8]
 80003dc:	aa04      	add	r2, sp, #16
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	4798      	blx	r3
	if (err < 0) {
 80003e2:	2800      	cmp	r0, #0
 80003e4:	db30      	blt.n	8000448 <pwm_set_dt.constprop.0.isra.0+0x80>
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
 80003e6:	e9dd 4a04 	ldrd	r4, sl, [sp, #16]
 80003ea:	fba6 b304 	umull	fp, r3, r6, r4
 80003ee:	fb06 360a 	mla	r6, r6, sl, r3
 80003f2:	a317      	add	r3, pc, #92	; (adr r3, 8000450 <pwm_set_dt.constprop.0.isra.0+0x88>)
 80003f4:	e9d3 2300 	ldrd	r2, r3, [r3]
	if (period_cycles > UINT32_MAX) {
 80003f8:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
 80003fc:	4658      	mov	r0, fp
 80003fe:	4631      	mov	r1, r6
 8000400:	f7ff fe76 	bl	80000f0 <__aeabi_uldivmod>
	if (period_cycles > UINT32_MAX) {
 8000404:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800045c <pwm_set_dt.constprop.0.isra.0+0x94>
 8000408:	45d9      	cmp	r9, fp
 800040a:	eb78 0306 	sbcs.w	r3, r8, r6
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
 800040e:	9003      	str	r0, [sp, #12]
	if (period_cycles > UINT32_MAX) {
 8000410:	d31a      	bcc.n	8000448 <pwm_set_dt.constprop.0.isra.0+0x80>
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
 8000412:	a30f      	add	r3, pc, #60	; (adr r3, 8000450 <pwm_set_dt.constprop.0.isra.0+0x88>)
 8000414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000418:	fba5 b404 	umull	fp, r4, r5, r4
 800041c:	fb05 440a 	mla	r4, r5, sl, r4
 8000420:	4658      	mov	r0, fp
 8000422:	4621      	mov	r1, r4
 8000424:	f7ff fe64 	bl	80000f0 <__aeabi_uldivmod>
	if (pulse_cycles > UINT32_MAX) {
 8000428:	45d9      	cmp	r9, fp
 800042a:	eb78 0404 	sbcs.w	r4, r8, r4
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
 800042e:	4603      	mov	r3, r0
	if (pulse_cycles > UINT32_MAX) {
 8000430:	d30a      	bcc.n	8000448 <pwm_set_dt.constprop.0.isra.0+0x80>
	if (pulse > period) {
 8000432:	9a03      	ldr	r2, [sp, #12]
 8000434:	4282      	cmp	r2, r0
 8000436:	d307      	bcc.n	8000448 <pwm_set_dt.constprop.0.isra.0+0x80>
	return api->set_cycles(dev, channel, period, pulse, flags);
 8000438:	2200      	movs	r2, #0
 800043a:	9200      	str	r2, [sp, #0]
 800043c:	9a02      	ldr	r2, [sp, #8]
 800043e:	2104      	movs	r1, #4
 8000440:	6814      	ldr	r4, [r2, #0]
 8000442:	4638      	mov	r0, r7
 8000444:	9a03      	ldr	r2, [sp, #12]
 8000446:	47a0      	blx	r4
			     uint32_t pulse)
{
	return pwm_set(spec->dev, spec->channel, period, pulse, spec->flags);
}
 8000448:	b007      	add	sp, #28
 800044a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800044e:	bf00      	nop
 8000450:	3b9aca00 	.word	0x3b9aca00
 8000454:	00000000 	.word	0x00000000
 8000458:	08004de4 	.word	0x08004de4
 800045c:	3b9ac9ff 	.word	0x3b9ac9ff

08000460 <_ZN16HikariGPIOConfig14board_led_initEv>:
#include "gpio_func.hpp"

uint8_t HikariGPIOConfig::board_led_init(){
 8000460:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 8000462:	4811      	ldr	r0, [pc, #68]	; (80004a8 <_ZN16HikariGPIOConfig14board_led_initEv+0x48>)
 8000464:	f004 faa0 	bl	80049a8 <z_device_is_ready>

    bool err = INIT_VALUE_0;

    if(!(err = gpio_is_ready_dt(&BOARD_LED_A))){
 8000468:	b920      	cbnz	r0, 8000474 <_ZN16HikariGPIOConfig14board_led_initEv+0x14>
        printk(">>>GPIO A READY FAIL!<<< \r\n");
 800046a:	4810      	ldr	r0, [pc, #64]	; (80004ac <_ZN16HikariGPIOConfig14board_led_initEv+0x4c>)
        return MY_FUNC_CRASH;
    }

    if(!(err = gpio_is_ready_dt(&BOARD_LED_B))){
        printk(">>>GPIO B READY FAIL!<<< \r\n");
 800046c:	f003 fb62 	bl	8003b34 <printk>
        return MY_FUNC_CRASH;
 8000470:	2001      	movs	r0, #1
    gpio_pin_configure_dt(&BOARD_LED_A, GPIO_OUTPUT_ACTIVE);
    gpio_pin_configure_dt(&BOARD_LED_B, GPIO_OUTPUT_ACTIVE);
    gpio_pin_configure_dt(&BOARD_LED_C, GPIO_OUTPUT_ACTIVE);
    printk("GPIO A&B&C READY!\r\n");
    return MY_FUNC_OK;
}
 8000472:	bd08      	pop	{r3, pc}
 8000474:	480c      	ldr	r0, [pc, #48]	; (80004a8 <_ZN16HikariGPIOConfig14board_led_initEv+0x48>)
 8000476:	f004 fa97 	bl	80049a8 <z_device_is_ready>
    if(!(err = gpio_is_ready_dt(&BOARD_LED_B))){
 800047a:	b908      	cbnz	r0, 8000480 <_ZN16HikariGPIOConfig14board_led_initEv+0x20>
        printk(">>>GPIO B READY FAIL!<<< \r\n");
 800047c:	480c      	ldr	r0, [pc, #48]	; (80004b0 <_ZN16HikariGPIOConfig14board_led_initEv+0x50>)
 800047e:	e7f5      	b.n	800046c <_ZN16HikariGPIOConfig14board_led_initEv+0xc>
 8000480:	4809      	ldr	r0, [pc, #36]	; (80004a8 <_ZN16HikariGPIOConfig14board_led_initEv+0x48>)
 8000482:	f004 fa91 	bl	80049a8 <z_device_is_ready>
    if(!(err = gpio_is_ready_dt(&BOARD_LED_C))){
 8000486:	b908      	cbnz	r0, 800048c <_ZN16HikariGPIOConfig14board_led_initEv+0x2c>
        printk(">>>GPIO C READY FAIL!<<< \r\n");
 8000488:	480a      	ldr	r0, [pc, #40]	; (80004b4 <_ZN16HikariGPIOConfig14board_led_initEv+0x54>)
 800048a:	e7ef      	b.n	800046c <_ZN16HikariGPIOConfig14board_led_initEv+0xc>
    gpio_pin_configure_dt(&BOARD_LED_A, GPIO_OUTPUT_ACTIVE);
 800048c:	480a      	ldr	r0, [pc, #40]	; (80004b8 <_ZN16HikariGPIOConfig14board_led_initEv+0x58>)
 800048e:	f003 fb30 	bl	8003af2 <gpio_pin_configure_dt.constprop.0.isra.0>
    gpio_pin_configure_dt(&BOARD_LED_B, GPIO_OUTPUT_ACTIVE);
 8000492:	480a      	ldr	r0, [pc, #40]	; (80004bc <_ZN16HikariGPIOConfig14board_led_initEv+0x5c>)
 8000494:	f003 fb2d 	bl	8003af2 <gpio_pin_configure_dt.constprop.0.isra.0>
    gpio_pin_configure_dt(&BOARD_LED_C, GPIO_OUTPUT_ACTIVE);
 8000498:	4809      	ldr	r0, [pc, #36]	; (80004c0 <_ZN16HikariGPIOConfig14board_led_initEv+0x60>)
 800049a:	f003 fb2a 	bl	8003af2 <gpio_pin_configure_dt.constprop.0.isra.0>
    printk("GPIO A&B&C READY!\r\n");
 800049e:	4809      	ldr	r0, [pc, #36]	; (80004c4 <_ZN16HikariGPIOConfig14board_led_initEv+0x64>)
 80004a0:	f003 fb48 	bl	8003b34 <printk>
    return MY_FUNC_OK;
 80004a4:	2000      	movs	r0, #0
 80004a6:	e7e4      	b.n	8000472 <_ZN16HikariGPIOConfig14board_led_initEv+0x12>
 80004a8:	08004d54 	.word	0x08004d54
 80004ac:	0800537a 	.word	0x0800537a
 80004b0:	08005396 	.word	0x08005396
 80004b4:	080053b2 	.word	0x080053b2
 80004b8:	08005090 	.word	0x08005090
 80004bc:	08005088 	.word	0x08005088
 80004c0:	08005080 	.word	0x08005080
 80004c4:	080053ce 	.word	0x080053ce

080004c8 <_ZN16HikariGPIOConfig8pwm_initEv>:

void HikariGPIOConfig::board_led_c_off(){
    gpio_pin_set_dt(&BOARD_LED_C, 0);
}

uint8_t HikariGPIOConfig::pwm_init(){
 80004c8:	b508      	push	{r3, lr}
 80004ca:	4807      	ldr	r0, [pc, #28]	; (80004e8 <_ZN16HikariGPIOConfig8pwm_initEv+0x20>)
 80004cc:	f004 fa6c 	bl	80049a8 <z_device_is_ready>
    
    bool err = INIT_VALUE_0;

    if(!(err = device_is_ready(PWM_AS_SCK.dev))){
 80004d0:	b920      	cbnz	r0, 80004dc <_ZN16HikariGPIOConfig8pwm_initEv+0x14>
        printk(">>>PWM_AS_SCK INIT READY FAIL!<<< \r\n");
 80004d2:	4806      	ldr	r0, [pc, #24]	; (80004ec <_ZN16HikariGPIOConfig8pwm_initEv+0x24>)
 80004d4:	f003 fb2e 	bl	8003b34 <printk>
        return MY_FUNC_CRASH;
 80004d8:	2001      	movs	r0, #1
    //     return MY_FUNC_CRASH;
    // }

    printk("***PWM INIT READY!*** \r\n");
    return MY_FUNC_OK;
}
 80004da:	bd08      	pop	{r3, pc}
    printk("***PWM INIT READY!*** \r\n");
 80004dc:	4804      	ldr	r0, [pc, #16]	; (80004f0 <_ZN16HikariGPIOConfig8pwm_initEv+0x28>)
 80004de:	f003 fb29 	bl	8003b34 <printk>
    return MY_FUNC_OK;
 80004e2:	2000      	movs	r0, #0
 80004e4:	e7f9      	b.n	80004da <_ZN16HikariGPIOConfig8pwm_initEv+0x12>
 80004e6:	bf00      	nop
 80004e8:	08004de4 	.word	0x08004de4
 80004ec:	080053e2 	.word	0x080053e2
 80004f0:	08005407 	.word	0x08005407

080004f4 <_ZN16HikariGPIOConfig13pwm_as_sck_onEv>:

void HikariGPIOConfig::pwm_as_sck_on(){

    // pwm_set_dt(&PWM_AS_SCK, PWM_USEC(28.5), PWM_USEC(14.25));
    pwm_set_dt(&PWM_AS_SCK, PWM_USEC(200), PWM_USEC(100));
 80004f4:	4901      	ldr	r1, [pc, #4]	; (80004fc <_ZN16HikariGPIOConfig13pwm_as_sck_onEv+0x8>)
 80004f6:	4802      	ldr	r0, [pc, #8]	; (8000500 <_ZN16HikariGPIOConfig13pwm_as_sck_onEv+0xc>)
 80004f8:	f7ff bf66 	b.w	80003c8 <pwm_set_dt.constprop.0.isra.0>
 80004fc:	000186a0 	.word	0x000186a0
 8000500:	00030d40 	.word	0x00030d40

08000504 <main>:
SDI_COLOR_STRUCT array_test = {
	{0x00},{0x00},{0xFF}
};

int main(void)
{	
 8000504:	b510      	push	{r4, lr}
	HikariSPIControler *spi_def;
	HikariGPIOConfig *def;

	def->board_led_init();
 8000506:	2400      	movs	r4, #0
 8000508:	4620      	mov	r0, r4
 800050a:	f7ff ffa9 	bl	8000460 <_ZN16HikariGPIOConfig14board_led_initEv>
	def->pwm_init();
 800050e:	4620      	mov	r0, r4
 8000510:	f7ff ffda 	bl	80004c8 <_ZN16HikariGPIOConfig8pwm_initEv>
	def->pwm_as_sck_on();
 8000514:	4620      	mov	r0, r4
 8000516:	f7ff ffed 	bl	80004f4 <_ZN16HikariGPIOConfig13pwm_as_sck_onEv>
		union { uintptr_t x; int32_t val; } parm0 = { .val = us };
		return (int32_t) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_USLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_usleep(us);
 800051a:	2001      	movs	r0, #1
 800051c:	f004 fb3f 	bl	8004b9e <z_impl_k_usleep>
	k_usleep(1);
	// spi_def->rgb2spi_array_output_TEST(clear_test_array);
	spi_def->test(clear_test_array);
 8000520:	4620      	mov	r0, r4
 8000522:	4903      	ldr	r1, [pc, #12]	; (8000530 <main+0x2c>)
 8000524:	f000 f846 	bl	80005b4 <_ZN18HikariSPIControler4testEPh>
	// spi_def->new_test(FFtest);
	def->pwm_as_sck_off();
 8000528:	4620      	mov	r0, r4
 800052a:	f003 fafc 	bl	8003b26 <_ZN16HikariGPIOConfig14pwm_as_sck_offEv>

	while (1)
 800052e:	e7fe      	b.n	800052e <main+0x2a>
 8000530:	20000094 	.word	0x20000094

08000534 <_ZN15HikariSPIConfig11my_spi_initEPK6device>:
#include "spi_func.hpp"

HikariSPIConfig HikariSPIConfig::_sInstance;

uint8_t HikariSPIConfig::my_spi_init(const struct device *dev){
 8000534:	b510      	push	{r4, lr}
 8000536:	460c      	mov	r4, r1
 8000538:	4608      	mov	r0, r1
 800053a:	f004 fa35 	bl	80049a8 <z_device_is_ready>

    if (!device_is_ready(dev)) {
		printk(">>>SPI device %s is not ready<<<\n", dev->name);
 800053e:	6821      	ldr	r1, [r4, #0]
    if (!device_is_ready(dev)) {
 8000540:	b920      	cbnz	r0, 800054c <_ZN15HikariSPIConfig11my_spi_initEPK6device+0x18>
		printk(">>>SPI device %s is not ready<<<\n", dev->name);
 8000542:	4805      	ldr	r0, [pc, #20]	; (8000558 <_ZN15HikariSPIConfig11my_spi_initEPK6device+0x24>)
 8000544:	f003 faf6 	bl	8003b34 <printk>
		return MY_FUNC_CRASH;
 8000548:	2001      	movs	r0, #1
	}else 
		printk("**SPI device %s is ready**\n", dev->name);

    return MY_FUNC_OK;
}
 800054a:	bd10      	pop	{r4, pc}
		printk("**SPI device %s is ready**\n", dev->name);
 800054c:	4803      	ldr	r0, [pc, #12]	; (800055c <_ZN15HikariSPIConfig11my_spi_initEPK6device+0x28>)
 800054e:	f003 faf1 	bl	8003b34 <printk>
    return MY_FUNC_OK;
 8000552:	2000      	movs	r0, #0
 8000554:	e7f9      	b.n	800054a <_ZN15HikariSPIConfig11my_spi_initEPK6device+0x16>
 8000556:	bf00      	nop
 8000558:	08005420 	.word	0x08005420
 800055c:	08005442 	.word	0x08005442

08000560 <_ZN15HikariSPIConfig12my_spi_writeEPK6devicePhj>:

uint8_t HikariSPIConfig::my_spi_write(const struct device *dev, uint8_t tx_buffer[], size_t len){
 8000560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000562:	4617      	mov	r7, r2
 8000564:	b08d      	sub	sp, #52	; 0x34

    // if(my_spi_init(dev)){
    //     return MY_FUNC_CRASH;
    // }

    const struct spi_cs_control my_cs_gpio = {
 8000566:	4a10      	ldr	r2, [pc, #64]	; (80005a8 <_ZN15HikariSPIConfig12my_spi_writeEPK6devicePhj+0x48>)
 8000568:	ad05      	add	r5, sp, #20
        .gpio = GPIO_DT_SPEC_GET(SPI1_NODE, cs_gpios),
        .delay = 0U,
    };

    const struct spi_config spi1_cfg = {
 800056a:	2601      	movs	r6, #1
uint8_t HikariSPIConfig::my_spi_write(const struct device *dev, uint8_t tx_buffer[], size_t len){
 800056c:	460c      	mov	r4, r1
    const struct spi_cs_control my_cs_gpio = {
 800056e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000570:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    const struct spi_config spi1_cfg = {
 8000574:	f244 1202 	movw	r2, #16642	; 0x4102
 8000578:	490c      	ldr	r1, [pc, #48]	; (80005ac <_ZN15HikariSPIConfig12my_spi_writeEPK6devicePhj+0x4c>)
    };

    const struct spi_buf spi1_buf1 = {
        .buf = tx_buffer,
        .len = len,
    };
 800057a:	e9cd 7301 	strd	r7, r3, [sp, #4]

    const struct spi_buf_set spi1_buf_set1 = {
        .buffers = &spi1_buf1,
        .count = 1,
    };
 800057e:	ab01      	add	r3, sp, #4
    const struct spi_config spi1_cfg = {
 8000580:	e9cd 1208 	strd	r1, r2, [sp, #32]
    };
 8000584:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    const struct spi_buf_set spi1_buf_set1 = {
 8000588:	9604      	str	r6, [sp, #16]
    };
 800058a:	9303      	str	r3, [sp, #12]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 800058c:	68a3      	ldr	r3, [r4, #8]
 800058e:	4620      	mov	r0, r4
 8000590:	681d      	ldr	r5, [r3, #0]
 8000592:	aa03      	add	r2, sp, #12
 8000594:	2300      	movs	r3, #0
 8000596:	a908      	add	r1, sp, #32
 8000598:	47a8      	blx	r5

    err = spi_write(dev, &spi1_cfg, &spi1_buf_set1);
    if(err){
 800059a:	b118      	cbz	r0, 80005a4 <_ZN15HikariSPIConfig12my_spi_writeEPK6devicePhj+0x44>
        printk("**SPI Write Error!**\r\n");
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <_ZN15HikariSPIConfig12my_spi_writeEPK6devicePhj+0x50>)
 800059e:	f003 fac9 	bl	8003b34 <printk>
        return MY_FUNC_CRASH;
 80005a2:	4630      	mov	r0, r6
    }else 
        // printk("**SPI Write Right!**\r\n");
    
    return MY_FUNC_OK;
}
 80005a4:	b00d      	add	sp, #52	; 0x34
 80005a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a8:	08005054 	.word	0x08005054
 80005ac:	00061a80 	.word	0x00061a80
 80005b0:	0800545e 	.word	0x0800545e

080005b4 <_ZN18HikariSPIControler4testEPh>:
    hikarispiconfig->my_spi_write(spi1, SPI_SDI_COLOR_ARRAY, 1024);

    return MY_FUNC_OK;
}

void HikariSPIControler::test(uint8_t *input_RGBcolor){
 80005b4:	b5f0      	push	{r4, r5, r6, r7, lr}

    int i = INIT_VALUE_0;
    int j = INIT_VALUE_0;

    uint8_t SPI_SDI_COLOR_ARRAY[1024] = {0};  
 80005b6:	2500      	movs	r5, #0
void HikariSPIControler::test(uint8_t *input_RGBcolor){
 80005b8:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 80005bc:	460e      	mov	r6, r1
    uint8_t SPI_SDI_COLOR_ARRAY[1024] = {0};  
 80005be:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80005c2:	4629      	mov	r1, r5
void HikariSPIControler::test(uint8_t *input_RGBcolor){
 80005c4:	4604      	mov	r4, r0
    uint8_t SPI_SDI_COLOR_ARRAY[1024] = {0};  
 80005c6:	a803      	add	r0, sp, #12
 80005c8:	9502      	str	r5, [sp, #8]
 80005ca:	f003 fbba 	bl	8003d42 <memset>
    uint8_t Convert_Array[8] = {bit7_check, bit6_check, bit5_check, bit4_check,
 80005ce:	466a      	mov	r2, sp
 80005d0:	4b30      	ldr	r3, [pc, #192]	; (8000694 <_ZN18HikariSPIControler4testEPh+0xe0>)
 80005d2:	6859      	ldr	r1, [r3, #4]
 80005d4:	6818      	ldr	r0, [r3, #0]
 80005d6:	c203      	stmia	r2!, {r0, r1}
                                bit3_check, bit2_check, bit1_check, bit0_check};

    for(j = INIT_VALUE_0; j < 32; j++){
 80005d8:	4631      	mov	r1, r6
        // printk("***********  %d  **************  \r\n", j);
            //lightness convertion
            for(i = INIT_VALUE_0; i < 8; i++){
 80005da:	466f      	mov	r7, sp
                SPI_SDI_COLOR_ARRAY[i+(32*(j))] = (((input_RGBcolor[0+(4*j)] & Convert_Array[i]) == Convert_Array[i])?SDI_ONE:SDI_ZERO);
 80005dc:	4616      	mov	r6, r2
 80005de:	466b      	mov	r3, sp
            for(i = INIT_VALUE_0; i < 8; i++){
 80005e0:	2000      	movs	r0, #0
                SPI_SDI_COLOR_ARRAY[i+(32*(j))] = (((input_RGBcolor[0+(4*j)] & Convert_Array[i]) == Convert_Array[i])?SDI_ONE:SDI_ZERO);
 80005e2:	f891 e000 	ldrb.w	lr, [r1]
 80005e6:	f813 cb01 	ldrb.w	ip, [r3], #1
            for(i = INIT_VALUE_0; i < 8; i++){
 80005ea:	3001      	adds	r0, #1
                SPI_SDI_COLOR_ARRAY[i+(32*(j))] = (((input_RGBcolor[0+(4*j)] & Convert_Array[i]) == Convert_Array[i])?SDI_ONE:SDI_ZERO);
 80005ec:	ea3c 0c0e 	bics.w	ip, ip, lr
 80005f0:	bf14      	ite	ne
 80005f2:	f04f 0c00 	movne.w	ip, #0
 80005f6:	f04f 0c1e 	moveq.w	ip, #30
            for(i = INIT_VALUE_0; i < 8; i++){
 80005fa:	2808      	cmp	r0, #8
                SPI_SDI_COLOR_ARRAY[i+(32*(j))] = (((input_RGBcolor[0+(4*j)] & Convert_Array[i]) == Convert_Array[i])?SDI_ONE:SDI_ZERO);
 80005fc:	f806 cb01 	strb.w	ip, [r6], #1
            for(i = INIT_VALUE_0; i < 8; i++){
 8000600:	d1f1      	bne.n	80005e6 <_ZN18HikariSPIControler4testEPh+0x32>
                // printk("%d,  %x   \r\n", (i+(32*(j+1))), SPI_SDI_COLOR_ARRAY[i+(32*(j+1))]);
            }
            //blue convertion
            for(i = INIT_VALUE_0; i < 8; i++){
                SPI_SDI_COLOR_ARRAY[i+8+(32*(j))] = (((input_RGBcolor[3+(4*j)] & Convert_Array[i]) == Convert_Array[i])?SDI_ONE:SDI_ZERO);
 8000602:	46ec      	mov	ip, sp
            for(i = INIT_VALUE_0; i < 8; i++){
 8000604:	2000      	movs	r0, #0
                SPI_SDI_COLOR_ARRAY[i+8+(32*(j))] = (((input_RGBcolor[3+(4*j)] & Convert_Array[i]) == Convert_Array[i])?SDI_ONE:SDI_ZERO);
 8000606:	f891 e003 	ldrb.w	lr, [r1, #3]
 800060a:	1dd3      	adds	r3, r2, #7
 800060c:	f81c 6b01 	ldrb.w	r6, [ip], #1
            for(i = INIT_VALUE_0; i < 8; i++){
 8000610:	3001      	adds	r0, #1
                SPI_SDI_COLOR_ARRAY[i+8+(32*(j))] = (((input_RGBcolor[3+(4*j)] & Convert_Array[i]) == Convert_Array[i])?SDI_ONE:SDI_ZERO);
 8000612:	ea36 060e 	bics.w	r6, r6, lr
 8000616:	bf14      	ite	ne
 8000618:	2600      	movne	r6, #0
 800061a:	261e      	moveq	r6, #30
            for(i = INIT_VALUE_0; i < 8; i++){
 800061c:	2808      	cmp	r0, #8
                SPI_SDI_COLOR_ARRAY[i+8+(32*(j))] = (((input_RGBcolor[3+(4*j)] & Convert_Array[i]) == Convert_Array[i])?SDI_ONE:SDI_ZERO);
 800061e:	f803 6f01 	strb.w	r6, [r3, #1]!
            for(i = INIT_VALUE_0; i < 8; i++){
 8000622:	d1f3      	bne.n	800060c <_ZN18HikariSPIControler4testEPh+0x58>
                // printk("%d,  %x   \r\n", (i+8+(32*(j+1))), SPI_SDI_COLOR_ARRAY[i+8+(32*(j+1))]);
            }
            //green convertion
            for(i = INIT_VALUE_0; i < 8; i++){
                SPI_SDI_COLOR_ARRAY[i+16+(32*(j))] = (((input_RGBcolor[2+(4*j)] & Convert_Array[i]) == Convert_Array[i])?SDI_ONE:SDI_ZERO);
 8000624:	46ec      	mov	ip, sp
            for(i = INIT_VALUE_0; i < 8; i++){
 8000626:	2000      	movs	r0, #0
                SPI_SDI_COLOR_ARRAY[i+16+(32*(j))] = (((input_RGBcolor[2+(4*j)] & Convert_Array[i]) == Convert_Array[i])?SDI_ONE:SDI_ZERO);
 8000628:	f891 e002 	ldrb.w	lr, [r1, #2]
 800062c:	f102 030f 	add.w	r3, r2, #15
 8000630:	f81c 6b01 	ldrb.w	r6, [ip], #1
            for(i = INIT_VALUE_0; i < 8; i++){
 8000634:	3001      	adds	r0, #1
                SPI_SDI_COLOR_ARRAY[i+16+(32*(j))] = (((input_RGBcolor[2+(4*j)] & Convert_Array[i]) == Convert_Array[i])?SDI_ONE:SDI_ZERO);
 8000636:	ea36 060e 	bics.w	r6, r6, lr
 800063a:	bf14      	ite	ne
 800063c:	2600      	movne	r6, #0
 800063e:	261e      	moveq	r6, #30
            for(i = INIT_VALUE_0; i < 8; i++){
 8000640:	2808      	cmp	r0, #8
                SPI_SDI_COLOR_ARRAY[i+16+(32*(j))] = (((input_RGBcolor[2+(4*j)] & Convert_Array[i]) == Convert_Array[i])?SDI_ONE:SDI_ZERO);
 8000642:	f803 6f01 	strb.w	r6, [r3, #1]!
            for(i = INIT_VALUE_0; i < 8; i++){
 8000646:	d1f3      	bne.n	8000630 <_ZN18HikariSPIControler4testEPh+0x7c>
                // printk("%d,  %x   \r\n", (i+16+(32*(j+1))), SPI_SDI_COLOR_ARRAY[i+16+(32*(j+1))]);
            }
            //red convertion
            for(i = INIT_VALUE_0; i < 8; i++){
 8000648:	2000      	movs	r0, #0
                SPI_SDI_COLOR_ARRAY[i+24+(32*(j))] = (((input_RGBcolor[1+(4*j)] & Convert_Array[i]) == Convert_Array[i])?SDI_ONE:SDI_ZERO);
 800064a:	f891 c001 	ldrb.w	ip, [r1, #1]
 800064e:	f102 0317 	add.w	r3, r2, #23
 8000652:	f817 6b01 	ldrb.w	r6, [r7], #1
            for(i = INIT_VALUE_0; i < 8; i++){
 8000656:	3001      	adds	r0, #1
                SPI_SDI_COLOR_ARRAY[i+24+(32*(j))] = (((input_RGBcolor[1+(4*j)] & Convert_Array[i]) == Convert_Array[i])?SDI_ONE:SDI_ZERO);
 8000658:	ea36 060c 	bics.w	r6, r6, ip
 800065c:	bf14      	ite	ne
 800065e:	2600      	movne	r6, #0
 8000660:	261e      	moveq	r6, #30
            for(i = INIT_VALUE_0; i < 8; i++){
 8000662:	2808      	cmp	r0, #8
                SPI_SDI_COLOR_ARRAY[i+24+(32*(j))] = (((input_RGBcolor[1+(4*j)] & Convert_Array[i]) == Convert_Array[i])?SDI_ONE:SDI_ZERO);
 8000664:	f803 6f01 	strb.w	r6, [r3, #1]!
            for(i = INIT_VALUE_0; i < 8; i++){
 8000668:	d1f3      	bne.n	8000652 <_ZN18HikariSPIControler4testEPh+0x9e>
    for(j = INIT_VALUE_0; j < 32; j++){
 800066a:	3520      	adds	r5, #32
 800066c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8000670:	f101 0104 	add.w	r1, r1, #4
 8000674:	f102 0220 	add.w	r2, r2, #32
 8000678:	d1af      	bne.n	80005da <_ZN18HikariSPIControler4testEPh+0x26>
                // printk("%d,  %x   \r\n", (i+24+(32*(j+1))), SPI_SDI_COLOR_ARRAY[i+24+(32*(j+1))]);
            }
    }  

    hikarispiconfig->my_spi_init(spi1);
 800067a:	4907      	ldr	r1, [pc, #28]	; (8000698 <_ZN18HikariSPIControler4testEPh+0xe4>)
 800067c:	6820      	ldr	r0, [r4, #0]
 800067e:	f7ff ff59 	bl	8000534 <_ZN15HikariSPIConfig11my_spi_initEPK6device>
    hikarispiconfig->my_spi_write(spi1, SPI_SDI_COLOR_ARRAY, 1024);
 8000682:	462b      	mov	r3, r5
 8000684:	4904      	ldr	r1, [pc, #16]	; (8000698 <_ZN18HikariSPIControler4testEPh+0xe4>)
 8000686:	6820      	ldr	r0, [r4, #0]
 8000688:	aa02      	add	r2, sp, #8
 800068a:	f7ff ff69 	bl	8000560 <_ZN15HikariSPIConfig12my_spi_writeEPK6devicePhj>
}
 800068e:	f20d 4d0c 	addw	sp, sp, #1036	; 0x40c
 8000692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000694:	080054bd 	.word	0x080054bd
 8000698:	08004e14 	.word	0x08004e14

0800069c <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
 800069c:	4b01      	ldr	r3, [pc, #4]	; (80006a4 <char_out+0x8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4718      	bx	r3
 80006a2:	bf00      	nop
 80006a4:	20000000 	.word	0x20000000

080006a8 <__printk_hook_install>:
	_char_out = fn;
 80006a8:	4b01      	ldr	r3, [pc, #4]	; (80006b0 <__printk_hook_install+0x8>)
 80006aa:	6018      	str	r0, [r3, #0]
}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	20000000 	.word	0x20000000

080006b4 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 80006b4:	b507      	push	{r0, r1, r2, lr}
 80006b6:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 80006b8:	2100      	movs	r1, #0
 80006ba:	4602      	mov	r2, r0
 80006bc:	9100      	str	r1, [sp, #0]
 80006be:	4803      	ldr	r0, [pc, #12]	; (80006cc <vprintk+0x18>)
 80006c0:	f000 f806 	bl	80006d0 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 80006c4:	b003      	add	sp, #12
 80006c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80006ca:	bf00      	nop
 80006cc:	0800069d 	.word	0x0800069d

080006d0 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
 80006d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006d4:	4681      	mov	r9, r0
 80006d6:	468b      	mov	fp, r1
 80006d8:	4617      	mov	r7, r2
 80006da:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 80006dc:	2500      	movs	r5, #0
{
 80006de:	b095      	sub	sp, #84	; 0x54
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 80006e0:	7838      	ldrb	r0, [r7, #0]
 80006e2:	b908      	cbnz	r0, 80006e8 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
 80006e4:	4628      	mov	r0, r5
 80006e6:	e357      	b.n	8000d98 <z_cbvprintf_impl+0x6c8>
			OUTC(*fp++);
 80006e8:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
 80006ea:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 80006ec:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
 80006ee:	d006      	beq.n	80006fe <z_cbvprintf_impl+0x2e>
			OUTC('%');
 80006f0:	4659      	mov	r1, fp
 80006f2:	47c8      	blx	r9
 80006f4:	2800      	cmp	r0, #0
 80006f6:	f2c0 834f 	blt.w	8000d98 <z_cbvprintf_impl+0x6c8>
 80006fa:	3501      	adds	r5, #1
		if (bps == NULL) {
 80006fc:	e1fb      	b.n	8000af6 <z_cbvprintf_impl+0x426>
		} state = {
 80006fe:	2218      	movs	r2, #24
 8000700:	2100      	movs	r1, #0
 8000702:	a80e      	add	r0, sp, #56	; 0x38
 8000704:	f003 fb1d 	bl	8003d42 <memset>
	if (*sp == '%') {
 8000708:	787b      	ldrb	r3, [r7, #1]
 800070a:	2b25      	cmp	r3, #37	; 0x25
 800070c:	d07d      	beq.n	800080a <z_cbvprintf_impl+0x13a>
 800070e:	2300      	movs	r3, #0
 8000710:	4698      	mov	r8, r3
 8000712:	469e      	mov	lr, r3
 8000714:	469c      	mov	ip, r3
 8000716:	461e      	mov	r6, r3
 8000718:	1c78      	adds	r0, r7, #1
 800071a:	4601      	mov	r1, r0
		switch (*sp) {
 800071c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000720:	2a2b      	cmp	r2, #43	; 0x2b
 8000722:	f000 80a1 	beq.w	8000868 <z_cbvprintf_impl+0x198>
 8000726:	f200 8098 	bhi.w	800085a <z_cbvprintf_impl+0x18a>
 800072a:	2a20      	cmp	r2, #32
 800072c:	f000 809f 	beq.w	800086e <z_cbvprintf_impl+0x19e>
 8000730:	2a23      	cmp	r2, #35	; 0x23
 8000732:	f000 809f 	beq.w	8000874 <z_cbvprintf_impl+0x1a4>
 8000736:	b12b      	cbz	r3, 8000744 <z_cbvprintf_impl+0x74>
 8000738:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800073c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000740:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8000744:	f1b8 0f00 	cmp.w	r8, #0
 8000748:	d005      	beq.n	8000756 <z_cbvprintf_impl+0x86>
 800074a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800074e:	f043 0320 	orr.w	r3, r3, #32
 8000752:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8000756:	f1be 0f00 	cmp.w	lr, #0
 800075a:	d005      	beq.n	8000768 <z_cbvprintf_impl+0x98>
 800075c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000760:	f043 0310 	orr.w	r3, r3, #16
 8000764:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8000768:	f1bc 0f00 	cmp.w	ip, #0
 800076c:	d005      	beq.n	800077a <z_cbvprintf_impl+0xaa>
 800076e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000772:	f043 0308 	orr.w	r3, r3, #8
 8000776:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800077a:	b12e      	cbz	r6, 8000788 <z_cbvprintf_impl+0xb8>
 800077c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
 8000788:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800078c:	f003 0044 	and.w	r0, r3, #68	; 0x44
 8000790:	2844      	cmp	r0, #68	; 0x44
 8000792:	d103      	bne.n	800079c <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
 8000794:	f36f 1386 	bfc	r3, #6, #1
 8000798:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
 800079c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 80007a0:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
 80007a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 80007aa:	d17f      	bne.n	80008ac <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
 80007ac:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
 80007b0:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 80007b2:	f042 0201 	orr.w	r2, r2, #1
 80007b6:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
 80007ba:	781a      	ldrb	r2, [r3, #0]
 80007bc:	2a2e      	cmp	r2, #46	; 0x2e
 80007be:	bf0c      	ite	eq
 80007c0:	2101      	moveq	r1, #1
 80007c2:	2100      	movne	r1, #0
 80007c4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80007c8:	f361 0241 	bfi	r2, r1, #1, #1
 80007cc:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
 80007d0:	d178      	bne.n	80008c4 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
 80007d2:	785a      	ldrb	r2, [r3, #1]
 80007d4:	2a2a      	cmp	r2, #42	; 0x2a
 80007d6:	d06e      	beq.n	80008b6 <z_cbvprintf_impl+0x1e6>
	size_t val = 0;
 80007d8:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 80007da:	f04f 0c0a 	mov.w	ip, #10
	++sp;
 80007de:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 80007e0:	4619      	mov	r1, r3
 80007e2:	f811 0b01 	ldrb.w	r0, [r1], #1
 80007e6:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 80007ea:	2e09      	cmp	r6, #9
 80007ec:	f240 8095 	bls.w	800091a <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
 80007f0:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
 80007f4:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
 80007f6:	f3c1 0040 	ubfx	r0, r1, #1, #1
 80007fa:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
 80007fe:	460a      	mov	r2, r1
 8000800:	f360 0241 	bfi	r2, r0, #1, #1
 8000804:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 8000808:	e05c      	b.n	80008c4 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
 800080a:	1cba      	adds	r2, r7, #2
 800080c:	9203      	str	r2, [sp, #12]
 800080e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
 8000812:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8000816:	07da      	lsls	r2, r3, #31
 8000818:	f140 812e 	bpl.w	8000a78 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
 800081c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
 8000820:	f1b8 0f00 	cmp.w	r8, #0
 8000824:	da07      	bge.n	8000836 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
 8000826:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
 800082a:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
 800082e:	f042 0204 	orr.w	r2, r2, #4
 8000832:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
 8000836:	075e      	lsls	r6, r3, #29
 8000838:	f140 8127 	bpl.w	8000a8a <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
 800083c:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
 8000840:	f1ba 0f00 	cmp.w	sl, #0
 8000844:	f280 8126 	bge.w	8000a94 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
 8000848:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 800084c:	f36f 0341 	bfc	r3, #1, #1
 8000850:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
 8000854:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8000858:	e11c      	b.n	8000a94 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
 800085a:	2a2d      	cmp	r2, #45	; 0x2d
 800085c:	d00d      	beq.n	800087a <z_cbvprintf_impl+0x1aa>
 800085e:	2a30      	cmp	r2, #48	; 0x30
 8000860:	f47f af69 	bne.w	8000736 <z_cbvprintf_impl+0x66>
 8000864:	2301      	movs	r3, #1
	} while (loop);
 8000866:	e758      	b.n	800071a <z_cbvprintf_impl+0x4a>
		switch (*sp) {
 8000868:	f04f 0c01 	mov.w	ip, #1
 800086c:	e755      	b.n	800071a <z_cbvprintf_impl+0x4a>
 800086e:	f04f 0e01 	mov.w	lr, #1
 8000872:	e752      	b.n	800071a <z_cbvprintf_impl+0x4a>
 8000874:	f04f 0801 	mov.w	r8, #1
 8000878:	e74f      	b.n	800071a <z_cbvprintf_impl+0x4a>
 800087a:	2601      	movs	r6, #1
 800087c:	e74d      	b.n	800071a <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
 800087e:	4603      	mov	r3, r0
 8000880:	fb0e 6202 	mla	r2, lr, r2, r6
 8000884:	3a30      	subs	r2, #48	; 0x30
 8000886:	4618      	mov	r0, r3
 8000888:	f810 6b01 	ldrb.w	r6, [r0], #1
 800088c:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8000890:	f1bc 0f09 	cmp.w	ip, #9
 8000894:	d9f3      	bls.n	800087e <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
 8000896:	4299      	cmp	r1, r3
 8000898:	d08f      	beq.n	80007ba <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 800089a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
 800089e:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
 80008a0:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 80008a2:	f362 0141 	bfi	r1, r2, #1, #1
 80008a6:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 80008aa:	e786      	b.n	80007ba <z_cbvprintf_impl+0xea>
 80008ac:	460b      	mov	r3, r1
	size_t val = 0;
 80008ae:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 80008b0:	f04f 0e0a 	mov.w	lr, #10
 80008b4:	e7e7      	b.n	8000886 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
 80008b6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
 80008ba:	3302      	adds	r3, #2
		conv->prec_star = true;
 80008bc:	f042 0204 	orr.w	r2, r2, #4
 80008c0:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
 80008c4:	781a      	ldrb	r2, [r3, #0]
 80008c6:	2a6c      	cmp	r2, #108	; 0x6c
 80008c8:	d047      	beq.n	800095a <z_cbvprintf_impl+0x28a>
 80008ca:	d82b      	bhi.n	8000924 <z_cbvprintf_impl+0x254>
 80008cc:	2a68      	cmp	r2, #104	; 0x68
 80008ce:	d031      	beq.n	8000934 <z_cbvprintf_impl+0x264>
 80008d0:	2a6a      	cmp	r2, #106	; 0x6a
 80008d2:	d04b      	beq.n	800096c <z_cbvprintf_impl+0x29c>
 80008d4:	2a4c      	cmp	r2, #76	; 0x4c
 80008d6:	d051      	beq.n	800097c <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
 80008d8:	461a      	mov	r2, r3
 80008da:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
 80008de:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
 80008e0:	9203      	str	r2, [sp, #12]
 80008e2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
 80008e6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
 80008ea:	f200 80be 	bhi.w	8000a6a <z_cbvprintf_impl+0x39a>
 80008ee:	2b6d      	cmp	r3, #109	; 0x6d
 80008f0:	d851      	bhi.n	8000996 <z_cbvprintf_impl+0x2c6>
 80008f2:	2b69      	cmp	r3, #105	; 0x69
 80008f4:	f200 80b9 	bhi.w	8000a6a <z_cbvprintf_impl+0x39a>
 80008f8:	2b57      	cmp	r3, #87	; 0x57
 80008fa:	d867      	bhi.n	80009cc <z_cbvprintf_impl+0x2fc>
 80008fc:	2b41      	cmp	r3, #65	; 0x41
 80008fe:	d003      	beq.n	8000908 <z_cbvprintf_impl+0x238>
 8000900:	3b45      	subs	r3, #69	; 0x45
 8000902:	2b02      	cmp	r3, #2
 8000904:	f200 80b1 	bhi.w	8000a6a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
 8000908:	2204      	movs	r2, #4
 800090a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800090e:	f362 0302 	bfi	r3, r2, #0, #3
 8000912:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
 8000916:	2301      	movs	r3, #1
			break;
 8000918:	e073      	b.n	8000a02 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
 800091a:	fb0c 0202 	mla	r2, ip, r2, r0
 800091e:	460b      	mov	r3, r1
 8000920:	3a30      	subs	r2, #48	; 0x30
 8000922:	e75d      	b.n	80007e0 <z_cbvprintf_impl+0x110>
	switch (*sp) {
 8000924:	2a74      	cmp	r2, #116	; 0x74
 8000926:	d025      	beq.n	8000974 <z_cbvprintf_impl+0x2a4>
 8000928:	2a7a      	cmp	r2, #122	; 0x7a
 800092a:	d1d5      	bne.n	80008d8 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
 800092c:	2106      	movs	r1, #6
 800092e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000932:	e00c      	b.n	800094e <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
 8000934:	785a      	ldrb	r2, [r3, #1]
 8000936:	2a68      	cmp	r2, #104	; 0x68
 8000938:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800093c:	d106      	bne.n	800094c <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
 800093e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 8000940:	f361 02c6 	bfi	r2, r1, #3, #4
 8000944:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
 8000948:	3302      	adds	r3, #2
 800094a:	e7c5      	b.n	80008d8 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
 800094c:	2102      	movs	r1, #2
 800094e:	f361 02c6 	bfi	r2, r1, #3, #4
 8000952:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
 8000956:	3301      	adds	r3, #1
 8000958:	e7be      	b.n	80008d8 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
 800095a:	785a      	ldrb	r2, [r3, #1]
 800095c:	2a6c      	cmp	r2, #108	; 0x6c
 800095e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000962:	d101      	bne.n	8000968 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
 8000964:	2104      	movs	r1, #4
 8000966:	e7eb      	b.n	8000940 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
 8000968:	2103      	movs	r1, #3
 800096a:	e7f0      	b.n	800094e <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
 800096c:	2105      	movs	r1, #5
 800096e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000972:	e7ec      	b.n	800094e <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
 8000974:	2107      	movs	r1, #7
 8000976:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800097a:	e7e8      	b.n	800094e <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
 800097c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8000980:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000984:	f022 0202 	bic.w	r2, r2, #2
 8000988:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800098c:	f042 0202 	orr.w	r2, r2, #2
 8000990:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
 8000994:	e7df      	b.n	8000956 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
 8000996:	3b6e      	subs	r3, #110	; 0x6e
 8000998:	b2d9      	uxtb	r1, r3
 800099a:	2301      	movs	r3, #1
 800099c:	408b      	lsls	r3, r1
 800099e:	f240 4182 	movw	r1, #1154	; 0x482
 80009a2:	420b      	tst	r3, r1
 80009a4:	d137      	bne.n	8000a16 <z_cbvprintf_impl+0x346>
 80009a6:	f013 0f24 	tst.w	r3, #36	; 0x24
 80009aa:	d151      	bne.n	8000a50 <z_cbvprintf_impl+0x380>
 80009ac:	07d8      	lsls	r0, r3, #31
 80009ae:	d55c      	bpl.n	8000a6a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
 80009b0:	2103      	movs	r1, #3
 80009b2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80009b6:	f361 0302 	bfi	r3, r1, #0, #3
 80009ba:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 80009be:	f002 0378 	and.w	r3, r2, #120	; 0x78
 80009c2:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 80009c6:	424b      	negs	r3, r1
 80009c8:	414b      	adcs	r3, r1
 80009ca:	e01a      	b.n	8000a02 <z_cbvprintf_impl+0x332>
 80009cc:	2001      	movs	r0, #1
	switch (conv->specifier) {
 80009ce:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
 80009d2:	b2c9      	uxtb	r1, r1
 80009d4:	fa00 f101 	lsl.w	r1, r0, r1
 80009d8:	f411 4f62 	tst.w	r1, #57856	; 0xe200
 80009dc:	d194      	bne.n	8000908 <z_cbvprintf_impl+0x238>
 80009de:	f640 0601 	movw	r6, #2049	; 0x801
 80009e2:	4231      	tst	r1, r6
 80009e4:	d11d      	bne.n	8000a22 <z_cbvprintf_impl+0x352>
 80009e6:	f411 3f04 	tst.w	r1, #135168	; 0x21000
 80009ea:	d03e      	beq.n	8000a6a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
 80009ec:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80009f0:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 80009f4:	f002 0278 	and.w	r2, r2, #120	; 0x78
 80009f8:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
 80009fa:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 80009fe:	d034      	beq.n	8000a6a <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
 8000a00:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
 8000a02:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8000a06:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8000a0a:	430b      	orrs	r3, r1
 8000a0c:	f363 0241 	bfi	r2, r3, #1, #1
 8000a10:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 8000a14:	e6fd      	b.n	8000812 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
 8000a16:	2102      	movs	r1, #2
 8000a18:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000a1c:	f361 0302 	bfi	r3, r1, #0, #3
 8000a20:	e7e8      	b.n	80009f4 <z_cbvprintf_impl+0x324>
 8000a22:	2002      	movs	r0, #2
 8000a24:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000a28:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 8000a2c:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000a30:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 8000a32:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
 8000a36:	bf02      	ittt	eq
 8000a38:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
 8000a3c:	f041 0101 	orreq.w	r1, r1, #1
 8000a40:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
 8000a44:	2b63      	cmp	r3, #99	; 0x63
 8000a46:	d1db      	bne.n	8000a00 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8000a48:	1e13      	subs	r3, r2, #0
 8000a4a:	bf18      	it	ne
 8000a4c:	2301      	movne	r3, #1
 8000a4e:	e7d8      	b.n	8000a02 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
 8000a50:	2103      	movs	r1, #3
 8000a52:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
 8000a56:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 8000a5a:	f361 0302 	bfi	r3, r1, #0, #3
 8000a5e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
 8000a62:	bf14      	ite	ne
 8000a64:	2301      	movne	r3, #1
 8000a66:	2300      	moveq	r3, #0
 8000a68:	e7cb      	b.n	8000a02 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
 8000a6a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
 8000a76:	e7c3      	b.n	8000a00 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
 8000a78:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
 8000a7c:	2a00      	cmp	r2, #0
		int width = -1;
 8000a7e:	bfac      	ite	ge
 8000a80:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
			width = conv->width_value;
 8000a84:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
 8000a88:	e6d5      	b.n	8000836 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
 8000a8a:	0798      	lsls	r0, r3, #30
 8000a8c:	f57f aee2 	bpl.w	8000854 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
 8000a90:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
 8000a94:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 8000a96:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
 8000a9a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
 8000a9e:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		enum specifier_cat_enum specifier_cat
 8000aa2:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 8000aa6:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 8000aa8:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 8000aac:	d133      	bne.n	8000b16 <z_cbvprintf_impl+0x446>
			switch (length_mod) {
 8000aae:	1ecb      	subs	r3, r1, #3
 8000ab0:	2b04      	cmp	r3, #4
 8000ab2:	d804      	bhi.n	8000abe <z_cbvprintf_impl+0x3ee>
 8000ab4:	e8df f003 	tbb	[pc, r3]
 8000ab8:	21464621 	.word	0x21464621
 8000abc:	21          	.byte	0x21
 8000abd:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 8000abe:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
 8000ac0:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
 8000ac2:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8000ac6:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 8000aca:	d11c      	bne.n	8000b06 <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
 8000acc:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
 8000ad0:	17da      	asrs	r2, r3, #31
 8000ad2:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
 8000ad6:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
 8000ad8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000adc:	f013 0603 	ands.w	r6, r3, #3
 8000ae0:	d050      	beq.n	8000b84 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
 8000ae2:	463a      	mov	r2, r7
 8000ae4:	4659      	mov	r1, fp
 8000ae6:	4648      	mov	r0, r9
 8000ae8:	9b03      	ldr	r3, [sp, #12]
 8000aea:	f003 f8e4 	bl	8003cb6 <outs>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	f2c0 8152 	blt.w	8000d98 <z_cbvprintf_impl+0x6c8>
 8000af4:	4405      	add	r5, r0
			continue;
 8000af6:	9f03      	ldr	r7, [sp, #12]
 8000af8:	e5f2      	b.n	80006e0 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000afa:	f854 3b04 	ldr.w	r3, [r4], #4
 8000afe:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
 8000b00:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 8000b04:	e7e8      	b.n	8000ad8 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
 8000b06:	2902      	cmp	r1, #2
 8000b08:	d1e5      	bne.n	8000ad6 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
 8000b0a:	b21a      	sxth	r2, r3
 8000b0c:	f343 33c0 	sbfx	r3, r3, #15, #1
 8000b10:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000b14:	e7df      	b.n	8000ad6 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d124      	bne.n	8000b64 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
 8000b1a:	1ecb      	subs	r3, r1, #3
 8000b1c:	2b04      	cmp	r3, #4
 8000b1e:	d804      	bhi.n	8000b2a <z_cbvprintf_impl+0x45a>
 8000b20:	e8df f003 	tbb	[pc, r3]
 8000b24:	18101018 	.word	0x18101018
 8000b28:	18          	.byte	0x18
 8000b29:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
 8000b2a:	2901      	cmp	r1, #1
 8000b2c:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
 8000b30:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8000b34:	d014      	beq.n	8000b60 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
 8000b36:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
 8000b38:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
 8000b3c:	d1cc      	bne.n	8000ad8 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
 8000b3e:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
 8000b40:	930e      	str	r3, [sp, #56]	; 0x38
 8000b42:	e7c9      	b.n	8000ad8 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
 8000b44:	3407      	adds	r4, #7
 8000b46:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
 8000b4a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8000b4e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 8000b52:	e7c1      	b.n	8000ad8 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
 8000b54:	f854 3b04 	ldr.w	r3, [r4], #4
 8000b58:	930e      	str	r3, [sp, #56]	; 0x38
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
 8000b5e:	e7bb      	b.n	8000ad8 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	e7cd      	b.n	8000b00 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
 8000b64:	2b04      	cmp	r3, #4
 8000b66:	d108      	bne.n	8000b7a <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
 8000b68:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
 8000b6a:	f024 0407 	bic.w	r4, r4, #7
 8000b6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000b72:	3408      	adds	r4, #8
 8000b74:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000b78:	e7ae      	b.n	8000ad8 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8000b7a:	2b03      	cmp	r3, #3
 8000b7c:	d1ac      	bne.n	8000ad8 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
 8000b7e:	f854 3b04 	ldr.w	r3, [r4], #4
 8000b82:	e7dd      	b.n	8000b40 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
 8000b84:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 8000b88:	2878      	cmp	r0, #120	; 0x78
 8000b8a:	d8b4      	bhi.n	8000af6 <z_cbvprintf_impl+0x426>
 8000b8c:	2862      	cmp	r0, #98	; 0x62
 8000b8e:	d81c      	bhi.n	8000bca <z_cbvprintf_impl+0x4fa>
 8000b90:	2825      	cmp	r0, #37	; 0x25
 8000b92:	f43f adad 	beq.w	80006f0 <z_cbvprintf_impl+0x20>
 8000b96:	2858      	cmp	r0, #88	; 0x58
 8000b98:	d1ad      	bne.n	8000af6 <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000b9a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8000b9e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	aa10      	add	r2, sp, #64	; 0x40
 8000ba6:	ab08      	add	r3, sp, #32
 8000ba8:	f003 f83f 	bl	8003c2a <encode_uint>
			if (precision >= 0) {
 8000bac:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000bb0:	4607      	mov	r7, r0
			if (precision >= 0) {
 8000bb2:	f280 8099 	bge.w	8000ce8 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
 8000bb6:	2f00      	cmp	r7, #0
 8000bb8:	d09d      	beq.n	8000af6 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
 8000bba:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000bbe:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
 8000bc0:	2e00      	cmp	r6, #0
 8000bc2:	f000 80c0 	beq.w	8000d46 <z_cbvprintf_impl+0x676>
			nj_len += 1U;
 8000bc6:	3001      	adds	r0, #1
 8000bc8:	e0bd      	b.n	8000d46 <z_cbvprintf_impl+0x676>
		switch (conv->specifier) {
 8000bca:	3863      	subs	r0, #99	; 0x63
 8000bcc:	2815      	cmp	r0, #21
 8000bce:	d892      	bhi.n	8000af6 <z_cbvprintf_impl+0x426>
 8000bd0:	a201      	add	r2, pc, #4	; (adr r2, 8000bd8 <z_cbvprintf_impl+0x508>)
 8000bd2:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8000bd6:	bf00      	nop
 8000bd8:	08000cad 	.word	0x08000cad
 8000bdc:	08000cbf 	.word	0x08000cbf
 8000be0:	08000af7 	.word	0x08000af7
 8000be4:	08000af7 	.word	0x08000af7
 8000be8:	08000af7 	.word	0x08000af7
 8000bec:	08000af7 	.word	0x08000af7
 8000bf0:	08000cbf 	.word	0x08000cbf
 8000bf4:	08000af7 	.word	0x08000af7
 8000bf8:	08000af7 	.word	0x08000af7
 8000bfc:	08000af7 	.word	0x08000af7
 8000c00:	08000af7 	.word	0x08000af7
 8000c04:	08000d4b 	.word	0x08000d4b
 8000c08:	08000ce3 	.word	0x08000ce3
 8000c0c:	08000d09 	.word	0x08000d09
 8000c10:	08000af7 	.word	0x08000af7
 8000c14:	08000af7 	.word	0x08000af7
 8000c18:	08000c31 	.word	0x08000c31
 8000c1c:	08000af7 	.word	0x08000af7
 8000c20:	08000ce3 	.word	0x08000ce3
 8000c24:	08000af7 	.word	0x08000af7
 8000c28:	08000af7 	.word	0x08000af7
 8000c2c:	08000ce3 	.word	0x08000ce3
			if (precision >= 0) {
 8000c30:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
 8000c34:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
 8000c36:	db35      	blt.n	8000ca4 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
 8000c38:	4651      	mov	r1, sl
 8000c3a:	4638      	mov	r0, r7
 8000c3c:	f003 f86d 	bl	8003d1a <strnlen>
			bpe = bps + len;
 8000c40:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
 8000c44:	2f00      	cmp	r7, #0
 8000c46:	f43f af56 	beq.w	8000af6 <z_cbvprintf_impl+0x426>
		char sign = 0;
 8000c4a:	2600      	movs	r6, #0
		if (conv->altform_0c) {
 8000c4c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000c50:	f013 0210 	ands.w	r2, r3, #16
 8000c54:	9205      	str	r2, [sp, #20]
 8000c56:	f000 8092 	beq.w	8000d7e <z_cbvprintf_impl+0x6ae>
			nj_len += 2U;
 8000c5a:	3002      	adds	r0, #2
		if (conv->pad_fp) {
 8000c5c:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
 8000c5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
 8000c60:	bf48      	it	mi
 8000c62:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
 8000c64:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
 8000c66:	bf48      	it	mi
 8000c68:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
 8000c6a:	f1b8 0f00 	cmp.w	r8, #0
		nj_len += conv->pad0_value;
 8000c6e:	9204      	str	r2, [sp, #16]
		if (width > 0) {
 8000c70:	f340 809f 	ble.w	8000db2 <z_cbvprintf_impl+0x6e2>
			if (!conv->flag_dash) {
 8000c74:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
 8000c78:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
 8000c7c:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8000c80:	0750      	lsls	r0, r2, #29
 8000c82:	9306      	str	r3, [sp, #24]
 8000c84:	f100 8095 	bmi.w	8000db2 <z_cbvprintf_impl+0x6e2>
				if (conv->flag_zero) {
 8000c88:	0651      	lsls	r1, r2, #25
 8000c8a:	f140 8088 	bpl.w	8000d9e <z_cbvprintf_impl+0x6ce>
					if (sign != 0) {
 8000c8e:	b13e      	cbz	r6, 8000ca0 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
 8000c90:	4659      	mov	r1, fp
 8000c92:	4630      	mov	r0, r6
 8000c94:	47c8      	blx	r9
 8000c96:	2800      	cmp	r0, #0
 8000c98:	db7e      	blt.n	8000d98 <z_cbvprintf_impl+0x6c8>
 8000c9a:	9b06      	ldr	r3, [sp, #24]
 8000c9c:	3501      	adds	r5, #1
 8000c9e:	461e      	mov	r6, r3
					pad = '0';
 8000ca0:	2230      	movs	r2, #48	; 0x30
 8000ca2:	e07d      	b.n	8000da0 <z_cbvprintf_impl+0x6d0>
				len = strlen(bps);
 8000ca4:	4638      	mov	r0, r7
 8000ca6:	f003 f831 	bl	8003d0c <strlen>
 8000caa:	e7c9      	b.n	8000c40 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8000cac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
 8000cae:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
 8000cb0:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8000cb2:	f88d 3020 	strb.w	r3, [sp, #32]
			bps = buf;
 8000cb6:	af08      	add	r7, sp, #32
			bpe = buf + 1;
 8000cb8:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
 8000cbc:	e7c6      	b.n	8000c4c <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
 8000cbe:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
 8000cc0:	bf5a      	itte	pl
 8000cc2:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
 8000cc6:	015e      	lslpl	r6, r3, #5
				sign = '+';
 8000cc8:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
 8000cca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f6bf af63 	bge.w	8000b9a <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
 8000cd4:	4252      	negs	r2, r2
 8000cd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
 8000cda:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
 8000cdc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000ce0:	e75b      	b.n	8000b9a <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
 8000ce2:	2600      	movs	r6, #0
 8000ce4:	e759      	b.n	8000b9a <z_cbvprintf_impl+0x4ca>
		char sign = 0;
 8000ce6:	2600      	movs	r6, #0
				conv->flag_zero = false;
 8000ce8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
 8000cec:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000cf0:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
 8000cf2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8000cf6:	459a      	cmp	sl, r3
				conv->flag_zero = false;
 8000cf8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
 8000cfc:	f67f af5b 	bls.w	8000bb6 <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
 8000d00:	ebaa 0303 	sub.w	r3, sl, r3
 8000d04:	9311      	str	r3, [sp, #68]	; 0x44
 8000d06:	e756      	b.n	8000bb6 <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
 8000d08:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000d0a:	b390      	cbz	r0, 8000d72 <z_cbvprintf_impl+0x6a2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000d0c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	2100      	movs	r1, #0
 8000d14:	ab08      	add	r3, sp, #32
 8000d16:	aa10      	add	r2, sp, #64	; 0x40
 8000d18:	f002 ff87 	bl	8003c2a <encode_uint>
				conv->altform_0c = true;
 8000d1c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
 8000d20:	f1ba 0f00 	cmp.w	sl, #0
				conv->altform_0c = true;
 8000d24:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000d28:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8000d2c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000d30:	4607      	mov	r7, r0
				conv->altform_0c = true;
 8000d32:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
 8000d36:	dad6      	bge.n	8000ce6 <z_cbvprintf_impl+0x616>
		if (bps == NULL) {
 8000d38:	2800      	cmp	r0, #0
 8000d3a:	f43f aedc 	beq.w	8000af6 <z_cbvprintf_impl+0x426>
		char sign = 0;
 8000d3e:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
 8000d40:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000d44:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
 8000d46:	469a      	mov	sl, r3
 8000d48:	e780      	b.n	8000c4c <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
 8000d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
 8000d4c:	2907      	cmp	r1, #7
 8000d4e:	f63f aed2 	bhi.w	8000af6 <z_cbvprintf_impl+0x426>
 8000d52:	e8df f001 	tbb	[pc, r1]
 8000d56:	040c      	.short	0x040c
 8000d58:	08080c06 	.word	0x08080c06
 8000d5c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
 8000d5e:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
 8000d60:	e6c9      	b.n	8000af6 <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
 8000d62:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
 8000d64:	e6c7      	b.n	8000af6 <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
 8000d66:	17ea      	asrs	r2, r5, #31
 8000d68:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
 8000d6c:	e6c3      	b.n	8000af6 <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8000d6e:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
 8000d70:	e6c1      	b.n	8000af6 <z_cbvprintf_impl+0x426>
 8000d72:	4f2f      	ldr	r7, [pc, #188]	; (8000e30 <z_cbvprintf_impl+0x760>)
		char sign = 0;
 8000d74:	4606      	mov	r6, r0
			bpe = bps + 5;
 8000d76:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
 8000d7a:	2005      	movs	r0, #5
 8000d7c:	e766      	b.n	8000c4c <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
 8000d7e:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
 8000d80:	bf48      	it	mi
 8000d82:	3001      	addmi	r0, #1
 8000d84:	e76a      	b.n	8000c5c <z_cbvprintf_impl+0x58c>
					OUTC(pad);
 8000d86:	4610      	mov	r0, r2
 8000d88:	9307      	str	r3, [sp, #28]
 8000d8a:	9206      	str	r2, [sp, #24]
 8000d8c:	4659      	mov	r1, fp
 8000d8e:	47c8      	blx	r9
 8000d90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000d94:	2800      	cmp	r0, #0
 8000d96:	da04      	bge.n	8000da2 <z_cbvprintf_impl+0x6d2>
#undef OUTS
#undef OUTC
}
 8000d98:	b015      	add	sp, #84	; 0x54
 8000d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 8000d9e:	2220      	movs	r2, #32
					pad = '0';
 8000da0:	4643      	mov	r3, r8
				while (width-- > 0) {
 8000da2:	4619      	mov	r1, r3
 8000da4:	2900      	cmp	r1, #0
 8000da6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000daa:	dcec      	bgt.n	8000d86 <z_cbvprintf_impl+0x6b6>
 8000dac:	4445      	add	r5, r8
 8000dae:	4698      	mov	r8, r3
 8000db0:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
 8000db2:	b12e      	cbz	r6, 8000dc0 <z_cbvprintf_impl+0x6f0>
			OUTC(sign);
 8000db4:	4659      	mov	r1, fp
 8000db6:	4630      	mov	r0, r6
 8000db8:	47c8      	blx	r9
 8000dba:	2800      	cmp	r0, #0
 8000dbc:	dbec      	blt.n	8000d98 <z_cbvprintf_impl+0x6c8>
 8000dbe:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 8000dc0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000dc4:	06da      	lsls	r2, r3, #27
 8000dc6:	d401      	bmi.n	8000dcc <z_cbvprintf_impl+0x6fc>
 8000dc8:	071b      	lsls	r3, r3, #28
 8000dca:	d505      	bpl.n	8000dd8 <z_cbvprintf_impl+0x708>
				OUTC('0');
 8000dcc:	4659      	mov	r1, fp
 8000dce:	2030      	movs	r0, #48	; 0x30
 8000dd0:	47c8      	blx	r9
 8000dd2:	2800      	cmp	r0, #0
 8000dd4:	dbe0      	blt.n	8000d98 <z_cbvprintf_impl+0x6c8>
 8000dd6:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 8000dd8:	9b05      	ldr	r3, [sp, #20]
 8000dda:	b133      	cbz	r3, 8000dea <z_cbvprintf_impl+0x71a>
				OUTC(conv->specifier);
 8000ddc:	4659      	mov	r1, fp
 8000dde:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 8000de2:	47c8      	blx	r9
 8000de4:	2800      	cmp	r0, #0
 8000de6:	dbd7      	blt.n	8000d98 <z_cbvprintf_impl+0x6c8>
 8000de8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000dea:	9e04      	ldr	r6, [sp, #16]
 8000dec:	442e      	add	r6, r5
 8000dee:	e005      	b.n	8000dfc <z_cbvprintf_impl+0x72c>
				OUTC('0');
 8000df0:	4659      	mov	r1, fp
 8000df2:	2030      	movs	r0, #48	; 0x30
 8000df4:	47c8      	blx	r9
 8000df6:	2800      	cmp	r0, #0
 8000df8:	dbce      	blt.n	8000d98 <z_cbvprintf_impl+0x6c8>
 8000dfa:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000dfc:	1b73      	subs	r3, r6, r5
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	dcf6      	bgt.n	8000df0 <z_cbvprintf_impl+0x720>
			OUTS(bps, bpe);
 8000e02:	4653      	mov	r3, sl
 8000e04:	463a      	mov	r2, r7
 8000e06:	4659      	mov	r1, fp
 8000e08:	4648      	mov	r0, r9
 8000e0a:	f002 ff54 	bl	8003cb6 <outs>
 8000e0e:	2800      	cmp	r0, #0
 8000e10:	dbc2      	blt.n	8000d98 <z_cbvprintf_impl+0x6c8>
 8000e12:	4405      	add	r5, r0
		while (width > 0) {
 8000e14:	44a8      	add	r8, r5
 8000e16:	eba8 0305 	sub.w	r3, r8, r5
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f77f ae6b 	ble.w	8000af6 <z_cbvprintf_impl+0x426>
			OUTC(' ');
 8000e20:	4659      	mov	r1, fp
 8000e22:	2020      	movs	r0, #32
 8000e24:	47c8      	blx	r9
 8000e26:	2800      	cmp	r0, #0
 8000e28:	dbb6      	blt.n	8000d98 <z_cbvprintf_impl+0x6c8>
 8000e2a:	3501      	adds	r5, #1
			--width;
 8000e2c:	e7f3      	b.n	8000e16 <z_cbvprintf_impl+0x746>
 8000e2e:	bf00      	nop
 8000e30:	080054d7 	.word	0x080054d7

08000e34 <stm32f1_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8000e34:	f04f 0210 	mov.w	r2, #16
 8000e38:	f3ef 8311 	mrs	r3, BASEPRI
 8000e3c:	f382 8812 	msr	BASEPRI_MAX, r2
 8000e40:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000e44:	f383 8811 	msr	BASEPRI, r3
 8000e48:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 8 MHz from HSI */
	SystemCoreClock = 8000000;
 8000e4c:	4b02      	ldr	r3, [pc, #8]	; (8000e58 <stm32f1_init+0x24>)
 8000e4e:	4a03      	ldr	r2, [pc, #12]	; (8000e5c <stm32f1_init+0x28>)

	return 0;
}
 8000e50:	2000      	movs	r0, #0
	SystemCoreClock = 8000000;
 8000e52:	601a      	str	r2, [r3, #0]
}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000088 	.word	0x20000088
 8000e5c:	007a1200 	.word	0x007a1200

08000e60 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8000e60:	4901      	ldr	r1, [pc, #4]	; (8000e68 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8000e62:	2210      	movs	r2, #16
	str	r2, [r1]
 8000e64:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8000e66:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8000e68:	e000ed10 	.word	0xe000ed10

08000e6c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8000e6c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8000e6e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8000e70:	f380 8811 	msr	BASEPRI, r0
	isb
 8000e74:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8000e78:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8000e7c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8000e7e:	b662      	cpsie	i
	isb
 8000e80:	f3bf 8f6f 	isb	sy

	bx	lr
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8000e88:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	2800      	cmp	r0, #0
 8000e8c:	db07      	blt.n	8000e9e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8e:	2301      	movs	r3, #1
 8000e90:	0941      	lsrs	r1, r0, #5
 8000e92:	4a03      	ldr	r2, [pc, #12]	; (8000ea0 <arch_irq_enable+0x18>)
 8000e94:	f000 001f 	and.w	r0, r0, #31
 8000e98:	4083      	lsls	r3, r0
 8000e9a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000e9e:	4770      	bx	lr
 8000ea0:	e000e100 	.word	0xe000e100

08000ea4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8000ea4:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000ea6:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
 8000ea8:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	bfac      	ite	ge
 8000eae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb2:	4b06      	ldrlt	r3, [pc, #24]	; (8000ecc <z_arm_irq_priority_set+0x28>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb4:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8000eb8:	b2c9      	uxtb	r1, r1
 8000eba:	bfab      	itete	ge
 8000ebc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec8:	5419      	strblt	r1, [r3, r0]
}
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed14 	.word	0xe000ed14

08000ed0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8000ed0:	bf30      	wfi
    b z_SysNmiOnReset
 8000ed2:	f7ff bffd 	b.w	8000ed0 <z_SysNmiOnReset>
 8000ed6:	bf00      	nop

08000ed8 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8000ed8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <z_arm_prep_c+0x28>)
 8000edc:	4a09      	ldr	r2, [pc, #36]	; (8000f04 <z_arm_prep_c+0x2c>)
 8000ede:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000ee2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000ee6:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000eec:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8000ef0:	f001 ff58 	bl	8002da4 <z_bss_zero>
	z_data_copy();
 8000ef4:	f002 fc60 	bl	80037b8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8000ef8:	f000 f9ca 	bl	8001290 <z_arm_interrupt_init>
	z_cstart();
 8000efc:	f001 ff92 	bl	8002e24 <z_cstart>
 8000f00:	08000000 	.word	0x08000000
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8000f08:	4a09      	ldr	r2, [pc, #36]	; (8000f30 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8000f0a:	490a      	ldr	r1, [pc, #40]	; (8000f34 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8000f0c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8000f0e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
 8000f10:	6698      	str	r0, [r3, #104]	; 0x68
	_current->arch.swap_return_value = _k_neg_eagain;
 8000f12:	66d9      	str	r1, [r3, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000f14:	4908      	ldr	r1, [pc, #32]	; (8000f38 <arch_swap+0x30>)
 8000f16:	684b      	ldr	r3, [r1, #4]
 8000f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f1c:	604b      	str	r3, [r1, #4]
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f383 8811 	msr	BASEPRI, r3
 8000f24:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8000f28:	6893      	ldr	r3, [r2, #8]
}
 8000f2a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000418 	.word	0x20000418
 8000f34:	08005358 	.word	0x08005358
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8000f3c:	490f      	ldr	r1, [pc, #60]	; (8000f7c <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8000f3e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8000f40:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8000f44:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8000f46:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8000f4a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8000f4e:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8000f50:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8000f54:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8000f58:	4f09      	ldr	r7, [pc, #36]	; (8000f80 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8000f5a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8000f5e:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8000f60:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8000f62:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8000f64:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs r3, #0
 8000f66:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8000f68:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8000f6a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8000f6e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8000f72:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8000f76:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8000f7a:	4770      	bx	lr
    ldr r1, =_kernel
 8000f7c:	20000418 	.word	0x20000418
    ldr v4, =_SCS_ICSR
 8000f80:	e000ed04 	.word	0xe000ed04

08000f84 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8000f84:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8000f88:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8000f8a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8000f8e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8000f92:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8000f94:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8000f98:	2902      	cmp	r1, #2
    beq _oops
 8000f9a:	d0ff      	beq.n	8000f9c <_oops>

08000f9c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8000f9c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 8000f9e:	f002 fea6 	bl	8003cee <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 8000fa2:	bd01      	pop	{r0, pc}

08000fa4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8000fa4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8000fa8:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
 8000faa:	490b      	ldr	r1, [pc, #44]	; (8000fd8 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
 8000fac:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 8000fb0:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
 8000fb2:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
 8000fb6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8000fba:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
 8000fbc:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
 8000fc0:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8000fc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fc8:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8000fcc:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8000fce:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8000fd0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8000fd2:	6683      	str	r3, [r0, #104]	; 0x68
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	08003b4f 	.word	0x08003b4f

08000fdc <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <arch_switch_to_main_thread+0x20>)
 8000fde:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	f381 8809 	msr	PSP, r1
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	b663      	cpsie	if
 8000fea:	f381 8811 	msr	BASEPRI, r1
 8000fee:	f3bf 8f6f 	isb	sy
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f002 fdaa 	bl	8003b4e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8000ffa:	bf00      	nop
 8000ffc:	20000418 	.word	0x20000418

08001000 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8001000:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8001002:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8001006:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 800100a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 800100e:	4904      	ldr	r1, [pc, #16]	; (8001020 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8001010:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8001012:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8001014:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8001016:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 800101a:	4902      	ldr	r1, [pc, #8]	; (8001024 <_isr_wrapper+0x24>)
	bx r1
 800101c:	4708      	bx	r1
 800101e:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8001020:	08004e2c 	.word	0x08004e2c
	ldr r1, =z_arm_int_exit
 8001024:	08001029 	.word	0x08001029

08001028 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 800102a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 800102c:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 800102e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8001030:	d003      	beq.n	800103a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8001032:	4903      	ldr	r1, [pc, #12]	; (8001040 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8001034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8001038:	600a      	str	r2, [r1, #0]

0800103a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 800103a:	4770      	bx	lr
	ldr r3, =_kernel
 800103c:	20000418 	.word	0x20000418
	ldr r1, =_SCS_ICSR
 8001040:	e000ed04 	.word	0xe000ed04

08001044 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <usage_fault.constprop.0+0x50>)
 8001046:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
 8001048:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 800104c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
 800104e:	bf14      	ite	ne
 8001050:	201e      	movne	r0, #30
 8001052:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
 8001054:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8001058:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
 800105a:	bf18      	it	ne
 800105c:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
 800105e:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8001062:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
 8001064:	bf18      	it	ne
 8001066:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
 8001068:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800106c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
 800106e:	bf18      	it	ne
 8001070:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
 8001072:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8001076:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
 8001078:	bf18      	it	ne
 800107a:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
 800107c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8001080:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	return reason;
}
 8001082:	bf18      	it	ne
 8001084:	2024      	movne	r0, #36	; 0x24
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8001086:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 800108a:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 800108e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8001098:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <bus_fault.constprop.0+0x5c>)
 800109c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 800109e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
 80010a0:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 80010a4:	bf14      	ite	ne
 80010a6:	2217      	movne	r2, #23
 80010a8:	2216      	moveq	r2, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
 80010aa:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 80010ae:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
 80010b0:	bf18      	it	ne
 80010b2:	2218      	movne	r2, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 80010b4:	05a4      	lsls	r4, r4, #22
 80010b6:	d509      	bpl.n	80010cc <bus_fault.constprop.0+0x34>
		STORE_xFAR(bfar, SCB->BFAR);
 80010b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 80010ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010bc:	0412      	lsls	r2, r2, #16
 80010be:	d504      	bpl.n	80010ca <bus_fault.constprop.0+0x32>
			if (from_hard_fault != 0) {
 80010c0:	b118      	cbz	r0, 80010ca <bus_fault.constprop.0+0x32>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 80010c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010c8:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
 80010ca:	2219      	movs	r2, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <bus_fault.constprop.0+0x5c>)
 80010ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
 80010d0:	f410 6f80 	tst.w	r0, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 80010d4:	6a98      	ldr	r0, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
 80010d6:	bf18      	it	ne
 80010d8:	221a      	movne	r2, #26
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
 80010da:	f410 7f80 	tst.w	r0, #256	; 0x100
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 80010de:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80010e0:	f440 407f 	orr.w	r0, r0, #65280	; 0xff00
 80010e4:	6298      	str	r0, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 80010e6:	f04f 0300 	mov.w	r3, #0
}
 80010ea:	bf0c      	ite	eq
 80010ec:	4610      	moveq	r0, r2
 80010ee:	201b      	movne	r0, #27
	*recoverable = memory_fault_recoverable(esf, true);
 80010f0:	700b      	strb	r3, [r1, #0]
}
 80010f2:	bd10      	pop	{r4, pc}
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
 80010f8:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <mem_manage_fault.constprop.0+0x58>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
 80010fc:	4602      	mov	r2, r0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 80010fe:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8001100:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
 8001102:	f010 0f10 	tst.w	r0, #16
 8001106:	bf14      	ite	ne
 8001108:	2011      	movne	r0, #17
 800110a:	2010      	moveq	r0, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
 800110c:	f014 0f08 	tst.w	r4, #8
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8001110:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
 8001112:	bf18      	it	ne
 8001114:	2012      	movne	r0, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8001116:	07a4      	lsls	r4, r4, #30
 8001118:	d509      	bpl.n	800112e <mem_manage_fault.constprop.0+0x36>
		uint32_t temp = SCB->MMFAR;
 800111a:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 800111c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800111e:	0600      	lsls	r0, r0, #24
 8001120:	d504      	bpl.n	800112c <mem_manage_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
 8001122:	b11a      	cbz	r2, 800112c <mem_manage_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8001124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001126:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800112a:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
 800112c:	2013      	movs	r0, #19
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <mem_manage_fault.constprop.0+0x58>)
 8001130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
 8001132:	f012 0f01 	tst.w	r2, #1
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8001136:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
 8001138:	bf18      	it	ne
 800113a:	2014      	movne	r0, #20
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 800113c:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 800113e:	bf58      	it	pl
 8001140:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8001142:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001144:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8001148:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 800114a:	2300      	movs	r3, #0
 800114c:	700b      	strb	r3, [r1, #0]
}
 800114e:	bd10      	pop	{r4, pc}
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8001154:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8001156:	4b44      	ldr	r3, [pc, #272]	; (8001268 <z_arm_fault+0x114>)
{
 8001158:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2500      	movs	r5, #0
{
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001164:	f385 8811 	msr	BASEPRI, r5
 8001168:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 800116c:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
 8001170:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 8001174:	d111      	bne.n	800119a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8001176:	f002 000c 	and.w	r0, r2, #12
 800117a:	2808      	cmp	r0, #8
 800117c:	d00d      	beq.n	800119a <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 800117e:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 8001180:	bf4c      	ite	mi
 8001182:	460e      	movmi	r6, r1
			*nested_exc = true;
 8001184:	2501      	movpl	r5, #1
	*recoverable = false;
 8001186:	2200      	movs	r2, #0
	switch (fault) {
 8001188:	3b03      	subs	r3, #3
	*recoverable = false;
 800118a:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 800118e:	2b03      	cmp	r3, #3
 8001190:	d805      	bhi.n	800119e <z_arm_fault+0x4a>
 8001192:	e8df f003 	tbb	[pc, r3]
 8001196:	5c1e      	.short	0x5c1e
 8001198:	5960      	.short	0x5960
		return NULL;
 800119a:	462e      	mov	r6, r5
 800119c:	e7f3      	b.n	8001186 <z_arm_fault+0x32>
 800119e:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 80011a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011a4:	b99b      	cbnz	r3, 80011ce <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 80011a6:	2220      	movs	r2, #32
 80011a8:	4631      	mov	r1, r6
 80011aa:	a802      	add	r0, sp, #8
 80011ac:	f002 fdbe 	bl	8003d2c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 80011b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011b2:	2d00      	cmp	r5, #0
 80011b4:	d053      	beq.n	800125e <z_arm_fault+0x10a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 80011b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80011ba:	b922      	cbnz	r2, 80011c6 <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 80011bc:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80011c0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80011c4:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
 80011c6:	4620      	mov	r0, r4
 80011c8:	a902      	add	r1, sp, #8
 80011ca:	f002 fd8e 	bl	8003cea <z_arm_fatal_error>
}
 80011ce:	b00a      	add	sp, #40	; 0x28
 80011d0:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80011d2:	4b25      	ldr	r3, [pc, #148]	; (8001268 <z_arm_fault+0x114>)
 80011d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011d6:	0791      	lsls	r1, r2, #30
 80011d8:	d4e1      	bmi.n	800119e <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 80011da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011dc:	2a00      	cmp	r2, #0
 80011de:	dbde      	blt.n	800119e <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 80011e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011e2:	0052      	lsls	r2, r2, #1
 80011e4:	d5db      	bpl.n	800119e <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 80011e6:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 80011e8:	69b1      	ldr	r1, [r6, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 80011ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011ee:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80011f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011f4:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 80011f8:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
 80011fa:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 80011fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001202:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001204:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001208:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 800120c:	f64d 7202 	movw	r2, #57090	; 0xdf02
 8001210:	4291      	cmp	r1, r2
 8001212:	d009      	beq.n	8001228 <z_arm_fault+0xd4>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
 8001214:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	b142      	cbz	r2, 800122c <z_arm_fault+0xd8>
			reason = mem_manage_fault(esf, 1, recoverable);
 800121a:	2001      	movs	r0, #1
 800121c:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
 8001220:	f7ff ff6a 	bl	80010f8 <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
 8001224:	4604      	mov	r4, r0
		break;
 8001226:	e7bb      	b.n	80011a0 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
 8001228:	6834      	ldr	r4, [r6, #0]
 800122a:	e7b9      	b.n	80011a0 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
 800122c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800122e:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
 8001232:	d005      	beq.n	8001240 <z_arm_fault+0xec>
			reason = bus_fault(esf, 1, recoverable);
 8001234:	2001      	movs	r0, #1
 8001236:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
 800123a:	f7ff ff2d 	bl	8001098 <bus_fault.constprop.0>
 800123e:	e7f1      	b.n	8001224 <z_arm_fault+0xd0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
 8001240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001246:	d3aa      	bcc.n	800119e <z_arm_fault+0x4a>
		reason = usage_fault(esf);
 8001248:	f7ff fefc 	bl	8001044 <usage_fault.constprop.0>
 800124c:	e7ea      	b.n	8001224 <z_arm_fault+0xd0>
		reason = mem_manage_fault(esf, 0, recoverable);
 800124e:	2000      	movs	r0, #0
 8001250:	f10d 0107 	add.w	r1, sp, #7
 8001254:	e7e4      	b.n	8001220 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
 8001256:	2000      	movs	r0, #0
 8001258:	f10d 0107 	add.w	r1, sp, #7
 800125c:	e7ed      	b.n	800123a <z_arm_fault+0xe6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800125e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001262:	f023 0301 	bic.w	r3, r3, #1
 8001266:	e7ad      	b.n	80011c4 <z_arm_fault+0x70>
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 800126c:	4a02      	ldr	r2, [pc, #8]	; (8001278 <z_arm_fault_init+0xc>)
 800126e:	6953      	ldr	r3, [r2, #20]
 8001270:	f043 0310 	orr.w	r3, r3, #16
 8001274:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 800127c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8001280:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8001284:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8001286:	4672      	mov	r2, lr
	bl z_arm_fault
 8001288:	f7ff ff64 	bl	8001154 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 800128c:	bd01      	pop	{r0, pc}
 800128e:	bf00      	nop

08001290 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8001290:	2300      	movs	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001292:	2110      	movs	r1, #16
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <z_arm_interrupt_init+0x14>)
 8001296:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8001298:	3301      	adds	r3, #1
 800129a:	2b2b      	cmp	r3, #43	; 0x2b
 800129c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 80012a0:	d1f9      	bne.n	8001296 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 80012a2:	4770      	bx	lr
 80012a4:	e000e100 	.word	0xe000e100

080012a8 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80012a8:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80012aa:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 80012ae:	4808      	ldr	r0, [pc, #32]	; (80012d0 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 80012b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 80012b4:	1840      	adds	r0, r0, r1
    msr PSP, r0
 80012b6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 80012ba:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 80012be:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 80012c0:	4308      	orrs	r0, r1
    msr CONTROL, r0
 80012c2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 80012c6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 80012ca:	f7ff fe05 	bl	8000ed8 <z_arm_prep_c>
 80012ce:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 80012d0:	20000450 	.word	0x20000450

080012d4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <z_impl_k_thread_abort+0x24>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	4283      	cmp	r3, r0
 80012da:	d10b      	bne.n	80012f4 <z_impl_k_thread_abort+0x20>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80012dc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 80012e0:	b143      	cbz	r3, 80012f4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <z_impl_k_thread_abort+0x28>)
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012ea:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 80012ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012f2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 80012f4:	f002 ba00 	b.w	80036f8 <z_thread_abort>
 80012f8:	20000418 	.word	0x20000418
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
 8001300:	4b01      	ldr	r3, [pc, #4]	; (8001308 <__stdout_hook_install+0x8>)
 8001302:	6018      	str	r0, [r3, #0]
}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000004 	.word	0x20000004

0800130c <stm32_exti_isr>:
 * Check EXTI lines in exti_range for pending interrupts
 *
 * @param *exti_range Pointer to a exti_range structure
 */
static void stm32_exti_isr(const void *exti_range)
{
 800130c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001310:	4605      	mov	r5, r0
	struct stm32_exti_data *data = dev->data;
	const struct stm32_exti_range *range = exti_range;
	int line;

	/* see which bits are set */
	for (int i = 0; i <= range->len; i++) {
 8001312:	2400      	movs	r4, #0
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8001314:	f04f 0801 	mov.w	r8, #1
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001318:	4e0c      	ldr	r6, [pc, #48]	; (800134c <stm32_exti_isr+0x40>)
		if (stm32_exti_is_pending(line)) {
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 800131a:	4f0d      	ldr	r7, [pc, #52]	; (8001350 <stm32_exti_isr+0x44>)
		line = range->start + i;
 800131c:	782b      	ldrb	r3, [r5, #0]
 800131e:	1918      	adds	r0, r3, r4
	if (line < 32) {
 8001320:	281f      	cmp	r0, #31
 8001322:	dc0d      	bgt.n	8001340 <stm32_exti_isr+0x34>
 8001324:	6972      	ldr	r2, [r6, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8001326:	fa08 f300 	lsl.w	r3, r8, r0
		if (stm32_exti_is_pending(line)) {
 800132a:	ea33 0202 	bics.w	r2, r3, r2
 800132e:	d107      	bne.n	8001340 <stm32_exti_isr+0x34>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8001330:	6173      	str	r3, [r6, #20]
			if (!data->cb[line].cb) {
 8001332:	f857 3030 	ldr.w	r3, [r7, r0, lsl #3]
 8001336:	b11b      	cbz	r3, 8001340 <stm32_exti_isr+0x34>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8001338:	eb07 02c0 	add.w	r2, r7, r0, lsl #3
 800133c:	6851      	ldr	r1, [r2, #4]
 800133e:	4798      	blx	r3
	for (int i = 0; i <= range->len; i++) {
 8001340:	786b      	ldrb	r3, [r5, #1]
 8001342:	3401      	adds	r4, #1
 8001344:	42a3      	cmp	r3, r4
 8001346:	dae9      	bge.n	800131c <stm32_exti_isr+0x10>
		}
	}
}
 8001348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800134c:	40010400 	.word	0x40010400
 8001350:	20000228 	.word	0x20000228

08001354 <stm32_fill_irq_table>:

static void stm32_fill_irq_table(int8_t start, int8_t len, int32_t irqn)
{
	for (int i = 0; i < len; i++) {
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <stm32_fill_irq_table+0x14>)
 8001356:	4418      	add	r0, r3
 8001358:	2300      	movs	r3, #0
 800135a:	3301      	adds	r3, #1
 800135c:	4299      	cmp	r1, r3
		exti_irq_table[start + i] = irqn;
 800135e:	f800 2b01 	strb.w	r2, [r0], #1
	for (int i = 0; i < len; i++) {
 8001362:	dcfa      	bgt.n	800135a <stm32_fill_irq_table+0x6>
	}
}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000114 	.word	0x20000114

0800136c <stm32_exti_enable>:
{
 800136c:	b410      	push	{r4}
	irqnum = exti_irq_table[line];
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <stm32_exti_enable+0x1c>)
{
 8001370:	4602      	mov	r2, r0
	irqnum = exti_irq_table[line];
 8001372:	5618      	ldrsb	r0, [r3, r0]
	LL_EXTI_EnableIT_0_31(1 << line);
 8001374:	2301      	movs	r3, #1
  SET_BIT(EXTI->IMR, ExtiLine);
 8001376:	4905      	ldr	r1, [pc, #20]	; (800138c <stm32_exti_enable+0x20>)
 8001378:	4093      	lsls	r3, r2
 800137a:	680c      	ldr	r4, [r1, #0]
 800137c:	4323      	orrs	r3, r4
 800137e:	600b      	str	r3, [r1, #0]
}
 8001380:	bc10      	pop	{r4}
	irq_enable(irqnum);
 8001382:	f7ff bd81 	b.w	8000e88 <arch_irq_enable>
 8001386:	bf00      	nop
 8001388:	20000114 	.word	0x20000114
 800138c:	40010400 	.word	0x40010400

08001390 <stm32_exti_disable>:
	if (line < 32) {
 8001390:	281f      	cmp	r0, #31
 8001392:	dc06      	bgt.n	80013a2 <stm32_exti_disable+0x12>
		LL_EXTI_DisableIT_0_31(1 << line);
 8001394:	2201      	movs	r2, #1
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001396:	4903      	ldr	r1, [pc, #12]	; (80013a4 <stm32_exti_disable+0x14>)
 8001398:	4082      	lsls	r2, r0
 800139a:	680b      	ldr	r3, [r1, #0]
 800139c:	ea23 0302 	bic.w	r3, r3, r2
 80013a0:	600b      	str	r3, [r1, #0]
}
 80013a2:	4770      	bx	lr
 80013a4:	40010400 	.word	0x40010400

080013a8 <stm32_exti_trigger>:
	switch (trigger) {
 80013a8:	2903      	cmp	r1, #3
 80013aa:	d82a      	bhi.n	8001402 <stm32_exti_trigger+0x5a>
 80013ac:	e8df f001 	tbb	[pc, r1]
 80013b0:	1f140e02 	.word	0x1f140e02
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 80013b4:	2201      	movs	r2, #1
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <stm32_exti_trigger+0x5c>)
 80013b8:	4082      	lsls	r2, r0
 80013ba:	6899      	ldr	r1, [r3, #8]
 80013bc:	ea21 0102 	bic.w	r1, r1, r2
  SET_BIT(EXTI->RTSR, ExtiLine);
 80013c0:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80013c2:	68d9      	ldr	r1, [r3, #12]
 80013c4:	ea21 0202 	bic.w	r2, r1, r2
 80013c8:	60da      	str	r2, [r3, #12]
}
 80013ca:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80013cc:	2201      	movs	r2, #1
  SET_BIT(EXTI->RTSR, ExtiLine);
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <stm32_exti_trigger+0x5c>)
 80013d0:	4082      	lsls	r2, r0
 80013d2:	6899      	ldr	r1, [r3, #8]
 80013d4:	4311      	orrs	r1, r2
 80013d6:	e7f3      	b.n	80013c0 <stm32_exti_trigger+0x18>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 80013d8:	2201      	movs	r2, #1
  SET_BIT(EXTI->FTSR, ExtiLine);
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <stm32_exti_trigger+0x5c>)
 80013dc:	4082      	lsls	r2, r0
 80013de:	68d9      	ldr	r1, [r3, #12]
 80013e0:	4311      	orrs	r1, r2
 80013e2:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80013e4:	6899      	ldr	r1, [r3, #8]
 80013e6:	ea21 0202 	bic.w	r2, r1, r2
 80013ea:	609a      	str	r2, [r3, #8]
}
 80013ec:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80013ee:	2301      	movs	r3, #1
 80013f0:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <stm32_exti_trigger+0x5c>)
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	4302      	orrs	r2, r0
 80013fa:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	4310      	orrs	r0, r2
 8001400:	60d8      	str	r0, [r3, #12]
}
 8001402:	4770      	bx	lr
 8001404:	40010400 	.word	0x40010400

08001408 <stm32_exti_set_callback>:

/**
 * @brief set & unset for the interrupt callbacks
 */
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
 8001408:	b510      	push	{r4, lr}
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <stm32_exti_set_callback+0x20>)
{
 800140c:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 800140e:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8001412:	b928      	cbnz	r0, 8001420 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8001414:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 8001418:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800141c:	605a      	str	r2, [r3, #4]

	return 0;
}
 800141e:	bd10      	pop	{r4, pc}
		return -EBUSY;
 8001420:	f06f 000f 	mvn.w	r0, #15
 8001424:	e7fb      	b.n	800141e <stm32_exti_set_callback+0x16>
 8001426:	bf00      	nop
 8001428:	20000228 	.word	0x20000228

0800142c <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 800142c:	2200      	movs	r2, #0
 800142e:	4b03      	ldr	r3, [pc, #12]	; (800143c <stm32_exti_unset_callback+0x10>)
 8001430:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8001434:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8001438:	605a      	str	r2, [r3, #4]
}
 800143a:	4770      	bx	lr
 800143c:	20000228 	.word	0x20000228

08001440 <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <stm32_clock_control_get_subsys_rate+0x3c>)
 8001442:	6818      	ldr	r0, [r3, #0]
	}
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8001444:	680b      	ldr	r3, [r1, #0]
 8001446:	2b05      	cmp	r3, #5
 8001448:	d80b      	bhi.n	8001462 <stm32_clock_control_get_subsys_rate+0x22>
 800144a:	b183      	cbz	r3, 800146e <stm32_clock_control_get_subsys_rate+0x2e>
 800144c:	3b02      	subs	r3, #2
 800144e:	2b03      	cmp	r3, #3
 8001450:	d803      	bhi.n	800145a <stm32_clock_control_get_subsys_rate+0x1a>
 8001452:	e8df f003 	tbb	[pc, r3]
 8001456:	0211      	.short	0x0211
 8001458:	0302      	.short	0x0302
 800145a:	2000      	movs	r0, #0
		*rate = get_msi_frequency();
		break;
#endif
#if defined(STM32_SRC_HSE)
	case STM32_SRC_HSE:
		*rate = STM32_HSE_FREQ;
 800145c:	6010      	str	r0, [r2, #0]
#endif /* STM32_HSI48_ENABLED */
	default:
		return -ENOTSUP;
	}

	return 0;
 800145e:	2000      	movs	r0, #0
 8001460:	4770      	bx	lr
	switch (pclken->bus) {
 8001462:	f023 0104 	bic.w	r1, r3, #4
 8001466:	2918      	cmp	r1, #24
 8001468:	d004      	beq.n	8001474 <stm32_clock_control_get_subsys_rate+0x34>
 800146a:	2b14      	cmp	r3, #20
 800146c:	d0f6      	beq.n	800145c <stm32_clock_control_get_subsys_rate+0x1c>
 800146e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8001472:	4770      	bx	lr
	return clock / prescaler;
 8001474:	0840      	lsrs	r0, r0, #1
		break;
 8001476:	e7f1      	b.n	800145c <stm32_clock_control_get_subsys_rate+0x1c>
		break;
 8001478:	4801      	ldr	r0, [pc, #4]	; (8001480 <stm32_clock_control_get_subsys_rate+0x40>)
 800147a:	e7ef      	b.n	800145c <stm32_clock_control_get_subsys_rate+0x1c>
 800147c:	20000088 	.word	0x20000088
 8001480:	007a1200 	.word	0x007a1200

08001484 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8001484:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(dev);

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8001486:	f002 fcf0 	bl	8003e6a <config_enable_default_clocks>

#if defined(FLASH_ACR_LATENCY)
	uint32_t old_flash_freq;
	uint32_t new_flash_freq;

	old_flash_freq = RCC_CALC_FLASH_FREQ(HAL_RCC_GetSysClockFreq(),
 800148a:	f001 faf7 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800148e:	4c33      	ldr	r4, [pc, #204]	; (800155c <stm32_clock_control_init+0xd8>)
 8001490:	4a33      	ldr	r2, [pc, #204]	; (8001560 <stm32_clock_control_init+0xdc>)
 8001492:	6863      	ldr	r3, [r4, #4]

	new_flash_freq = RCC_CALC_FLASH_FREQ(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC,
				      STM32_FLASH_PRESCALER);

	/* If freq increases, set flash latency before any clock setting */
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8001494:	4e33      	ldr	r6, [pc, #204]	; (8001564 <stm32_clock_control_init+0xe0>)
	old_flash_freq = RCC_CALC_FLASH_FREQ(HAL_RCC_GetSysClockFreq(),
 8001496:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800149a:	5cd3      	ldrb	r3, [r2, r3]
 800149c:	fa20 f503 	lsr.w	r5, r0, r3
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 80014a0:	42b5      	cmp	r5, r6
 80014a2:	d802      	bhi.n	80014aa <stm32_clock_control_init+0x26>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 80014a4:	4830      	ldr	r0, [pc, #192]	; (8001568 <stm32_clock_control_init+0xe4>)
 80014a6:	f001 fc1b 	bl	8002ce0 <LL_SetFlashLatency>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80014aa:	6823      	ldr	r3, [r4, #0]
 80014ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b0:	6023      	str	r3, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80014b2:	6823      	ldr	r3, [r4, #0]
 80014b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b8:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80014ba:	6823      	ldr	r3, [r4, #0]
		while (LL_RCC_HSE_IsReady() != 1) {
 80014bc:	0398      	lsls	r0, r3, #14
 80014be:	d5fc      	bpl.n	80014ba <stm32_clock_control_init+0x36>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80014c0:	6863      	ldr	r3, [r4, #4]
 80014c2:	f003 030c 	and.w	r3, r3, #12
	if (LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d115      	bne.n	80014f6 <stm32_clock_control_init+0x72>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80014ca:	6863      	ldr	r3, [r4, #4]
 80014cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014d0:	6063      	str	r3, [r4, #4]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80014d2:	6823      	ldr	r3, [r4, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 80014d4:	0799      	lsls	r1, r3, #30
 80014d6:	d406      	bmi.n	80014e6 <stm32_clock_control_init+0x62>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80014d8:	6823      	ldr	r3, [r4, #0]
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80014e0:	6823      	ldr	r3, [r4, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 80014e2:	079a      	lsls	r2, r3, #30
 80014e4:	d5fc      	bpl.n	80014e0 <stm32_clock_control_init+0x5c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80014e6:	6863      	ldr	r3, [r4, #4]
 80014e8:	f023 0303 	bic.w	r3, r3, #3
 80014ec:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80014ee:	6863      	ldr	r3, [r4, #4]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 80014f0:	f013 0f0c 	tst.w	r3, #12
 80014f4:	d1fb      	bne.n	80014ee <stm32_clock_control_init+0x6a>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80014f6:	6823      	ldr	r3, [r4, #0]
 80014f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014fc:	6023      	str	r3, [r4, #0]
	config_pll_sysclock();
 80014fe:	f000 f837 	bl	8001570 <config_pll_sysclock>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001502:	6823      	ldr	r3, [r4, #0]
 8001504:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001508:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800150a:	6823      	ldr	r3, [r4, #0]
	while (LL_RCC_PLL_IsReady() != 1U) {
 800150c:	019b      	lsls	r3, r3, #6
 800150e:	d5fc      	bpl.n	800150a <stm32_clock_control_init+0x86>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001510:	6863      	ldr	r3, [r4, #4]
 8001512:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001516:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001518:	6863      	ldr	r3, [r4, #4]
 800151a:	f023 0303 	bic.w	r3, r3, #3
 800151e:	f043 0302 	orr.w	r3, r3, #2
 8001522:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001524:	6863      	ldr	r3, [r4, #4]
 8001526:	f003 030c 	and.w	r3, r3, #12
	}

#if STM32_SYSCLK_SRC_PLL
	/* Set PLL as System Clock Source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 800152a:	2b08      	cmp	r3, #8
 800152c:	d1fa      	bne.n	8001524 <stm32_clock_control_init+0xa0>
		LL_RCC_SetAHBPrescaler(ahb_prescaler(STM32_CORE_PRESCALER));
	}

#if defined(FLASH_ACR_LATENCY)
	/* If freq not increased, set flash latency after all clock setting */
	if (old_flash_freq >= CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 800152e:	42b5      	cmp	r5, r6
 8001530:	d902      	bls.n	8001538 <stm32_clock_control_init+0xb4>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 8001532:	480d      	ldr	r0, [pc, #52]	; (8001568 <stm32_clock_control_init+0xe4>)
 8001534:	f001 fbd4 	bl	8002ce0 <LL_SetFlashLatency>
	}
#endif /* FLASH_ACR_LATENCY */

	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <stm32_clock_control_init+0xe8>)
 800153a:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <stm32_clock_control_init+0xe4>)

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 800153c:	2000      	movs	r0, #0
	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 800153e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001540:	6863      	ldr	r3, [r4, #4]
 8001542:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001546:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800154a:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800154c:	6863      	ldr	r3, [r4, #4]
 800154e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001552:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001556:	6063      	str	r3, [r4, #4]
}
 8001558:	bd70      	pop	{r4, r5, r6, pc}
 800155a:	bf00      	nop
 800155c:	40021000 	.word	0x40021000
 8001560:	080055e7 	.word	0x080055e7
 8001564:	044aa1ff 	.word	0x044aa1ff
 8001568:	044aa200 	.word	0x044aa200
 800156c:	20000088 	.word	0x20000088

08001570 <config_pll_sysclock>:
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8001570:	4a05      	ldr	r2, [pc, #20]	; (8001588 <config_pll_sysclock+0x18>)
 8001572:	6853      	ldr	r3, [r2, #4]
 8001574:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001578:	f443 13c8 	orr.w	r3, r3, #1638400	; 0x190000
 800157c:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_USBPRE, USBxSource);
 800157e:	6853      	ldr	r3, [r2, #4]
 8001580:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001584:	6053      	str	r3, [r2, #4]
#ifdef STM32_USB_PRE_ENABLED
	/* Prescaler is enabled: PLL clock is not divided */
	LL_RCC_SetUSBClockSource(IS_ENABLED(STM32_PLL_USBPRE) ?
				 STM32_USB_PRE_ENABLED : 0);
#endif
}
 8001586:	4770      	bx	lr
 8001588:	40021000 	.word	0x40021000

0800158c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 800158c:	b508      	push	{r3, lr}
 800158e:	4807      	ldr	r0, [pc, #28]	; (80015ac <uart_console_init+0x20>)
 8001590:	f003 fa0a 	bl	80049a8 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
 8001594:	b138      	cbz	r0, 80015a6 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
 8001596:	4806      	ldr	r0, [pc, #24]	; (80015b0 <uart_console_init+0x24>)
 8001598:	f7ff feb2 	bl	8001300 <__stdout_hook_install>
	__printk_hook_install(console_out);
 800159c:	4804      	ldr	r0, [pc, #16]	; (80015b0 <uart_console_init+0x24>)
 800159e:	f7ff f883 	bl	80006a8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 80015a2:	2000      	movs	r0, #0
}
 80015a4:	bd08      	pop	{r3, pc}
		return -ENODEV;
 80015a6:	f06f 0012 	mvn.w	r0, #18
 80015aa:	e7fb      	b.n	80015a4 <uart_console_init+0x18>
 80015ac:	08004d9c 	.word	0x08004d9c
 80015b0:	080015b5 	.word	0x080015b5

080015b4 <console_out>:
	if ('\n' == c) {
 80015b4:	280a      	cmp	r0, #10
{
 80015b6:	b538      	push	{r3, r4, r5, lr}
 80015b8:	4604      	mov	r4, r0
 80015ba:	4d07      	ldr	r5, [pc, #28]	; (80015d8 <console_out+0x24>)
	if ('\n' == c) {
 80015bc:	d104      	bne.n	80015c8 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 80015be:	68ab      	ldr	r3, [r5, #8]
 80015c0:	210d      	movs	r1, #13
 80015c2:	4628      	mov	r0, r5
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	4798      	blx	r3
 80015c8:	68ab      	ldr	r3, [r5, #8]
 80015ca:	4803      	ldr	r0, [pc, #12]	; (80015d8 <console_out+0x24>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	b2e1      	uxtb	r1, r4
 80015d0:	4798      	blx	r3
}
 80015d2:	4620      	mov	r0, r4
 80015d4:	bd38      	pop	{r3, r4, r5, pc}
 80015d6:	bf00      	nop
 80015d8:	08004d9c 	.word	0x08004d9c

080015dc <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 80015dc:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
 80015de:	6903      	ldr	r3, [r0, #16]
{
 80015e0:	4604      	mov	r4, r0
	int ret;

	data->dev = dev;
 80015e2:	6058      	str	r0, [r3, #4]
 80015e4:	4d08      	ldr	r5, [pc, #32]	; (8001608 <gpio_stm32_init+0x2c>)
 80015e6:	4628      	mov	r0, r5
 80015e8:	f003 f9de 	bl	80049a8 <z_device_is_ready>

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 80015ec:	b140      	cbz	r0, 8001600 <gpio_stm32_init+0x24>
					(clock_control_subsys_t *)&cfg->pclken);
 80015ee:	6861      	ldr	r1, [r4, #4]
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 80015f0:	68ab      	ldr	r3, [r5, #8]
 80015f2:	4628      	mov	r0, r5
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	310c      	adds	r1, #12
 80015f8:	4798      	blx	r3
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
	if (ret < 0) {
 80015fa:	ea00 70e0 	and.w	r0, r0, r0, asr #31

	pm_device_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 80015fe:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
 8001600:	f06f 0012 	mvn.w	r0, #18
 8001604:	e7fb      	b.n	80015fe <gpio_stm32_init+0x22>
 8001606:	bf00      	nop
 8001608:	08004cdc 	.word	0x08004cdc

0800160c <gpio_stm32_pin_interrupt_configure>:
{
 800160c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800160e:	4617      	mov	r7, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 8001610:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
{
 8001614:	460c      	mov	r4, r1
 8001616:	461d      	mov	r5, r3
	const struct gpio_stm32_config *cfg = dev->config;
 8001618:	6846      	ldr	r6, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 800161a:	6902      	ldr	r2, [r0, #16]
	if (mode == GPIO_INT_MODE_DISABLED) {
 800161c:	d123      	bne.n	8001666 <gpio_stm32_pin_interrupt_configure+0x5a>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800161e:	230f      	movs	r3, #15
 8001620:	f001 0203 	and.w	r2, r1, #3
 8001624:	3204      	adds	r2, #4
 8001626:	0092      	lsls	r2, r2, #2
 8001628:	4093      	lsls	r3, r2
 800162a:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  *         @arg @ref LL_GPIO_AF_EXTI_PORTF
  *         @arg @ref LL_GPIO_AF_EXTI_PORTG
  */
__STATIC_INLINE uint32_t LL_GPIO_AF_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(AFIO->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 800162e:	b2da      	uxtb	r2, r3
 8001630:	492c      	ldr	r1, [pc, #176]	; (80016e4 <gpio_stm32_pin_interrupt_configure+0xd8>)
 8001632:	3202      	adds	r2, #2
 8001634:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001638:	0c19      	lsrs	r1, r3, #16
 800163a:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 8001642:	fab2 f282 	clz	r2, r2
 8001646:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8001648:	68b2      	ldr	r2, [r6, #8]
 800164a:	429a      	cmp	r2, r3
 800164c:	d109      	bne.n	8001662 <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 800164e:	4620      	mov	r0, r4
 8001650:	f7ff fe9e 	bl	8001390 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8001654:	4620      	mov	r0, r4
 8001656:	f7ff fee9 	bl	800142c <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 800165a:	2100      	movs	r1, #0
 800165c:	4620      	mov	r0, r4
 800165e:	f7ff fea3 	bl	80013a8 <stm32_exti_trigger>
	int err = 0;
 8001662:	2000      	movs	r0, #0
}
 8001664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
 8001666:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
 800166a:	d035      	beq.n	80016d8 <gpio_stm32_pin_interrupt_configure+0xcc>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 800166c:	4620      	mov	r0, r4
 800166e:	491e      	ldr	r1, [pc, #120]	; (80016e8 <gpio_stm32_pin_interrupt_configure+0xdc>)
 8001670:	f7ff feca 	bl	8001408 <stm32_exti_set_callback>
 8001674:	bb98      	cbnz	r0, 80016de <gpio_stm32_pin_interrupt_configure+0xd2>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8001676:	220f      	movs	r2, #15
 8001678:	f004 0303 	and.w	r3, r4, #3
 800167c:	3304      	adds	r3, #4
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	409a      	lsls	r2, r3
 8001682:	ea42 0294 	orr.w	r2, r2, r4, lsr #2
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001686:	b2d3      	uxtb	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800168e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	LL_GPIO_AF_SetEXTISource(port, line);
 8001692:	68b1      	ldr	r1, [r6, #8]
 8001694:	689e      	ldr	r6, [r3, #8]
 8001696:	0c10      	lsrs	r0, r2, #16
 8001698:	ea26 4612 	bic.w	r6, r6, r2, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	fa90 f2a0 	rbit	r2, r0
  return __builtin_clz(value);
 80016a0:	fab2 f282 	clz	r2, r2
 80016a4:	fa01 f202 	lsl.w	r2, r1, r2
 80016a8:	4332      	orrs	r2, r6
	switch (trig) {
 80016aa:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	d00e      	beq.n	80016d0 <gpio_stm32_pin_interrupt_configure+0xc4>
 80016b2:	f1b5 6fc0 	cmp.w	r5, #100663296	; 0x6000000
 80016b6:	d00d      	beq.n	80016d4 <gpio_stm32_pin_interrupt_configure+0xc8>
 80016b8:	f105 437e 	add.w	r3, r5, #4261412864	; 0xfe000000
 80016bc:	4259      	negs	r1, r3
 80016be:	4159      	adcs	r1, r3
 80016c0:	0049      	lsls	r1, r1, #1
	stm32_exti_trigger(pin, edge);
 80016c2:	4620      	mov	r0, r4
 80016c4:	f7ff fe70 	bl	80013a8 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 80016c8:	4620      	mov	r0, r4
 80016ca:	f7ff fe4f 	bl	800136c <stm32_exti_enable>
 80016ce:	e7c8      	b.n	8001662 <gpio_stm32_pin_interrupt_configure+0x56>
		edge = STM32_EXTI_TRIG_RISING;
 80016d0:	2101      	movs	r1, #1
 80016d2:	e7f6      	b.n	80016c2 <gpio_stm32_pin_interrupt_configure+0xb6>
		edge = STM32_EXTI_TRIG_BOTH;
 80016d4:	2103      	movs	r1, #3
 80016d6:	e7f4      	b.n	80016c2 <gpio_stm32_pin_interrupt_configure+0xb6>
		err = -ENOTSUP;
 80016d8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80016dc:	e7c2      	b.n	8001664 <gpio_stm32_pin_interrupt_configure+0x58>
		err = -EBUSY;
 80016de:	f06f 000f 	mvn.w	r0, #15
	return err;
 80016e2:	e7bf      	b.n	8001664 <gpio_stm32_pin_interrupt_configure+0x58>
 80016e4:	40010000 	.word	0x40010000
 80016e8:	08003f83 	.word	0x08003f83

080016ec <pwm_stm32_set_cycles>:
}

static int pwm_stm32_set_cycles(const struct device *dev, uint32_t channel,
				uint32_t period_cycles, uint32_t pulse_cycles,
				pwm_flags_t flags)
{
 80016ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016f0:	461f      	mov	r7, r3
	const struct pwm_stm32_config *cfg = dev->config;

	uint32_t ll_channel;
	uint32_t current_ll_channel; /* complementary output if used */

	if (channel < 1u || channel > TIMER_MAX_CH) {
 80016f2:	1e4b      	subs	r3, r1, #1
{
 80016f4:	b089      	sub	sp, #36	; 0x24
	if (channel < 1u || channel > TIMER_MAX_CH) {
 80016f6:	2b03      	cmp	r3, #3
{
 80016f8:	f8bd 4040 	ldrh.w	r4, [sp, #64]	; 0x40
	const struct pwm_stm32_config *cfg = dev->config;
 80016fc:	6846      	ldr	r6, [r0, #4]
	if (channel < 1u || channel > TIMER_MAX_CH) {
 80016fe:	f200 80b8 	bhi.w	8001872 <pwm_stm32_set_cycles+0x186>

	/*
	 * Non 32-bit timers count from 0 up to the value in the ARR register
	 * (16-bit). Thus period_cycles cannot be greater than UINT16_MAX + 1.
	 */
	if (!IS_TIM_32B_COUNTER_INSTANCE(cfg->timer) &&
 8001702:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001706:	f200 80b7 	bhi.w	8001878 <pwm_stm32_set_cycles+0x18c>
			return -EBUSY;
		}
	}
#endif /* CONFIG_PWM_CAPTURE */

	ll_channel = ch2ll[channel - 1u];
 800170a:	485d      	ldr	r0, [pc, #372]	; (8001880 <pwm_stm32_set_cycles+0x194>)

	/* in LL_TIM_CC_DisableChannel and LL_TIM_CC_IsEnabledChannel,
	 * the channel param could be the complementary one
	 */
	if ((flags & STM32_PWM_COMPLEMENTARY_MASK) == STM32_PWM_COMPLEMENTARY) {
 800170c:	f414 7980 	ands.w	r9, r4, #256	; 0x100
	ll_channel = ch2ll[channel - 1u];
 8001710:	f850 8023 	ldr.w	r8, [r0, r3, lsl #2]
	if ((flags & STM32_PWM_COMPLEMENTARY_MASK) == STM32_PWM_COMPLEMENTARY) {
 8001714:	d00d      	beq.n	8001732 <pwm_stm32_set_cycles+0x46>
		if (channel > ARRAY_SIZE(ch2ll_n)) {
 8001716:	2904      	cmp	r1, #4
 8001718:	f000 80ab 	beq.w	8001872 <pwm_stm32_set_cycles+0x186>
			/* setting a flag on a channel that has not this capability */
			LOG_ERR("Channel %d has NO complementary output", channel);
			return -EINVAL;
		}
		current_ll_channel = ch2ll_n[channel - 1u];
 800171c:	4959      	ldr	r1, [pc, #356]	; (8001884 <pwm_stm32_set_cycles+0x198>)
 800171e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	} else {
		current_ll_channel = ll_channel;
	}

	if (period_cycles == 0u) {
 8001722:	b942      	cbnz	r2, 8001736 <pwm_stm32_set_cycles+0x4a>
		LL_TIM_CC_DisableChannel(cfg->timer, current_ll_channel);
 8001724:	6832      	ldr	r2, [r6, #0]
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  CLEAR_BIT(TIMx->CCER, Channels);
 8001726:	6a13      	ldr	r3, [r2, #32]
 8001728:	ea23 0300 	bic.w	r3, r3, r0
 800172c:	6213      	str	r3, [r2, #32]
		return 0;
 800172e:	2000      	movs	r0, #0
 8001730:	e05b      	b.n	80017ea <pwm_stm32_set_cycles+0xfe>
		current_ll_channel = ll_channel;
 8001732:	4640      	mov	r0, r8
 8001734:	e7f5      	b.n	8001722 <pwm_stm32_set_cycles+0x36>
	}

	if (cfg->countermode == LL_TIM_COUNTERMODE_UP) {
 8001736:	68b1      	ldr	r1, [r6, #8]
 8001738:	bb71      	cbnz	r1, 8001798 <pwm_stm32_set_cycles+0xac>
		period_cycles -= 1U;
	} else if (cfg->countermode == LL_TIM_COUNTERMODE_DOWN) {
		/* remove 1 pulse cycle, accounts for 1 extra high cycle */
		pulse_cycles -= 1U;
		/* remove 1 period cycle, accounts for 1 extra low cycle */
		period_cycles -= 1U;
 800173a:	1e55      	subs	r5, r2, #1
		period_cycles /= 2U;
	} else {
		return -ENOTSUP;
	}

	if (!LL_TIM_CC_IsEnabledChannel(cfg->timer, current_ll_channel)) {
 800173c:	6831      	ldr	r1, [r6, #0]
	if ((flags & PWM_POLARITY_MASK) == PWM_POLARITY_NORMAL) {
 800173e:	f004 0401 	and.w	r4, r4, #1
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8001742:	6a0a      	ldr	r2, [r1, #32]
 8001744:	0064      	lsls	r4, r4, #1
 8001746:	ea30 0202 	bics.w	r2, r0, r2
 800174a:	d13a      	bne.n	80017c2 <pwm_stm32_set_cycles+0xd6>
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800174c:	2840      	cmp	r0, #64	; 0x40
 800174e:	f000 8088 	beq.w	8001862 <pwm_stm32_set_cycles+0x176>
 8001752:	d82e      	bhi.n	80017b2 <pwm_stm32_set_cycles+0xc6>
 8001754:	2804      	cmp	r0, #4
 8001756:	f000 8086 	beq.w	8001866 <pwm_stm32_set_cycles+0x17a>
 800175a:	2810      	cmp	r0, #16
 800175c:	f000 8085 	beq.w	800186a <pwm_stm32_set_cycles+0x17e>
 8001760:	2801      	cmp	r0, #1
 8001762:	bf08      	it	eq
 8001764:	2200      	moveq	r2, #0
 8001766:	bf18      	it	ne
 8001768:	2206      	movne	r2, #6
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 800176a:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8001888 <pwm_stm32_set_cycles+0x19c>
 800176e:	6a08      	ldr	r0, [r1, #32]
 8001770:	f81c c002 	ldrb.w	ip, [ip, r2]
 8001774:	2202      	movs	r2, #2
 8001776:	fa02 f20c 	lsl.w	r2, r2, ip
 800177a:	ea20 0202 	bic.w	r2, r0, r2
 800177e:	fa04 f40c 	lsl.w	r4, r4, ip
 8001782:	4314      	orrs	r4, r2
		LL_TIM_SetAutoReload(cfg->timer, period_cycles);
		LL_TIM_GenerateEvent_UPDATE(cfg->timer);
	} else {
		/* in LL_TIM_OC_SetPolarity, the channel could be the complementary one */
		LL_TIM_OC_SetPolarity(cfg->timer, current_ll_channel, get_polarity(flags));
		set_timer_compare[channel - 1u](cfg->timer, pulse_cycles);
 8001784:	4a41      	ldr	r2, [pc, #260]	; (800188c <pwm_stm32_set_cycles+0x1a0>)
 8001786:	620c      	str	r4, [r1, #32]
 8001788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178c:	4639      	mov	r1, r7
 800178e:	6830      	ldr	r0, [r6, #0]
 8001790:	4798      	blx	r3
		LL_TIM_SetAutoReload(cfg->timer, period_cycles);
 8001792:	6833      	ldr	r3, [r6, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001794:	62dd      	str	r5, [r3, #44]	; 0x2c
}
 8001796:	e7ca      	b.n	800172e <pwm_stm32_set_cycles+0x42>
	} else if (cfg->countermode == LL_TIM_COUNTERMODE_DOWN) {
 8001798:	2910      	cmp	r1, #16
 800179a:	d101      	bne.n	80017a0 <pwm_stm32_set_cycles+0xb4>
		pulse_cycles -= 1U;
 800179c:	3f01      	subs	r7, #1
 800179e:	e7cc      	b.n	800173a <pwm_stm32_set_cycles+0x4e>
		(ll_countermode == LL_TIM_COUNTERMODE_CENTER_UP) ||
 80017a0:	f021 0540 	bic.w	r5, r1, #64	; 0x40
 80017a4:	2d20      	cmp	r5, #32
 80017a6:	d001      	beq.n	80017ac <pwm_stm32_set_cycles+0xc0>
	return ((ll_countermode == LL_TIM_COUNTERMODE_CENTER_DOWN) ||
 80017a8:	2940      	cmp	r1, #64	; 0x40
 80017aa:	d165      	bne.n	8001878 <pwm_stm32_set_cycles+0x18c>
		pulse_cycles /= 2U;
 80017ac:	087f      	lsrs	r7, r7, #1
		period_cycles /= 2U;
 80017ae:	0855      	lsrs	r5, r2, #1
 80017b0:	e7c4      	b.n	800173c <pwm_stm32_set_cycles+0x50>
 80017b2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80017b6:	d05a      	beq.n	800186e <pwm_stm32_set_cycles+0x182>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80017b8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80017bc:	bf08      	it	eq
 80017be:	2205      	moveq	r2, #5
 80017c0:	e7d1      	b.n	8001766 <pwm_stm32_set_cycles+0x7a>
		LL_TIM_OC_StructInit(&oc_init);
 80017c2:	4668      	mov	r0, sp
 80017c4:	f003 f8e5 	bl	8004992 <LL_TIM_OC_StructInit>
		oc_init.OCMode = LL_TIM_OCMODE_PWM1;
 80017c8:	2360      	movs	r3, #96	; 0x60
 80017ca:	9300      	str	r3, [sp, #0]
		if ((flags & STM32_PWM_COMPLEMENTARY_MASK) == STM32_PWM_COMPLEMENTARY) {
 80017cc:	2301      	movs	r3, #1
 80017ce:	f1b9 0f00 	cmp.w	r9, #0
 80017d2:	d00d      	beq.n	80017f0 <pwm_stm32_set_cycles+0x104>
			oc_init.OCNState = LL_TIM_OCSTATE_ENABLE;
 80017d4:	9302      	str	r3, [sp, #8]
			oc_init.OCNPolarity = get_polarity(flags);
 80017d6:	9405      	str	r4, [sp, #20]
		oc_init.CompareValue = pulse_cycles;
 80017d8:	9703      	str	r7, [sp, #12]
		if (LL_TIM_OC_Init(cfg->timer, ll_channel, &oc_init) != SUCCESS) {
 80017da:	466a      	mov	r2, sp
 80017dc:	4641      	mov	r1, r8
 80017de:	6830      	ldr	r0, [r6, #0]
 80017e0:	f001 f9b6 	bl	8002b50 <LL_TIM_OC_Init>
 80017e4:	b138      	cbz	r0, 80017f6 <pwm_stm32_set_cycles+0x10a>
			return -EIO;
 80017e6:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
 80017ea:	b009      	add	sp, #36	; 0x24
 80017ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 80017f0:	9301      	str	r3, [sp, #4]
			oc_init.OCPolarity = get_polarity(flags);
 80017f2:	9404      	str	r4, [sp, #16]
 80017f4:	e7f0      	b.n	80017d8 <pwm_stm32_set_cycles+0xec>
		LL_TIM_EnableARRPreload(cfg->timer);
 80017f6:	6832      	ldr	r2, [r6, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80017f8:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
 80017fc:	6813      	ldr	r3, [r2, #0]
 80017fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001802:	6013      	str	r3, [r2, #0]
		LL_TIM_OC_EnablePreload(cfg->timer, ll_channel);
 8001804:	6832      	ldr	r2, [r6, #0]
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001806:	d024      	beq.n	8001852 <pwm_stm32_set_cycles+0x166>
 8001808:	d81b      	bhi.n	8001842 <pwm_stm32_set_cycles+0x156>
 800180a:	f1b8 0f04 	cmp.w	r8, #4
 800180e:	d022      	beq.n	8001856 <pwm_stm32_set_cycles+0x16a>
 8001810:	f1b8 0f10 	cmp.w	r8, #16
 8001814:	d021      	beq.n	800185a <pwm_stm32_set_cycles+0x16e>
 8001816:	f1b8 0f01 	cmp.w	r8, #1
 800181a:	bf18      	it	ne
 800181c:	2006      	movne	r0, #6
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800181e:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <pwm_stm32_set_cycles+0x1a4>)
 8001820:	3218      	adds	r2, #24
 8001822:	5c19      	ldrb	r1, [r3, r0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <pwm_stm32_set_cycles+0x1a8>)
 8001826:	5854      	ldr	r4, [r2, r1]
 8001828:	5c18      	ldrb	r0, [r3, r0]
 800182a:	2308      	movs	r3, #8
 800182c:	4083      	lsls	r3, r0
 800182e:	4323      	orrs	r3, r4
 8001830:	5053      	str	r3, [r2, r1]
		LL_TIM_SetAutoReload(cfg->timer, period_cycles);
 8001832:	6833      	ldr	r3, [r6, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001834:	62dd      	str	r5, [r3, #44]	; 0x2c
		LL_TIM_GenerateEvent_UPDATE(cfg->timer);
 8001836:	6832      	ldr	r2, [r6, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001838:	6953      	ldr	r3, [r2, #20]
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	6153      	str	r3, [r2, #20]
 8001840:	e775      	b.n	800172e <pwm_stm32_set_cycles+0x42>
 8001842:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
 8001846:	d00a      	beq.n	800185e <pwm_stm32_set_cycles+0x172>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001848:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 800184c:	bf08      	it	eq
 800184e:	2005      	moveq	r0, #5
 8001850:	e7e3      	b.n	800181a <pwm_stm32_set_cycles+0x12e>
		LL_TIM_OC_EnablePreload(cfg->timer, ll_channel);
 8001852:	2003      	movs	r0, #3
 8001854:	e7e3      	b.n	800181e <pwm_stm32_set_cycles+0x132>
 8001856:	2001      	movs	r0, #1
 8001858:	e7e1      	b.n	800181e <pwm_stm32_set_cycles+0x132>
 800185a:	2002      	movs	r0, #2
 800185c:	e7df      	b.n	800181e <pwm_stm32_set_cycles+0x132>
 800185e:	2004      	movs	r0, #4
 8001860:	e7dd      	b.n	800181e <pwm_stm32_set_cycles+0x132>
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8001862:	2203      	movs	r2, #3
 8001864:	e781      	b.n	800176a <pwm_stm32_set_cycles+0x7e>
 8001866:	2201      	movs	r2, #1
 8001868:	e77f      	b.n	800176a <pwm_stm32_set_cycles+0x7e>
 800186a:	2202      	movs	r2, #2
 800186c:	e77d      	b.n	800176a <pwm_stm32_set_cycles+0x7e>
 800186e:	2204      	movs	r2, #4
 8001870:	e77b      	b.n	800176a <pwm_stm32_set_cycles+0x7e>
		return -EINVAL;
 8001872:	f06f 0015 	mvn.w	r0, #21
 8001876:	e7b8      	b.n	80017ea <pwm_stm32_set_cycles+0xfe>
		return -ENOTSUP;
 8001878:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800187c:	e7b5      	b.n	80017ea <pwm_stm32_set_cycles+0xfe>
 800187e:	bf00      	nop
 8001880:	080051d4 	.word	0x080051d4
 8001884:	080051c8 	.word	0x080051c8
 8001888:	0800556a 	.word	0x0800556a
 800188c:	080051b8 	.word	0x080051b8
 8001890:	08005578 	.word	0x08005578
 8001894:	08005571 	.word	0x08005571

08001898 <pwm_stm32_init>:
	.disable_capture = pwm_stm32_disable_capture,
#endif /* CONFIG_PWM_CAPTURE */
};

static int pwm_stm32_init(const struct device *dev)
{
 8001898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800189c:	b086      	sub	sp, #24
	struct pwm_stm32_data *data = dev->data;
 800189e:	6906      	ldr	r6, [r0, #16]
	const struct pwm_stm32_config *cfg = dev->config;
 80018a0:	6844      	ldr	r4, [r0, #4]
 80018a2:	4d2b      	ldr	r5, [pc, #172]	; (8001950 <pwm_stm32_init+0xb8>)
 80018a4:	4628      	mov	r0, r5
 80018a6:	f003 f87f 	bl	80049a8 <z_device_is_ready>
	LL_TIM_InitTypeDef init;

	/* enable clock and store its speed */
	clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);

	if (!device_is_ready(clk)) {
 80018aa:	2800      	cmp	r0, #0
 80018ac:	d049      	beq.n	8001942 <pwm_stm32_init+0xaa>
	const struct clock_control_driver_api *api =
 80018ae:	f8d5 8008 	ldr.w	r8, [r5, #8]
		LOG_ERR("clock control device not ready");
		return -ENODEV;
	}

	r = clock_control_on(clk, (clock_control_subsys_t *)&cfg->pclken);
 80018b2:	f104 070c 	add.w	r7, r4, #12
	return api->on(dev, sys);
 80018b6:	4639      	mov	r1, r7
 80018b8:	4628      	mov	r0, r5
 80018ba:	f8d8 3000 	ldr.w	r3, [r8]
 80018be:	4798      	blx	r3
	if (r < 0) {
 80018c0:	2800      	cmp	r0, #0
 80018c2:	db04      	blt.n	80018ce <pwm_stm32_init+0x36>
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 80018c4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80018c8:	b923      	cbnz	r3, 80018d4 <pwm_stm32_init+0x3c>
		LOG_ERR("Could not initialize clock (%d)", r);
		return r;
	}

	r = get_tim_clk(&cfg->pclken, &data->tim_clk);
	if (r < 0) {
 80018ca:	f06f 0057 	mvn.w	r0, #87	; 0x57
#ifdef CONFIG_PWM_CAPTURE
	cfg->irq_config_func(dev);
#endif /* CONFIG_PWM_CAPTURE */

	return 0;
}
 80018ce:	b006      	add	sp, #24
 80018d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 80018d4:	4639      	mov	r1, r7
 80018d6:	4628      	mov	r0, r5
 80018d8:	aa01      	add	r2, sp, #4
 80018da:	4798      	blx	r3
	if (r < 0) {
 80018dc:	2800      	cmp	r0, #0
 80018de:	dbf6      	blt.n	80018ce <pwm_stm32_init+0x36>
		*tim_clk = bus_clk * 2u;
 80018e0:	9b01      	ldr	r3, [sp, #4]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 80018e2:	2100      	movs	r1, #0
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	6033      	str	r3, [r6, #0]
 80018e8:	6960      	ldr	r0, [r4, #20]
 80018ea:	aa01      	add	r2, sp, #4
 80018ec:	f002 fffb 	bl	80048e6 <pinctrl_lookup_state>
	if (ret < 0) {
 80018f0:	2800      	cmp	r0, #0
 80018f2:	dbec      	blt.n	80018ce <pwm_stm32_init+0x36>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 80018f4:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 80018f6:	2200      	movs	r2, #0
 80018f8:	7919      	ldrb	r1, [r3, #4]
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	f001 f844 	bl	8002988 <pinctrl_configure_pins>
	if (r < 0) {
 8001900:	2800      	cmp	r0, #0
 8001902:	dbe4      	blt.n	80018ce <pwm_stm32_init+0x36>
	LL_TIM_StructInit(&init);
 8001904:	a801      	add	r0, sp, #4
 8001906:	f003 f83b 	bl	8004980 <LL_TIM_StructInit>
	init.Prescaler = cfg->prescaler;
 800190a:	6863      	ldr	r3, [r4, #4]
	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 800190c:	a901      	add	r1, sp, #4
	init.Prescaler = cfg->prescaler;
 800190e:	f8ad 3004 	strh.w	r3, [sp, #4]
	init.CounterMode = cfg->countermode;
 8001912:	68a3      	ldr	r3, [r4, #8]
 8001914:	9302      	str	r3, [sp, #8]
	init.Autoreload = 0u;
 8001916:	2300      	movs	r3, #0
	init.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001918:	e9cd 3303 	strd	r3, r3, [sp, #12]
	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 800191c:	6820      	ldr	r0, [r4, #0]
 800191e:	f001 f8e7 	bl	8002af0 <LL_TIM_Init>
 8001922:	b988      	cbnz	r0, 8001948 <pwm_stm32_init+0xb0>
	if (IS_TIM_BREAK_INSTANCE(cfg->timer)) {
 8001924:	6823      	ldr	r3, [r4, #0]
 8001926:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <pwm_stm32_init+0xbc>)
	return 0;
 8001928:	2000      	movs	r0, #0
	if (IS_TIM_BREAK_INSTANCE(cfg->timer)) {
 800192a:	4293      	cmp	r3, r2
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800192c:	bf02      	ittt	eq
 800192e:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001930:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001934:	645a      	streq	r2, [r3, #68]	; 0x44
	LL_TIM_EnableCounter(cfg->timer);
 8001936:	6822      	ldr	r2, [r4, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001938:	6813      	ldr	r3, [r2, #0]
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	6013      	str	r3, [r2, #0]
	return 0;
 8001940:	e7c5      	b.n	80018ce <pwm_stm32_init+0x36>
		return -ENODEV;
 8001942:	f06f 0012 	mvn.w	r0, #18
 8001946:	e7c2      	b.n	80018ce <pwm_stm32_init+0x36>
		return -EIO;
 8001948:	f06f 0004 	mvn.w	r0, #4
 800194c:	e7bf      	b.n	80018ce <pwm_stm32_init+0x36>
 800194e:	bf00      	nop
 8001950:	08004cdc 	.word	0x08004cdc
 8001954:	40012c00 	.word	0x40012c00

08001958 <spi_stm32_init>:
	return false;
#endif
}

static int spi_stm32_init(const struct device *dev)
{
 8001958:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 800195c:	6905      	ldr	r5, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 800195e:	6846      	ldr	r6, [r0, #4]
 8001960:	4c2d      	ldr	r4, [pc, #180]	; (8001a18 <spi_stm32_init+0xc0>)
 8001962:	4620      	mov	r0, r4
 8001964:	f003 f820 	bl	80049a8 <z_device_is_ready>
	int err;

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 8001968:	2800      	cmp	r0, #0
 800196a:	d052      	beq.n	8001a12 <spi_stm32_init+0xba>
	return api->on(dev, sys);
 800196c:	68a3      	ldr	r3, [r4, #8]
 800196e:	4620      	mov	r0, r4
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68f1      	ldr	r1, [r6, #12]
 8001974:	4798      	blx	r3
		return -ENODEV;
	}

	err = clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
			       (clock_control_subsys_t) &cfg->pclken[0]);
	if (err < 0) {
 8001976:	2800      	cmp	r0, #0
 8001978:	db48      	blt.n	8001a0c <spi_stm32_init+0xb4>
	ret = pinctrl_lookup_state(config, id, &state);
 800197a:	2100      	movs	r1, #0
 800197c:	6870      	ldr	r0, [r6, #4]
 800197e:	aa01      	add	r2, sp, #4
 8001980:	f002 ffb1 	bl	80048e6 <pinctrl_lookup_state>
	if (ret < 0) {
 8001984:	2800      	cmp	r0, #0
 8001986:	db41      	blt.n	8001a0c <spi_stm32_init+0xb4>
	return pinctrl_apply_state_direct(config, state);
 8001988:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800198a:	2200      	movs	r2, #0
 800198c:	7919      	ldrb	r1, [r3, #4]
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	f000 fffa 	bl	8002988 <pinctrl_configure_pins>
	}

	if (!spi_stm32_is_subghzspi(dev)) {
		/* Configure dt provided device signals when available */
		err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
		if (err < 0) {
 8001994:	2800      	cmp	r0, #0
 8001996:	db39      	blt.n	8001a0c <spi_stm32_init+0xb4>

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8001998:	2601      	movs	r6, #1
 800199a:	68ac      	ldr	r4, [r5, #8]
 800199c:	3408      	adds	r4, #8
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 800199e:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80019a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80019a6:	f1a4 0208 	sub.w	r2, r4, #8
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d804      	bhi.n	80019b8 <spi_stm32_init+0x60>
	err = spi_context_cs_configure_all(&data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&data->ctx);
 80019ae:	4628      	mov	r0, r5
 80019b0:	f002 fc00 	bl	80041b4 <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 80019b4:	2000      	movs	r0, #0

	return 0;
 80019b6:	e029      	b.n	8001a0c <spi_stm32_init+0xb4>
		if (!device_is_ready(cs_gpio->port)) {
 80019b8:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80019bc:	f002 fff4 	bl	80049a8 <z_device_is_ready>
 80019c0:	b338      	cbz	r0, 8001a12 <spi_stm32_init+0xba>
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
 80019c2:	f854 0c08 	ldr.w	r0, [r4, #-8]
				  spec->pin,
 80019c6:	f814 1c04 	ldrb.w	r1, [r4, #-4]
				  spec->dt_flags | extra_flags);
 80019ca:	f834 3c02 	ldrh.w	r3, [r4, #-2]
	struct gpio_driver_data *data =
 80019ce:	f8d0 c010 	ldr.w	ip, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 80019d2:	07da      	lsls	r2, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80019d4:	f8dc 7000 	ldr.w	r7, [ip]
	return gpio_pin_configure(spec->port,
 80019d8:	bf54      	ite	pl
 80019da:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 80019de:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 80019e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80019e6:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80019ea:	07db      	lsls	r3, r3, #31
	const struct gpio_driver_api *api =
 80019ec:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80019f0:	bf4c      	ite	mi
 80019f2:	ea4e 0707 	orrmi.w	r7, lr, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80019f6:	ea27 070e 	bicpl.w	r7, r7, lr
 80019fa:	f8cc 7000 	str.w	r7, [ip]
	return api->pin_configure(port, pin, flags);
 80019fe:	f8d8 3000 	ldr.w	r3, [r8]
 8001a02:	4798      	blx	r3
		if (ret < 0) {
 8001a04:	2800      	cmp	r0, #0
 8001a06:	f104 0408 	add.w	r4, r4, #8
 8001a0a:	dac8      	bge.n	800199e <spi_stm32_init+0x46>
}
 8001a0c:	b002      	add	sp, #8
 8001a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ENODEV;
 8001a12:	f06f 0012 	mvn.w	r0, #18
	if (err < 0) {
 8001a16:	e7f9      	b.n	8001a0c <spi_stm32_init+0xb4>
 8001a18:	08004cdc 	.word	0x08004cdc

08001a1c <spi_stm32_transceive>:
{
 8001a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a20:	4699      	mov	r9, r3
	SPI_TypeDef *spi = cfg->spi;
 8001a22:	6843      	ldr	r3, [r0, #4]
{
 8001a24:	4606      	mov	r6, r0
 8001a26:	4688      	mov	r8, r1
	if (!tx_bufs && !rx_bufs) {
 8001a28:	4692      	mov	sl, r2
	struct spi_stm32_data *data = dev->data;
 8001a2a:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 8001a2c:	681d      	ldr	r5, [r3, #0]
{
 8001a2e:	b08d      	sub	sp, #52	; 0x34
	if (!tx_bufs && !rx_bufs) {
 8001a30:	b912      	cbnz	r2, 8001a38 <spi_stm32_transceive+0x1c>
 8001a32:	f1b9 0f00 	cmp.w	r9, #0
 8001a36:	d036      	beq.n	8001aa6 <spi_stm32_transceive+0x8a>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8001a38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001a3c:	049f      	lsls	r7, r3, #18
 8001a3e:	d436      	bmi.n	8001aae <spi_stm32_transceive+0x92>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
 8001a40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a48:	f104 0010 	add.w	r0, r4, #16
 8001a4c:	f001 fb9c 	bl	8003188 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 8001a50:	f8c4 8004 	str.w	r8, [r4, #4]
	const uint32_t scaler[] = {
 8001a54:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 8001b24 <spi_stm32_transceive+0x108>
 8001a58:	af04      	add	r7, sp, #16
 8001a5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001a5e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001a60:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
	struct spi_stm32_data *data = dev->data;
 8001a64:	f8d6 b010 	ldr.w	fp, [r6, #16]
	const uint32_t scaler[] = {
 8001a68:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	if (spi_context_configured(&data->ctx, config)) {
 8001a6c:	f8db 3000 	ldr.w	r3, [fp]
	const struct spi_stm32_config *cfg = dev->config;
 8001a70:	f8d6 c004 	ldr.w	ip, [r6, #4]
	if (spi_context_configured(&data->ctx, config)) {
 8001a74:	4598      	cmp	r8, r3
 8001a76:	f000 80a1 	beq.w	8001bbc <spi_stm32_transceive+0x1a0>
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8001a7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	SPI_TypeDef *spi = cfg->spi;
 8001a7e:	f8dc 7000 	ldr.w	r7, [ip]
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8001a82:	f3c3 1245 	ubfx	r2, r3, #5, #6
 8001a86:	2a08      	cmp	r2, #8
 8001a88:	d018      	beq.n	8001abc <spi_stm32_transceive+0xa0>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 8001a8a:	2a10      	cmp	r2, #16
 8001a8c:	d016      	beq.n	8001abc <spi_stm32_transceive+0xa0>
		return -ENOTSUP;
 8001a8e:	f06f 0985 	mvn.w	r9, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 8001a92:	6823      	ldr	r3, [r4, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 8001a9a:	d104      	bne.n	8001aa6 <spi_stm32_transceive+0x8a>
		ctx->owner = NULL;
 8001a9c:	6063      	str	r3, [r4, #4]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8001a9e:	f104 0010 	add.w	r0, r4, #16
 8001aa2:	f001 fb51 	bl	8003148 <z_impl_k_sem_give>
}
 8001aa6:	4648      	mov	r0, r9
 8001aa8:	b00d      	add	sp, #52	; 0x34
 8001aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8001aae:	69a3      	ldr	r3, [r4, #24]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1c5      	bne.n	8001a40 <spi_stm32_transceive+0x24>
		(k_sem_count_get(&ctx->lock) == 0) &&
 8001ab4:	6863      	ldr	r3, [r4, #4]
 8001ab6:	4598      	cmp	r8, r3
 8001ab8:	d1c2      	bne.n	8001a40 <spi_stm32_transceive+0x24>
 8001aba:	e7cb      	b.n	8001a54 <spi_stm32_transceive+0x38>
	if ((config->operation & SPI_FRAME_FORMAT_TI) == SPI_FRAME_FORMAT_TI) {
 8001abc:	0418      	lsls	r0, r3, #16
 8001abe:	d4e6      	bmi.n	8001a8e <spi_stm32_transceive+0x72>
	const struct clock_control_driver_api *api =
 8001ac0:	4819      	ldr	r0, [pc, #100]	; (8001b28 <spi_stm32_transceive+0x10c>)
					   (clock_control_subsys_t) &cfg->pclken[0], &clock) < 0) {
 8001ac2:	f8dc 100c 	ldr.w	r1, [ip, #12]
	if (api->get_rate == NULL) {
 8001ac6:	6883      	ldr	r3, [r0, #8]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	b913      	cbnz	r3, 8001ad2 <spi_stm32_transceive+0xb6>
			return -EIO;
 8001acc:	f06f 0904 	mvn.w	r9, #4
 8001ad0:	e7df      	b.n	8001a92 <spi_stm32_transceive+0x76>
	return api->get_rate(dev, sys, rate);
 8001ad2:	aa03      	add	r2, sp, #12
 8001ad4:	4798      	blx	r3
		if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8001ad6:	2800      	cmp	r0, #0
 8001ad8:	dbf8      	blt.n	8001acc <spi_stm32_transceive+0xb0>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8001ada:	2301      	movs	r3, #1
		uint32_t clk = clock >> br;
 8001adc:	9a03      	ldr	r2, [sp, #12]
		if (clk <= config->frequency) {
 8001ade:	f8d8 1000 	ldr.w	r1, [r8]
		uint32_t clk = clock >> br;
 8001ae2:	fa22 f003 	lsr.w	r0, r2, r3
		if (clk <= config->frequency) {
 8001ae6:	4288      	cmp	r0, r1
 8001ae8:	d905      	bls.n	8001af6 <spi_stm32_transceive+0xda>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8001aea:	3301      	adds	r3, #1
 8001aec:	2b09      	cmp	r3, #9
 8001aee:	d1f8      	bne.n	8001ae2 <spi_stm32_transceive+0xc6>
		return -EINVAL;
 8001af0:	f06f 0915 	mvn.w	r9, #21
 8001af4:	e7cd      	b.n	8001a92 <spi_stm32_transceive+0x76>
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001af6:	683a      	ldr	r2, [r7, #0]
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 8001af8:	a90c      	add	r1, sp, #48	; 0x30
 8001afa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001afe:	603a      	str	r2, [r7, #0]
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001b06:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001b0a:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	603b      	str	r3, [r7, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 8001b12:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001b16:	0799      	lsls	r1, r3, #30
 8001b18:	d408      	bmi.n	8001b2c <spi_stm32_transceive+0x110>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f023 0302 	bic.w	r3, r3, #2
 8001b20:	e007      	b.n	8001b32 <spi_stm32_transceive+0x116>
 8001b22:	bf00      	nop
 8001b24:	08005060 	.word	0x08005060
 8001b28:	08004cdc 	.word	0x08004cdc
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	f043 0302 	orr.w	r3, r3, #2
 8001b32:	603b      	str	r3, [r7, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 8001b34:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001b38:	f013 0f04 	tst.w	r3, #4
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	bf14      	ite	ne
 8001b40:	f043 0301 	orrne.w	r3, r3, #1
 8001b44:	f023 0301 	biceq.w	r3, r3, #1
 8001b48:	603b      	str	r3, [r7, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	f423 4344 	bic.w	r3, r3, #50176	; 0xc400
 8001b50:	603b      	str	r3, [r7, #0]
	if (config->operation & SPI_TRANSFER_LSB) {
 8001b52:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001b56:	f013 0f10 	tst.w	r3, #16
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	bf14      	ite	ne
 8001b5e:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
 8001b62:	f023 0380 	biceq.w	r3, r3, #128	; 0x80
 8001b66:	603b      	str	r3, [r7, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b6e:	603b      	str	r3, [r7, #0]
	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 8001b70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 80d5 	beq.w	8001d24 <spi_stm32_transceive+0x308>
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b80:	603b      	str	r3, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f023 0304 	bic.w	r3, r3, #4
 8001b88:	607b      	str	r3, [r7, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 8001b8a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001b8e:	f013 0f01 	tst.w	r3, #1
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	bf14      	ite	ne
 8001b96:	f423 7382 	bicne.w	r3, r3, #260	; 0x104
 8001b9a:	f443 7382 	orreq.w	r3, r3, #260	; 0x104
 8001b9e:	603b      	str	r3, [r7, #0]
	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 8001ba0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001ba4:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8001ba8:	2b08      	cmp	r3, #8
  MODIFY_REG(SPIx->CR1, SPI_CR1_DFF, DataWidth);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	bf0c      	ite	eq
 8001bae:	f423 6300 	biceq.w	r3, r3, #2048	; 0x800
 8001bb2:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 8001bb6:	603b      	str	r3, [r7, #0]
	data->ctx.config = config;
 8001bb8:	f8cb 8000 	str.w	r8, [fp]
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 8001bbc:	f1ba 0f00 	cmp.w	sl, #0
 8001bc0:	f040 80c0 	bne.w	8001d44 <spi_stm32_transceive+0x328>
 8001bc4:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	63a3      	str	r3, [r4, #56]	; 0x38
	ctx->tx_buf = (const uint8_t *)
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 8001bcc:	f104 0738 	add.w	r7, r4, #56	; 0x38
 8001bd0:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8001bd4:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	4642      	mov	r2, r8
 8001bdc:	2301      	movs	r3, #1
 8001bde:	4639      	mov	r1, r7
 8001be0:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8001be4:	f002 fa9a 	bl	800411c <spi_context_get_next_buf>
	ctx->tx_buf = (const uint8_t *)
 8001be8:	6460      	str	r0, [r4, #68]	; 0x44
					 &ctx->tx_len, dfs);

	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8001bea:	f1b9 0f00 	cmp.w	r9, #0
 8001bee:	f040 80b2 	bne.w	8001d56 <spi_stm32_transceive+0x33a>
 8001bf2:	f8c4 903c 	str.w	r9, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8001bf6:	2300      	movs	r3, #0
	ctx->rx_buf = (uint8_t *)
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 8001bf8:	f104 093c 	add.w	r9, r4, #60	; 0x3c
 8001bfc:	f104 0a40 	add.w	sl, r4, #64	; 0x40
 8001c00:	f104 0b50 	add.w	fp, r4, #80	; 0x50
 8001c04:	465a      	mov	r2, fp
 8001c06:	4651      	mov	r1, sl
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8001c08:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 8001c0a:	4648      	mov	r0, r9
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	f002 fa85 	bl	800411c <spi_context_get_next_buf>
					 &ctx->rx_len, dfs);

	ctx->sync_status = 0;
 8001c12:	2200      	movs	r2, #0
	ctx->rx_buf = (uint8_t *)
 8001c14:	64e0      	str	r0, [r4, #76]	; 0x4c
	ctx->sync_status = 0;
 8001c16:	6322      	str	r2, [r4, #48]	; 0x30
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001c18:	682b      	ldr	r3, [r5, #0]
	_spi_context_cs_control(ctx, on, false);
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c20:	602b      	str	r3, [r5, #0]
 8001c22:	6930      	ldr	r0, [r6, #16]
 8001c24:	f002 faa4 	bl	8004170 <_spi_context_cs_control>
	uint16_t operation = data->ctx.config->operation;
 8001c28:	6823      	ldr	r3, [r4, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 8001c2c:	07da      	lsls	r2, r3, #31
 8001c2e:	f100 80d2 	bmi.w	8001dd6 <spi_stm32_transceive+0x3ba>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001c32:	68aa      	ldr	r2, [r5, #8]
 8001c34:	0790      	lsls	r0, r2, #30
 8001c36:	d5fc      	bpl.n	8001c32 <spi_stm32_transceive+0x216>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8001c38:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8001c3c:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8001c3e:	6c62      	ldr	r2, [r4, #68]	; 0x44
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8001c40:	f040 809a 	bne.w	8001d78 <spi_stm32_transceive+0x35c>
}

static ALWAYS_INLINE
bool spi_context_tx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->tx_buf && ctx->tx_len);
 8001c44:	2a00      	cmp	r2, #0
 8001c46:	f000 808f 	beq.w	8001d68 <spi_stm32_transceive+0x34c>
 8001c4a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001c4c:	b103      	cbz	r3, 8001c50 <spi_stm32_transceive+0x234>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8001c4e:	7813      	ldrb	r3, [r2, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 8001c50:	b2db      	uxtb	r3, r3
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 8001c52:	732b      	strb	r3, [r5, #12]
	if (!ctx->tx_len) {
 8001c54:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001c56:	b18b      	cbz	r3, 8001c7c <spi_stm32_transceive+0x260>
	ctx->tx_len -= len;
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f040 8085 	bne.w	8001d6c <spi_stm32_transceive+0x350>
		++ctx->current_tx;
 8001c62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c64:	3308      	adds	r3, #8
 8001c66:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
 8001c68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
 8001c6e:	2301      	movs	r3, #1
 8001c70:	4642      	mov	r2, r8
 8001c72:	4639      	mov	r1, r7
 8001c74:	9801      	ldr	r0, [sp, #4]
 8001c76:	f002 fa51 	bl	800411c <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 8001c7a:	6460      	str	r0, [r4, #68]	; 0x44
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001c7c:	68ab      	ldr	r3, [r5, #8]
 8001c7e:	07d9      	lsls	r1, r3, #31
 8001c80:	d5fc      	bpl.n	8001c7c <spi_stm32_transceive+0x260>
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 8001c82:	e9d4 3113 	ldrd	r3, r1, [r4, #76]	; 0x4c
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8001c86:	6822      	ldr	r2, [r4, #0]
 8001c88:	6852      	ldr	r2, [r2, #4]
 8001c8a:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8001c8e:	2a08      	cmp	r2, #8
 8001c90:	f040 808e 	bne.w	8001db0 <spi_stm32_transceive+0x394>
  return (*((__IO uint8_t *)&SPIx->DR));
 8001c94:	7b2a      	ldrb	r2, [r5, #12]
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	b10b      	cbz	r3, 8001c9e <spi_stm32_transceive+0x282>
 8001c9a:	b101      	cbz	r1, 8001c9e <spi_stm32_transceive+0x282>
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 8001c9c:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 8001c9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001ca0:	b18b      	cbz	r3, 8001cc6 <spi_stm32_transceive+0x2aa>
	ctx->rx_len -= len;
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f040 80e8 	bne.w	8001e7c <spi_stm32_transceive+0x460>
		++ctx->current_rx;
 8001cac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001cae:	3308      	adds	r3, #8
 8001cb0:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
 8001cb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
 8001cb8:	2301      	movs	r3, #1
 8001cba:	465a      	mov	r2, fp
 8001cbc:	4651      	mov	r1, sl
 8001cbe:	4648      	mov	r0, r9
 8001cc0:	f002 fa2c 	bl	800411c <spi_context_get_next_buf>
		ctx->rx_buf = (uint8_t *)
 8001cc4:	64e0      	str	r0, [r4, #76]	; 0x4c
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 8001cc6:	68ab      	ldr	r3, [r5, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 8001cc8:	f013 0f70 	tst.w	r3, #112	; 0x70
 8001ccc:	f000 80e5 	beq.w	8001e9a <spi_stm32_transceive+0x47e>
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8001cd0:	68ab      	ldr	r3, [r5, #8]
 8001cd2:	0659      	lsls	r1, r3, #25
 8001cd4:	d505      	bpl.n	8001ce2 <spi_stm32_transceive+0x2c6>
  tmpreg = SPIx->DR;
 8001cd6:	68eb      	ldr	r3, [r5, #12]
 8001cd8:	9303      	str	r3, [sp, #12]
  (void) tmpreg;
 8001cda:	9b03      	ldr	r3, [sp, #12]
  tmpreg = SPIx->SR;
 8001cdc:	68ab      	ldr	r3, [r5, #8]
 8001cde:	9303      	str	r3, [sp, #12]
  (void) tmpreg;
 8001ce0:	9b03      	ldr	r3, [sp, #12]
		return -EIO;
 8001ce2:	f06f 0904 	mvn.w	r9, #4
	_spi_context_cs_control(ctx, on, false);
 8001ce6:	2200      	movs	r2, #0
	SPI_TypeDef *spi = cfg->spi;
 8001ce8:	6873      	ldr	r3, [r6, #4]
 8001cea:	4611      	mov	r1, r2
 8001cec:	681d      	ldr	r5, [r3, #0]
 8001cee:	6930      	ldr	r0, [r6, #16]
 8001cf0:	f002 fa3e 	bl	8004170 <_spi_context_cs_control>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 8001cf4:	682b      	ldr	r3, [r5, #0]
 8001cf6:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 8001cfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cfe:	d102      	bne.n	8001d06 <spi_stm32_transceive+0x2ea>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8001d00:	68ab      	ldr	r3, [r5, #8]
 8001d02:	061a      	lsls	r2, r3, #24
 8001d04:	d4fc      	bmi.n	8001d00 <spi_stm32_transceive+0x2e4>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 8001d06:	68ab      	ldr	r3, [r5, #8]
 8001d08:	069b      	lsls	r3, r3, #26
 8001d0a:	d506      	bpl.n	8001d1a <spi_stm32_transceive+0x2fe>
  tmpreg_sr = SPIx->SR;
 8001d0c:	68ab      	ldr	r3, [r5, #8]
 8001d0e:	9304      	str	r3, [sp, #16]
  (void) tmpreg_sr;
 8001d10:	9b04      	ldr	r3, [sp, #16]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001d12:	682b      	ldr	r3, [r5, #0]
 8001d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d18:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001d1a:	682b      	ldr	r3, [r5, #0]
 8001d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d20:	602b      	str	r3, [r5, #0]
}
 8001d22:	e6b6      	b.n	8001a92 <spi_stm32_transceive+0x76>
		if (config->operation & SPI_OP_MODE_SLAVE) {
 8001d24:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001d28:	f013 0f01 	tst.w	r3, #1
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d32:	f47f af25 	bne.w	8001b80 <spi_stm32_transceive+0x164>
 8001d36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d3a:	603b      	str	r3, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f043 0304 	orr.w	r3, r3, #4
 8001d42:	e721      	b.n	8001b88 <spi_stm32_transceive+0x16c>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 8001d44:	f8da 3000 	ldr.w	r3, [sl]
 8001d48:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f43f af3c 	beq.w	8001bc8 <spi_stm32_transceive+0x1ac>
 8001d50:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001d54:	e739      	b.n	8001bca <spi_stm32_transceive+0x1ae>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8001d56:	f8d9 3000 	ldr.w	r3, [r9]
 8001d5a:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f43f af4a 	beq.w	8001bf6 <spi_stm32_transceive+0x1da>
 8001d62:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001d66:	e747      	b.n	8001bf8 <spi_stm32_transceive+0x1dc>
	uint16_t tx_frame = SPI_STM32_TX_NOP;
 8001d68:	4613      	mov	r3, r2
 8001d6a:	e771      	b.n	8001c50 <spi_stm32_transceive+0x234>
	} else if (ctx->tx_buf) {
 8001d6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d084      	beq.n	8001c7c <spi_stm32_transceive+0x260>
		ctx->tx_buf += dfs * len;
 8001d72:	3301      	adds	r3, #1
 8001d74:	6463      	str	r3, [r4, #68]	; 0x44
 8001d76:	e781      	b.n	8001c7c <spi_stm32_transceive+0x260>
	return !!(ctx->tx_buf && ctx->tx_len);
 8001d78:	b192      	cbz	r2, 8001da0 <spi_stm32_transceive+0x384>
 8001d7a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001d7c:	b103      	cbz	r3, 8001d80 <spi_stm32_transceive+0x364>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 8001d7e:	8813      	ldrh	r3, [r2, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 8001d80:	81ab      	strh	r3, [r5, #12]
	if (!ctx->tx_len) {
 8001d82:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f43f af79 	beq.w	8001c7c <spi_stm32_transceive+0x260>
	ctx->tx_len -= len;
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
 8001d8e:	b94b      	cbnz	r3, 8001da4 <spi_stm32_transceive+0x388>
		++ctx->current_tx;
 8001d90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d92:	3308      	adds	r3, #8
 8001d94:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
 8001d96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e767      	b.n	8001c70 <spi_stm32_transceive+0x254>
	uint16_t tx_frame = SPI_STM32_TX_NOP;
 8001da0:	4613      	mov	r3, r2
 8001da2:	e7ed      	b.n	8001d80 <spi_stm32_transceive+0x364>
	} else if (ctx->tx_buf) {
 8001da4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f43f af68 	beq.w	8001c7c <spi_stm32_transceive+0x260>
		ctx->tx_buf += dfs * len;
 8001dac:	3302      	adds	r3, #2
 8001dae:	e7e1      	b.n	8001d74 <spi_stm32_transceive+0x358>
  return (uint16_t)(READ_REG(SPIx->DR));
 8001db0:	68ea      	ldr	r2, [r5, #12]
	return !!(ctx->rx_buf && ctx->rx_len);
 8001db2:	b10b      	cbz	r3, 8001db8 <spi_stm32_transceive+0x39c>
 8001db4:	b101      	cbz	r1, 8001db8 <spi_stm32_transceive+0x39c>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 8001db6:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 8001db8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d083      	beq.n	8001cc6 <spi_stm32_transceive+0x2aa>
	ctx->rx_len -= len;
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d163      	bne.n	8001e8e <spi_stm32_transceive+0x472>
		++ctx->current_rx;
 8001dc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001dc8:	3308      	adds	r3, #8
 8001dca:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
 8001dcc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e771      	b.n	8001cba <spi_stm32_transceive+0x29e>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001dd6:	68aa      	ldr	r2, [r5, #8]
 8001dd8:	0792      	lsls	r2, r2, #30
 8001dda:	d54a      	bpl.n	8001e72 <spi_stm32_transceive+0x456>
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 8001ddc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001dde:	2a00      	cmp	r2, #0
 8001de0:	d047      	beq.n	8001e72 <spi_stm32_transceive+0x456>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8001de2:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8001de6:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8001de8:	6c62      	ldr	r2, [r4, #68]	; 0x44
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8001dea:	d12d      	bne.n	8001e48 <spi_stm32_transceive+0x42c>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8001dec:	7813      	ldrb	r3, [r2, #0]
  *spidr = TxData;
 8001dee:	732b      	strb	r3, [r5, #12]
	if (!ctx->tx_len) {
 8001df0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001df2:	b17b      	cbz	r3, 8001e14 <spi_stm32_transceive+0x3f8>
	ctx->tx_len -= len;
 8001df4:	3b01      	subs	r3, #1
 8001df6:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
 8001df8:	bb03      	cbnz	r3, 8001e3c <spi_stm32_transceive+0x420>
		++ctx->current_tx;
 8001dfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001dfc:	3308      	adds	r3, #8
 8001dfe:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
 8001e00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e02:	3b01      	subs	r3, #1
 8001e04:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
 8001e06:	2301      	movs	r3, #1
 8001e08:	4642      	mov	r2, r8
 8001e0a:	4639      	mov	r1, r7
 8001e0c:	9801      	ldr	r0, [sp, #4]
 8001e0e:	f002 f985 	bl	800411c <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 8001e12:	6460      	str	r0, [r4, #68]	; 0x44
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001e14:	68ab      	ldr	r3, [r5, #8]
 8001e16:	07d8      	lsls	r0, r3, #31
 8001e18:	f57f af55 	bpl.w	8001cc6 <spi_stm32_transceive+0x2aa>
	return !!(ctx->rx_buf && ctx->rx_len);
 8001e1c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f43f af51 	beq.w	8001cc6 <spi_stm32_transceive+0x2aa>
 8001e24:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001e26:	2a00      	cmp	r2, #0
 8001e28:	f43f af4d 	beq.w	8001cc6 <spi_stm32_transceive+0x2aa>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8001e2c:	6822      	ldr	r2, [r4, #0]
 8001e2e:	6852      	ldr	r2, [r2, #4]
 8001e30:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8001e34:	2a08      	cmp	r2, #8
 8001e36:	d128      	bne.n	8001e8a <spi_stm32_transceive+0x46e>
  return (*((__IO uint8_t *)&SPIx->DR));
 8001e38:	7b2a      	ldrb	r2, [r5, #12]
 8001e3a:	e72f      	b.n	8001c9c <spi_stm32_transceive+0x280>
	} else if (ctx->tx_buf) {
 8001e3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0e8      	beq.n	8001e14 <spi_stm32_transceive+0x3f8>
		ctx->tx_buf += dfs * len;
 8001e42:	3301      	adds	r3, #1
 8001e44:	6463      	str	r3, [r4, #68]	; 0x44
 8001e46:	e7e5      	b.n	8001e14 <spi_stm32_transceive+0x3f8>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 8001e48:	8813      	ldrh	r3, [r2, #0]
  *spidr = TxData;
 8001e4a:	81ab      	strh	r3, [r5, #12]
	if (!ctx->tx_len) {
 8001e4c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0e0      	beq.n	8001e14 <spi_stm32_transceive+0x3f8>
	ctx->tx_len -= len;
 8001e52:	3b01      	subs	r3, #1
 8001e54:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
 8001e56:	b93b      	cbnz	r3, 8001e68 <spi_stm32_transceive+0x44c>
		++ctx->current_tx;
 8001e58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e5a:	3308      	adds	r3, #8
 8001e5c:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
 8001e5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e60:	3b01      	subs	r3, #1
 8001e62:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
 8001e64:	2302      	movs	r3, #2
 8001e66:	e7cf      	b.n	8001e08 <spi_stm32_transceive+0x3ec>
	} else if (ctx->tx_buf) {
 8001e68:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0d2      	beq.n	8001e14 <spi_stm32_transceive+0x3f8>
		ctx->tx_buf += dfs * len;
 8001e6e:	3302      	adds	r3, #2
 8001e70:	e7e8      	b.n	8001e44 <spi_stm32_transceive+0x428>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8001e72:	686b      	ldr	r3, [r5, #4]
 8001e74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e78:	606b      	str	r3, [r5, #4]
#if DT_HAS_COMPAT_STATUS_OKAY(st_stm32h7_spi)
	LL_SPI_DisableIT_TXP(spi);
#else
	LL_SPI_DisableIT_TXE(spi);
#endif /* st_stm32h7_spi */
}
 8001e7a:	e7cb      	b.n	8001e14 <spi_stm32_transceive+0x3f8>
	} else if (ctx->rx_buf) {
 8001e7c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f43f af21 	beq.w	8001cc6 <spi_stm32_transceive+0x2aa>
		ctx->rx_buf += dfs * len;
 8001e84:	3301      	adds	r3, #1
 8001e86:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001e88:	e71d      	b.n	8001cc6 <spi_stm32_transceive+0x2aa>
  return (uint16_t)(READ_REG(SPIx->DR));
 8001e8a:	68ea      	ldr	r2, [r5, #12]
 8001e8c:	e793      	b.n	8001db6 <spi_stm32_transceive+0x39a>
	} else if (ctx->rx_buf) {
 8001e8e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f43f af18 	beq.w	8001cc6 <spi_stm32_transceive+0x2aa>
		ctx->rx_buf += dfs * len;
 8001e96:	3302      	adds	r3, #2
 8001e98:	e7f5      	b.n	8001e86 <spi_stm32_transceive+0x46a>
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 8001e9a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f47f aec3 	bne.w	8001c28 <spi_stm32_transceive+0x20c>
 8001ea2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f47f aebf 	bne.w	8001c28 <spi_stm32_transceive+0x20c>
		ret = spi_stm32_shift_frames(spi, data);
 8001eaa:	4699      	mov	r9, r3
 8001eac:	e71b      	b.n	8001ce6 <spi_stm32_transceive+0x2ca>
 8001eae:	bf00      	nop

08001eb0 <z_impl_can_calc_timing>:
	return sp_err_min == UINT16_MAX ? -ENOTSUP : (int)sp_err_min;
}

int z_impl_can_calc_timing(const struct device *dev, struct can_timing *res,
			   uint32_t bitrate, uint16_t sample_pnt)
{
 8001eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eb4:	4689      	mov	r9, r1
 8001eb6:	4690      	mov	r8, r2
 8001eb8:	469a      	mov	sl, r3
 8001eba:	b087      	sub	sp, #28
 */
__syscall const struct can_timing *can_get_timing_min(const struct device *dev);

static inline const struct can_timing *z_impl_can_get_timing_min(const struct device *dev)
{
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
 8001ebc:	6883      	ldr	r3, [r0, #8]
 8001ebe:	9301      	str	r3, [sp, #4]
	const struct can_timing *min = can_get_timing_min(dev);
	const struct can_timing *max = can_get_timing_max(dev);
	uint32_t core_clock;
	int ret;

	if (bitrate > 1000000) {
 8001ec0:	4b53      	ldr	r3, [pc, #332]	; (8002010 <z_impl_can_calc_timing+0x160>)
 */
__syscall const struct can_timing *can_get_timing_max(const struct device *dev);

static inline const struct can_timing *z_impl_can_get_timing_max(const struct device *dev)
{
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
 8001ec2:	6887      	ldr	r7, [r0, #8]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	f200 809f 	bhi.w	8002008 <z_impl_can_calc_timing+0x158>
	return api->get_core_clock(dev, rate);
 8001eca:	6883      	ldr	r3, [r0, #8]
 8001ecc:	a905      	add	r1, sp, #20
 8001ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed0:	4798      	blx	r3
		return -EINVAL;
	}

	ret = can_get_core_clock(dev, &core_clock);
	if (ret != 0) {
 8001ed2:	2800      	cmp	r0, #0
 8001ed4:	f040 8093 	bne.w	8001ffe <z_impl_can_calc_timing+0x14e>
		return ret;
	}

	return can_calc_timing_int(core_clock, res, min, max, bitrate, sample_pnt);
 8001ed8:	9b05      	ldr	r3, [sp, #20]
	uint32_t ts = max->prop_seg + max->phase_seg1 + max->phase_seg2 +
 8001eda:	f8b7 4040 	ldrh.w	r4, [r7, #64]	; 0x40
	return can_calc_timing_int(core_clock, res, min, max, bitrate, sample_pnt);
 8001ede:	9300      	str	r3, [sp, #0]
	uint32_t ts = max->prop_seg + max->phase_seg1 + max->phase_seg2 +
 8001ee0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001ee4:	441c      	add	r4, r3
 8001ee6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001eea:	441c      	add	r4, r3
 8001eec:	3401      	adds	r4, #1
	if (bitrate == 0 || sp >= 1000) {
 8001eee:	f1b8 0f00 	cmp.w	r8, #0
 8001ef2:	f000 8089 	beq.w	8002008 <z_impl_can_calc_timing+0x158>
 8001ef6:	f5ba 7f7a 	cmp.w	sl, #1000	; 0x3e8
 8001efa:	f080 8085 	bcs.w	8002008 <z_impl_can_calc_timing+0x158>
	for (int prescaler = MAX(core_clock / (ts * bitrate), 1);
 8001efe:	fb04 f408 	mul.w	r4, r4, r8
 8001f02:	9b00      	ldr	r3, [sp, #0]
	uint16_t sp_err_min = UINT16_MAX;
 8001f04:	f64f 70ff 	movw	r0, #65535	; 0xffff
	for (int prescaler = MAX(core_clock / (ts * bitrate), 1);
 8001f08:	fbb3 f4f4 	udiv	r4, r3, r4
 8001f0c:	2c01      	cmp	r4, #1
 8001f0e:	bf38      	it	cc
 8001f10:	2401      	movcc	r4, #1
 8001f12:	fb04 f108 	mul.w	r1, r4, r8
	     prescaler <= max->prescaler; ++prescaler) {
 8001f16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001f1a:	429c      	cmp	r4, r3
 8001f1c:	dd06      	ble.n	8001f2c <z_impl_can_calc_timing+0x7c>
	return sp_err_min == UINT16_MAX ? -ENOTSUP : (int)sp_err_min;
 8001f1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f22:	4298      	cmp	r0, r3
 8001f24:	d16b      	bne.n	8001ffe <z_impl_can_calc_timing+0x14e>
 8001f26:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return can_calc_timing_int(core_clock, res, min, max, bitrate, sample_pnt);
 8001f2a:	e068      	b.n	8001ffe <z_impl_can_calc_timing+0x14e>
		if (core_clock % (prescaler * bitrate)) {
 8001f2c:	9b00      	ldr	r3, [sp, #0]
 8001f2e:	fbb3 fef1 	udiv	lr, r3, r1
 8001f32:	fb01 331e 	mls	r3, r1, lr, r3
 8001f36:	bb83      	cbnz	r3, 8001f9a <z_impl_can_calc_timing+0xea>
	ts2 = ts - (ts * sp) / 1000;
 8001f38:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001f3c:	fb0a fc0e 	mul.w	ip, sl, lr
 8001f40:	fbbc fcf6 	udiv	ip, ip, r6
	uint16_t ts1_max = max->phase_seg1 + max->prop_seg;
 8001f44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f48:	f8b7 5042 	ldrh.w	r5, [r7, #66]	; 0x42
 8001f4c:	9302      	str	r3, [sp, #8]
 8001f4e:	441d      	add	r5, r3
	uint16_t ts1_min = min->phase_seg1 + min->prop_seg;
 8001f50:	9b01      	ldr	r3, [sp, #4]
	ts2 = CLAMP(ts2, min->phase_seg2, max->phase_seg2);
 8001f52:	9e01      	ldr	r6, [sp, #4]
	uint16_t ts1_min = min->phase_seg1 + min->prop_seg;
 8001f54:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
	ts2 = CLAMP(ts2, min->phase_seg2, max->phase_seg2);
 8001f56:	f8b6 b03a 	ldrh.w	fp, [r6, #58]	; 0x3a
	uint16_t ts1_min = min->phase_seg1 + min->prop_seg;
 8001f5a:	9303      	str	r3, [sp, #12]
 8001f5c:	9b01      	ldr	r3, [sp, #4]
	uint16_t ts1_max = max->phase_seg1 + max->prop_seg;
 8001f5e:	b2ad      	uxth	r5, r5
	uint16_t ts1_min = min->phase_seg1 + min->prop_seg;
 8001f60:	8eda      	ldrh	r2, [r3, #54]	; 0x36
	ts2 = ts - (ts * sp) / 1000;
 8001f62:	fa1f f38e 	uxth.w	r3, lr
 8001f66:	eba3 0c0c 	sub.w	ip, r3, ip
 8001f6a:	fa1f fc8c 	uxth.w	ip, ip
	ts2 = CLAMP(ts2, min->phase_seg2, max->phase_seg2);
 8001f6e:	45dc      	cmp	ip, fp
 8001f70:	d916      	bls.n	8001fa0 <z_impl_can_calc_timing+0xf0>
 8001f72:	f8b7 6044 	ldrh.w	r6, [r7, #68]	; 0x44
 8001f76:	4566      	cmp	r6, ip
 8001f78:	bf28      	it	cs
 8001f7a:	4666      	movcs	r6, ip
	ts1 = ts - CAN_SYNC_SEG - ts2;
 8001f7c:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 8001f80:	ebac 0c06 	sub.w	ip, ip, r6
 8001f84:	fa1f fc8c 	uxth.w	ip, ip
	if (ts1 > ts1_max) {
 8001f88:	4565      	cmp	r5, ip
 8001f8a:	d20b      	bcs.n	8001fa4 <z_impl_can_calc_timing+0xf4>
		ts2 = ts - CAN_SYNC_SEG - ts1;
 8001f8c:	1b5e      	subs	r6, r3, r5
 8001f8e:	3e01      	subs	r6, #1
		if (ts2 > max->phase_seg2) {
 8001f90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
		ts2 = ts - CAN_SYNC_SEG - ts1;
 8001f94:	b2b6      	uxth	r6, r6
		if (ts2 > max->phase_seg2) {
 8001f96:	42b3      	cmp	r3, r6
 8001f98:	d20d      	bcs.n	8001fb6 <z_impl_can_calc_timing+0x106>
	     prescaler <= max->prescaler; ++prescaler) {
 8001f9a:	3401      	adds	r4, #1
 8001f9c:	4441      	add	r1, r8
 8001f9e:	e7ba      	b.n	8001f16 <z_impl_can_calc_timing+0x66>
 8001fa0:	465e      	mov	r6, fp
 8001fa2:	e7eb      	b.n	8001f7c <z_impl_can_calc_timing+0xcc>
	uint16_t ts1_min = min->phase_seg1 + min->prop_seg;
 8001fa4:	9d03      	ldr	r5, [sp, #12]
 8001fa6:	4415      	add	r5, r2
 8001fa8:	b2ad      	uxth	r5, r5
	} else if (ts1 < ts1_min) {
 8001faa:	4565      	cmp	r5, ip
 8001fac:	d92a      	bls.n	8002004 <z_impl_can_calc_timing+0x154>
		ts2 = ts - ts1;
 8001fae:	1b5b      	subs	r3, r3, r5
 8001fb0:	b29e      	uxth	r6, r3
		if (ts2 < min->phase_seg2) {
 8001fb2:	45b3      	cmp	fp, r6
 8001fb4:	d8f1      	bhi.n	8001f9a <z_impl_can_calc_timing+0xea>
	res->prop_seg = CLAMP(ts1 / 2, min->prop_seg, max->prop_seg);
 8001fb6:	ebb2 0f55 	cmp.w	r2, r5, lsr #1
 8001fba:	ea4f 0355 	mov.w	r3, r5, lsr #1
 8001fbe:	d203      	bcs.n	8001fc8 <z_impl_can_calc_timing+0x118>
 8001fc0:	9a02      	ldr	r2, [sp, #8]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	bf28      	it	cs
 8001fc6:	461a      	movcs	r2, r3
	sp_calc = (CAN_SYNC_SEG + ts1) * 1000 / ts;
 8001fc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fcc:	fb05 3303 	mla	r3, r5, r3, r3
 8001fd0:	fbb3 f3fe 	udiv	r3, r3, lr
	return sp_calc > sp ? sp_calc - sp : sp - sp_calc;
 8001fd4:	459a      	cmp	sl, r3
 8001fd6:	bf34      	ite	cc
 8001fd8:	eba3 030a 	subcc.w	r3, r3, sl
 8001fdc:	ebaa 0303 	subcs.w	r3, sl, r3
		if (sp_err < sp_err_min) {
 8001fe0:	4298      	cmp	r0, r3
 8001fe2:	d9da      	bls.n	8001f9a <z_impl_can_calc_timing+0xea>
	res->phase_seg1 = ts1 - res->prop_seg;
 8001fe4:	1aad      	subs	r5, r5, r2
			sp_err_min = sp_err;
 8001fe6:	b298      	uxth	r0, r3
			res->prop_seg = tmp_res.prop_seg;
 8001fe8:	f8a9 2002 	strh.w	r2, [r9, #2]
			res->phase_seg1 = tmp_res.phase_seg1;
 8001fec:	f8a9 5004 	strh.w	r5, [r9, #4]
			res->phase_seg2 = tmp_res.phase_seg2;
 8001ff0:	f8a9 6006 	strh.w	r6, [r9, #6]
			res->prescaler = (uint16_t)prescaler;
 8001ff4:	f8a9 4008 	strh.w	r4, [r9, #8]
			if (sp_err == 0) {
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1ce      	bne.n	8001f9a <z_impl_can_calc_timing+0xea>
			sp_err_min = sp_err;
 8001ffc:	4618      	mov	r0, r3
}
 8001ffe:	b007      	add	sp, #28
 8002000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002004:	4665      	mov	r5, ip
 8002006:	e7d6      	b.n	8001fb6 <z_impl_can_calc_timing+0x106>
		return -EINVAL;
 8002008:	f06f 0015 	mvn.w	r0, #21
 800200c:	e7f7      	b.n	8001ffe <z_impl_can_calc_timing+0x14e>
 800200e:	bf00      	nop
 8002010:	000f4240 	.word	0x000f4240

08002014 <can_stm32_enter_init_mode>:
}

#endif

static int can_stm32_enter_init_mode(CAN_TypeDef *can)
{
 8002014:	b570      	push	{r4, r5, r6, lr}
	uint32_t start_time;

	can->MCR |= CAN_MCR_INRQ;
 8002016:	6803      	ldr	r3, [r0, #0]
{
 8002018:	4604      	mov	r4, r0
	can->MCR |= CAN_MCR_INRQ;
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6003      	str	r3, [r0, #0]
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 8002020:	f000 fc9c 	bl	800295c <sys_clock_cycle_get_32>
 8002024:	4605      	mov	r5, r0
	start_time = k_cycle_get_32();

	while ((can->MSR & CAN_MSR_INAK) == 0U) {
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 8002026:	4e09      	ldr	r6, [pc, #36]	; (800204c <can_stm32_enter_init_mode+0x38>)
	while ((can->MSR & CAN_MSR_INAK) == 0U) {
 8002028:	6863      	ldr	r3, [r4, #4]
 800202a:	07db      	lsls	r3, r3, #31
 800202c:	d501      	bpl.n	8002032 <can_stm32_enter_init_mode+0x1e>
			can->MCR &= ~CAN_MCR_INRQ;
			return -EAGAIN;
		}
	}

	return 0;
 800202e:	2000      	movs	r0, #0
 8002030:	e00a      	b.n	8002048 <can_stm32_enter_init_mode+0x34>
 8002032:	f000 fc93 	bl	800295c <sys_clock_cycle_get_32>
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 8002036:	1b40      	subs	r0, r0, r5
 8002038:	42b0      	cmp	r0, r6
 800203a:	d9f5      	bls.n	8002028 <can_stm32_enter_init_mode+0x14>
			return -EAGAIN;
 800203c:	f06f 000a 	mvn.w	r0, #10
			can->MCR &= ~CAN_MCR_INRQ;
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	f023 0301 	bic.w	r3, r3, #1
 8002046:	6023      	str	r3, [r4, #0]
}
 8002048:	bd70      	pop	{r4, r5, r6, pc}
 800204a:	bf00      	nop
 800204c:	000afc80 	.word	0x000afc80

08002050 <can_stm32_get_core_clock>:

	return 0;
}

static int can_stm32_get_core_clock(const struct device *dev, uint32_t *rate)
{
 8002050:	b508      	push	{r3, lr}
 8002052:	460a      	mov	r2, r1
	int ret;

	clock = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);

	ret = clock_control_get_rate(clock,
				     (clock_control_subsys_t *) &cfg->pclken,
 8002054:	6841      	ldr	r1, [r0, #4]
	const struct clock_control_driver_api *api =
 8002056:	4805      	ldr	r0, [pc, #20]	; (800206c <can_stm32_get_core_clock+0x1c>)
 8002058:	3114      	adds	r1, #20
	if (api->get_rate == NULL) {
 800205a:	6883      	ldr	r3, [r0, #8]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	b10b      	cbz	r3, 8002064 <can_stm32_get_core_clock+0x14>
	return api->get_rate(dev, sys, rate);
 8002060:	4798      	blx	r3
				     rate);
	if (ret != 0) {
 8002062:	b108      	cbz	r0, 8002068 <can_stm32_get_core_clock+0x18>
		LOG_ERR("Failed call clock_control_get_rate: return [%d]", ret);
		return -EIO;
 8002064:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
 8002068:	bd08      	pop	{r3, pc}
 800206a:	bf00      	nop
 800206c:	08004cdc 	.word	0x08004cdc

08002070 <can_stm32_set_timing>:
{
 8002070:	b570      	push	{r4, r5, r6, lr}
	CAN_TypeDef *can = cfg->can;
 8002072:	6843      	ldr	r3, [r0, #4]
	struct can_stm32_data *data = dev->data;
 8002074:	6905      	ldr	r5, [r0, #16]
	CAN_TypeDef *can = cfg->can;
 8002076:	681c      	ldr	r4, [r3, #0]
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 8002078:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800207c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002080:	4628      	mov	r0, r5
{
 8002082:	460e      	mov	r6, r1
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 8002084:	f002 fa44 	bl	8004510 <k_mutex_lock.constprop.0.isra.0>
	if (data->started) {
 8002088:	f895 30ed 	ldrb.w	r3, [r5, #237]	; 0xed
 800208c:	b12b      	cbz	r3, 800209a <can_stm32_set_timing+0x2a>
		k_mutex_unlock(&data->inst_mutex);
 800208e:	4628      	mov	r0, r5
 8002090:	f002 fa40 	bl	8004514 <k_mutex_unlock.isra.0>
		return -EBUSY;
 8002094:	f06f 000f 	mvn.w	r0, #15
}
 8002098:	bd70      	pop	{r4, r5, r6, pc}
	     (((timing->prescaler  - 1) << CAN_BTR_BRP_Pos) & CAN_BTR_BRP_Msk);
 800209a:	8933      	ldrh	r3, [r6, #8]
	can->BTR = (can->BTR & ~(CAN_BTR_BRP_Msk | CAN_BTR_TS1_Msk | CAN_BTR_TS2_Msk)) |
 800209c:	69e1      	ldr	r1, [r4, #28]
 800209e:	4a11      	ldr	r2, [pc, #68]	; (80020e4 <can_stm32_set_timing+0x74>)
	     (((timing->prescaler  - 1) << CAN_BTR_BRP_Pos) & CAN_BTR_BRP_Msk);
 80020a0:	3b01      	subs	r3, #1
	can->BTR = (can->BTR & ~(CAN_BTR_BRP_Msk | CAN_BTR_TS1_Msk | CAN_BTR_TS2_Msk)) |
 80020a2:	400a      	ands	r2, r1
	     (((timing->prescaler  - 1) << CAN_BTR_BRP_Pos) & CAN_BTR_BRP_Msk);
 80020a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
	     (((timing->phase_seg2 - 1) << CAN_BTR_TS2_Pos) & CAN_BTR_TS2_Msk) |
 80020a8:	4313      	orrs	r3, r2
	     (((timing->phase_seg1 - 1) << CAN_BTR_TS1_Pos) & CAN_BTR_TS1_Msk) |
 80020aa:	88b2      	ldrh	r2, [r6, #4]
 80020ac:	3a01      	subs	r2, #1
 80020ae:	0412      	lsls	r2, r2, #16
 80020b0:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
	     (((timing->phase_seg2 - 1) << CAN_BTR_TS2_Pos) & CAN_BTR_TS2_Msk) |
 80020b4:	4313      	orrs	r3, r2
 80020b6:	88f2      	ldrh	r2, [r6, #6]
 80020b8:	3a01      	subs	r2, #1
 80020ba:	0512      	lsls	r2, r2, #20
 80020bc:	f402 02e0 	and.w	r2, r2, #7340032	; 0x700000
 80020c0:	4313      	orrs	r3, r2
	can->BTR = (can->BTR & ~(CAN_BTR_BRP_Msk | CAN_BTR_TS1_Msk | CAN_BTR_TS2_Msk)) |
 80020c2:	61e3      	str	r3, [r4, #28]
	if (timing->sjw != CAN_SJW_NO_CHANGE) {
 80020c4:	8833      	ldrh	r3, [r6, #0]
 80020c6:	b143      	cbz	r3, 80020da <can_stm32_set_timing+0x6a>
		can->BTR = (can->BTR & ~CAN_BTR_SJW_Msk) |
 80020c8:	69e2      	ldr	r2, [r4, #28]
			   (((timing->sjw - 1) << CAN_BTR_SJW_Pos) & CAN_BTR_SJW_Msk);
 80020ca:	3b01      	subs	r3, #1
 80020cc:	061b      	lsls	r3, r3, #24
 80020ce:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
		can->BTR = (can->BTR & ~CAN_BTR_SJW_Msk) |
 80020d2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61e3      	str	r3, [r4, #28]
	k_mutex_unlock(&data->inst_mutex);
 80020da:	4628      	mov	r0, r5
 80020dc:	f002 fa1a 	bl	8004514 <k_mutex_unlock.isra.0>
	return 0;
 80020e0:	2000      	movs	r0, #0
 80020e2:	e7d9      	b.n	8002098 <can_stm32_set_timing+0x28>
 80020e4:	ff80fc00 	.word	0xff80fc00

080020e8 <can_stm32_add_rx_filter>:
 *
 * Currently, all filter banks are assigned to FIFO 0 and FIFO 1 is not used.
 */
static int can_stm32_add_rx_filter(const struct device *dev, can_rx_callback_t cb,
				   void *cb_arg, const struct can_filter *filter)
{
 80020e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020ec:	461d      	mov	r5, r3
	struct can_stm32_data *data = dev->data;
	int filter_id;

	if ((filter->flags & ~(CAN_FILTER_IDE | CAN_FILTER_DATA | CAN_FILTER_RTR)) != 0) {
 80020ee:	7a1b      	ldrb	r3, [r3, #8]
{
 80020f0:	4604      	mov	r4, r0
	if ((filter->flags & ~(CAN_FILTER_IDE | CAN_FILTER_DATA | CAN_FILTER_RTR)) != 0) {
 80020f2:	2b07      	cmp	r3, #7
{
 80020f4:	4688      	mov	r8, r1
 80020f6:	4617      	mov	r7, r2
	struct can_stm32_data *data = dev->data;
 80020f8:	6906      	ldr	r6, [r0, #16]
	if ((filter->flags & ~(CAN_FILTER_IDE | CAN_FILTER_DATA | CAN_FILTER_RTR)) != 0) {
 80020fa:	f200 80a1 	bhi.w	8002240 <can_stm32_add_rx_filter+0x158>
		LOG_ERR("unsupported CAN filter flags 0x%02x", filter->flags);
		return -ENOTSUP;
	}

	k_mutex_lock(&filter_mutex, K_FOREVER);
 80020fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002106:	4850      	ldr	r0, [pc, #320]	; (8002248 <can_stm32_add_rx_filter+0x160>)
 8002108:	f002 fa02 	bl	8004510 <k_mutex_lock.constprop.0.isra.0>
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 800210c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002114:	4630      	mov	r0, r6
 8002116:	f002 f9fb 	bl	8004510 <k_mutex_lock.constprop.0.isra.0>
	const struct can_stm32_config *cfg = dev->config;
 800211a:	6861      	ldr	r1, [r4, #4]
	if ((filter->flags & CAN_FILTER_IDE) != 0) {
 800211c:	f895 c008 	ldrb.w	ip, [r5, #8]
	if (cfg->can != cfg->master_can) {
 8002120:	c906      	ldmia	r1, {r1, r2}
		bank_offset = CAN_STM32_NUM_FILTER_BANKS;
 8002122:	428a      	cmp	r2, r1
 8002124:	bf14      	ite	ne
 8002126:	210e      	movne	r1, #14
 8002128:	2100      	moveq	r1, #0
	if ((filter->flags & CAN_FILTER_IDE) != 0) {
 800212a:	f01c 0e01 	ands.w	lr, ip, #1
	struct can_stm32_data *data = dev->data;
 800212e:	6923      	ldr	r3, [r4, #16]
	if ((filter->flags & CAN_FILTER_IDE) != 0) {
 8002130:	d055      	beq.n	80021de <can_stm32_add_rx_filter+0xf6>
		for (int i = 0; i < CONFIG_CAN_MAX_EXT_ID_FILTER; i++) {
 8002132:	2400      	movs	r4, #0
 8002134:	3370      	adds	r3, #112	; 0x70
			if (data->rx_cb_ext[i] == NULL) {
 8002136:	f853 0f04 	ldr.w	r0, [r3, #4]!
 800213a:	2800      	cmp	r0, #0
 800213c:	d141      	bne.n	80021c2 <can_stm32_add_rx_filter+0xda>
		(1U << CAN_STM32_FIRX_EXT_RTR_POS) : 0U) |
 800213e:	f00c 0302 	and.w	r3, ip, #2
		(CAN_FILTER_DATA | CAN_FILTER_RTR) ? 1U : 0U;
 8002142:	f00c 0c06 	and.w	ip, ip, #6
 8002146:	f1bc 0c06 	subs.w	ip, ip, #6
 800214a:	bf18      	it	ne
 800214c:	f04f 0c01 	movne.w	ip, #1
	return  (filter->id << CAN_STM32_FIRX_EXT_EXT_ID_POS) |
 8002150:	6828      	ldr	r0, [r5, #0]
				bank_num = bank_offset + i;
 8002152:	4421      	add	r1, r4
	return  (filter->id << CAN_STM32_FIRX_EXT_EXT_ID_POS) |
 8002154:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
	return  (filter->mask << CAN_STM32_FIRX_EXT_EXT_ID_POS) |
 8002158:	6868      	ldr	r0, [r5, #4]
		(1U << CAN_STM32_FIRX_EXT_RTR_POS) : 0U) |
 800215a:	f043 0304 	orr.w	r3, r3, #4
	return  (filter->mask << CAN_STM32_FIRX_EXT_EXT_ID_POS) |
 800215e:	00c0      	lsls	r0, r0, #3
 8002160:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
		(rtr_mask << CAN_STM32_FIRX_EXT_RTR_POS) |
 8002164:	f040 0004 	orr.w	r0, r0, #4
		can->FMR |= CAN_FMR_FINIT;
 8002168:	f8d2 c200 	ldr.w	ip, [r2, #512]	; 0x200
 800216c:	f04c 0c01 	orr.w	ip, ip, #1
 8002170:	f8c2 c200 	str.w	ip, [r2, #512]	; 0x200
		can_stm32_set_filter_bank(filter_id, &can->sFilterRegister[bank_num],
 8002174:	f895 c008 	ldrb.w	ip, [r5, #8]
	if (ide) {
 8002178:	f01c 0f01 	tst.w	ip, #1
 800217c:	d053      	beq.n	8002226 <can_stm32_add_rx_filter+0x13e>
		filter_reg->FR1 = id;
 800217e:	eb02 0cc1 	add.w	ip, r2, r1, lsl #3
 8002182:	f8cc 3240 	str.w	r3, [ip, #576]	; 0x240
		filter_reg->FR2 = mask;
 8002186:	f8cc 0244 	str.w	r0, [ip, #580]	; 0x244
		can->FA1R |= 1U << bank_num;
 800218a:	2301      	movs	r3, #1
 800218c:	f8d2 021c 	ldr.w	r0, [r2, #540]	; 0x21c
 8002190:	408b      	lsls	r3, r1
 8002192:	4303      	orrs	r3, r0
 8002194:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
		can->FMR &= ~(CAN_FMR_FINIT);
 8002198:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 800219c:	f023 0301 	bic.w	r3, r3, #1
 80021a0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	filter_id = can_stm32_set_filter(dev, filter);
	if (filter_id >= 0) {
		if ((filter->flags & CAN_FILTER_IDE) != 0) {
 80021a4:	7a2b      	ldrb	r3, [r5, #8]
 80021a6:	f013 0f01 	tst.w	r3, #1
 80021aa:	ea4f 0384 	mov.w	r3, r4, lsl #2
 80021ae:	4433      	add	r3, r6
			data->rx_cb_ext[filter_id] = cb;
 80021b0:	bf19      	ittee	ne
 80021b2:	f8c3 8074 	strne.w	r8, [r3, #116]	; 0x74
			data->cb_arg_ext[filter_id] = cb_arg;
 80021b6:	f8c3 70c8 	strne.w	r7, [r3, #200]	; 0xc8
		} else {
			data->rx_cb_std[filter_id - CONFIG_CAN_MAX_EXT_ID_FILTER] = cb;
 80021ba:	f8c3 8020 	streq.w	r8, [r3, #32]
			data->cb_arg_std[filter_id - CONFIG_CAN_MAX_EXT_ID_FILTER] = cb_arg;
 80021be:	675f      	streq	r7, [r3, #116]	; 0x74
 80021c0:	e004      	b.n	80021cc <can_stm32_add_rx_filter+0xe4>
		for (int i = 0; i < CONFIG_CAN_MAX_EXT_ID_FILTER; i++) {
 80021c2:	3401      	adds	r4, #1
 80021c4:	2c07      	cmp	r4, #7
 80021c6:	d1b6      	bne.n	8002136 <can_stm32_add_rx_filter+0x4e>
 80021c8:	f06f 041b 	mvn.w	r4, #27
		}
	}

	k_mutex_unlock(&data->inst_mutex);
 80021cc:	4630      	mov	r0, r6
 80021ce:	f002 f9a1 	bl	8004514 <k_mutex_unlock.isra.0>
	k_mutex_unlock(&filter_mutex);
 80021d2:	481d      	ldr	r0, [pc, #116]	; (8002248 <can_stm32_add_rx_filter+0x160>)
 80021d4:	f002 f99e 	bl	8004514 <k_mutex_unlock.isra.0>

	return filter_id;
}
 80021d8:	4620      	mov	r0, r4
 80021da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021de:	3338      	adds	r3, #56	; 0x38
			if (data->rx_cb_std[i] == NULL) {
 80021e0:	f853 0f04 	ldr.w	r0, [r3, #4]!
 80021e4:	b9c8      	cbnz	r0, 800221a <can_stm32_add_rx_filter+0x132>
		(((filter->flags & CAN_FILTER_RTR) != 0) ? (1U << CAN_STM32_FIRX_STD_RTR_POS) : 0U);
 80021e6:	ea4f 03cc 	mov.w	r3, ip, lsl #3
		(CAN_FILTER_DATA | CAN_FILTER_RTR) ? 1U : 0U;
 80021ea:	f00c 0c06 	and.w	ip, ip, #6
 80021ee:	f1bc 0c06 	subs.w	ip, ip, #6
 80021f2:	bf18      	it	ne
 80021f4:	f04f 0c01 	movne.w	ip, #1
	return  (filter->id  << CAN_STM32_FIRX_STD_ID_POS) |
 80021f8:	6828      	ldr	r0, [r5, #0]
		(((filter->flags & CAN_FILTER_RTR) != 0) ? (1U << CAN_STM32_FIRX_STD_RTR_POS) : 0U);
 80021fa:	f003 0310 	and.w	r3, r3, #16
	return  (filter->id  << CAN_STM32_FIRX_STD_ID_POS) |
 80021fe:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	return  (filter->mask << CAN_STM32_FIRX_STD_ID_POS) |
 8002202:	6868      	ldr	r0, [r5, #4]
				bank_num = bank_offset + CONFIG_CAN_MAX_EXT_ID_FILTER + i / 2;
 8002204:	3107      	adds	r1, #7
	return  (filter->mask << CAN_STM32_FIRX_STD_ID_POS) |
 8002206:	0140      	lsls	r0, r0, #5
 8002208:	ea40 100c 	orr.w	r0, r0, ip, lsl #4
		(rtr_mask << CAN_STM32_FIRX_STD_RTR_POS) |
 800220c:	f040 0008 	orr.w	r0, r0, #8
				filter_id = CONFIG_CAN_MAX_EXT_ID_FILTER + i;
 8002210:	f10e 0407 	add.w	r4, lr, #7
				bank_num = bank_offset + CONFIG_CAN_MAX_EXT_ID_FILTER + i / 2;
 8002214:	eb01 016e 	add.w	r1, r1, lr, asr #1
	if (filter_id != -ENOSPC) {
 8002218:	e7a6      	b.n	8002168 <can_stm32_add_rx_filter+0x80>
		for (int i = 0; i < CONFIG_CAN_MAX_STD_ID_FILTER; i++) {
 800221a:	f10e 0e01 	add.w	lr, lr, #1
 800221e:	f1be 0f0e 	cmp.w	lr, #14
 8002222:	d1dd      	bne.n	80021e0 <can_stm32_add_rx_filter+0xf8>
 8002224:	e7d0      	b.n	80021c8 <can_stm32_add_rx_filter+0xe0>
			filter_reg->FR1 = id | (mask << 16);
 8002226:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
		if ((filter_id - CONFIG_CAN_MAX_EXT_ID_FILTER) % 2 == 0) {
 800222a:	f014 0f01 	tst.w	r4, #1
 800222e:	f101 0048 	add.w	r0, r1, #72	; 0x48
			filter_reg->FR2 = id | (mask << 16);
 8002232:	bf0a      	itet	eq
 8002234:	eb02 00c0 	addeq.w	r0, r2, r0, lsl #3
			filter_reg->FR1 = id | (mask << 16);
 8002238:	f842 3030 	strne.w	r3, [r2, r0, lsl #3]
			filter_reg->FR2 = id | (mask << 16);
 800223c:	6043      	streq	r3, [r0, #4]
 800223e:	e7a4      	b.n	800218a <can_stm32_add_rx_filter+0xa2>
		return -ENOTSUP;
 8002240:	f06f 0485 	mvn.w	r4, #133	; 0x85
 8002244:	e7c8      	b.n	80021d8 <can_stm32_add_rx_filter+0xf0>
 8002246:	bf00      	nop
 8002248:	200003f4 	.word	0x200003f4

0800224c <can_stm32_init>:
{
 800224c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct can_stm32_config *cfg = dev->config;
 8002250:	6845      	ldr	r5, [r0, #4]
{
 8002252:	4607      	mov	r7, r0
	struct can_stm32_data *data = dev->data;
 8002254:	f8d0 8010 	ldr.w	r8, [r0, #16]
	CAN_TypeDef *can = cfg->can;
 8002258:	682e      	ldr	r6, [r5, #0]
{
 800225a:	b085      	sub	sp, #20
	return z_impl_k_mutex_init(mutex);
 800225c:	4854      	ldr	r0, [pc, #336]	; (80023b0 <can_stm32_init+0x164>)
 800225e:	f002 fbed 	bl	8004a3c <z_impl_k_mutex_init>
 8002262:	4640      	mov	r0, r8
 8002264:	f002 fbea 	bl	8004a3c <z_impl_k_mutex_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
 8002268:	2201      	movs	r2, #1
 800226a:	2100      	movs	r1, #0
 800226c:	f108 0014 	add.w	r0, r8, #20
 8002270:	f002 fbeb 	bl	8004a4a <z_impl_k_sem_init>
	if (cfg->phy != NULL) {
 8002274:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002276:	b950      	cbnz	r0, 800228e <can_stm32_init+0x42>
 8002278:	4c4e      	ldr	r4, [pc, #312]	; (80023b4 <can_stm32_init+0x168>)
 800227a:	4620      	mov	r0, r4
 800227c:	f002 fb94 	bl	80049a8 <z_device_is_ready>
	if (!device_is_ready(clock)) {
 8002280:	b950      	cbnz	r0, 8002298 <can_stm32_init+0x4c>
			return -ENODEV;
 8002282:	f06f 0412 	mvn.w	r4, #18
}
 8002286:	4620      	mov	r0, r4
 8002288:	b005      	add	sp, #20
 800228a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800228e:	f002 fb8b 	bl	80049a8 <z_device_is_ready>
		if (!device_is_ready(cfg->phy)) {
 8002292:	2800      	cmp	r0, #0
 8002294:	d1f0      	bne.n	8002278 <can_stm32_init+0x2c>
 8002296:	e7f4      	b.n	8002282 <can_stm32_init+0x36>
	return api->on(dev, sys);
 8002298:	68a3      	ldr	r3, [r4, #8]
 800229a:	4620      	mov	r0, r4
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f105 0114 	add.w	r1, r5, #20
 80022a2:	4798      	blx	r3
	if (ret != 0) {
 80022a4:	4681      	mov	r9, r0
 80022a6:	b110      	cbz	r0, 80022ae <can_stm32_init+0x62>
		return -EIO;
 80022a8:	f06f 0404 	mvn.w	r4, #4
 80022ac:	e7eb      	b.n	8002286 <can_stm32_init+0x3a>
	ret = pinctrl_lookup_state(config, id, &state);
 80022ae:	4601      	mov	r1, r0
 80022b0:	aa01      	add	r2, sp, #4
 80022b2:	6a28      	ldr	r0, [r5, #32]
 80022b4:	f002 fb17 	bl	80048e6 <pinctrl_lookup_state>
	if (ret < 0) {
 80022b8:	1e04      	subs	r4, r0, #0
 80022ba:	dbe4      	blt.n	8002286 <can_stm32_init+0x3a>
	return pinctrl_apply_state_direct(config, state);
 80022bc:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 80022be:	464a      	mov	r2, r9
 80022c0:	7919      	ldrb	r1, [r3, #4]
 80022c2:	6818      	ldr	r0, [r3, #0]
 80022c4:	f000 fb60 	bl	8002988 <pinctrl_configure_pins>
	if (ret < 0) {
 80022c8:	1e04      	subs	r4, r0, #0
 80022ca:	dbdc      	blt.n	8002286 <can_stm32_init+0x3a>
	can->MCR &= ~CAN_MCR_SLEEP;
 80022cc:	6833      	ldr	r3, [r6, #0]
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 80022ce:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80023b8 <can_stm32_init+0x16c>
	can->MCR &= ~CAN_MCR_SLEEP;
 80022d2:	f023 0302 	bic.w	r3, r3, #2
 80022d6:	6033      	str	r3, [r6, #0]
 80022d8:	f000 fb40 	bl	800295c <sys_clock_cycle_get_32>
 80022dc:	4604      	mov	r4, r0
	while ((can->MSR & CAN_MSR_SLAK) != 0) {
 80022de:	6873      	ldr	r3, [r6, #4]
 80022e0:	079b      	lsls	r3, r3, #30
 80022e2:	d44f      	bmi.n	8002384 <can_stm32_init+0x138>
	ret = can_stm32_enter_init_mode(can);
 80022e4:	4630      	mov	r0, r6
 80022e6:	f7ff fe95 	bl	8002014 <can_stm32_enter_init_mode>
	if (ret) {
 80022ea:	4604      	mov	r4, r0
 80022ec:	2800      	cmp	r0, #0
 80022ee:	d1ca      	bne.n	8002286 <can_stm32_init+0x3a>
	bank_offset = (cfg->can == cfg->master_can) ? 0 : CAN_STM32_NUM_FILTER_BANKS;
 80022f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	bf18      	it	ne
 80022f8:	240e      	movne	r4, #14
	cfg->master_can->FMR |= CAN_FMR_FINIT;
 80022fa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	cfg->master_can->FS1R |= ((1U << CONFIG_CAN_MAX_EXT_ID_FILTER) - 1) << bank_offset;
 8002306:	237f      	movs	r3, #127	; 0x7f
 8002308:	686a      	ldr	r2, [r5, #4]
 800230a:	40a3      	lsls	r3, r4
 800230c:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8002310:	430b      	orrs	r3, r1
 8002312:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
	cfg->master_can->FMR &= ~CAN_FMR_FINIT;
 8002316:	686a      	ldr	r2, [r5, #4]
 8002318:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 800231c:	f023 0301 	bic.w	r3, r3, #1
 8002320:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	can->MCR &= ~CAN_MCR_TTCM & ~CAN_MCR_ABOM & ~CAN_MCR_AWUM &
 8002324:	6833      	ldr	r3, [r6, #0]
 8002326:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 800232a:	6033      	str	r3, [r6, #0]
	can->MCR |= CAN_MCR_ABOM;
 800232c:	6833      	ldr	r3, [r6, #0]
 800232e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002332:	6033      	str	r3, [r6, #0]
	timing.sjw = cfg->sjw;
 8002334:	7bab      	ldrb	r3, [r5, #14]
 8002336:	f8ad 3004 	strh.w	r3, [sp, #4]
	if (cfg->sample_point && USE_SP_ALGO) {
 800233a:	89ab      	ldrh	r3, [r5, #12]
 800233c:	b353      	cbz	r3, 8002394 <can_stm32_init+0x148>
		ret = can_calc_timing(dev, &timing, cfg->bus_speed,
 800233e:	68aa      	ldr	r2, [r5, #8]
		union { uintptr_t x; uint16_t val; } parm3 = { .val = sample_pnt };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_CAN_CALC_TIMING);
	}
#endif
	compiler_barrier();
	return z_impl_can_calc_timing(dev, res, bitrate, sample_pnt);
 8002340:	4638      	mov	r0, r7
 8002342:	a901      	add	r1, sp, #4
 8002344:	f7ff fdb4 	bl	8001eb0 <z_impl_can_calc_timing>
		if (ret == -EINVAL) {
 8002348:	3016      	adds	r0, #22
 800234a:	d0ad      	beq.n	80022a8 <can_stm32_init+0x5c>
	ret = can_stm32_set_timing(dev, &timing);
 800234c:	4638      	mov	r0, r7
 800234e:	a901      	add	r1, sp, #4
 8002350:	f7ff fe8e 	bl	8002070 <can_stm32_set_timing>
	if (ret) {
 8002354:	4604      	mov	r4, r0
 8002356:	2800      	cmp	r0, #0
 8002358:	d195      	bne.n	8002286 <can_stm32_init+0x3a>
	ret = can_stm32_set_mode(dev, CAN_MODE_NORMAL);
 800235a:	4601      	mov	r1, r0
 800235c:	4638      	mov	r0, r7
 800235e:	f002 f9ba 	bl	80046d6 <can_stm32_set_mode>
	if (ret) {
 8002362:	4604      	mov	r4, r0
 8002364:	2800      	cmp	r0, #0
 8002366:	d18e      	bne.n	8002286 <can_stm32_init+0x3a>
	(void)can_stm32_get_state(dev, &data->state, NULL);
 8002368:	4602      	mov	r2, r0
 800236a:	f108 01ec 	add.w	r1, r8, #236	; 0xec
 800236e:	4638      	mov	r0, r7
 8002370:	f001 ff60 	bl	8004234 <can_stm32_get_state>
	cfg->config_irq(can);
 8002374:	69eb      	ldr	r3, [r5, #28]
 8002376:	4630      	mov	r0, r6
 8002378:	4798      	blx	r3
	can->IER |= CAN_IER_TMEIE;
 800237a:	6973      	ldr	r3, [r6, #20]
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6173      	str	r3, [r6, #20]
	return 0;
 8002382:	e780      	b.n	8002286 <can_stm32_init+0x3a>
 8002384:	f000 faea 	bl	800295c <sys_clock_cycle_get_32>
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 8002388:	1b00      	subs	r0, r0, r4
 800238a:	4548      	cmp	r0, r9
 800238c:	d9a7      	bls.n	80022de <can_stm32_init+0x92>
			return -EAGAIN;
 800238e:	f06f 040a 	mvn.w	r4, #10
 8002392:	e778      	b.n	8002286 <can_stm32_init+0x3a>
		timing.prop_seg = 0;
 8002394:	f8ad 3006 	strh.w	r3, [sp, #6]
		timing.phase_seg1 = cfg->prop_ts1;
 8002398:	7beb      	ldrb	r3, [r5, #15]
		ret = can_calc_prescaler(dev, &timing, cfg->bus_speed);
 800239a:	4638      	mov	r0, r7
		timing.phase_seg1 = cfg->prop_ts1;
 800239c:	f8ad 3008 	strh.w	r3, [sp, #8]
		timing.phase_seg2 = cfg->ts2;
 80023a0:	7c2b      	ldrb	r3, [r5, #16]
		ret = can_calc_prescaler(dev, &timing, cfg->bus_speed);
 80023a2:	a901      	add	r1, sp, #4
		timing.phase_seg2 = cfg->ts2;
 80023a4:	f8ad 300a 	strh.w	r3, [sp, #10]
		ret = can_calc_prescaler(dev, &timing, cfg->bus_speed);
 80023a8:	68aa      	ldr	r2, [r5, #8]
 80023aa:	f001 ff19 	bl	80041e0 <can_calc_prescaler>
		if (ret) {
 80023ae:	e7cd      	b.n	800234c <can_stm32_init+0x100>
 80023b0:	200003f4 	.word	0x200003f4
 80023b4:	08004cdc 	.word	0x08004cdc
 80023b8:	000afc80 	.word	0x000afc80

080023bc <can_stm32_remove_rx_filter>:

static void can_stm32_remove_rx_filter(const struct device *dev, int filter_id)
{
 80023bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023be:	460e      	mov	r6, r1
	const struct can_stm32_config *cfg = dev->config;
 80023c0:	6847      	ldr	r7, [r0, #4]
	struct can_stm32_data *data = dev->data;
 80023c2:	6905      	ldr	r5, [r0, #16]
	int bank_num;
	bool bank_unused;

	__ASSERT_NO_MSG(filter_id >= 0 && filter_id < CAN_STM32_MAX_FILTER_ID);

	k_mutex_lock(&filter_mutex, K_FOREVER);
 80023c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023cc:	483b      	ldr	r0, [pc, #236]	; (80024bc <can_stm32_remove_rx_filter+0x100>)
	CAN_TypeDef *can = cfg->master_can;
 80023ce:	687c      	ldr	r4, [r7, #4]
	k_mutex_lock(&filter_mutex, K_FOREVER);
 80023d0:	f002 f89e 	bl	8004510 <k_mutex_lock.constprop.0.isra.0>
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 80023d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023dc:	4628      	mov	r0, r5
 80023de:	f002 f897 	bl	8004510 <k_mutex_lock.constprop.0.isra.0>

	if (cfg->can != cfg->master_can) {
 80023e2:	e9d7 3200 	ldrd	r3, r2, [r7]
	int bank_offset = 0;
 80023e6:	4293      	cmp	r3, r2
 80023e8:	bf14      	ite	ne
 80023ea:	230e      	movne	r3, #14
 80023ec:	2300      	moveq	r3, #0
		bank_offset = CAN_STM32_NUM_FILTER_BANKS;
	}

	if (filter_id < CONFIG_CAN_MAX_EXT_ID_FILTER) {
 80023ee:	2e06      	cmp	r6, #6
 80023f0:	ea4f 0286 	mov.w	r2, r6, lsl #2
 80023f4:	dc1d      	bgt.n	8002432 <can_stm32_remove_rx_filter+0x76>
		ide = true;
		bank_num = bank_offset + filter_id;

		data->rx_cb_ext[filter_id] = NULL;
 80023f6:	2100      	movs	r1, #0
 80023f8:	442a      	add	r2, r5
 80023fa:	6751      	str	r1, [r2, #116]	; 0x74
		data->cb_arg_ext[filter_id] = NULL;
 80023fc:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8
		}
	}

	LOG_DBG("Removing filter_id %d, ide %d", filter_id, ide);

	can->FMR |= CAN_FMR_FINIT;
 8002400:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
		bank_num = bank_offset + filter_id;
 8002404:	4433      	add	r3, r6
	can->FMR |= CAN_FMR_FINIT;
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
		filter_reg->FR1 = id;
 800240e:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8002412:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
		filter_reg->FR2 = mask;
 8002416:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800241a:	f8c2 1244 	str.w	r1, [r2, #580]	; 0x244

	can_stm32_set_filter_bank(filter_id, &can->sFilterRegister[bank_num],
				  ide, 0, 0xFFFFFFFF);

	if (bank_unused) {
		can->FA1R &= ~(1U << bank_num);
 800241e:	2101      	movs	r1, #1
 8002420:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 8002424:	fa01 f303 	lsl.w	r3, r1, r3
 8002428:	ea22 0303 	bic.w	r3, r2, r3
 800242c:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
		LOG_DBG("Filter bank %d is unused -> deactivate", bank_num);
 8002430:	e01c      	b.n	800246c <can_stm32_remove_rx_filter+0xb0>
		data->rx_cb_std[filter_index] = NULL;
 8002432:	2100      	movs	r1, #0
		int filter_index = filter_id - CONFIG_CAN_MAX_EXT_ID_FILTER;
 8002434:	3e07      	subs	r6, #7
		bank_num = bank_offset + CONFIG_CAN_MAX_EXT_ID_FILTER +
 8002436:	3307      	adds	r3, #7
 8002438:	442a      	add	r2, r5
 800243a:	eb03 0366 	add.w	r3, r3, r6, asr #1
		if (filter_index % 2 == 1) {
 800243e:	f016 0f01 	tst.w	r6, #1
		data->rx_cb_std[filter_index] = NULL;
 8002442:	6211      	str	r1, [r2, #32]
		data->cb_arg_std[filter_index] = NULL;
 8002444:	6751      	str	r1, [r2, #116]	; 0x74
		if (filter_index % 2 == 1) {
 8002446:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800244a:	d01d      	beq.n	8002488 <can_stm32_remove_rx_filter+0xcc>
			bank_unused = data->rx_cb_std[filter_index - 1] == NULL;
 800244c:	69d2      	ldr	r2, [r2, #28]
	can->FMR |= CAN_FMR_FINIT;
 800244e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
			bank_unused = data->rx_cb_std[filter_index - 1] == NULL;
 8002452:	fab2 f282 	clz	r2, r2
	can->FMR |= CAN_FMR_FINIT;
 8002456:	f040 0001 	orr.w	r0, r0, #1
 800245a:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
			filter_reg->FR2 = id | (mask << 16);
 800245e:	4818      	ldr	r0, [pc, #96]	; (80024c0 <can_stm32_remove_rx_filter+0x104>)
 8002460:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
			bank_unused = data->rx_cb_std[filter_index - 1] == NULL;
 8002464:	0952      	lsrs	r2, r2, #5
			filter_reg->FR2 = id | (mask << 16);
 8002466:	6048      	str	r0, [r1, #4]
	if (bank_unused) {
 8002468:	2a00      	cmp	r2, #0
 800246a:	d1d8      	bne.n	800241e <can_stm32_remove_rx_filter+0x62>
	}

	can->FMR &= ~(CAN_FMR_FINIT);
 800246c:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200

	k_mutex_unlock(&data->inst_mutex);
 8002470:	4628      	mov	r0, r5
	can->FMR &= ~(CAN_FMR_FINIT);
 8002472:	f023 0301 	bic.w	r3, r3, #1
 8002476:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
	k_mutex_unlock(&data->inst_mutex);
 800247a:	f002 f84b 	bl	8004514 <k_mutex_unlock.isra.0>
	k_mutex_unlock(&filter_mutex);
}
 800247e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&filter_mutex);
 8002482:	480e      	ldr	r0, [pc, #56]	; (80024bc <can_stm32_remove_rx_filter+0x100>)
 8002484:	f002 b846 	b.w	8004514 <k_mutex_unlock.isra.0>
		} else if (filter_index + 1 < CONFIG_CAN_MAX_STD_ID_FILTER) {
 8002488:	2e0c      	cmp	r6, #12
 800248a:	dc0d      	bgt.n	80024a8 <can_stm32_remove_rx_filter+0xec>
			bank_unused = data->rx_cb_std[filter_index + 1] == NULL;
 800248c:	6a52      	ldr	r2, [r2, #36]	; 0x24
	can->FMR |= CAN_FMR_FINIT;
 800248e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
			bank_unused = data->rx_cb_std[filter_index + 1] == NULL;
 8002492:	fab2 f282 	clz	r2, r2
	can->FMR |= CAN_FMR_FINIT;
 8002496:	f040 0001 	orr.w	r0, r0, #1
 800249a:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
			filter_reg->FR1 = id | (mask << 16);
 800249e:	4808      	ldr	r0, [pc, #32]	; (80024c0 <can_stm32_remove_rx_filter+0x104>)
			bank_unused = data->rx_cb_std[filter_index + 1] == NULL;
 80024a0:	0952      	lsrs	r2, r2, #5
			filter_reg->FR1 = id | (mask << 16);
 80024a2:	f844 0031 	str.w	r0, [r4, r1, lsl #3]
 80024a6:	e7df      	b.n	8002468 <can_stm32_remove_rx_filter+0xac>
	can->FMR |= CAN_FMR_FINIT;
 80024a8:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 80024ac:	f042 0201 	orr.w	r2, r2, #1
 80024b0:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
			filter_reg->FR1 = id | (mask << 16);
 80024b4:	4a02      	ldr	r2, [pc, #8]	; (80024c0 <can_stm32_remove_rx_filter+0x104>)
 80024b6:	f844 2031 	str.w	r2, [r4, r1, lsl #3]
	if (bank_unused) {
 80024ba:	e7b0      	b.n	800241e <can_stm32_remove_rx_filter+0x62>
 80024bc:	200003f4 	.word	0x200003f4
 80024c0:	ffff0000 	.word	0xffff0000

080024c4 <can_stm32_start>:
{
 80024c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct can_stm32_data *data = dev->data;
 80024c8:	6905      	ldr	r5, [r0, #16]
	const struct can_stm32_config *cfg = dev->config;
 80024ca:	6846      	ldr	r6, [r0, #4]
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 80024cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024d4:	4628      	mov	r0, r5
	CAN_TypeDef *can = cfg->can;
 80024d6:	6837      	ldr	r7, [r6, #0]
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 80024d8:	f002 f81a 	bl	8004510 <k_mutex_lock.constprop.0.isra.0>
	if (data->started) {
 80024dc:	f895 30ed 	ldrb.w	r3, [r5, #237]	; 0xed
 80024e0:	bb63      	cbnz	r3, 800253c <can_stm32_start+0x78>
	if (cfg->phy != NULL) {
 80024e2:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80024e4:	b980      	cbnz	r0, 8002508 <can_stm32_start+0x44>
	can->MCR &= ~CAN_MCR_INRQ;
 80024e6:	683b      	ldr	r3, [r7, #0]
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 80024e8:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8002544 <can_stm32_start+0x80>
	can->MCR &= ~CAN_MCR_INRQ;
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	603b      	str	r3, [r7, #0]
 80024f2:	f000 fa33 	bl	800295c <sys_clock_cycle_get_32>
 80024f6:	4680      	mov	r8, r0
	while ((can->MSR & CAN_MSR_INAK) != 0U) {
 80024f8:	687c      	ldr	r4, [r7, #4]
 80024fa:	f014 0401 	ands.w	r4, r4, #1
 80024fe:	d10f      	bne.n	8002520 <can_stm32_start+0x5c>
	data->started = true;
 8002500:	2301      	movs	r3, #1
 8002502:	f885 30ed 	strb.w	r3, [r5, #237]	; 0xed
 8002506:	e005      	b.n	8002514 <can_stm32_start+0x50>
static inline int can_transceiver_enable(const struct device *dev)
{
	const struct can_transceiver_driver_api *api =
		(const struct can_transceiver_driver_api *)dev->api;

	return api->enable(dev);
 8002508:	6883      	ldr	r3, [r0, #8]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4798      	blx	r3
		if (ret != 0) {
 800250e:	4604      	mov	r4, r0
 8002510:	2800      	cmp	r0, #0
 8002512:	d0e8      	beq.n	80024e6 <can_stm32_start+0x22>
	k_mutex_unlock(&data->inst_mutex);
 8002514:	4628      	mov	r0, r5
 8002516:	f001 fffd 	bl	8004514 <k_mutex_unlock.isra.0>
}
 800251a:	4620      	mov	r0, r4
 800251c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002520:	f000 fa1c 	bl	800295c <sys_clock_cycle_get_32>
		if (k_cycle_get_32() - start_time > CAN_INIT_TIMEOUT) {
 8002524:	eba0 0008 	sub.w	r0, r0, r8
 8002528:	4548      	cmp	r0, r9
 800252a:	d9e5      	bls.n	80024f8 <can_stm32_start+0x34>
		if (cfg->phy != NULL) {
 800252c:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800252e:	b110      	cbz	r0, 8002536 <can_stm32_start+0x72>
static inline int can_transceiver_disable(const struct device *dev)
{
	const struct can_transceiver_driver_api *api =
		(const struct can_transceiver_driver_api *)dev->api;

	return api->disable(dev);
 8002530:	6883      	ldr	r3, [r0, #8]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	4798      	blx	r3
		ret = -EIO;
 8002536:	f06f 0404 	mvn.w	r4, #4
 800253a:	e7eb      	b.n	8002514 <can_stm32_start+0x50>
		ret = -EALREADY;
 800253c:	f06f 0477 	mvn.w	r4, #119	; 0x77
 8002540:	e7e8      	b.n	8002514 <can_stm32_start+0x50>
 8002542:	bf00      	nop
 8002544:	000afc80 	.word	0x000afc80

08002548 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8002548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800254a:	4606      	mov	r6, r0
	const struct uart_stm32_config *config = dev->config;
 800254c:	6844      	ldr	r4, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 800254e:	6907      	ldr	r7, [r0, #16]
	data->clock = clk;
 8002550:	4836      	ldr	r0, [pc, #216]	; (800262c <uart_stm32_init+0xe4>)
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	f002 fa28 	bl	80049a8 <z_device_is_ready>
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);

	if (!device_is_ready(data->clock)) {
 8002558:	b920      	cbnz	r0, 8002564 <uart_stm32_init+0x1c>
		LOG_ERR("clock control device not ready");
		return -ENODEV;
 800255a:	f06f 0512 	mvn.w	r5, #18
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 800255e:	4628      	mov	r0, r5
 8002560:	b003      	add	sp, #12
 8002562:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = clock_control_on(data->clock, (clock_control_subsys_t)&config->pclken[0]);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	6861      	ldr	r1, [r4, #4]
 8002568:	6883      	ldr	r3, [r0, #8]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4798      	blx	r3
	if (err != 0) {
 800256e:	4605      	mov	r5, r0
 8002570:	2800      	cmp	r0, #0
 8002572:	d1f4      	bne.n	800255e <uart_stm32_init+0x16>
	ret = pinctrl_lookup_state(config, id, &state);
 8002574:	4601      	mov	r1, r0
 8002576:	aa01      	add	r2, sp, #4
 8002578:	69a0      	ldr	r0, [r4, #24]
 800257a:	f002 f9b4 	bl	80048e6 <pinctrl_lookup_state>
	if (ret < 0) {
 800257e:	2800      	cmp	r0, #0
 8002580:	da01      	bge.n	8002586 <uart_stm32_init+0x3e>
 8002582:	4605      	mov	r5, r0
 8002584:	e7eb      	b.n	800255e <uart_stm32_init+0x16>
	return pinctrl_apply_state_direct(config, state);
 8002586:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8002588:	462a      	mov	r2, r5
 800258a:	7919      	ldrb	r1, [r3, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	f000 f9fb 	bl	8002988 <pinctrl_configure_pins>
	if (err < 0) {
 8002592:	2800      	cmp	r0, #0
 8002594:	dbf5      	blt.n	8002582 <uart_stm32_init+0x3a>
	LL_USART_Disable(config->usart);
 8002596:	6822      	ldr	r2, [r4, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8002598:	68d3      	ldr	r3, [r2, #12]
 800259a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800259e:	60d3      	str	r3, [r2, #12]
	if (!device_is_ready(data->reset.dev)) {
 80025a0:	68b8      	ldr	r0, [r7, #8]
 80025a2:	f002 fa01 	bl	80049a8 <z_device_is_ready>
 80025a6:	2800      	cmp	r0, #0
 80025a8:	d0d7      	beq.n	800255a <uart_stm32_init+0x12>
 *
 * @return a value from reset_line_toggle()
 */
static inline int reset_line_toggle_dt(const struct reset_dt_spec *spec)
{
	return reset_line_toggle(spec->dev, spec->id);
 80025aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
	if (api->line_toggle == NULL) {
 80025ae:	6883      	ldr	r3, [r0, #8]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	b103      	cbz	r3, 80025b6 <uart_stm32_init+0x6e>
	return api->line_toggle(dev, id);
 80025b4:	4798      	blx	r3
	LL_USART_SetTransferDirection(config->usart,
 80025b6:	6822      	ldr	r2, [r4, #0]
  *         @arg @ref LL_USART_DIRECTION_TX_RX
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 80025b8:	68d3      	ldr	r3, [r2, #12]
 80025ba:	f043 030c 	orr.w	r3, r3, #12
 80025be:	60d3      	str	r3, [r2, #12]
	if (config->parity == 2) {
 80025c0:	6923      	ldr	r3, [r4, #16]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d029      	beq.n	800261a <uart_stm32_init+0xd2>
	} else if (config->parity == 1) {
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d12c      	bne.n	8002624 <uart_stm32_init+0xdc>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 80025ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 80025ce:	f44f 60c0 	mov.w	r0, #1536	; 0x600
	LL_USART_ConfigCharacter(config->usart,
 80025d2:	6821      	ldr	r1, [r4, #0]
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity,
                                              uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 80025d4:	4303      	orrs	r3, r0
 80025d6:	68ca      	ldr	r2, [r1, #12]
 80025d8:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80025dc:	4313      	orrs	r3, r2
 80025de:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80025e0:	690b      	ldr	r3, [r1, #16]
 80025e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025e6:	610b      	str	r3, [r1, #16]
	if (config->hw_flow_control) {
 80025e8:	7b23      	ldrb	r3, [r4, #12]
 80025ea:	b12b      	cbz	r3, 80025f8 <uart_stm32_init+0xb0>
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 80025ec:	6873      	ldr	r3, [r6, #4]
 80025ee:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80025f0:	6953      	ldr	r3, [r2, #20]
 80025f2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80025f6:	6153      	str	r3, [r2, #20]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 80025f8:	4630      	mov	r0, r6
 80025fa:	6839      	ldr	r1, [r7, #0]
 80025fc:	f002 f8a9 	bl	8004752 <uart_stm32_set_baudrate>
	if (config->single_wire) {
 8002600:	7d23      	ldrb	r3, [r4, #20]
 8002602:	b123      	cbz	r3, 800260e <uart_stm32_init+0xc6>
		LL_USART_EnableHalfDuplex(config->usart);
 8002604:	6822      	ldr	r2, [r4, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8002606:	6953      	ldr	r3, [r2, #20]
 8002608:	f043 0308 	orr.w	r3, r3, #8
 800260c:	6153      	str	r3, [r2, #20]
	LL_USART_Enable(config->usart);
 800260e:	6822      	ldr	r2, [r4, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002610:	68d3      	ldr	r3, [r2, #12]
 8002612:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002616:	60d3      	str	r3, [r2, #12]
	return 0;
 8002618:	e7a1      	b.n	800255e <uart_stm32_init+0x16>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800261a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 800261e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002622:	e7d6      	b.n	80025d2 <uart_stm32_init+0x8a>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8002624:	2300      	movs	r3, #0
		ll_parity = LL_USART_PARITY_NONE;
 8002626:	4618      	mov	r0, r3
 8002628:	e7d3      	b.n	80025d2 <uart_stm32_init+0x8a>
 800262a:	bf00      	nop
 800262c:	08004cdc 	.word	0x08004cdc

08002630 <uart_stm32_configure>:
{
 8002630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8002634:	790b      	ldrb	r3, [r1, #4]
{
 8002636:	460c      	mov	r4, r1
	switch (parity) {
 8002638:	2b01      	cmp	r3, #1
	const struct uart_stm32_config *config = dev->config;
 800263a:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 800263c:	6906      	ldr	r6, [r0, #16]
	switch (parity) {
 800263e:	d07d      	beq.n	800273c <uart_stm32_configure+0x10c>
 8002640:	1e9a      	subs	r2, r3, #2
 8002642:	4257      	negs	r7, r2
 8002644:	4157      	adcs	r7, r2
 8002646:	02bf      	lsls	r7, r7, #10
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8002648:	7962      	ldrb	r2, [r4, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 800264a:	f894 8006 	ldrb.w	r8, [r4, #6]
 800264e:	2a02      	cmp	r2, #2
 8002650:	bf96      	itet	ls
 8002652:	494c      	ldrls	r1, [pc, #304]	; (8002784 <uart_stm32_configure+0x154>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8002654:	f44f 5c00 	movhi.w	ip, #8192	; 0x2000
 8002658:	f831 c012 	ldrhls.w	ip, [r1, r2, lsl #1]
	switch (db) {
 800265c:	f1b8 0f04 	cmp.w	r8, #4
 8002660:	d07b      	beq.n	800275a <uart_stm32_configure+0x12a>
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8002662:	f894 e007 	ldrb.w	lr, [r4, #7]
		if (p == UART_CFG_PARITY_NONE) {
 8002666:	2b00      	cmp	r3, #0
 8002668:	d16b      	bne.n	8002742 <uart_stm32_configure+0x112>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 800266a:	f1be 0f01 	cmp.w	lr, #1
 800266e:	f022 0202 	bic.w	r2, r2, #2
 8002672:	d07f      	beq.n	8002774 <uart_stm32_configure+0x144>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8002674:	2a00      	cmp	r2, #0
 8002676:	d070      	beq.n	800275a <uart_stm32_configure+0x12a>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8002678:	f1b8 0f02 	cmp.w	r8, #2
 800267c:	d96d      	bls.n	800275a <uart_stm32_configure+0x12a>
	return LL_USART_HWCONTROL_NONE;
 800267e:	4619      	mov	r1, r3
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 8002680:	f8d5 8000 	ldr.w	r8, [r5]
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8002684:	f1be 0f00 	cmp.w	lr, #0
 8002688:	d00d      	beq.n	80026a6 <uart_stm32_configure+0x76>
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 800268a:	4a3f      	ldr	r2, [pc, #252]	; (8002788 <uart_stm32_configure+0x158>)
 800268c:	4590      	cmp	r8, r2
 800268e:	d007      	beq.n	80026a0 <uart_stm32_configure+0x70>
 8002690:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8002694:	4590      	cmp	r8, r2
 8002696:	d003      	beq.n	80026a0 <uart_stm32_configure+0x70>
 8002698:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800269c:	4590      	cmp	r8, r2
 800269e:	d15c      	bne.n	800275a <uart_stm32_configure+0x12a>
 80026a0:	f1be 0f01 	cmp.w	lr, #1
 80026a4:	d159      	bne.n	800275a <uart_stm32_configure+0x12a>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80026a6:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80026aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026ae:	f8c8 200c 	str.w	r2, [r8, #12]
	return LL_USART_GetParity(config->usart);
 80026b2:	6842      	ldr	r2, [r0, #4]
 80026b4:	f8d2 e000 	ldr.w	lr, [r2]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80026b8:	f8de 200c 	ldr.w	r2, [lr, #12]
 80026bc:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 80026c0:	4297      	cmp	r7, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 80026c2:	bf1f      	itttt	ne
 80026c4:	f8de 200c 	ldrne.w	r2, [lr, #12]
 80026c8:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80026cc:	433a      	orrne	r2, r7
 80026ce:	f8ce 200c 	strne.w	r2, [lr, #12]
	return LL_USART_GetStopBitsLength(config->usart);
 80026d2:	6842      	ldr	r2, [r0, #4]
 80026d4:	6817      	ldr	r7, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 80026dc:	4594      	cmp	ip, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80026de:	bf1f      	itttt	ne
 80026e0:	693a      	ldrne	r2, [r7, #16]
 80026e2:	f422 5240 	bicne.w	r2, r2, #12288	; 0x3000
 80026e6:	ea42 020c 	orrne.w	r2, r2, ip
 80026ea:	613a      	strne	r2, [r7, #16]
	return LL_USART_GetDataWidth(config->usart);
 80026ec:	6842      	ldr	r2, [r0, #4]
 80026ee:	6817      	ldr	r7, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 80026f6:	429a      	cmp	r2, r3
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 80026f8:	bf1f      	itttt	ne
 80026fa:	68fa      	ldrne	r2, [r7, #12]
 80026fc:	f422 5280 	bicne.w	r2, r2, #4096	; 0x1000
 8002700:	4313      	orrne	r3, r2
 8002702:	60fb      	strne	r3, [r7, #12]
	return LL_USART_GetHWFlowCtrl(config->usart);
 8002704:	6843      	ldr	r3, [r0, #4]
 8002706:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8002708:	6953      	ldr	r3, [r2, #20]
 800270a:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 800270e:	4299      	cmp	r1, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002710:	bf1f      	itttt	ne
 8002712:	6953      	ldrne	r3, [r2, #20]
 8002714:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8002718:	430b      	orrne	r3, r1
 800271a:	6153      	strne	r3, [r2, #20]
	if (cfg->baudrate != data->baud_rate) {
 800271c:	6821      	ldr	r1, [r4, #0]
 800271e:	6833      	ldr	r3, [r6, #0]
 8002720:	4299      	cmp	r1, r3
 8002722:	d003      	beq.n	800272c <uart_stm32_configure+0xfc>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8002724:	f002 f815 	bl	8004752 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8002728:	6823      	ldr	r3, [r4, #0]
 800272a:	6033      	str	r3, [r6, #0]
	return 0;
 800272c:	2000      	movs	r0, #0
	LL_USART_Enable(config->usart);
 800272e:	682a      	ldr	r2, [r5, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002730:	68d3      	ldr	r3, [r2, #12]
 8002732:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002736:	60d3      	str	r3, [r2, #12]
};
 8002738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (parity) {
 800273c:	f44f 67c0 	mov.w	r7, #1536	; 0x600
 8002740:	e782      	b.n	8002648 <uart_stm32_configure+0x18>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8002742:	3b03      	subs	r3, #3
 8002744:	f1be 0f01 	cmp.w	lr, #1
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8002748:	b2db      	uxtb	r3, r3
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 800274a:	d109      	bne.n	8002760 <uart_stm32_configure+0x130>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800274c:	2b01      	cmp	r3, #1
 800274e:	d904      	bls.n	800275a <uart_stm32_configure+0x12a>
		return LL_USART_HWCONTROL_RTS_CTS;
 8002750:	f44f 7140 	mov.w	r1, #768	; 0x300
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8002754:	f012 0ffd 	tst.w	r2, #253	; 0xfd
 8002758:	d106      	bne.n	8002768 <uart_stm32_configure+0x138>
		return -ENOTSUP;
 800275a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800275e:	e7eb      	b.n	8002738 <uart_stm32_configure+0x108>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8002760:	2b01      	cmp	r3, #1
 8002762:	d9fa      	bls.n	800275a <uart_stm32_configure+0x12a>
	return LL_USART_HWCONTROL_NONE;
 8002764:	2100      	movs	r1, #0
 8002766:	e7f5      	b.n	8002754 <uart_stm32_configure+0x124>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8002768:	f1b8 0f02 	cmp.w	r8, #2
 800276c:	d9f5      	bls.n	800275a <uart_stm32_configure+0x12a>
		return LL_USART_DATAWIDTH_9B;
 800276e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002772:	e785      	b.n	8002680 <uart_stm32_configure+0x50>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8002774:	2a00      	cmp	r2, #0
 8002776:	d0f0      	beq.n	800275a <uart_stm32_configure+0x12a>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8002778:	f1b8 0f02 	cmp.w	r8, #2
 800277c:	d9ed      	bls.n	800275a <uart_stm32_configure+0x12a>
		return LL_USART_HWCONTROL_RTS_CTS;
 800277e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002782:	e77d      	b.n	8002680 <uart_stm32_configure+0x50>
 8002784:	08005374 	.word	0x08005374
 8002788:	40013800 	.word	0x40013800

0800278c <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 800278c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8002790:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 8002792:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8002794:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8002796:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8002798:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800279c:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <elapsed+0x34>)
 800279e:	4909      	ldr	r1, [pc, #36]	; (80027c4 <elapsed+0x38>)
 80027a0:	d101      	bne.n	80027a6 <elapsed+0x1a>
	    || (val1 < val2)) {
 80027a2:	4282      	cmp	r2, r0
 80027a4:	d206      	bcs.n	80027b4 <elapsed+0x28>
		overflow_cyc += last_load;
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	680c      	ldr	r4, [r1, #0]
 80027aa:	4422      	add	r2, r4
 80027ac:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 80027ae:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80027b2:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	680a      	ldr	r2, [r1, #0]
 80027b8:	4413      	add	r3, r2
}
 80027ba:	1a18      	subs	r0, r3, r0
 80027bc:	bd10      	pop	{r4, pc}
 80027be:	bf00      	nop
 80027c0:	20000408 	.word	0x20000408
 80027c4:	20000414 	.word	0x20000414

080027c8 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c8:	2210      	movs	r2, #16
 80027ca:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <sys_clock_driver_init+0x28>)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
 80027cc:	2000      	movs	r0, #0
 80027ce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	last_load = CYC_PER_TICK - 1;
 80027d2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80027d6:	4b07      	ldr	r3, [pc, #28]	; (80027f4 <sys_clock_driver_init+0x2c>)
 80027d8:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 80027da:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <sys_clock_driver_init+0x30>)
 80027dc:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 80027de:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80027e2:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 80027e4:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	f042 0207 	orr.w	r2, r2, #7
 80027ec:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 80027ee:	4770      	bx	lr
 80027f0:	e000ed00 	.word	0xe000ed00
 80027f4:	20000414 	.word	0x20000414
 80027f8:	20000408 	.word	0x20000408

080027fc <sys_clock_isr>:
{
 80027fc:	b508      	push	{r3, lr}
	elapsed();
 80027fe:	f7ff ffc5 	bl	800278c <elapsed>
	cycle_count += overflow_cyc;
 8002802:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <sys_clock_isr+0x38>)
 8002804:	4a0c      	ldr	r2, [pc, #48]	; (8002838 <sys_clock_isr+0x3c>)
 8002806:	6818      	ldr	r0, [r3, #0]
 8002808:	6811      	ldr	r1, [r2, #0]
 800280a:	4408      	add	r0, r1
 800280c:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 800280e:	2200      	movs	r2, #0
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8002810:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
	overflow_cyc = 0;
 8002814:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8002816:	4a09      	ldr	r2, [pc, #36]	; (800283c <sys_clock_isr+0x40>)
 8002818:	6813      	ldr	r3, [r2, #0]
 800281a:	1ac0      	subs	r0, r0, r3
 800281c:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 8002820:	fb01 3300 	mla	r3, r1, r0, r3
 8002824:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8002826:	f001 f8ad 	bl	8003984 <sys_clock_announce>
}
 800282a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 800282e:	f7fe bbfb 	b.w	8001028 <z_arm_exc_exit>
 8002832:	bf00      	nop
 8002834:	20000408 	.word	0x20000408
 8002838:	20000410 	.word	0x20000410
 800283c:	2000040c 	.word	0x2000040c

08002840 <sys_clock_set_timeout>:
{
 8002840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002844:	4e31      	ldr	r6, [pc, #196]	; (800290c <sys_clock_set_timeout+0xcc>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8002846:	2900      	cmp	r1, #0
 8002848:	d054      	beq.n	80028f4 <sys_clock_set_timeout+0xb4>
 800284a:	1c42      	adds	r2, r0, #1
 800284c:	d10a      	bne.n	8002864 <sys_clock_set_timeout+0x24>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 800284e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002852:	6913      	ldr	r3, [r2, #16]
 8002854:	f023 0301 	bic.w	r3, r3, #1
 8002858:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 800285a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800285e:	6033      	str	r3, [r6, #0]
}
 8002860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t last_load_ = last_load;
 8002864:	6835      	ldr	r5, [r6, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8002866:	2801      	cmp	r0, #1
 8002868:	dd4a      	ble.n	8002900 <sys_clock_set_timeout+0xc0>
 800286a:	f640 1819 	movw	r8, #2329	; 0x919
 800286e:	4540      	cmp	r0, r8
 8002870:	dc01      	bgt.n	8002876 <sys_clock_set_timeout+0x36>
 8002872:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	__asm__ volatile(
 8002876:	f04f 0310 	mov.w	r3, #16
 800287a:	f3ef 8411 	mrs	r4, BASEPRI
 800287e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002882:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8002886:	f7ff ff81 	bl	800278c <elapsed>
	val1 = SysTick->VAL;
 800288a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 800288e:	2100      	movs	r1, #0
	cycle_count += pending;
 8002890:	4f1f      	ldr	r7, [pc, #124]	; (8002910 <sys_clock_set_timeout+0xd0>)
	val1 = SysTick->VAL;
 8002892:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	18c2      	adds	r2, r0, r3
	overflow_cyc = 0U;
 800289a:	4b1e      	ldr	r3, [pc, #120]	; (8002914 <sys_clock_set_timeout+0xd4>)
 800289c:	6019      	str	r1, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 800289e:	4b1e      	ldr	r3, [pc, #120]	; (8002918 <sys_clock_set_timeout+0xd8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 80028a2:	1ad1      	subs	r1, r2, r3
 80028a4:	d42f      	bmi.n	8002906 <sys_clock_set_timeout+0xc6>
		delay = ticks * CYC_PER_TICK;
 80028a6:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
		delay += unannounced;
 80028aa:	fb00 1108 	mla	r1, r0, r8, r1
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 80028ae:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 80028b2:	311f      	adds	r1, #31
 80028b4:	fbb1 f1f0 	udiv	r1, r1, r0
		delay -= unannounced;
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	fb00 3301 	mla	r3, r0, r1, r3
		delay = MAX(delay, MIN_DELAY);
 80028be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c2:	d920      	bls.n	8002906 <sys_clock_set_timeout+0xc6>
		if (delay > MAX_CYCLES) {
 80028c4:	4915      	ldr	r1, [pc, #84]	; (800291c <sys_clock_set_timeout+0xdc>)
 80028c6:	428b      	cmp	r3, r1
 80028c8:	bf28      	it	cs
 80028ca:	460b      	movcs	r3, r1
	val2 = SysTick->VAL;
 80028cc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		last_load = MIN_DELAY;
 80028d0:	6033      	str	r3, [r6, #0]
	SysTick->LOAD = last_load - 1;
 80028d2:	3b01      	subs	r3, #1
	val2 = SysTick->VAL;
 80028d4:	6988      	ldr	r0, [r1, #24]
	SysTick->LOAD = last_load - 1;
 80028d6:	614b      	str	r3, [r1, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 80028d8:	2300      	movs	r3, #0
	if (val1 < val2) {
 80028da:	4584      	cmp	ip, r0
	SysTick->VAL = 0; /* resets timer to last_load */
 80028dc:	618b      	str	r3, [r1, #24]
	if (val1 < val2) {
 80028de:	ebac 0300 	sub.w	r3, ip, r0
		cycle_count += (val1 + (last_load_ - val2));
 80028e2:	bf38      	it	cc
 80028e4:	195b      	addcc	r3, r3, r5
		cycle_count += (val1 - val2);
 80028e6:	441a      	add	r2, r3
 80028e8:	603a      	str	r2, [r7, #0]
	__asm__ volatile(
 80028ea:	f384 8811 	msr	BASEPRI, r4
 80028ee:	f3bf 8f6f 	isb	sy
 80028f2:	e7b5      	b.n	8002860 <sys_clock_set_timeout+0x20>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 80028f4:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 80028f6:	6835      	ldr	r5, [r6, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 80028f8:	d1b5      	bne.n	8002866 <sys_clock_set_timeout+0x26>
 80028fa:	f640 1019 	movw	r0, #2329	; 0x919
 80028fe:	e7b8      	b.n	8002872 <sys_clock_set_timeout+0x32>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8002900:	f04f 0800 	mov.w	r8, #0
 8002904:	e7b7      	b.n	8002876 <sys_clock_set_timeout+0x36>
 8002906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800290a:	e7df      	b.n	80028cc <sys_clock_set_timeout+0x8c>
 800290c:	20000414 	.word	0x20000414
 8002910:	20000410 	.word	0x20000410
 8002914:	20000408 	.word	0x20000408
 8002918:	2000040c 	.word	0x2000040c
 800291c:	00ffdf20 	.word	0x00ffdf20

08002920 <sys_clock_elapsed>:
{
 8002920:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002922:	f04f 0310 	mov.w	r3, #16
 8002926:	f3ef 8411 	mrs	r4, BASEPRI
 800292a:	f383 8812 	msr	BASEPRI_MAX, r3
 800292e:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8002932:	f7ff ff2b 	bl	800278c <elapsed>
 8002936:	4b07      	ldr	r3, [pc, #28]	; (8002954 <sys_clock_elapsed+0x34>)
 8002938:	4a07      	ldr	r2, [pc, #28]	; (8002958 <sys_clock_elapsed+0x38>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6812      	ldr	r2, [r2, #0]
 800293e:	1a9b      	subs	r3, r3, r2
 8002940:	4403      	add	r3, r0
	__asm__ volatile(
 8002942:	f384 8811 	msr	BASEPRI, r4
 8002946:	f3bf 8f6f 	isb	sy
}
 800294a:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
 800294e:	fbb3 f0f0 	udiv	r0, r3, r0
 8002952:	bd10      	pop	{r4, pc}
 8002954:	20000410 	.word	0x20000410
 8002958:	2000040c 	.word	0x2000040c

0800295c <sys_clock_cycle_get_32>:
{
 800295c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800295e:	f04f 0310 	mov.w	r3, #16
 8002962:	f3ef 8411 	mrs	r4, BASEPRI
 8002966:	f383 8812 	msr	BASEPRI_MAX, r3
 800296a:	f3bf 8f6f 	isb	sy
	uint32_t ret = elapsed() + cycle_count;
 800296e:	f7ff ff0d 	bl	800278c <elapsed>
 8002972:	4b04      	ldr	r3, [pc, #16]	; (8002984 <sys_clock_cycle_get_32+0x28>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4418      	add	r0, r3
	__asm__ volatile(
 8002978:	f384 8811 	msr	BASEPRI, r4
 800297c:	f3bf 8f6f 	isb	sy
}
 8002980:	bd10      	pop	{r4, pc}
 8002982:	bf00      	nop
 8002984:	20000410 	.word	0x20000410

08002988 <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 8002988:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	remap = (uint16_t)STM32_DT_PINMUX_REMAP(pins[0].pinmux);
 800298c:	6803      	ldr	r3, [r0, #0]
{
 800298e:	4604      	mov	r4, r0
	remap = (uint16_t)STM32_DT_PINMUX_REMAP(pins[0].pinmux);
 8002990:	f3c3 258f 	ubfx	r5, r3, #10, #16
 8002994:	f3c3 2389 	ubfx	r3, r3, #10, #10
	if (remap == NO_REMAP) {
 8002998:	b1fb      	cbz	r3, 80029da <pinctrl_configure_pins+0x52>
	for (size_t i = 1U; i < pin_cnt; i++) {
 800299a:	2201      	movs	r2, #1
 800299c:	428a      	cmp	r2, r1
 800299e:	d323      	bcc.n	80029e8 <pinctrl_configure_pins+0x60>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80029a0:	4a33      	ldr	r2, [pc, #204]	; (8002a70 <pinctrl_configure_pins+0xe8>)
	if (STM32_REMAP_REG_GET(remap) == 0U) {
 80029a2:	f015 0f01 	tst.w	r5, #1
 80029a6:	6990      	ldr	r0, [r2, #24]
 80029a8:	f040 0001 	orr.w	r0, r0, #1
 80029ac:	6190      	str	r0, [r2, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80029ae:	6992      	ldr	r2, [r2, #24]
		reg_val |= STM32_REMAP_VAL_GET(remap) << STM32_REMAP_SHIFT_GET(remap);
 80029b0:	ea4f 2013 	mov.w	r0, r3, lsr #8
 80029b4:	f002 0201 	and.w	r2, r2, #1
 80029b8:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80029ba:	9a01      	ldr	r2, [sp, #4]
	if (STM32_REMAP_REG_GET(remap) == 0U) {
 80029bc:	4a2d      	ldr	r2, [pc, #180]	; (8002a74 <pinctrl_configure_pins+0xec>)
		reg_val |= STM32_REMAP_VAL_GET(remap) << STM32_REMAP_SHIFT_GET(remap);
 80029be:	f3c3 0344 	ubfx	r3, r3, #1, #5
 80029c2:	fa00 f003 	lsl.w	r0, r0, r3
		reg_val = AFIO->MAPR & ~AFIO_MAPR_SWJ_CFG;
 80029c6:	bf09      	itett	eq
 80029c8:	6853      	ldreq	r3, [r2, #4]
		reg_val = AFIO->MAPR2;
 80029ca:	69d3      	ldrne	r3, [r2, #28]
		reg_val |= STM32_REMAP_VAL_GET(remap) << STM32_REMAP_SHIFT_GET(remap);
 80029cc:	4303      	orreq	r3, r0
		AFIO->MAPR = reg_val | AFIO_MAPR_SWJ_CFG;
 80029ce:	f043 63e0 	orreq.w	r3, r3, #117440512	; 0x7000000
		reg_val |= STM32_REMAP_VAL_GET(remap) << STM32_REMAP_SHIFT_GET(remap);
 80029d2:	bf16      	itet	ne
 80029d4:	4303      	orrne	r3, r0
		AFIO->MAPR = reg_val | AFIO_MAPR_SWJ_CFG;
 80029d6:	6053      	streq	r3, [r2, #4]
		AFIO->MAPR2 = reg_val;
 80029d8:	61d3      	strne	r3, [r2, #28]
	port_device = gpio_ports[STM32_PORT(pin)];
 80029da:	4f27      	ldr	r7, [pc, #156]	; (8002a78 <pinctrl_configure_pins+0xf0>)
 80029dc:	eb04 06c1 	add.w	r6, r4, r1, lsl #3
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 80029e0:	42a6      	cmp	r6, r4
 80029e2:	d10e      	bne.n	8002a02 <pinctrl_configure_pins+0x7a>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 80029e4:	2000      	movs	r0, #0
 80029e6:	e007      	b.n	80029f8 <pinctrl_configure_pins+0x70>
		if (STM32_DT_PINMUX_REMAP(pins[i].pinmux) != remap) {
 80029e8:	f854 0032 	ldr.w	r0, [r4, r2, lsl #3]
 80029ec:	f3c0 2089 	ubfx	r0, r0, #10, #10
 80029f0:	4298      	cmp	r0, r3
 80029f2:	d004      	beq.n	80029fe <pinctrl_configure_pins+0x76>
	for (size_t i = 1U; i < pin_cnt; i++) {
 80029f4:	f06f 0015 	mvn.w	r0, #21
}
 80029f8:	b002      	add	sp, #8
 80029fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (size_t i = 1U; i < pin_cnt; i++) {
 80029fe:	3201      	adds	r2, #1
 8002a00:	e7cc      	b.n	800299c <pinctrl_configure_pins+0x14>
			pin_cgf = pins[i].pincfg | STM32_MODE_OUTPUT | STM32_CNF_ALT_FUNC;
 8002a02:	e9d4 2500 	ldrd	r2, r5, [r4]
		if (STM32_DT_PINMUX_FUNC(mux) == ALTERNATE) {
 8002a06:	f012 0903 	ands.w	r9, r2, #3
 8002a0a:	d10f      	bne.n	8002a2c <pinctrl_configure_pins+0xa4>
			pin_cgf = pins[i].pincfg | STM32_MODE_OUTPUT | STM32_CNF_ALT_FUNC;
 8002a0c:	f045 0541 	orr.w	r5, r5, #65	; 0x41
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8002a10:	f3c2 0a87 	ubfx	sl, r2, #2, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 8002a14:	f3c2 1283 	ubfx	r2, r2, #6, #4
 8002a18:	2a0a      	cmp	r2, #10
 8002a1a:	d8eb      	bhi.n	80029f4 <pinctrl_configure_pins+0x6c>
	port_device = gpio_ports[STM32_PORT(pin)];
 8002a1c:	f857 8022 	ldr.w	r8, [r7, r2, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8002a20:	f1b8 0f00 	cmp.w	r8, #0
 8002a24:	d113      	bne.n	8002a4e <pinctrl_configure_pins+0xc6>
		return -ENODEV;
 8002a26:	f06f 0012 	mvn.w	r0, #18
 8002a2a:	e7e5      	b.n	80029f8 <pinctrl_configure_pins+0x70>
		} else if (STM32_DT_PINMUX_FUNC(mux) == ANALOG) {
 8002a2c:	f1b9 0f02 	cmp.w	r9, #2
 8002a30:	d0ee      	beq.n	8002a10 <pinctrl_configure_pins+0x88>
		} else if (STM32_DT_PINMUX_FUNC(mux) == GPIO_IN) {
 8002a32:	f1b9 0f01 	cmp.w	r9, #1
 8002a36:	d107      	bne.n	8002a48 <pinctrl_configure_pins+0xc0>
			if (pupd == STM32_PUPD_NO_PULL) {
 8002a38:	f415 7fc0 	tst.w	r5, #384	; 0x180
				pin_cgf = pin_cgf | STM32_CNF_IN_FLOAT;
 8002a3c:	bf0c      	ite	eq
 8002a3e:	f045 0502 	orreq.w	r5, r5, #2
				pin_cgf = pin_cgf | STM32_CNF_IN_PUPD;
 8002a42:	f045 0504 	orrne.w	r5, r5, #4
 8002a46:	e7e3      	b.n	8002a10 <pinctrl_configure_pins+0x88>
			pin_cgf = pins[i].pincfg | STM32_MODE_OUTPUT | STM32_CNF_GP_OUTPUT;
 8002a48:	f045 0501 	orr.w	r5, r5, #1
 8002a4c:	e7e0      	b.n	8002a10 <pinctrl_configure_pins+0x88>
 8002a4e:	4640      	mov	r0, r8
 8002a50:	f001 ffaa 	bl	80049a8 <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8002a54:	2800      	cmp	r0, #0
 8002a56:	d0e6      	beq.n	8002a26 <pinctrl_configure_pins+0x9e>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
 8002a58:	464b      	mov	r3, r9
 8002a5a:	462a      	mov	r2, r5
 8002a5c:	4640      	mov	r0, r8
 8002a5e:	f00a 010f 	and.w	r1, sl, #15
 8002a62:	f001 fb33 	bl	80040cc <gpio_stm32_configure>
		if (ret < 0) {
 8002a66:	2800      	cmp	r0, #0
 8002a68:	f104 0408 	add.w	r4, r4, #8
 8002a6c:	dab8      	bge.n	80029e0 <pinctrl_configure_pins+0x58>
 8002a6e:	e7c3      	b.n	80029f8 <pinctrl_configure_pins+0x70>
 8002a70:	40021000 	.word	0x40021000
 8002a74:	40010000 	.word	0x40010000
 8002a78:	08005318 	.word	0x08005318

08002a7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a7c:	b530      	push	{r4, r5, lr}
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a7e:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8002a80:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a82:	ac02      	add	r4, sp, #8
 8002a84:	f103 0510 	add.w	r5, r3, #16
 8002a88:	4622      	mov	r2, r4
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	6859      	ldr	r1, [r3, #4]
 8002a8e:	3308      	adds	r3, #8
 8002a90:	c203      	stmia	r2!, {r0, r1}
 8002a92:	42ab      	cmp	r3, r5
 8002a94:	4614      	mov	r4, r2
 8002a96:	d1f7      	bne.n	8002a88 <HAL_RCC_GetSysClockFreq+0xc>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a98:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t sysclockfreq = 0U;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a9c:	4911      	ldr	r1, [pc, #68]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a9e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8002aa2:	684b      	ldr	r3, [r1, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aa4:	f003 020c 	and.w	r2, r3, #12
 8002aa8:	2a08      	cmp	r2, #8
 8002aaa:	d117      	bne.n	8002adc <HAL_RCC_GetSysClockFreq+0x60>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aac:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002ab0:	3218      	adds	r2, #24
 8002ab2:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ab4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ab6:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aba:	d50c      	bpl.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x5a>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002abc:	684b      	ldr	r3, [r1, #4]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002abe:	4a0a      	ldr	r2, [pc, #40]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ac0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ac4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ac6:	3318      	adds	r3, #24
 8002ac8:	446b      	add	r3, sp
 8002aca:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ace:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002ad2:	b007      	add	sp, #28
 8002ad4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ad6:	4b05      	ldr	r3, [pc, #20]	; (8002aec <HAL_RCC_GetSysClockFreq+0x70>)
 8002ad8:	4358      	muls	r0, r3
 8002ada:	e7fa      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8002adc:	4802      	ldr	r0, [pc, #8]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8002ade:	e7f8      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x56>
 8002ae0:	080055f7 	.word	0x080055f7
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	007a1200 	.word	0x007a1200
 8002aec:	003d0900 	.word	0x003d0900

08002af0 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002af0:	4a16      	ldr	r2, [pc, #88]	; (8002b4c <LL_TIM_Init+0x5c>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002af2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002af4:	4290      	cmp	r0, r2
 8002af6:	d00a      	beq.n	8002b0e <LL_TIM_Init+0x1e>
 8002af8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002afc:	d007      	beq.n	8002b0e <LL_TIM_Init+0x1e>
 8002afe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002b02:	4290      	cmp	r0, r2
 8002b04:	d003      	beq.n	8002b0e <LL_TIM_Init+0x1e>
 8002b06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b0a:	4290      	cmp	r0, r2
 8002b0c:	d117      	bne.n	8002b3e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002b0e:	684a      	ldr	r2, [r1, #4]
 8002b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b14:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002b16:	68ca      	ldr	r2, [r1, #12]
 8002b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b1c:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002b1e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002b20:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002b22:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002b24:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002b26:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b28:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <LL_TIM_Init+0x5c>)
 8002b2a:	4298      	cmp	r0, r3
 8002b2c:	d101      	bne.n	8002b32 <LL_TIM_Init+0x42>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002b2e:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002b30:	6303      	str	r3, [r0, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002b32:	6943      	ldr	r3, [r0, #20]
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	4770      	bx	lr
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002b3e:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002b40:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002b42:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002b44:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002b46:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b48:	e7f3      	b.n	8002b32 <LL_TIM_Init+0x42>
 8002b4a:	bf00      	nop
 8002b4c:	40012c00 	.word	0x40012c00

08002b50 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8002b50:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 8002b54:	b530      	push	{r4, r5, lr}
  switch (Channel)
 8002b56:	f000 808f 	beq.w	8002c78 <LL_TIM_OC_Init+0x128>
 8002b5a:	d805      	bhi.n	8002b68 <LL_TIM_OC_Init+0x18>
 8002b5c:	2901      	cmp	r1, #1
 8002b5e:	d029      	beq.n	8002bb4 <LL_TIM_OC_Init+0x64>
 8002b60:	2910      	cmp	r1, #16
 8002b62:	d057      	beq.n	8002c14 <LL_TIM_OC_Init+0xc4>
 8002b64:	2001      	movs	r0, #1
    default:
      break;
  }

  return result;
}
 8002b66:	bd30      	pop	{r4, r5, pc}
  switch (Channel)
 8002b68:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002b6c:	d1fa      	bne.n	8002b64 <LL_TIM_OC_Init+0x14>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002b6e:	6a03      	ldr	r3, [r0, #32]
 8002b70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b74:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002b76:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002b78:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002b7a:	69c1      	ldr	r1, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002b7c:	6815      	ldr	r5, [r2, #0]
 8002b7e:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8002b82:	ea41 2105 	orr.w	r1, r1, r5, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002b86:	6915      	ldr	r5, [r2, #16]
 8002b88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b8c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002b90:	6855      	ldr	r5, [r2, #4]
 8002b92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b96:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b9a:	4d50      	ldr	r5, [pc, #320]	; (8002cdc <LL_TIM_OC_Init+0x18c>)
 8002b9c:	42a8      	cmp	r0, r5
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002b9e:	bf02      	ittt	eq
 8002ba0:	6995      	ldreq	r5, [r2, #24]
 8002ba2:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
 8002ba6:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002baa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002bac:	61c1      	str	r1, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002bae:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002bb0:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002bb2:	e02c      	b.n	8002c0e <LL_TIM_OC_Init+0xbe>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002bb4:	6a03      	ldr	r3, [r0, #32]
 8002bb6:	f023 0301 	bic.w	r3, r3, #1
 8002bba:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002bbc:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002bbe:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002bc0:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002bc2:	6815      	ldr	r5, [r2, #0]
 8002bc4:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8002bc8:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002bca:	6915      	ldr	r5, [r2, #16]
 8002bcc:	f023 0302 	bic.w	r3, r3, #2
 8002bd0:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002bd2:	6855      	ldr	r5, [r2, #4]
 8002bd4:	f023 0301 	bic.w	r3, r3, #1
 8002bd8:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bda:	4d40      	ldr	r5, [pc, #256]	; (8002cdc <LL_TIM_OC_Init+0x18c>)
 8002bdc:	42a8      	cmp	r0, r5
 8002bde:	d112      	bne.n	8002c06 <LL_TIM_OC_Init+0xb6>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002be0:	6955      	ldr	r5, [r2, #20]
 8002be2:	f023 0308 	bic.w	r3, r3, #8
 8002be6:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002bea:	6895      	ldr	r5, [r2, #8]
 8002bec:	f023 0304 	bic.w	r3, r3, #4
 8002bf0:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002bf4:	6995      	ldr	r5, [r2, #24]
 8002bf6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002bfa:	4329      	orrs	r1, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002bfc:	69d5      	ldr	r5, [r2, #28]
 8002bfe:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8002c02:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002c06:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002c08:	6184      	str	r4, [r0, #24]
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002c0a:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002c0c:	6342      	str	r2, [r0, #52]	; 0x34
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002c0e:	6203      	str	r3, [r0, #32]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002c10:	2000      	movs	r0, #0
 8002c12:	e7a8      	b.n	8002b66 <LL_TIM_OC_Init+0x16>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002c14:	6a03      	ldr	r3, [r0, #32]
 8002c16:	f023 0310 	bic.w	r3, r3, #16
 8002c1a:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002c1c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002c1e:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002c20:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002c22:	6815      	ldr	r5, [r2, #0]
 8002c24:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8002c28:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002c2c:	6915      	ldr	r5, [r2, #16]
 8002c2e:	f023 0320 	bic.w	r3, r3, #32
 8002c32:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002c36:	6855      	ldr	r5, [r2, #4]
 8002c38:	f023 0310 	bic.w	r3, r3, #16
 8002c3c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c40:	4d26      	ldr	r5, [pc, #152]	; (8002cdc <LL_TIM_OC_Init+0x18c>)
 8002c42:	42a8      	cmp	r0, r5
 8002c44:	d113      	bne.n	8002c6e <LL_TIM_OC_Init+0x11e>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002c46:	6955      	ldr	r5, [r2, #20]
 8002c48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c4c:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002c50:	6895      	ldr	r5, [r2, #8]
 8002c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c56:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002c5a:	6995      	ldr	r5, [r2, #24]
 8002c5c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002c60:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002c64:	69d5      	ldr	r5, [r2, #28]
 8002c66:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8002c6a:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002c6e:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002c70:	6184      	str	r4, [r0, #24]
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002c72:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002c74:	6382      	str	r2, [r0, #56]	; 0x38
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002c76:	e7ca      	b.n	8002c0e <LL_TIM_OC_Init+0xbe>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002c78:	6a03      	ldr	r3, [r0, #32]
 8002c7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c7e:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002c80:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002c82:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002c84:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002c86:	6815      	ldr	r5, [r2, #0]
 8002c88:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8002c8c:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002c8e:	6915      	ldr	r5, [r2, #16]
 8002c90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c94:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002c98:	6855      	ldr	r5, [r2, #4]
 8002c9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c9e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ca2:	4d0e      	ldr	r5, [pc, #56]	; (8002cdc <LL_TIM_OC_Init+0x18c>)
 8002ca4:	42a8      	cmp	r0, r5
 8002ca6:	d113      	bne.n	8002cd0 <LL_TIM_OC_Init+0x180>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002ca8:	6955      	ldr	r5, [r2, #20]
 8002caa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cae:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002cb2:	6895      	ldr	r5, [r2, #8]
 8002cb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cb8:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002cbc:	6995      	ldr	r5, [r2, #24]
 8002cbe:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8002cc2:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002cc6:	69d5      	ldr	r5, [r2, #28]
 8002cc8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8002ccc:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002cd0:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002cd2:	61c4      	str	r4, [r0, #28]
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002cd4:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002cd6:	63c2      	str	r2, [r0, #60]	; 0x3c
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002cd8:	e799      	b.n	8002c0e <LL_TIM_OC_Init+0xbe>
 8002cda:	bf00      	nop
 8002cdc:	40012c00 	.word	0x40012c00

08002ce0 <LL_SetFlashLatency>:
  uint32_t getlatency;
  uint32_t latency = LL_FLASH_LATENCY_0; /* default value 0WS */
  ErrorStatus status = SUCCESS;

  /* Frequency cannot be equal to 0 */
  if (Frequency == 0U)
 8002ce0:	b1d8      	cbz	r0, 8002d1a <LL_SetFlashLatency+0x3a>
  {
    status = ERROR;
  }
  else
  {
    if (Frequency > UTILS_LATENCY2_FREQ)
 8002ce2:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <LL_SetFlashLatency+0x40>)
 8002ce4:	4298      	cmp	r0, r3
 8002ce6:	d816      	bhi.n	8002d16 <LL_SetFlashLatency+0x36>
      /* 48 < SYSCLK <= 72 => 2WS (3 CPU cycles) */
      latency = LL_FLASH_LATENCY_2;
    }
    else
    {
      if (Frequency > UTILS_LATENCY1_FREQ)
 8002ce8:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <LL_SetFlashLatency+0x44>)
 8002cea:	4298      	cmp	r0, r3
 8002cec:	bf94      	ite	ls
 8002cee:	2000      	movls	r0, #0
 8002cf0:	2001      	movhi	r0, #1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002cf2:	4a0d      	ldr	r2, [pc, #52]	; (8002d28 <LL_SetFlashLatency+0x48>)
 8002cf4:	6813      	ldr	r3, [r2, #0]
 8002cf6:	f023 0307 	bic.w	r3, r3, #7
 8002cfa:	4303      	orrs	r3, r0
 8002cfc:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002cfe:	6813      	ldr	r3, [r2, #0]
 8002d00:	f003 0307 	and.w	r3, r3, #7
      {
        /* Wait for Flash latency to be updated */
        getlatency = LL_FLASH_GetLatency();
        timeout--;
      }
      while ((getlatency != latency) && (timeout > 0));
 8002d04:	4298      	cmp	r0, r3
 8002d06:	bf1c      	itt	ne
 8002d08:	6813      	ldrne	r3, [r2, #0]
 8002d0a:	f003 0307 	andne.w	r3, r3, #7

      if (getlatency != latency)
 8002d0e:	1ac0      	subs	r0, r0, r3
 8002d10:	bf18      	it	ne
 8002d12:	2001      	movne	r0, #1
 8002d14:	4770      	bx	lr
      latency = LL_FLASH_LATENCY_2;
 8002d16:	2002      	movs	r0, #2
 8002d18:	e7eb      	b.n	8002cf2 <LL_SetFlashLatency+0x12>
    status = ERROR;
 8002d1a:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	02dc6c00 	.word	0x02dc6c00
 8002d24:	016e3600 	.word	0x016e3600
 8002d28:	40022000 	.word	0x40022000

08002d2c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <z_sys_init_run_level+0x40>)
{
 8002d2e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8002d30:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8002d34:	3001      	adds	r0, #1
 8002d36:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8002d3a:	42a6      	cmp	r6, r4
 8002d3c:	d800      	bhi.n	8002d40 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 8002d3e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 8002d40:	e9d4 3500 	ldrd	r3, r5, [r4]
 8002d44:	4628      	mov	r0, r5
 8002d46:	4798      	blx	r3
		if (dev != NULL) {
 8002d48:	b16d      	cbz	r5, 8002d66 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
 8002d4a:	b138      	cbz	r0, 8002d5c <z_sys_init_run_level+0x30>
				if (rc < 0) {
 8002d4c:	2800      	cmp	r0, #0
 8002d4e:	bfb8      	it	lt
 8002d50:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
 8002d52:	28ff      	cmp	r0, #255	; 0xff
 8002d54:	bfa8      	it	ge
 8002d56:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
 8002d58:	68eb      	ldr	r3, [r5, #12]
 8002d5a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8002d5c:	68ea      	ldr	r2, [r5, #12]
 8002d5e:	7853      	ldrb	r3, [r2, #1]
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8002d66:	3408      	adds	r4, #8
 8002d68:	e7e7      	b.n	8002d3a <z_sys_init_run_level+0xe>
 8002d6a:	bf00      	nop
 8002d6c:	0800535c 	.word	0x0800535c

08002d70 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 8002d70:	2201      	movs	r2, #1
{
 8002d72:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 8002d76:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
 8002d78:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 8002d7a:	f7ff ffd7 	bl	8002d2c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 8002d7e:	f000 fe9f 	bl	8003ac0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
 8002d82:	2004      	movs	r0, #4
 8002d84:	f7ff ffd2 	bl	8002d2c <z_sys_init_run_level>

	z_init_static_threads();
 8002d88:	f000 f8dc 	bl	8002f44 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
 8002d8c:	f7fd fbba 	bl	8000504 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8002d90:	4a03      	ldr	r2, [pc, #12]	; (8002da0 <bg_thread_main+0x30>)
 8002d92:	7b13      	ldrb	r3, [r2, #12]
 8002d94:	f023 0301 	bic.w	r3, r3, #1
 8002d98:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8002d9a:	bd08      	pop	{r3, pc}
 8002d9c:	2000044c 	.word	0x2000044c
 8002da0:	200001b0 	.word	0x200001b0

08002da4 <z_bss_zero>:
{
 8002da4:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 8002da6:	4803      	ldr	r0, [pc, #12]	; (8002db4 <z_bss_zero+0x10>)
 8002da8:	4a03      	ldr	r2, [pc, #12]	; (8002db8 <z_bss_zero+0x14>)
 8002daa:	2100      	movs	r1, #0
 8002dac:	1a12      	subs	r2, r2, r0
 8002dae:	f001 fe2d 	bl	8004a0c <z_early_memset>
}
 8002db2:	bd08      	pop	{r3, pc}
 8002db4:	20000140 	.word	0x20000140
 8002db8:	20000450 	.word	0x20000450

08002dbc <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
 8002dbc:	2370      	movs	r3, #112	; 0x70
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 8002dbe:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
 8002dc0:	4e13      	ldr	r6, [pc, #76]	; (8002e10 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
 8002dc2:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
 8002dc4:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
 8002dc8:	2300      	movs	r3, #0
{
 8002dca:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 8002dcc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002dd0:	220f      	movs	r2, #15
 8002dd2:	9301      	str	r3, [sp, #4]
 8002dd4:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8002dd8:	2318      	movs	r3, #24
 8002dda:	4d0e      	ldr	r5, [pc, #56]	; (8002e14 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
 8002ddc:	490e      	ldr	r1, [pc, #56]	; (8002e18 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8002dde:	fb03 5500 	mla	r5, r3, r0, r5
{
 8002de2:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 8002de4:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8002de8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dec:	4630      	mov	r0, r6
 8002dee:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <z_init_cpu+0x60>)
 8002df0:	9500      	str	r5, [sp, #0]
 8002df2:	f000 f87d 	bl	8002ef0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8002df6:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
 8002df8:	752c      	strb	r4, [r5, #20]
 8002dfa:	f023 0304 	bic.w	r3, r3, #4
 8002dfe:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8002e00:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <z_init_cpu+0x64>)
 8002e02:	3401      	adds	r4, #1
 8002e04:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 8002e08:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
 8002e0a:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
 8002e0c:	b006      	add	sp, #24
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}
 8002e10:	20000140 	.word	0x20000140
 8002e14:	20000418 	.word	0x20000418
 8002e18:	20000c50 	.word	0x20000c50
 8002e1c:	08004a15 	.word	0x08004a15
 8002e20:	20000450 	.word	0x20000450

08002e24 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
 8002e24:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 8002e26:	2000      	movs	r0, #0
{
 8002e28:	b0a2      	sub	sp, #136	; 0x88
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 8002e2a:	f7ff ff7f 	bl	8002d2c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8002e2e:	4b29      	ldr	r3, [pc, #164]	; (8002ed4 <z_cstart+0xb0>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8002e30:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8002e34:	4c28      	ldr	r4, [pc, #160]	; (8002ed8 <z_cstart+0xb4>)
 8002e36:	2500      	movs	r5, #0
 8002e38:	6963      	ldr	r3, [r4, #20]

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
 8002e3a:	4e28      	ldr	r6, [pc, #160]	; (8002edc <z_cstart+0xb8>)
 8002e3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e40:	6163      	str	r3, [r4, #20]
 8002e42:	23f0      	movs	r3, #240	; 0xf0
 8002e44:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8002e48:	77e5      	strb	r5, [r4, #31]
 8002e4a:	7625      	strb	r5, [r4, #24]
 8002e4c:	7665      	strb	r5, [r4, #25]
 8002e4e:	76a5      	strb	r5, [r4, #26]
 8002e50:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8002e54:	6a63      	ldr	r3, [r4, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002e56:	4f22      	ldr	r7, [pc, #136]	; (8002ee0 <z_cstart+0xbc>)
 8002e58:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002e5c:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8002e5e:	f7fe fa05 	bl	800126c <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8002e62:	f7fd fffd 	bl	8000e60 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8002e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e6a:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8002e6c:	62e3      	str	r3, [r4, #44]	; 0x2c
	dummy_thread->base.user_options = K_ESSENTIAL;
 8002e6e:	f240 1301 	movw	r3, #257	; 0x101
 8002e72:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 8002e76:	ab06      	add	r3, sp, #24
 8002e78:	60b3      	str	r3, [r6, #8]
	dummy_thread->resource_pool = NULL;
 8002e7a:	951f      	str	r5, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8002e7c:	f001 fd93 	bl	80049a6 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
 8002e80:	2001      	movs	r0, #1
 8002e82:	f7ff ff53 	bl	8002d2c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 8002e86:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
 8002e88:	4c16      	ldr	r4, [pc, #88]	; (8002ee4 <z_cstart+0xc0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 8002e8a:	f7ff ff4f 	bl	8002d2c <z_sys_init_run_level>
	z_sched_init();
 8002e8e:	f000 fb9f 	bl	80035d0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002e92:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <z_cstart+0xc4>)
	_kernel.ready_q.cache = &z_main_thread;
 8002e94:	61b4      	str	r4, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002e96:	9305      	str	r3, [sp, #20]
 8002e98:	2301      	movs	r3, #1
 8002e9a:	4914      	ldr	r1, [pc, #80]	; (8002eec <z_cstart+0xc8>)
 8002e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ea0:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	463b      	mov	r3, r7
 8002ea8:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8002eac:	9500      	str	r5, [sp, #0]
 8002eae:	f000 f81f 	bl	8002ef0 <z_setup_new_thread>
 8002eb2:	4606      	mov	r6, r0
 8002eb4:	7b62      	ldrb	r2, [r4, #13]
	z_ready_thread(&z_main_thread);
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	f022 0204 	bic.w	r2, r2, #4
 8002ebc:	7362      	strb	r2, [r4, #13]
 8002ebe:	f001 fe2c 	bl	8004b1a <z_ready_thread>
	z_init_cpu(0);
 8002ec2:	4628      	mov	r0, r5
 8002ec4:	f7ff ff7a 	bl	8002dbc <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8002ec8:	463a      	mov	r2, r7
 8002eca:	4631      	mov	r1, r6
 8002ecc:	4620      	mov	r0, r4
 8002ece:	f7fe f885 	bl	8000fdc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8002ed2:	bf00      	nop
 8002ed4:	20000c50 	.word	0x20000c50
 8002ed8:	e000ed00 	.word	0xe000ed00
 8002edc:	20000418 	.word	0x20000418
 8002ee0:	08002d71 	.word	0x08002d71
 8002ee4:	200001b0 	.word	0x200001b0
 8002ee8:	08005608 	.word	0x08005608
 8002eec:	20000d50 	.word	0x20000d50

08002ef0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8002ef0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 8002ef2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8002ef4:	f100 0558 	add.w	r5, r0, #88	; 0x58
 8002ef8:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 8002efa:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 8002efc:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
 8002f00:	2500      	movs	r5, #0
{
 8002f02:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
 8002f04:	7346      	strb	r6, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002f06:	3207      	adds	r2, #7

	thread_base->prio = priority;
 8002f08:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002f0a:	f022 0207 	bic.w	r2, r2, #7
	thread_base->prio = priority;
 8002f0e:	7386      	strb	r6, [r0, #14]
	stack_ptr = (char *)stack + stack_obj_size;
 8002f10:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002f12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 8002f14:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->pended_on = NULL;
 8002f18:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 8002f1a:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002f1c:	9202      	str	r2, [sp, #8]
 8002f1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f20:	9201      	str	r2, [sp, #4]
 8002f22:	9a08      	ldr	r2, [sp, #32]
 8002f24:	9200      	str	r2, [sp, #0]
 8002f26:	4632      	mov	r2, r6
 8002f28:	f7fe f83c 	bl	8000fa4 <arch_new_thread>
	if (!_current) {
 8002f2c:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
 8002f2e:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	b103      	cbz	r3, 8002f36 <z_setup_new_thread+0x46>
	new_thread->resource_pool = _current->resource_pool;
 8002f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 8002f36:	4630      	mov	r0, r6
 8002f38:	6663      	str	r3, [r4, #100]	; 0x64
 8002f3a:	b004      	add	sp, #16
 8002f3c:	bd70      	pop	{r4, r5, r6, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000418 	.word	0x20000418

08002f44 <z_init_static_threads>:
{
 8002f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f46:	4c22      	ldr	r4, [pc, #136]	; (8002fd0 <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 8002f48:	4d22      	ldr	r5, [pc, #136]	; (8002fd4 <z_init_static_threads+0x90>)
{
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 8002f4e:	42ae      	cmp	r6, r5
 8002f50:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8002f54:	d30b      	bcc.n	8002f6e <z_init_static_threads+0x2a>
	k_sched_lock();
 8002f56:	f000 fb0b 	bl	8003570 <k_sched_lock>
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8002f5a:	260a      	movs	r6, #10
	_FOREACH_STATIC_THREAD(thread_data) {
 8002f5c:	4c1c      	ldr	r4, [pc, #112]	; (8002fd0 <z_init_static_threads+0x8c>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8002f5e:	4f1e      	ldr	r7, [pc, #120]	; (8002fd8 <z_init_static_threads+0x94>)
 8002f60:	42ac      	cmp	r4, r5
 8002f62:	d320      	bcc.n	8002fa6 <z_init_static_threads+0x62>
}
 8002f64:	b007      	add	sp, #28
 8002f66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8002f6a:	f000 bb15 	b.w	8003598 <k_sched_unlock>
		z_setup_new_thread(
 8002f6e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002f72:	9305      	str	r3, [sp, #20]
 8002f74:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8002f78:	9304      	str	r3, [sp, #16]
 8002f7a:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8002f7e:	9303      	str	r3, [sp, #12]
 8002f80:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8002f84:	9302      	str	r3, [sp, #8]
 8002f86:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8002f8a:	9301      	str	r3, [sp, #4]
 8002f8c:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 8002f96:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 8002f9a:	f7ff ffa9 	bl	8002ef0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8002f9e:	f854 3c30 	ldr.w	r3, [r4, #-48]
 8002fa2:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 8002fa4:	e7d2      	b.n	8002f4c <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8002fa6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002fa8:	1c53      	adds	r3, r2, #1
 8002faa:	d009      	beq.n	8002fc0 <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 8002fac:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002fb0:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002fb4:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 8002fb8:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002fba:	d103      	bne.n	8002fc4 <z_init_static_threads+0x80>
	z_sched_start(thread);
 8002fbc:	f000 faba 	bl	8003534 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8002fc0:	3430      	adds	r4, #48	; 0x30
 8002fc2:	e7cd      	b.n	8002f60 <z_init_static_threads+0x1c>
 8002fc4:	4639      	mov	r1, r7
 8002fc6:	3018      	adds	r0, #24
 8002fc8:	f000 fc5e 	bl	8003888 <z_add_timeout>
 8002fcc:	e7f8      	b.n	8002fc0 <z_init_static_threads+0x7c>
 8002fce:	bf00      	nop
 8002fd0:	08004f84 	.word	0x08004f84
 8002fd4:	08004f84 	.word	0x08004f84
 8002fd8:	08004a87 	.word	0x08004a87

08002fdc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 8002fdc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002fe0:	4604      	mov	r4, r0
 8002fe2:	4617      	mov	r7, r2
 8002fe4:	461e      	mov	r6, r3
	__asm__ volatile(
 8002fe6:	f04f 0310 	mov.w	r3, #16
 8002fea:	f3ef 8811 	mrs	r8, BASEPRI
 8002fee:	f383 8812 	msr	BASEPRI_MAX, r3
 8002ff2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8002ff6:	68c3      	ldr	r3, [r0, #12]
 8002ff8:	4a33      	ldr	r2, [pc, #204]	; (80030c8 <z_impl_k_mutex_lock+0xec>)
 8002ffa:	b17b      	cbz	r3, 800301c <z_impl_k_mutex_lock+0x40>
 8002ffc:	6880      	ldr	r0, [r0, #8]
 8002ffe:	6891      	ldr	r1, [r2, #8]
 8003000:	4288      	cmp	r0, r1
 8003002:	d019      	beq.n	8003038 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 8003004:	ea57 0306 	orrs.w	r3, r7, r6
 8003008:	d118      	bne.n	800303c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
 800300a:	f388 8811 	msr	BASEPRI, r8
 800300e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
 8003012:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 8003016:	b002      	add	sp, #8
 8003018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
 800301c:	6891      	ldr	r1, [r2, #8]
 800301e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
 8003022:	3301      	adds	r3, #1
 8003024:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
 8003026:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 8003028:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
 800302a:	60a3      	str	r3, [r4, #8]
 800302c:	f388 8811 	msr	BASEPRI, r8
 8003030:	f3bf 8f6f 	isb	sy
		return 0;
 8003034:	2000      	movs	r0, #0
 8003036:	e7ee      	b.n	8003016 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
 8003038:	6921      	ldr	r1, [r4, #16]
 800303a:	e7f2      	b.n	8003022 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 800303c:	f991 100e 	ldrsb.w	r1, [r1, #14]
 8003040:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 8003044:	f06f 027e 	mvn.w	r2, #126	; 0x7e
 8003048:	4299      	cmp	r1, r3
 800304a:	bfa8      	it	ge
 800304c:	4619      	movge	r1, r3
 800304e:	4291      	cmp	r1, r2
 8003050:	bfb8      	it	lt
 8003052:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 8003054:	428b      	cmp	r3, r1
 8003056:	dd2e      	ble.n	80030b6 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
 8003058:	f001 fce8 	bl	8004a2c <adjust_owner_prio.isra.0>
 800305c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 800305e:	4622      	mov	r2, r4
 8003060:	4641      	mov	r1, r8
 8003062:	e9cd 7600 	strd	r7, r6, [sp]
 8003066:	4819      	ldr	r0, [pc, #100]	; (80030cc <z_impl_k_mutex_lock+0xf0>)
 8003068:	f000 f9ee 	bl	8003448 <z_pend_curr>
	if (got_mutex == 0) {
 800306c:	2800      	cmp	r0, #0
 800306e:	d0e1      	beq.n	8003034 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
 8003070:	f04f 0310 	mov.w	r3, #16
 8003074:	f3ef 8611 	mrs	r6, BASEPRI
 8003078:	f383 8812 	msr	BASEPRI_MAX, r3
 800307c:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
 8003080:	68a0      	ldr	r0, [r4, #8]
 8003082:	b1d0      	cbz	r0, 80030ba <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8003084:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 8003086:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003088:	429c      	cmp	r4, r3
 800308a:	d00a      	beq.n	80030a2 <z_impl_k_mutex_lock+0xc6>
 800308c:	b14b      	cbz	r3, 80030a2 <z_impl_k_mutex_lock+0xc6>
 800308e:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8003092:	4299      	cmp	r1, r3
 8003094:	bfa8      	it	ge
 8003096:	4619      	movge	r1, r3
 8003098:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800309c:	4299      	cmp	r1, r3
 800309e:	bfb8      	it	lt
 80030a0:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
 80030a2:	f001 fcc3 	bl	8004a2c <adjust_owner_prio.isra.0>
 80030a6:	b140      	cbz	r0, 80030ba <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
 80030a8:	4631      	mov	r1, r6
 80030aa:	4808      	ldr	r0, [pc, #32]	; (80030cc <z_impl_k_mutex_lock+0xf0>)
 80030ac:	f000 fa30 	bl	8003510 <z_reschedule>
	return -EAGAIN;
 80030b0:	f06f 000a 	mvn.w	r0, #10
 80030b4:	e7af      	b.n	8003016 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
 80030b6:	2500      	movs	r5, #0
 80030b8:	e7d1      	b.n	800305e <z_impl_k_mutex_lock+0x82>
	if (resched) {
 80030ba:	2d00      	cmp	r5, #0
 80030bc:	d1f4      	bne.n	80030a8 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
 80030be:	f386 8811 	msr	BASEPRI, r6
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	e7f3      	b.n	80030b0 <z_impl_k_mutex_lock+0xd4>
 80030c8:	20000418 	.word	0x20000418
 80030cc:	2000044d 	.word	0x2000044d

080030d0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 80030d0:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 80030d2:	6883      	ldr	r3, [r0, #8]
{
 80030d4:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
 80030d6:	b36b      	cbz	r3, 8003134 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 80030d8:	4a19      	ldr	r2, [pc, #100]	; (8003140 <z_impl_k_mutex_unlock+0x70>)
 80030da:	6892      	ldr	r2, [r2, #8]
 80030dc:	4293      	cmp	r3, r2
 80030de:	d12c      	bne.n	800313a <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 80030e0:	68c3      	ldr	r3, [r0, #12]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d903      	bls.n	80030ee <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
 80030e6:	3b01      	subs	r3, #1
 80030e8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
 80030ea:	2000      	movs	r0, #0
}
 80030ec:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 80030ee:	f04f 0310 	mov.w	r3, #16
 80030f2:	f3ef 8511 	mrs	r5, BASEPRI
 80030f6:	f383 8812 	msr	BASEPRI_MAX, r3
 80030fa:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 80030fe:	6901      	ldr	r1, [r0, #16]
 8003100:	6880      	ldr	r0, [r0, #8]
 8003102:	f001 fc93 	bl	8004a2c <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 8003106:	4620      	mov	r0, r4
 8003108:	f001 fd17 	bl	8004b3a <z_unpend_first_thread>
	mutex->owner = new_owner;
 800310c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 800310e:	b158      	cbz	r0, 8003128 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
 8003110:	f990 200e 	ldrsb.w	r2, [r0, #14]
 8003114:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8003116:	2200      	movs	r2, #0
 8003118:	66c2      	str	r2, [r0, #108]	; 0x6c
		z_ready_thread(new_owner);
 800311a:	f001 fcfe 	bl	8004b1a <z_ready_thread>
		z_reschedule(&lock, key);
 800311e:	4629      	mov	r1, r5
 8003120:	4808      	ldr	r0, [pc, #32]	; (8003144 <z_impl_k_mutex_unlock+0x74>)
 8003122:	f000 f9f5 	bl	8003510 <z_reschedule>
 8003126:	e7e0      	b.n	80030ea <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
 8003128:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 800312a:	f385 8811 	msr	BASEPRI, r5
 800312e:	f3bf 8f6f 	isb	sy
 8003132:	e7da      	b.n	80030ea <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
 8003134:	f06f 0015 	mvn.w	r0, #21
 8003138:	e7d8      	b.n	80030ec <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
 800313a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800313e:	e7d5      	b.n	80030ec <z_impl_k_mutex_unlock+0x1c>
 8003140:	20000418 	.word	0x20000418
 8003144:	2000044d 	.word	0x2000044d

08003148 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8003148:	b538      	push	{r3, r4, r5, lr}
 800314a:	4604      	mov	r4, r0
	__asm__ volatile(
 800314c:	f04f 0310 	mov.w	r3, #16
 8003150:	f3ef 8511 	mrs	r5, BASEPRI
 8003154:	f383 8812 	msr	BASEPRI_MAX, r3
 8003158:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 800315c:	f001 fced 	bl	8004b3a <z_unpend_first_thread>

	if (thread != NULL) {
 8003160:	b148      	cbz	r0, 8003176 <z_impl_k_sem_give+0x2e>
 8003162:	2200      	movs	r2, #0
 8003164:	66c2      	str	r2, [r0, #108]	; 0x6c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 8003166:	f001 fcd8 	bl	8004b1a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 800316a:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 800316c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 8003170:	4804      	ldr	r0, [pc, #16]	; (8003184 <z_impl_k_sem_give+0x3c>)
 8003172:	f000 b9cd 	b.w	8003510 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8003176:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800317a:	429a      	cmp	r2, r3
 800317c:	bf18      	it	ne
 800317e:	3301      	addne	r3, #1
 8003180:	60a3      	str	r3, [r4, #8]
}
 8003182:	e7f2      	b.n	800316a <z_impl_k_sem_give+0x22>
 8003184:	2000044d 	.word	0x2000044d

08003188 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 8003188:	b513      	push	{r0, r1, r4, lr}
 800318a:	f04f 0410 	mov.w	r4, #16
 800318e:	f3ef 8111 	mrs	r1, BASEPRI
 8003192:	f384 8812 	msr	BASEPRI_MAX, r4
 8003196:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 800319a:	6884      	ldr	r4, [r0, #8]
 800319c:	b144      	cbz	r4, 80031b0 <z_impl_k_sem_take+0x28>
		sem->count--;
 800319e:	3c01      	subs	r4, #1
 80031a0:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 80031a2:	f381 8811 	msr	BASEPRI, r1
 80031a6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 80031aa:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 80031ac:	b002      	add	sp, #8
 80031ae:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 80031b0:	ea52 0403 	orrs.w	r4, r2, r3
 80031b4:	d106      	bne.n	80031c4 <z_impl_k_sem_take+0x3c>
 80031b6:	f381 8811 	msr	BASEPRI, r1
 80031ba:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 80031be:	f06f 000f 	mvn.w	r0, #15
 80031c2:	e7f3      	b.n	80031ac <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 80031c4:	e9cd 2300 	strd	r2, r3, [sp]
 80031c8:	4602      	mov	r2, r0
 80031ca:	4802      	ldr	r0, [pc, #8]	; (80031d4 <z_impl_k_sem_take+0x4c>)
 80031cc:	f000 f93c 	bl	8003448 <z_pend_curr>
	return ret;
 80031d0:	e7ec      	b.n	80031ac <z_impl_k_sem_take+0x24>
 80031d2:	bf00      	nop
 80031d4:	2000044d 	.word	0x2000044d

080031d8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
 80031d8:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
 80031da:	4d07      	ldr	r5, [pc, #28]	; (80031f8 <z_reset_time_slice+0x20>)
 80031dc:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
 80031de:	b154      	cbz	r4, 80031f6 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
 80031e0:	f7ff fb9e 	bl	8002920 <sys_clock_elapsed>
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <z_reset_time_slice+0x24>)
 80031e6:	4404      	add	r4, r0
 80031e8:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
 80031ea:	6828      	ldr	r0, [r5, #0]
 80031ec:	2100      	movs	r1, #0
	}
}
 80031ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
 80031f2:	f001 bcfb 	b.w	8004bec <z_set_timeout_expiry>
}
 80031f6:	bd38      	pop	{r3, r4, r5, pc}
 80031f8:	20000444 	.word	0x20000444
 80031fc:	20000418 	.word	0x20000418

08003200 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
 8003200:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
 8003202:	4d0d      	ldr	r5, [pc, #52]	; (8003238 <update_cache+0x38>)
 8003204:	462b      	mov	r3, r5
 8003206:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800320a:	429c      	cmp	r4, r3
 800320c:	d000      	beq.n	8003210 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800320e:	b904      	cbnz	r4, 8003212 <update_cache+0x12>
 8003210:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 8003212:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 8003214:	b938      	cbnz	r0, 8003226 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
 8003216:	7b5a      	ldrb	r2, [r3, #13]
 8003218:	06d2      	lsls	r2, r2, #27
 800321a:	d104      	bne.n	8003226 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 800321c:	69a2      	ldr	r2, [r4, #24]
 800321e:	b912      	cbnz	r2, 8003226 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
 8003220:	89da      	ldrh	r2, [r3, #14]
 8003222:	2a7f      	cmp	r2, #127	; 0x7f
 8003224:	d805      	bhi.n	8003232 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
 8003226:	429c      	cmp	r4, r3
 8003228:	d002      	beq.n	8003230 <update_cache+0x30>
			z_reset_time_slice(thread);
 800322a:	4620      	mov	r0, r4
 800322c:	f7ff ffd4 	bl	80031d8 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
 8003230:	4623      	mov	r3, r4
 8003232:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
 8003234:	bd38      	pop	{r3, r4, r5, pc}
 8003236:	bf00      	nop
 8003238:	20000418 	.word	0x20000418

0800323c <move_thread_to_end_of_prio_q>:
{
 800323c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 800323e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 8003242:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8003244:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
 8003246:	7b43      	ldrb	r3, [r0, #13]
 8003248:	da04      	bge.n	8003254 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800324a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800324e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 8003250:	f001 fc07 	bl	8004a62 <sys_dlist_remove>
	return list->head == list;
 8003254:	4a15      	ldr	r2, [pc, #84]	; (80032ac <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
 8003256:	7b4b      	ldrb	r3, [r1, #13]
 8003258:	4610      	mov	r0, r2
 800325a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800325e:	734b      	strb	r3, [r1, #13]
 8003260:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 8003264:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003266:	4283      	cmp	r3, r0
 8003268:	bf08      	it	eq
 800326a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800326c:	b923      	cbnz	r3, 8003278 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
 800326e:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
 8003272:	6021      	str	r1, [r4, #0]
	list->tail = node;
 8003274:	6211      	str	r1, [r2, #32]
}
 8003276:	e00c      	b.n	8003292 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
 8003278:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 800327c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 8003280:	42b5      	cmp	r5, r6
 8003282:	d00e      	beq.n	80032a2 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8003284:	42ae      	cmp	r6, r5
 8003286:	dd0c      	ble.n	80032a2 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 8003288:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 800328a:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 800328e:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 8003290:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 8003292:	6890      	ldr	r0, [r2, #8]
}
 8003294:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 8003298:	1a43      	subs	r3, r0, r1
 800329a:	4258      	negs	r0, r3
 800329c:	4158      	adcs	r0, r3
 800329e:	f7ff bfaf 	b.w	8003200 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80032a2:	429c      	cmp	r4, r3
 80032a4:	d0e3      	beq.n	800326e <move_thread_to_end_of_prio_q+0x32>
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	e7e0      	b.n	800326c <move_thread_to_end_of_prio_q+0x30>
 80032aa:	bf00      	nop
 80032ac:	20000418 	.word	0x20000418

080032b0 <ready_thread>:
{
 80032b0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 80032b2:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80032b6:	7b42      	ldrb	r2, [r0, #13]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	db29      	blt.n	8003310 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 80032bc:	06d3      	lsls	r3, r2, #27
 80032be:	d127      	bne.n	8003310 <ready_thread+0x60>
	return node->next != NULL;
 80032c0:	6983      	ldr	r3, [r0, #24]
 80032c2:	bb2b      	cbnz	r3, 8003310 <ready_thread+0x60>
	return list->head == list;
 80032c4:	4913      	ldr	r1, [pc, #76]	; (8003314 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
 80032c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032ca:	7342      	strb	r2, [r0, #13]
 80032cc:	460a      	mov	r2, r1
 80032ce:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80032d2:	4294      	cmp	r4, r2
 80032d4:	bf18      	it	ne
 80032d6:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
 80032d8:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80032da:	b923      	cbnz	r3, 80032e6 <ready_thread+0x36>
	node->prev = tail;
 80032dc:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
 80032e0:	6020      	str	r0, [r4, #0]
	list->tail = node;
 80032e2:	6208      	str	r0, [r1, #32]
}
 80032e4:	e00c      	b.n	8003300 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
 80032e6:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 80032ea:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 80032ee:	42b5      	cmp	r5, r6
 80032f0:	d00a      	beq.n	8003308 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80032f2:	42ae      	cmp	r6, r5
 80032f4:	dd08      	ble.n	8003308 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
 80032f6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80032f8:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 80032fc:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 80032fe:	6058      	str	r0, [r3, #4]
		update_cache(0);
 8003300:	2000      	movs	r0, #0
}
 8003302:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 8003304:	f7ff bf7c 	b.w	8003200 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8003308:	42a3      	cmp	r3, r4
 800330a:	d0e7      	beq.n	80032dc <ready_thread+0x2c>
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	e7e4      	b.n	80032da <ready_thread+0x2a>
}
 8003310:	bc70      	pop	{r4, r5, r6}
 8003312:	4770      	bx	lr
 8003314:	20000418 	.word	0x20000418

08003318 <unready_thread>:
{
 8003318:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 800331a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 800331e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8003320:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
 8003322:	7b43      	ldrb	r3, [r0, #13]
 8003324:	da04      	bge.n	8003330 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8003326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800332a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 800332c:	f001 fb99 	bl	8004a62 <sys_dlist_remove>
	update_cache(thread == _current);
 8003330:	4b04      	ldr	r3, [pc, #16]	; (8003344 <unready_thread+0x2c>)
 8003332:	6898      	ldr	r0, [r3, #8]
 8003334:	1a43      	subs	r3, r0, r1
 8003336:	4258      	negs	r0, r3
 8003338:	4158      	adcs	r0, r3
}
 800333a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 800333e:	f7ff bf5f 	b.w	8003200 <update_cache>
 8003342:	bf00      	nop
 8003344:	20000418 	.word	0x20000418

08003348 <pend_locked>:
{
 8003348:	b570      	push	{r4, r5, r6, lr}
 800334a:	4615      	mov	r5, r2
 800334c:	461c      	mov	r4, r3
 800334e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
 8003350:	f001 fbbb 	bl	8004aca <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8003354:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003358:	bf08      	it	eq
 800335a:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 800335e:	d008      	beq.n	8003372 <pend_locked+0x2a>
 8003360:	462a      	mov	r2, r5
 8003362:	4623      	mov	r3, r4
 8003364:	f106 0018 	add.w	r0, r6, #24
 8003368:	4902      	ldr	r1, [pc, #8]	; (8003374 <pend_locked+0x2c>)
}
 800336a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800336e:	f000 ba8b 	b.w	8003888 <z_add_timeout>
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	08004a87 	.word	0x08004a87

08003378 <k_sched_time_slice_set>:
{
 8003378:	b510      	push	{r4, lr}
	__asm__ volatile(
 800337a:	f04f 0310 	mov.w	r3, #16
 800337e:	f3ef 8411 	mrs	r4, BASEPRI
 8003382:	f383 8812 	msr	BASEPRI_MAX, r3
 8003386:	f3bf 8f6f 	isb	sy
			return ((uint32_t)t) * (to_hz / from_hz);
 800338a:	230a      	movs	r3, #10
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 800338c:	2800      	cmp	r0, #0
 800338e:	fb00 f303 	mul.w	r3, r0, r3
 8003392:	dd02      	ble.n	800339a <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
 8003394:	2b02      	cmp	r3, #2
 8003396:	bfb8      	it	lt
 8003398:	2302      	movlt	r3, #2
		_current_cpu->slice_ticks = 0;
 800339a:	2000      	movs	r0, #0
 800339c:	4a06      	ldr	r2, [pc, #24]	; (80033b8 <k_sched_time_slice_set+0x40>)
 800339e:	6110      	str	r0, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
 80033a0:	4806      	ldr	r0, [pc, #24]	; (80033bc <k_sched_time_slice_set+0x44>)
 80033a2:	6003      	str	r3, [r0, #0]
		slice_max_prio = prio;
 80033a4:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <k_sched_time_slice_set+0x48>)
		z_reset_time_slice(_current);
 80033a6:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
 80033a8:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
 80033aa:	f7ff ff15 	bl	80031d8 <z_reset_time_slice>
	__asm__ volatile(
 80033ae:	f384 8811 	msr	BASEPRI, r4
 80033b2:	f3bf 8f6f 	isb	sy
}
 80033b6:	bd10      	pop	{r4, pc}
 80033b8:	20000418 	.word	0x20000418
 80033bc:	20000444 	.word	0x20000444
 80033c0:	20000440 	.word	0x20000440

080033c4 <z_time_slice>:
{
 80033c4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 80033c6:	f04f 0310 	mov.w	r3, #16
 80033ca:	f3ef 8511 	mrs	r5, BASEPRI
 80033ce:	f383 8812 	msr	BASEPRI_MAX, r3
 80033d2:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 80033d6:	4b17      	ldr	r3, [pc, #92]	; (8003434 <z_time_slice+0x70>)
 80033d8:	4a17      	ldr	r2, [pc, #92]	; (8003438 <z_time_slice+0x74>)
 80033da:	689c      	ldr	r4, [r3, #8]
 80033dc:	6811      	ldr	r1, [r2, #0]
 80033de:	428c      	cmp	r4, r1
 80033e0:	d107      	bne.n	80033f2 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
 80033e2:	4620      	mov	r0, r4
 80033e4:	f7ff fef8 	bl	80031d8 <z_reset_time_slice>
	__asm__ volatile(
 80033e8:	f385 8811 	msr	BASEPRI, r5
 80033ec:	f3bf 8f6f 	isb	sy
}
 80033f0:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 80033f2:	2100      	movs	r1, #0
 80033f4:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
 80033f6:	4a11      	ldr	r2, [pc, #68]	; (800343c <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
 80033f8:	6812      	ldr	r2, [r2, #0]
 80033fa:	b1c2      	cbz	r2, 800342e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 80033fc:	89e2      	ldrh	r2, [r4, #14]
 80033fe:	2a7f      	cmp	r2, #127	; 0x7f
 8003400:	d815      	bhi.n	800342e <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
 8003402:	7b62      	ldrb	r2, [r4, #13]
 8003404:	06d2      	lsls	r2, r2, #27
 8003406:	d112      	bne.n	800342e <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8003408:	4a0d      	ldr	r2, [pc, #52]	; (8003440 <z_time_slice+0x7c>)
 800340a:	f994 100e 	ldrsb.w	r1, [r4, #14]
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	4291      	cmp	r1, r2
 8003412:	db0c      	blt.n	800342e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 8003414:	4a0b      	ldr	r2, [pc, #44]	; (8003444 <z_time_slice+0x80>)
 8003416:	4294      	cmp	r4, r2
 8003418:	d009      	beq.n	800342e <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	4282      	cmp	r2, r0
 800341e:	dc03      	bgt.n	8003428 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
 8003420:	4620      	mov	r0, r4
 8003422:	f7ff ff0b 	bl	800323c <move_thread_to_end_of_prio_q>
 8003426:	e7dc      	b.n	80033e2 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
 8003428:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
 800342a:	611a      	str	r2, [r3, #16]
 800342c:	e7dc      	b.n	80033e8 <z_time_slice+0x24>
 800342e:	2200      	movs	r2, #0
 8003430:	e7fb      	b.n	800342a <z_time_slice+0x66>
 8003432:	bf00      	nop
 8003434:	20000418 	.word	0x20000418
 8003438:	2000043c 	.word	0x2000043c
 800343c:	20000444 	.word	0x20000444
 8003440:	20000440 	.word	0x20000440
 8003444:	20000140 	.word	0x20000140

08003448 <z_pend_curr>:
{
 8003448:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
 800344a:	480c      	ldr	r0, [pc, #48]	; (800347c <z_pend_curr+0x34>)
 800344c:	4d0c      	ldr	r5, [pc, #48]	; (8003480 <z_pend_curr+0x38>)
 800344e:	6886      	ldr	r6, [r0, #8]
{
 8003450:	460c      	mov	r4, r1
	pending_current = _current;
 8003452:	602e      	str	r6, [r5, #0]
{
 8003454:	4611      	mov	r1, r2
 8003456:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
 800345a:	f04f 0610 	mov.w	r6, #16
 800345e:	f3ef 8511 	mrs	r5, BASEPRI
 8003462:	f386 8812 	msr	BASEPRI_MAX, r6
 8003466:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
 800346a:	6880      	ldr	r0, [r0, #8]
 800346c:	f7ff ff6c 	bl	8003348 <pend_locked>
	ret = arch_swap(key);
 8003470:	4620      	mov	r0, r4
}
 8003472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003476:	f7fd bd47 	b.w	8000f08 <arch_swap>
 800347a:	bf00      	nop
 800347c:	20000418 	.word	0x20000418
 8003480:	2000043c 	.word	0x2000043c

08003484 <z_set_prio>:
{
 8003484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003486:	4604      	mov	r4, r0
 8003488:	f04f 0310 	mov.w	r3, #16
 800348c:	f3ef 8611 	mrs	r6, BASEPRI
 8003490:	f383 8812 	msr	BASEPRI_MAX, r3
 8003494:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
 8003498:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
 800349a:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800349c:	06da      	lsls	r2, r3, #27
 800349e:	d119      	bne.n	80034d4 <z_set_prio+0x50>
	return node->next != NULL;
 80034a0:	6985      	ldr	r5, [r0, #24]
 80034a2:	b9bd      	cbnz	r5, 80034d4 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80034a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034a8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80034aa:	f001 fada 	bl	8004a62 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 80034ae:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
 80034b0:	4a16      	ldr	r2, [pc, #88]	; (800350c <z_set_prio+0x88>)
 80034b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034b6:	7343      	strb	r3, [r0, #13]
 80034b8:	4613      	mov	r3, r2
				thread->base.prio = prio;
 80034ba:	7381      	strb	r1, [r0, #14]
 80034bc:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80034c0:	4298      	cmp	r0, r3
 80034c2:	bf18      	it	ne
 80034c4:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
 80034c6:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80034c8:	b95d      	cbnz	r5, 80034e2 <z_set_prio+0x5e>
	node->prev = tail;
 80034ca:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
 80034ce:	6004      	str	r4, [r0, #0]
	list->tail = node;
 80034d0:	6214      	str	r4, [r2, #32]
}
 80034d2:	e011      	b.n	80034f8 <z_set_prio+0x74>
 80034d4:	2000      	movs	r0, #0
			thread->base.prio = prio;
 80034d6:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
 80034d8:	f386 8811 	msr	BASEPRI, r6
 80034dc:	f3bf 8f6f 	isb	sy
}
 80034e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
 80034e2:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
 80034e6:	42b9      	cmp	r1, r7
 80034e8:	d00b      	beq.n	8003502 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80034ea:	428f      	cmp	r7, r1
 80034ec:	dd09      	ble.n	8003502 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
 80034ee:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
 80034f0:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
 80034f4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 80034f6:	606c      	str	r4, [r5, #4]
			update_cache(1);
 80034f8:	2001      	movs	r0, #1
 80034fa:	f7ff fe81 	bl	8003200 <update_cache>
 80034fe:	2001      	movs	r0, #1
 8003500:	e7ea      	b.n	80034d8 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
 8003502:	42a8      	cmp	r0, r5
 8003504:	d0e1      	beq.n	80034ca <z_set_prio+0x46>
 8003506:	682d      	ldr	r5, [r5, #0]
 8003508:	e7de      	b.n	80034c8 <z_set_prio+0x44>
 800350a:	bf00      	nop
 800350c:	20000418 	.word	0x20000418

08003510 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8003510:	b949      	cbnz	r1, 8003526 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003512:	f3ef 8005 	mrs	r0, IPSR
 8003516:	b930      	cbnz	r0, 8003526 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 800351a:	699a      	ldr	r2, [r3, #24]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	429a      	cmp	r2, r3
 8003520:	d001      	beq.n	8003526 <z_reschedule+0x16>
 8003522:	f7fd bcf1 	b.w	8000f08 <arch_swap>
 8003526:	f381 8811 	msr	BASEPRI, r1
 800352a:	f3bf 8f6f 	isb	sy
}
 800352e:	4770      	bx	lr
 8003530:	20000418 	.word	0x20000418

08003534 <z_sched_start>:
{
 8003534:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003536:	f04f 0210 	mov.w	r2, #16
 800353a:	f3ef 8411 	mrs	r4, BASEPRI
 800353e:	f382 8812 	msr	BASEPRI_MAX, r2
 8003542:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 8003546:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 8003548:	0751      	lsls	r1, r2, #29
 800354a:	d404      	bmi.n	8003556 <z_sched_start+0x22>
	__asm__ volatile(
 800354c:	f384 8811 	msr	BASEPRI, r4
 8003550:	f3bf 8f6f 	isb	sy
}
 8003554:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8003556:	f022 0204 	bic.w	r2, r2, #4
 800355a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 800355c:	f7ff fea8 	bl	80032b0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8003560:	4621      	mov	r1, r4
}
 8003562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 8003566:	4801      	ldr	r0, [pc, #4]	; (800356c <z_sched_start+0x38>)
 8003568:	f7ff bfd2 	b.w	8003510 <z_reschedule>
 800356c:	2000044d 	.word	0x2000044d

08003570 <k_sched_lock>:
	__asm__ volatile(
 8003570:	f04f 0310 	mov.w	r3, #16
 8003574:	f3ef 8111 	mrs	r1, BASEPRI
 8003578:	f383 8812 	msr	BASEPRI_MAX, r3
 800357c:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 8003580:	4b04      	ldr	r3, [pc, #16]	; (8003594 <k_sched_lock+0x24>)
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	7bd3      	ldrb	r3, [r2, #15]
 8003586:	3b01      	subs	r3, #1
 8003588:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 800358a:	f381 8811 	msr	BASEPRI, r1
 800358e:	f3bf 8f6f 	isb	sy
}
 8003592:	4770      	bx	lr
 8003594:	20000418 	.word	0x20000418

08003598 <k_sched_unlock>:
{
 8003598:	b510      	push	{r4, lr}
	__asm__ volatile(
 800359a:	f04f 0310 	mov.w	r3, #16
 800359e:	f3ef 8411 	mrs	r4, BASEPRI
 80035a2:	f383 8812 	msr	BASEPRI_MAX, r3
 80035a6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 80035aa:	4b08      	ldr	r3, [pc, #32]	; (80035cc <k_sched_unlock+0x34>)
		update_cache(0);
 80035ac:	2000      	movs	r0, #0
		++_current->base.sched_locked;
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	7bd3      	ldrb	r3, [r2, #15]
 80035b2:	3301      	adds	r3, #1
 80035b4:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 80035b6:	f7ff fe23 	bl	8003200 <update_cache>
	__asm__ volatile(
 80035ba:	f384 8811 	msr	BASEPRI, r4
 80035be:	f3bf 8f6f 	isb	sy
}
 80035c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 80035c6:	f001 bae0 	b.w	8004b8a <z_reschedule_unlocked>
 80035ca:	bf00      	nop
 80035cc:	20000418 	.word	0x20000418

080035d0 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 80035d0:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
 80035d2:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <z_sched_init+0x14>)
 80035d4:	4608      	mov	r0, r1
 80035d6:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
 80035da:	e9c3 2207 	strd	r2, r2, [r3, #28]
 80035de:	f7ff becb 	b.w	8003378 <k_sched_time_slice_set>
 80035e2:	bf00      	nop
 80035e4:	20000418 	.word	0x20000418

080035e8 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
 80035e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 80035ea:	f04f 0310 	mov.w	r3, #16
 80035ee:	f3ef 8511 	mrs	r5, BASEPRI
 80035f2:	f383 8812 	msr	BASEPRI_MAX, r3
 80035f6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 80035fa:	4919      	ldr	r1, [pc, #100]	; (8003660 <z_impl_k_yield+0x78>)
 80035fc:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80035fe:	7b43      	ldrb	r3, [r0, #13]
 8003600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003604:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8003606:	f001 fa2c 	bl	8004a62 <sys_dlist_remove>
	return list->head == list;
 800360a:	4608      	mov	r0, r1
	}
	queue_thread(_current);
 800360c:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 800360e:	7b5a      	ldrb	r2, [r3, #13]
 8003610:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003614:	735a      	strb	r2, [r3, #13]
 8003616:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
 800361a:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800361c:	4282      	cmp	r2, r0
 800361e:	bf08      	it	eq
 8003620:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003622:	b922      	cbnz	r2, 800362e <z_impl_k_yield+0x46>
	node->prev = tail;
 8003624:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
 8003628:	6023      	str	r3, [r4, #0]
	list->tail = node;
 800362a:	620b      	str	r3, [r1, #32]
}
 800362c:	e00c      	b.n	8003648 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
 800362e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 8003632:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
 8003636:	42be      	cmp	r6, r7
 8003638:	d00e      	beq.n	8003658 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800363a:	42b7      	cmp	r7, r6
 800363c:	dd0c      	ble.n	8003658 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
 800363e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8003640:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 8003644:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 8003646:	6053      	str	r3, [r2, #4]
	update_cache(1);
 8003648:	2001      	movs	r0, #1
 800364a:	f7ff fdd9 	bl	8003200 <update_cache>
 800364e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 8003650:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003654:	f7fd bc58 	b.w	8000f08 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 8003658:	42a2      	cmp	r2, r4
 800365a:	d0e3      	beq.n	8003624 <z_impl_k_yield+0x3c>
 800365c:	6812      	ldr	r2, [r2, #0]
 800365e:	e7e0      	b.n	8003622 <z_impl_k_yield+0x3a>
 8003660:	20000418 	.word	0x20000418

08003664 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 8003664:	ea50 0301 	orrs.w	r3, r0, r1
{
 8003668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800366c:	4605      	mov	r5, r0
 800366e:	460e      	mov	r6, r1
	if (ticks == 0) {
 8003670:	d103      	bne.n	800367a <z_tick_sleep+0x16>
	z_impl_k_yield();
 8003672:	f7ff ffb9 	bl	80035e8 <z_impl_k_yield>
		k_yield();
		return 0;
 8003676:	2000      	movs	r0, #0
 8003678:	e02c      	b.n	80036d4 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
 800367a:	1c83      	adds	r3, r0, #2
 800367c:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
 8003680:	db2a      	blt.n	80036d8 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8003682:	f001 facf 	bl	8004c24 <sys_clock_tick_get_32>
 8003686:	182c      	adds	r4, r5, r0
 8003688:	f04f 0310 	mov.w	r3, #16
 800368c:	f3ef 8811 	mrs	r8, BASEPRI
 8003690:	f383 8812 	msr	BASEPRI_MAX, r3
 8003694:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 8003698:	4f11      	ldr	r7, [pc, #68]	; (80036e0 <z_tick_sleep+0x7c>)
 800369a:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <z_tick_sleep+0x80>)
 800369c:	68b8      	ldr	r0, [r7, #8]
 800369e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
 80036a0:	f7ff fe3a 	bl	8003318 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 80036a4:	68b8      	ldr	r0, [r7, #8]
 80036a6:	4910      	ldr	r1, [pc, #64]	; (80036e8 <z_tick_sleep+0x84>)
 80036a8:	462a      	mov	r2, r5
 80036aa:	4633      	mov	r3, r6
 80036ac:	3018      	adds	r0, #24
 80036ae:	f000 f8eb 	bl	8003888 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
 80036b6:	7b53      	ldrb	r3, [r2, #13]
 80036b8:	f043 0310 	orr.w	r3, r3, #16
 80036bc:	7353      	strb	r3, [r2, #13]
 80036be:	f7fd fc23 	bl	8000f08 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 80036c2:	f001 faaf 	bl	8004c24 <sys_clock_tick_get_32>
 80036c6:	1a20      	subs	r0, r4, r0
 80036c8:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 80036cc:	2801      	cmp	r0, #1
 80036ce:	f173 0300 	sbcs.w	r3, r3, #0
 80036d2:	dbd0      	blt.n	8003676 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
 80036d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 80036d8:	f06f 0401 	mvn.w	r4, #1
 80036dc:	1a24      	subs	r4, r4, r0
 80036de:	e7d3      	b.n	8003688 <z_tick_sleep+0x24>
 80036e0:	20000418 	.word	0x20000418
 80036e4:	2000043c 	.word	0x2000043c
 80036e8:	08004a87 	.word	0x08004a87

080036ec <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 80036ec:	4b01      	ldr	r3, [pc, #4]	; (80036f4 <z_impl_z_current_get+0x8>)
 80036ee:	6898      	ldr	r0, [r3, #8]
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	20000418 	.word	0x20000418

080036f8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 80036f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036fc:	4604      	mov	r4, r0
 80036fe:	f04f 0310 	mov.w	r3, #16
 8003702:	f3ef 8611 	mrs	r6, BASEPRI
 8003706:	f383 8812 	msr	BASEPRI_MAX, r3
 800370a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
 800370e:	7b03      	ldrb	r3, [r0, #12]
 8003710:	07d9      	lsls	r1, r3, #31
 8003712:	d50b      	bpl.n	800372c <z_thread_abort+0x34>
	__asm__ volatile(
 8003714:	f386 8811 	msr	BASEPRI, r6
 8003718:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
 800371c:	4040      	eors	r0, r0
 800371e:	f380 8811 	msr	BASEPRI, r0
 8003722:	f04f 0004 	mov.w	r0, #4
 8003726:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8003728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 800372c:	7b43      	ldrb	r3, [r0, #13]
 800372e:	071a      	lsls	r2, r3, #28
 8003730:	d504      	bpl.n	800373c <z_thread_abort+0x44>
 8003732:	f386 8811 	msr	BASEPRI, r6
 8003736:	f3bf 8f6f 	isb	sy
 800373a:	e7f5      	b.n	8003728 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 800373c:	f023 0220 	bic.w	r2, r3, #32
 8003740:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 8003744:	09d2      	lsrs	r2, r2, #7
 8003746:	d120      	bne.n	800378a <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8003748:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 800374a:	68a3      	ldr	r3, [r4, #8]
 800374c:	b113      	cbz	r3, 8003754 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
 800374e:	4620      	mov	r0, r4
 8003750:	f001 f98f 	bl	8004a72 <unpend_thread_no_timeout>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8003754:	f104 0018 	add.w	r0, r4, #24
 8003758:	f001 fa32 	bl	8004bc0 <z_abort_timeout>
 800375c:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8003760:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
 8003764:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003766:	42bd      	cmp	r5, r7
 8003768:	d000      	beq.n	800376c <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 800376a:	b9b5      	cbnz	r5, 800379a <z_thread_abort+0xa2>
		update_cache(1);
 800376c:	2001      	movs	r0, #1
 800376e:	f7ff fd47 	bl	8003200 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 8003772:	4b10      	ldr	r3, [pc, #64]	; (80037b4 <z_thread_abort+0xbc>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	42a3      	cmp	r3, r4
 8003778:	d1db      	bne.n	8003732 <z_thread_abort+0x3a>
 800377a:	f3ef 8305 	mrs	r3, IPSR
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1d7      	bne.n	8003732 <z_thread_abort+0x3a>
 8003782:	4630      	mov	r0, r6
 8003784:	f7fd fbc0 	bl	8000f08 <arch_swap>
	return ret;
 8003788:	e7d3      	b.n	8003732 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800378a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 800378e:	f043 0308 	orr.w	r3, r3, #8
 8003792:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8003794:	f001 f965 	bl	8004a62 <sys_dlist_remove>
}
 8003798:	e7d7      	b.n	800374a <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
 800379a:	4628      	mov	r0, r5
 800379c:	f001 f969 	bl	8004a72 <unpend_thread_no_timeout>
 80037a0:	f105 0018 	add.w	r0, r5, #24
 80037a4:	f001 fa0c 	bl	8004bc0 <z_abort_timeout>
		ready_thread(thread);
 80037a8:	4628      	mov	r0, r5
 80037aa:	f8c5 806c 	str.w	r8, [r5, #108]	; 0x6c
 80037ae:	f7ff fd7f 	bl	80032b0 <ready_thread>
 80037b2:	e7d7      	b.n	8003764 <z_thread_abort+0x6c>
 80037b4:	20000418 	.word	0x20000418

080037b8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 80037b8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 80037ba:	4806      	ldr	r0, [pc, #24]	; (80037d4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 80037bc:	4a06      	ldr	r2, [pc, #24]	; (80037d8 <z_data_copy+0x20>)
 80037be:	4907      	ldr	r1, [pc, #28]	; (80037dc <z_data_copy+0x24>)
 80037c0:	1a12      	subs	r2, r2, r0
 80037c2:	f001 f925 	bl	8004a10 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 80037c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 80037ca:	4a05      	ldr	r2, [pc, #20]	; (80037e0 <z_data_copy+0x28>)
 80037cc:	4905      	ldr	r1, [pc, #20]	; (80037e4 <z_data_copy+0x2c>)
 80037ce:	4806      	ldr	r0, [pc, #24]	; (80037e8 <z_data_copy+0x30>)
 80037d0:	f001 b91e 	b.w	8004a10 <z_early_memcpy>
 80037d4:	20000000 	.word	0x20000000
 80037d8:	20000140 	.word	0x20000140
 80037dc:	08005650 	.word	0x08005650
 80037e0:	00000000 	.word	0x00000000
 80037e4:	08005650 	.word	0x08005650
 80037e8:	20000000 	.word	0x20000000

080037ec <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 80037ec:	4b03      	ldr	r3, [pc, #12]	; (80037fc <elapsed+0x10>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	b90b      	cbnz	r3, 80037f6 <elapsed+0xa>
 80037f2:	f7ff b895 	b.w	8002920 <sys_clock_elapsed>
}
 80037f6:	2000      	movs	r0, #0
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	20000448 	.word	0x20000448

08003800 <next_timeout>:

static int32_t next_timeout(void)
{
 8003800:	b510      	push	{r4, lr}
	return list->head == list;
 8003802:	4b11      	ldr	r3, [pc, #68]	; (8003848 <next_timeout+0x48>)
 8003804:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003806:	429c      	cmp	r4, r3
 8003808:	d10a      	bne.n	8003820 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 800380a:	f7ff ffef 	bl	80037ec <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
 800380e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8003812:	4b0e      	ldr	r3, [pc, #56]	; (800384c <next_timeout+0x4c>)
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	b113      	cbz	r3, 800381e <next_timeout+0x1e>
 8003818:	4298      	cmp	r0, r3
 800381a:	bfa8      	it	ge
 800381c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 800381e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
 8003820:	f7ff ffe4 	bl	80037ec <elapsed>
	if ((to == NULL) ||
 8003824:	2c00      	cmp	r4, #0
 8003826:	d0f2      	beq.n	800380e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 8003828:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800382c:	1a1b      	subs	r3, r3, r0
 800382e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
 8003832:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003836:	f172 0100 	sbcs.w	r1, r2, #0
 800383a:	dae8      	bge.n	800380e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
 800383c:	2a00      	cmp	r2, #0
 800383e:	bfac      	ite	ge
 8003840:	4618      	movge	r0, r3
 8003842:	2000      	movlt	r0, #0
 8003844:	e7e5      	b.n	8003812 <next_timeout+0x12>
 8003846:	bf00      	nop
 8003848:	2000008c 	.word	0x2000008c
 800384c:	20000418 	.word	0x20000418

08003850 <remove_timeout>:
{
 8003850:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8003852:	b170      	cbz	r0, 8003872 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 8003854:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <remove_timeout+0x34>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	4298      	cmp	r0, r3
 800385a:	d00a      	beq.n	8003872 <remove_timeout+0x22>
 800385c:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
 800385e:	b143      	cbz	r3, 8003872 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 8003860:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8003864:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8003868:	1912      	adds	r2, r2, r4
 800386a:	eb41 0105 	adc.w	r1, r1, r5
 800386e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 8003872:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
 8003876:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8003878:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800387a:	2300      	movs	r3, #0
	node->prev = NULL;
 800387c:	e9c0 3300 	strd	r3, r3, [r0]
}
 8003880:	bd30      	pop	{r4, r5, pc}
 8003882:	bf00      	nop
 8003884:	2000008c 	.word	0x2000008c

08003888 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8003888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800388c:	bf08      	it	eq
 800388e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 8003892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003894:	4604      	mov	r4, r0
 8003896:	461d      	mov	r5, r3
 8003898:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800389a:	d061      	beq.n	8003960 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 800389c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 800389e:	f04f 0310 	mov.w	r3, #16
 80038a2:	f3ef 8711 	mrs	r7, BASEPRI
 80038a6:	f383 8812 	msr	BASEPRI_MAX, r3
 80038aa:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 80038ae:	3201      	adds	r2, #1
 80038b0:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
 80038b4:	da24      	bge.n	8003900 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 80038b6:	f06f 0301 	mvn.w	r3, #1
 80038ba:	492f      	ldr	r1, [pc, #188]	; (8003978 <z_add_timeout+0xf0>)
 80038bc:	e9d1 2000 	ldrd	r2, r0, [r1]
 80038c0:	1a9b      	subs	r3, r3, r2
 80038c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038c6:	eb62 0000 	sbc.w	r0, r2, r0
 80038ca:	1b9e      	subs	r6, r3, r6
 80038cc:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
 80038d0:	2e01      	cmp	r6, #1
 80038d2:	f170 0300 	sbcs.w	r3, r0, #0
 80038d6:	da01      	bge.n	80038dc <z_add_timeout+0x54>
 80038d8:	2601      	movs	r6, #1
 80038da:	2000      	movs	r0, #0
 80038dc:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
 80038e0:	4e26      	ldr	r6, [pc, #152]	; (800397c <z_add_timeout+0xf4>)
 80038e2:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
 80038e6:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80038e8:	45b4      	cmp	ip, r6
 80038ea:	bf08      	it	eq
 80038ec:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
 80038f0:	f1bc 0f00 	cmp.w	ip, #0
 80038f4:	d10d      	bne.n	8003912 <z_add_timeout+0x8a>
	node->prev = tail;
 80038f6:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
 80038fa:	602c      	str	r4, [r5, #0]
	list->tail = node;
 80038fc:	6074      	str	r4, [r6, #4]
}
 80038fe:	e01c      	b.n	800393a <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
 8003900:	f7ff ff74 	bl	80037ec <elapsed>
 8003904:	3601      	adds	r6, #1
 8003906:	f145 0500 	adc.w	r5, r5, #0
 800390a:	1836      	adds	r6, r6, r0
 800390c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 8003910:	e7e4      	b.n	80038dc <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
 8003912:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
 8003916:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 800391a:	4293      	cmp	r3, r2
 800391c:	eb71 0e00 	sbcs.w	lr, r1, r0
 8003920:	da1f      	bge.n	8003962 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
 8003922:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
 8003924:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8003928:	eb60 0001 	sbc.w	r0, r0, r1
 800392c:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
 8003930:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
 8003934:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8003936:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
 800393a:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800393c:	42b3      	cmp	r3, r6
 800393e:	d00b      	beq.n	8003958 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8003940:	429c      	cmp	r4, r3
 8003942:	d109      	bne.n	8003958 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 8003944:	f7ff ff5c 	bl	8003800 <next_timeout>

			if (next_time == 0 ||
 8003948:	b118      	cbz	r0, 8003952 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
 800394a:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	4283      	cmp	r3, r0
 8003950:	d002      	beq.n	8003958 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
 8003952:	2100      	movs	r1, #0
 8003954:	f7fe ff74 	bl	8002840 <sys_clock_set_timeout>
	__asm__ volatile(
 8003958:	f387 8811 	msr	BASEPRI, r7
 800395c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8003960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
 8003962:	1a9b      	subs	r3, r3, r2
 8003964:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 8003968:	45ac      	cmp	ip, r5
 800396a:	e9c4 3104 	strd	r3, r1, [r4, #16]
 800396e:	d0c2      	beq.n	80038f6 <z_add_timeout+0x6e>
 8003970:	f8dc c000 	ldr.w	ip, [ip]
 8003974:	e7bc      	b.n	80038f0 <z_add_timeout+0x68>
 8003976:	bf00      	nop
 8003978:	20000220 	.word	0x20000220
 800397c:	2000008c 	.word	0x2000008c
 8003980:	20000418 	.word	0x20000418

08003984 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8003984:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003988:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 800398a:	f7ff fd1b 	bl	80033c4 <z_time_slice>
	__asm__ volatile(
 800398e:	f04f 0310 	mov.w	r3, #16
 8003992:	f3ef 8c11 	mrs	ip, BASEPRI
 8003996:	f383 8812 	msr	BASEPRI_MAX, r3
 800399a:	f3bf 8f6f 	isb	sy
	return list->head == list;
 800399e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8003a50 <sys_clock_announce+0xcc>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 80039a2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8003a54 <sys_clock_announce+0xd0>
 80039a6:	f8da 0000 	ldr.w	r0, [sl]
 80039aa:	f8c9 4000 	str.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80039ae:	4550      	cmp	r0, sl
 80039b0:	bf08      	it	eq
 80039b2:	2000      	moveq	r0, #0
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
 80039b4:	2400      	movs	r4, #0
 80039b6:	2500      	movs	r5, #0
		curr_tick += dt;
 80039b8:	4f27      	ldr	r7, [pc, #156]	; (8003a58 <sys_clock_announce+0xd4>)
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
 80039ba:	46e0      	mov	r8, ip
 80039bc:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
 80039c0:	f8d9 3000 	ldr.w	r3, [r9]
 80039c4:	b380      	cbz	r0, 8003a28 <sys_clock_announce+0xa4>
 80039c6:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
 80039ca:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 80039ce:	42b3      	cmp	r3, r6
 80039d0:	eb7e 0b0c 	sbcs.w	fp, lr, ip
 80039d4:	da05      	bge.n	80039e2 <sys_clock_announce+0x5e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
 80039d6:	1af6      	subs	r6, r6, r3
 80039d8:	eb6c 040e 	sbc.w	r4, ip, lr
 80039dc:	e9c0 6404 	strd	r6, r4, [r0, #16]
 80039e0:	e022      	b.n	8003a28 <sys_clock_announce+0xa4>
		curr_tick += dt;
 80039e2:	18b2      	adds	r2, r6, r2
 80039e4:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
 80039e8:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
 80039ec:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
 80039f0:	f7ff ff2e 	bl	8003850 <remove_timeout>
	__asm__ volatile(
 80039f4:	f388 8811 	msr	BASEPRI, r8
 80039f8:	f3bf 8f6f 	isb	sy
		t->fn(t);
 80039fc:	6883      	ldr	r3, [r0, #8]
 80039fe:	4798      	blx	r3
	__asm__ volatile(
 8003a00:	f04f 0310 	mov.w	r3, #16
 8003a04:	f3ef 8811 	mrs	r8, BASEPRI
 8003a08:	f383 8812 	msr	BASEPRI_MAX, r3
 8003a0c:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
 8003a10:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
 8003a14:	f8da 0000 	ldr.w	r0, [sl]
 8003a18:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003a1a:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
 8003a1c:	46c4      	mov	ip, r8
 8003a1e:	f8c9 3000 	str.w	r3, [r9]
 8003a22:	d1ca      	bne.n	80039ba <sys_clock_announce+0x36>
		curr_tick += dt;
 8003a24:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
 8003a28:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 8003a2a:	189a      	adds	r2, r3, r2
 8003a2c:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
 8003a30:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
 8003a34:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
 8003a38:	f7ff fee2 	bl	8003800 <next_timeout>
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	f7fe feff 	bl	8002840 <sys_clock_set_timeout>
	__asm__ volatile(
 8003a42:	f388 8811 	msr	BASEPRI, r8
 8003a46:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8003a4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a4e:	bf00      	nop
 8003a50:	2000008c 	.word	0x2000008c
 8003a54:	20000448 	.word	0x20000448
 8003a58:	20000220 	.word	0x20000220

08003a5c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8003a5c:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003a5e:	f04f 0310 	mov.w	r3, #16
 8003a62:	f3ef 8411 	mrs	r4, BASEPRI
 8003a66:	f383 8812 	msr	BASEPRI_MAX, r3
 8003a6a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
 8003a6e:	f7ff febd 	bl	80037ec <elapsed>
 8003a72:	4603      	mov	r3, r0
 8003a74:	4a05      	ldr	r2, [pc, #20]	; (8003a8c <sys_clock_tick_get+0x30>)
 8003a76:	e9d2 0100 	ldrd	r0, r1, [r2]
 8003a7a:	1818      	adds	r0, r3, r0
 8003a7c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
 8003a80:	f384 8811 	msr	BASEPRI, r4
 8003a84:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8003a88:	bd10      	pop	{r4, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20000220 	.word	0x20000220

08003a90 <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 8003a90:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 8003a92:	4604      	mov	r4, r0
 8003a94:	b178      	cbz	r0, 8003ab6 <z_impl_k_busy_wait+0x26>
 8003a96:	f7fe ff61 	bl	800295c <sys_clock_cycle_get_32>
 8003a9a:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 8003a9c:	4806      	ldr	r0, [pc, #24]	; (8003ab8 <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	fba4 0100 	umull	r0, r1, r4, r0
 8003aa4:	4a05      	ldr	r2, [pc, #20]	; (8003abc <z_impl_k_busy_wait+0x2c>)
 8003aa6:	f7fc fb23 	bl	80000f0 <__aeabi_uldivmod>
 8003aaa:	4604      	mov	r4, r0
 8003aac:	f7fe ff56 	bl	800295c <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8003ab0:	1b43      	subs	r3, r0, r5
 8003ab2:	42a3      	cmp	r3, r4
 8003ab4:	d3fa      	bcc.n	8003aac <z_impl_k_busy_wait+0x1c>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 8003ab6:	bd38      	pop	{r3, r4, r5, pc}
 8003ab8:	044aa200 	.word	0x044aa200
 8003abc:	000f4240 	.word	0x000f4240

08003ac0 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
 8003ac0:	4801      	ldr	r0, [pc, #4]	; (8003ac8 <boot_banner+0x8>)
 8003ac2:	f000 b837 	b.w	8003b34 <printk>
 8003ac6:	bf00      	nop
 8003ac8:	08005610 	.word	0x08005610

08003acc <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 8003acc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
 8003ace:	4c06      	ldr	r4, [pc, #24]	; (8003ae8 <statics_init+0x1c>)
 8003ad0:	4d06      	ldr	r5, [pc, #24]	; (8003aec <statics_init+0x20>)
 8003ad2:	42ac      	cmp	r4, r5
 8003ad4:	d301      	bcc.n	8003ada <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 8003ada:	4620      	mov	r0, r4
 8003adc:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8003ae0:	f001 f8a4 	bl	8004c2c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 8003ae4:	3414      	adds	r4, #20
 8003ae6:	e7f4      	b.n	8003ad2 <statics_init+0x6>
 8003ae8:	20000140 	.word	0x20000140
 8003aec:	20000140 	.word	0x20000140

08003af0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8003af0:	4770      	bx	lr

08003af2 <gpio_pin_configure_dt.constprop.0.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
 8003af2:	4603      	mov	r3, r0
 8003af4:	b4f0      	push	{r4, r5, r6, r7}
				  spec->pin,
 8003af6:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
 8003af8:	6800      	ldr	r0, [r0, #0]
				  spec->dt_flags | extra_flags);
 8003afa:	88db      	ldrh	r3, [r3, #6]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8003afc:	2501      	movs	r5, #1
	struct gpio_driver_data *data =
 8003afe:	6906      	ldr	r6, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8003b00:	07da      	lsls	r2, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8003b02:	6834      	ldr	r4, [r6, #0]
	return gpio_pin_configure(spec->port,
 8003b04:	bf54      	ite	pl
 8003b06:	f443 13d0 	orrpl.w	r3, r3, #1703936	; 0x1a0000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8003b0a:	f483 13b0 	eormi.w	r3, r3, #1441792	; 0x160000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8003b0e:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8003b10:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8003b14:	07db      	lsls	r3, r3, #31
	const struct gpio_driver_api *api =
 8003b16:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8003b18:	bf4c      	ite	mi
 8003b1a:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8003b1c:	43ac      	bicpl	r4, r5
 8003b1e:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
 8003b20:	683b      	ldr	r3, [r7, #0]
}
 8003b22:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
 8003b24:	4718      	bx	r3

08003b26 <_ZN16HikariGPIOConfig14pwm_as_sck_offEv>:
    // pwm_set_dt(&PWM_AS_SCK, PWM_USEC(50), PWM_USEC(25));
}

void HikariGPIOConfig::pwm_as_sck_off(){

    pwm_set_dt(&PWM_AS_SCK, PWM_USEC(28.5), PWM_USEC(0));
 8003b26:	2100      	movs	r1, #0
 8003b28:	f646 7054 	movw	r0, #28500	; 0x6f54
 8003b2c:	f7fc bc4c 	b.w	80003c8 <pwm_set_dt.constprop.0.isra.0>

08003b30 <arch_printk_char_out>:
}
 8003b30:	2000      	movs	r0, #0
 8003b32:	4770      	bx	lr

08003b34 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
 8003b34:	b40f      	push	{r0, r1, r2, r3}
 8003b36:	b507      	push	{r0, r1, r2, lr}
 8003b38:	a904      	add	r1, sp, #16
 8003b3a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 8003b3e:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
 8003b40:	f7fc fdb8 	bl	80006b4 <vprintk>

	va_end(ap);
}
 8003b44:	b003      	add	sp, #12
 8003b46:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b4a:	b004      	add	sp, #16
 8003b4c:	4770      	bx	lr

08003b4e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8003b4e:	4604      	mov	r4, r0
 8003b50:	b508      	push	{r3, lr}
 8003b52:	4608      	mov	r0, r1
 8003b54:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 8003b56:	461a      	mov	r2, r3
 8003b58:	47a0      	blx	r4
	return z_impl_z_current_get();
 8003b5a:	f7ff fdc7 	bl	80036ec <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 8003b5e:	f7fd fbb9 	bl	80012d4 <z_impl_k_thread_abort>

08003b62 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
 8003b62:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8003b66:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
 8003b68:	0840      	lsrs	r0, r0, #1
 8003b6a:	4770      	bx	lr

08003b6c <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 8003b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6e:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
 8003b70:	f7ff fff7 	bl	8003b62 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
 8003b74:	fab0 f080 	clz	r0, r0
 8003b78:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
 8003b7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003b80:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
 8003b84:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
 8003b86:	1d17      	adds	r7, r2, #4
{
 8003b88:	460c      	mov	r4, r1
 8003b8a:	3206      	adds	r2, #6
 8003b8c:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
 8003b8e:	b956      	cbnz	r6, 8003ba6 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
 8003b90:	2101      	movs	r1, #1
 8003b92:	fa01 f000 	lsl.w	r0, r1, r0
 8003b96:	68d9      	ldr	r1, [r3, #12]
 8003b98:	4301      	orrs	r1, r0
 8003b9a:	60d9      	str	r1, [r3, #12]
		b->next = c;
 8003b9c:	f8cc 4010 	str.w	r4, [ip, #16]
 8003ba0:	53dd      	strh	r5, [r3, r7]
 8003ba2:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
 8003ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
 8003ba6:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
 8003ba8:	3104      	adds	r1, #4
 8003baa:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
 8003bac:	53d8      	strh	r0, [r3, r7]
 8003bae:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8003bb2:	529e      	strh	r6, [r3, r2]
 8003bb4:	80c5      	strh	r5, [r0, #6]
 8003bb6:	525d      	strh	r5, [r3, r1]
 8003bb8:	e7f4      	b.n	8003ba4 <free_list_add+0x38>

08003bba <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 8003bba:	b4f0      	push	{r4, r5, r6, r7}
 8003bbc:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 8003bbe:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8003bc0:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8003bc2:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8003bc4:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8003bc8:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 8003bcc:	1a0e      	subs	r6, r1, r0
 8003bce:	08f3      	lsrs	r3, r6, #3
	return 31 - __builtin_clz(usable_sz);
 8003bd0:	fab3 f283 	clz	r2, r3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
 8003bd4:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
 8003bd6:	2700      	movs	r7, #0
 8003bd8:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 8003bda:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
 8003bde:	00ad      	lsls	r5, r5, #2
	h->end_chunk = heap_sz;
 8003be0:	6083      	str	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8003be2:	3507      	adds	r5, #7
	h->avail_buckets = 0;
 8003be4:	f844 7f0c 	str.w	r7, [r4, #12]!
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 8003be8:	f1c2 0220 	rsb	r2, r2, #32
 8003bec:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 8003bee:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
 8003bf2:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
 8003bf6:	4294      	cmp	r4, r2
 8003bf8:	d1fb      	bne.n	8003bf2 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8003bfa:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8003bfc:	f042 0201 	orr.w	r2, r2, #1
 8003c00:	8042      	strh	r2, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 8003c02:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8003c04:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
 8003c06:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8003c0a:	8007      	strh	r7, [r0, #0]
 8003c0c:	8065      	strh	r5, [r4, #2]
 8003c0e:	1984      	adds	r4, r0, r6
 8003c10:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
 8003c14:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
 8003c18:	8067      	strh	r7, [r4, #2]
 8003c1a:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8003c1c:	885a      	ldrh	r2, [r3, #2]
 8003c1e:	f042 0201 	orr.w	r2, r2, #1
 8003c22:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
 8003c24:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
 8003c26:	f7ff bfa1 	b.w	8003b6c <free_list_add>

08003c2a <encode_uint>:
{
 8003c2a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c2e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 8003c30:	78d3      	ldrb	r3, [r2, #3]
{
 8003c32:	4680      	mov	r8, r0
	switch (specifier) {
 8003c34:	2b6f      	cmp	r3, #111	; 0x6f
{
 8003c36:	460f      	mov	r7, r1
 8003c38:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 8003c3a:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 8003c3e:	d029      	beq.n	8003c94 <encode_uint+0x6a>
 8003c40:	d824      	bhi.n	8003c8c <encode_uint+0x62>
		return 10;
 8003c42:	2b58      	cmp	r3, #88	; 0x58
 8003c44:	bf0c      	ite	eq
 8003c46:	2610      	moveq	r6, #16
 8003c48:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
 8003c4a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 8003c4e:	4632      	mov	r2, r6
 8003c50:	2300      	movs	r3, #0
 8003c52:	4640      	mov	r0, r8
 8003c54:	4639      	mov	r1, r7
 8003c56:	f7fc fa4b 	bl	80000f0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003c5a:	2a09      	cmp	r2, #9
 8003c5c:	b2d4      	uxtb	r4, r2
 8003c5e:	d81e      	bhi.n	8003c9e <encode_uint+0x74>
 8003c60:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 8003c62:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003c64:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 8003c66:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003c6a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 8003c6e:	d301      	bcc.n	8003c74 <encode_uint+0x4a>
 8003c70:	45d1      	cmp	r9, sl
 8003c72:	d811      	bhi.n	8003c98 <encode_uint+0x6e>
	if (conv->flag_hash) {
 8003c74:	782b      	ldrb	r3, [r5, #0]
 8003c76:	069b      	lsls	r3, r3, #26
 8003c78:	d505      	bpl.n	8003c86 <encode_uint+0x5c>
		if (radix == 8) {
 8003c7a:	2e08      	cmp	r6, #8
 8003c7c:	d115      	bne.n	8003caa <encode_uint+0x80>
			conv->altform_0 = true;
 8003c7e:	78ab      	ldrb	r3, [r5, #2]
 8003c80:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 8003c84:	70ab      	strb	r3, [r5, #2]
}
 8003c86:	4648      	mov	r0, r9
 8003c88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8003c8c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
 8003c90:	2b70      	cmp	r3, #112	; 0x70
 8003c92:	e7d7      	b.n	8003c44 <encode_uint+0x1a>
	switch (specifier) {
 8003c94:	2608      	movs	r6, #8
 8003c96:	e7d8      	b.n	8003c4a <encode_uint+0x20>
		value /= radix;
 8003c98:	4680      	mov	r8, r0
 8003c9a:	460f      	mov	r7, r1
 8003c9c:	e7d7      	b.n	8003c4e <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003c9e:	f1bb 0f19 	cmp.w	fp, #25
 8003ca2:	bf94      	ite	ls
 8003ca4:	3437      	addls	r4, #55	; 0x37
 8003ca6:	3457      	addhi	r4, #87	; 0x57
 8003ca8:	e7db      	b.n	8003c62 <encode_uint+0x38>
		} else if (radix == 16) {
 8003caa:	2e10      	cmp	r6, #16
 8003cac:	d1eb      	bne.n	8003c86 <encode_uint+0x5c>
			conv->altform_0c = true;
 8003cae:	78ab      	ldrb	r3, [r5, #2]
 8003cb0:	f043 0310 	orr.w	r3, r3, #16
 8003cb4:	e7e6      	b.n	8003c84 <encode_uint+0x5a>

08003cb6 <outs>:
{
 8003cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cba:	4607      	mov	r7, r0
 8003cbc:	4688      	mov	r8, r1
 8003cbe:	4615      	mov	r5, r2
 8003cc0:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8003cc2:	4614      	mov	r4, r2
 8003cc4:	42b4      	cmp	r4, r6
 8003cc6:	d305      	bcc.n	8003cd4 <outs+0x1e>
 8003cc8:	b10e      	cbz	r6, 8003cce <outs+0x18>
	return (int)count;
 8003cca:	1b60      	subs	r0, r4, r5
 8003ccc:	e008      	b.n	8003ce0 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8003cce:	7823      	ldrb	r3, [r4, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0fa      	beq.n	8003cca <outs+0x14>
		int rc = out((int)*sp++, ctx);
 8003cd4:	4641      	mov	r1, r8
 8003cd6:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003cda:	47b8      	blx	r7
		if (rc < 0) {
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	daf1      	bge.n	8003cc4 <outs+0xe>
}
 8003ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003ce4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_DDTBOOT_NOINIT_RAM_SIZE, 0);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8003ce4:	4770      	bx	lr

08003ce6 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	4770      	bx	lr

08003cea <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8003cea:	f000 be74 	b.w	80049d6 <z_fatal_error>

08003cee <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 8003cee:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8003cf0:	6800      	ldr	r0, [r0, #0]
 8003cf2:	f000 be70 	b.w	80049d6 <z_fatal_error>

08003cf6 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	f7ff bff6 	b.w	8003cea <z_arm_fatal_error>

08003cfe <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 8003cfe:	b508      	push	{r3, lr}
	handler();
 8003d00:	f7fd f8e6 	bl	8000ed0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8003d04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8003d08:	f7fd b98e 	b.w	8001028 <z_arm_exc_exit>

08003d0c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 8003d0c:	4603      	mov	r3, r0
	size_t n = 0;
 8003d0e:	2000      	movs	r0, #0

	while (*s != '\0') {
 8003d10:	5c1a      	ldrb	r2, [r3, r0]
 8003d12:	b902      	cbnz	r2, 8003d16 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 8003d14:	4770      	bx	lr
		n++;
 8003d16:	3001      	adds	r0, #1
 8003d18:	e7fa      	b.n	8003d10 <strlen+0x4>

08003d1a <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 8003d1a:	4603      	mov	r3, r0
	size_t n = 0;
 8003d1c:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 8003d1e:	5c1a      	ldrb	r2, [r3, r0]
 8003d20:	b10a      	cbz	r2, 8003d26 <strnlen+0xc>
 8003d22:	4288      	cmp	r0, r1
 8003d24:	d100      	bne.n	8003d28 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 8003d26:	4770      	bx	lr
		n++;
 8003d28:	3001      	adds	r0, #1
 8003d2a:	e7f8      	b.n	8003d1e <strnlen+0x4>

08003d2c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
 8003d2c:	b510      	push	{r4, lr}
 8003d2e:	1e43      	subs	r3, r0, #1
 8003d30:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 8003d32:	4291      	cmp	r1, r2
 8003d34:	d100      	bne.n	8003d38 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8003d36:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 8003d38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d3c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8003d40:	e7f7      	b.n	8003d32 <memcpy+0x6>

08003d42 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
 8003d42:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
 8003d44:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 8003d46:	4402      	add	r2, r0
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d100      	bne.n	8003d4e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8003d4c:	4770      	bx	lr
		*(d_byte++) = c_byte;
 8003d4e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8003d52:	e7f9      	b.n	8003d48 <memset+0x6>

08003d54 <_stdout_hook_default>:
}
 8003d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d58:	4770      	bx	lr

08003d5a <stm32_exti_init>:
{
 8003d5a:	b508      	push	{r3, lr}
	DT_FOREACH_PROP_ELEM(DT_NODELABEL(exti),
 8003d5c:	2206      	movs	r2, #6
 8003d5e:	2101      	movs	r1, #1
 8003d60:	2000      	movs	r0, #0
 8003d62:	f7fd faf7 	bl	8001354 <stm32_fill_irq_table>
 8003d66:	2200      	movs	r2, #0
 8003d68:	2006      	movs	r0, #6
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	f7fd f89a 	bl	8000ea4 <z_arm_irq_priority_set>
 8003d70:	2101      	movs	r1, #1
 8003d72:	2207      	movs	r2, #7
 8003d74:	4608      	mov	r0, r1
 8003d76:	f7fd faed 	bl	8001354 <stm32_fill_irq_table>
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	2007      	movs	r0, #7
 8003d7e:	4611      	mov	r1, r2
 8003d80:	f7fd f890 	bl	8000ea4 <z_arm_irq_priority_set>
 8003d84:	2208      	movs	r2, #8
 8003d86:	2101      	movs	r1, #1
 8003d88:	2002      	movs	r0, #2
 8003d8a:	f7fd fae3 	bl	8001354 <stm32_fill_irq_table>
 8003d8e:	2200      	movs	r2, #0
 8003d90:	2008      	movs	r0, #8
 8003d92:	4611      	mov	r1, r2
 8003d94:	f7fd f886 	bl	8000ea4 <z_arm_irq_priority_set>
 8003d98:	2209      	movs	r2, #9
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	2003      	movs	r0, #3
 8003d9e:	f7fd fad9 	bl	8001354 <stm32_fill_irq_table>
 8003da2:	2200      	movs	r2, #0
 8003da4:	2009      	movs	r0, #9
 8003da6:	4611      	mov	r1, r2
 8003da8:	f7fd f87c 	bl	8000ea4 <z_arm_irq_priority_set>
 8003dac:	220a      	movs	r2, #10
 8003dae:	2101      	movs	r1, #1
 8003db0:	2004      	movs	r0, #4
 8003db2:	f7fd facf 	bl	8001354 <stm32_fill_irq_table>
 8003db6:	2200      	movs	r2, #0
 8003db8:	200a      	movs	r0, #10
 8003dba:	4611      	mov	r1, r2
 8003dbc:	f7fd f872 	bl	8000ea4 <z_arm_irq_priority_set>
 8003dc0:	2105      	movs	r1, #5
 8003dc2:	2217      	movs	r2, #23
 8003dc4:	4608      	mov	r0, r1
 8003dc6:	f7fd fac5 	bl	8001354 <stm32_fill_irq_table>
 8003dca:	2200      	movs	r2, #0
 8003dcc:	2017      	movs	r0, #23
 8003dce:	4611      	mov	r1, r2
 8003dd0:	f7fd f868 	bl	8000ea4 <z_arm_irq_priority_set>
 8003dd4:	2228      	movs	r2, #40	; 0x28
 8003dd6:	2106      	movs	r1, #6
 8003dd8:	200a      	movs	r0, #10
 8003dda:	f7fd fabb 	bl	8001354 <stm32_fill_irq_table>
 8003dde:	2200      	movs	r2, #0
 8003de0:	2028      	movs	r0, #40	; 0x28
 8003de2:	4611      	mov	r1, r2
 8003de4:	f7fd f85e 	bl	8000ea4 <z_arm_irq_priority_set>
}
 8003de8:	2000      	movs	r0, #0
 8003dea:	bd08      	pop	{r3, pc}

08003dec <stm32_clock_control_on>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 8003dec:	680b      	ldr	r3, [r1, #0]
 8003dee:	f1a3 0214 	sub.w	r2, r3, #20
 8003df2:	2a08      	cmp	r2, #8
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus,
 8003df4:	bf9f      	itttt	ls
 8003df6:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 8003dfa:	f503 3304 	addls.w	r3, r3, #135168	; 0x21000
	return temp & (1 << bit);
}

static ALWAYS_INLINE void sys_set_bits(mem_addr_t addr, unsigned int mask)
{
	uint32_t temp = *(volatile uint32_t *)addr;
 8003dfe:	681a      	ldrls	r2, [r3, #0]

	*(volatile uint32_t *)addr = temp | mask;
 8003e00:	6849      	ldrls	r1, [r1, #4]
	return 0;
 8003e02:	bf9b      	ittet	ls
 8003e04:	2000      	movls	r0, #0
 8003e06:	430a      	orrls	r2, r1
		return -ENOTSUP;
 8003e08:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
 8003e0c:	601a      	strls	r2, [r3, #0]
}
 8003e0e:	4770      	bx	lr

08003e10 <stm32_clock_control_off>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 8003e10:	680b      	ldr	r3, [r1, #0]
 8003e12:	f1a3 0214 	sub.w	r2, r3, #20
 8003e16:	2a08      	cmp	r2, #8
	sys_clear_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus,
 8003e18:	bf9f      	itttt	ls
 8003e1a:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 8003e1e:	f503 3304 	addls.w	r3, r3, #135168	; 0x21000
}

static ALWAYS_INLINE void sys_clear_bits(mem_addr_t addr, unsigned int mask)
{
	uint32_t temp = *(volatile uint32_t *)addr;
 8003e22:	681a      	ldrls	r2, [r3, #0]

	*(volatile uint32_t *)addr = temp & ~mask;
 8003e24:	6849      	ldrls	r1, [r1, #4]
	return 0;
 8003e26:	bf9b      	ittet	ls
 8003e28:	2000      	movls	r0, #0
 8003e2a:	438a      	bicls	r2, r1
		return -ENOTSUP;
 8003e2c:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
 8003e30:	601a      	strls	r2, [r3, #0]
}
 8003e32:	4770      	bx	lr

08003e34 <stm32_clock_control_configure>:
	err = enabled_clock(pclken->bus);
 8003e34:	680b      	ldr	r3, [r1, #0]
	switch (src_clk) {
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d001      	beq.n	8003e3e <stm32_clock_control_configure+0xa>
 8003e3a:	2b05      	cmp	r3, #5
 8003e3c:	d112      	bne.n	8003e64 <stm32_clock_control_configure+0x30>
	if (pclken->enr == NO_SEL) {
 8003e3e:	684a      	ldr	r2, [r1, #4]
 8003e40:	2aff      	cmp	r2, #255	; 0xff
 8003e42:	d00d      	beq.n	8003e60 <stm32_clock_control_configure+0x2c>
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 8003e44:	b2d3      	uxtb	r3, r2
 8003e46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e4a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
	uint32_t temp = *(volatile uint32_t *)addr;
 8003e4e:	6818      	ldr	r0, [r3, #0]
		     STM32_CLOCK_VAL_GET(pclken->enr) << STM32_CLOCK_SHIFT_GET(pclken->enr));
 8003e50:	f3c2 4102 	ubfx	r1, r2, #16, #3
 8003e54:	f3c2 2204 	ubfx	r2, r2, #8, #5
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 8003e58:	fa01 f202 	lsl.w	r2, r1, r2
	*(volatile uint32_t *)addr = temp | mask;
 8003e5c:	4302      	orrs	r2, r0
 8003e5e:	601a      	str	r2, [r3, #0]
		return 0;
 8003e60:	2000      	movs	r0, #0
 8003e62:	4770      	bx	lr
	switch (src_clk) {
 8003e64:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8003e68:	4770      	bx	lr

08003e6a <config_enable_default_clocks>:
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
	/* Nothing for now */
}
 8003e6a:	4770      	bx	lr

08003e6c <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003e6c:	6843      	ldr	r3, [r0, #4]
}
 8003e6e:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003e70:	685b      	ldr	r3, [r3, #4]
  return (READ_REG(GPIOx->IDR));
 8003e72:	689b      	ldr	r3, [r3, #8]
	*value = LL_GPIO_ReadInputPort(gpio);
 8003e74:	600b      	str	r3, [r1, #0]
}
 8003e76:	4770      	bx	lr

08003e78 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003e78:	6843      	ldr	r3, [r0, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8003e7c:	68d8      	ldr	r0, [r3, #12]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8003e7e:	4042      	eors	r2, r0
 8003e80:	400a      	ands	r2, r1
 8003e82:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8003e84:	60da      	str	r2, [r3, #12]
}
 8003e86:	2000      	movs	r0, #0
 8003e88:	4770      	bx	lr

08003e8a <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003e8a:	6843      	ldr	r3, [r0, #4]
}
 8003e8c:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003e8e:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 8003e90:	6119      	str	r1, [r3, #16]
}
 8003e92:	4770      	bx	lr

08003e94 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003e94:	6843      	ldr	r3, [r0, #4]
}
 8003e96:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003e98:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BRR, pins);
 8003e9a:	6159      	str	r1, [r3, #20]
}
 8003e9c:	4770      	bx	lr

08003e9e <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003e9e:	6843      	ldr	r3, [r0, #4]
}
 8003ea0:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003ea2:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8003ea4:	68d3      	ldr	r3, [r2, #12]
 8003ea6:	404b      	eors	r3, r1
 8003ea8:	60d3      	str	r3, [r2, #12]
}
 8003eaa:	4770      	bx	lr

08003eac <gpio_stm32_manage_callback>:
{
 8003eac:	b510      	push	{r4, lr}
	struct gpio_stm32_data *data = dev->data;
 8003eae:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 8003eb0:	6898      	ldr	r0, [r3, #8]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8003eb2:	b1f8      	cbz	r0, 8003ef4 <gpio_stm32_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8003eb4:	4288      	cmp	r0, r1
 8003eb6:	d119      	bne.n	8003eec <gpio_stm32_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
 8003eb8:	68dc      	ldr	r4, [r3, #12]
	return node->next;
 8003eba:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 8003ebc:	42a1      	cmp	r1, r4
	list->head = node;
 8003ebe:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8003ec0:	d100      	bne.n	8003ec4 <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 8003ec2:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
 8003ec8:	b12a      	cbz	r2, 8003ed6 <gpio_stm32_manage_callback+0x2a>
	return list->head;
 8003eca:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 8003ecc:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 8003ece:	68da      	ldr	r2, [r3, #12]
	list->head = node;
 8003ed0:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8003ed2:	b902      	cbnz	r2, 8003ed6 <gpio_stm32_manage_callback+0x2a>
	list->tail = node;
 8003ed4:	60d9      	str	r1, [r3, #12]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8003ed6:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->cb, callback, set);
 8003ed8:	e010      	b.n	8003efc <gpio_stm32_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8003eda:	4281      	cmp	r1, r0
 8003edc:	d106      	bne.n	8003eec <gpio_stm32_manage_callback+0x40>
	return node->next;
 8003ede:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
 8003ee0:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 8003ee2:	68d8      	ldr	r0, [r3, #12]
 8003ee4:	4281      	cmp	r1, r0
 8003ee6:	d1ed      	bne.n	8003ec4 <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 8003ee8:	60dc      	str	r4, [r3, #12]
}
 8003eea:	e7eb      	b.n	8003ec4 <gpio_stm32_manage_callback+0x18>
	return node->next;
 8003eec:	4604      	mov	r4, r0
 8003eee:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8003ef0:	2800      	cmp	r0, #0
 8003ef2:	d1f2      	bne.n	8003eda <gpio_stm32_manage_callback+0x2e>
			if (!set) {
 8003ef4:	2a00      	cmp	r2, #0
 8003ef6:	d1e8      	bne.n	8003eca <gpio_stm32_manage_callback+0x1e>
				return -EINVAL;
 8003ef8:	f06f 0015 	mvn.w	r0, #21
}
 8003efc:	bd10      	pop	{r4, pc}

08003efe <LL_GPIO_SetPinMode>:
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efe:	fa91 f3a1 	rbit	r3, r1
  return __builtin_clz(value);
 8003f02:	fab3 f383 	clz	r3, r3
{
 8003f06:	b570      	push	{r4, r5, r6, lr}
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003f08:	0e0d      	lsrs	r5, r1, #24
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8003f0a:	260f      	movs	r6, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0c:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 8003f10:	fab1 f181 	clz	r1, r1
 8003f14:	5944      	ldr	r4, [r0, r5]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	fa06 f303 	lsl.w	r3, r6, r3
 8003f1c:	0089      	lsls	r1, r1, #2
 8003f1e:	ea24 0403 	bic.w	r4, r4, r3
 8003f22:	408a      	lsls	r2, r1
 8003f24:	4322      	orrs	r2, r4
 8003f26:	5142      	str	r2, [r0, r5]
}
 8003f28:	bd70      	pop	{r4, r5, r6, pc}

08003f2a <LL_GPIO_SetPinSpeed>:
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2a:	fa91 f3a1 	rbit	r3, r1
  return __builtin_clz(value);
 8003f2e:	fab3 f383 	clz	r3, r3
{
 8003f32:	b570      	push	{r4, r5, r6, lr}
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003f34:	0e0d      	lsrs	r5, r1, #24
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8003f36:	2603      	movs	r6, #3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f38:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 8003f3c:	fab1 f181 	clz	r1, r1
 8003f40:	5944      	ldr	r4, [r0, r5]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	fa06 f303 	lsl.w	r3, r6, r3
 8003f48:	0089      	lsls	r1, r1, #2
 8003f4a:	ea24 0403 	bic.w	r4, r4, r3
 8003f4e:	408a      	lsls	r2, r1
 8003f50:	4322      	orrs	r2, r4
 8003f52:	5142      	str	r2, [r0, r5]
}
 8003f54:	bd70      	pop	{r4, r5, r6, pc}

08003f56 <LL_GPIO_SetPinOutputType>:
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f56:	fa91 f3a1 	rbit	r3, r1
  return __builtin_clz(value);
 8003f5a:	fab3 f383 	clz	r3, r3
{
 8003f5e:	b570      	push	{r4, r5, r6, lr}
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003f60:	0e0d      	lsrs	r5, r1, #24
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8003f62:	2604      	movs	r6, #4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f64:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 8003f68:	fab1 f181 	clz	r1, r1
 8003f6c:	5944      	ldr	r4, [r0, r5]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	fa06 f303 	lsl.w	r3, r6, r3
 8003f74:	0089      	lsls	r1, r1, #2
 8003f76:	ea24 0403 	bic.w	r4, r4, r3
 8003f7a:	408a      	lsls	r2, r1
 8003f7c:	4322      	orrs	r2, r4
 8003f7e:	5142      	str	r2, [r0, r5]
}
 8003f80:	bd70      	pop	{r4, r5, r6, pc}

08003f82 <gpio_stm32_isr>:
{
 8003f82:	b570      	push	{r4, r5, r6, lr}
 8003f84:	460b      	mov	r3, r1
 8003f86:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8003f88:	b121      	cbz	r1, 8003f94 <gpio_stm32_isr+0x12>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8003f8a:	2501      	movs	r5, #1
 8003f8c:	685e      	ldr	r6, [r3, #4]
	return node->next;
 8003f8e:	680c      	ldr	r4, [r1, #0]
 8003f90:	4085      	lsls	r5, r0
 8003f92:	b901      	cbnz	r1, 8003f96 <gpio_stm32_isr+0x14>
}
 8003f94:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
 8003f96:	688a      	ldr	r2, [r1, #8]
 8003f98:	402a      	ands	r2, r5
 8003f9a:	d002      	beq.n	8003fa2 <gpio_stm32_isr+0x20>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8003f9c:	4630      	mov	r0, r6
 8003f9e:	684b      	ldr	r3, [r1, #4]
 8003fa0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8003fa2:	b11c      	cbz	r4, 8003fac <gpio_stm32_isr+0x2a>
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	461c      	mov	r4, r3
 8003faa:	e7f2      	b.n	8003f92 <gpio_stm32_isr+0x10>
 8003fac:	4623      	mov	r3, r4
 8003fae:	e7fa      	b.n	8003fa6 <gpio_stm32_isr+0x24>

08003fb0 <gpio_stm32_configure_raw.constprop.0.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 8003fb0:	b570      	push	{r4, r5, r6, lr}
	pinval = (1 << pin) << GPIO_PIN_MASK_POS;
 8003fb2:	2401      	movs	r4, #1
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 8003fb4:	4615      	mov	r5, r2
	if (pin < 8) {
 8003fb6:	2907      	cmp	r1, #7
	pinval = (1 << pin) << GPIO_PIN_MASK_POS;
 8003fb8:	fa04 f201 	lsl.w	r2, r4, r1
		pinval |= (1 << (pin % 8)) | 0x04000000;
 8003fbc:	bfc8      	it	gt
 8003fbe:	f001 0107 	andgt.w	r1, r1, #7
	pinval = (1 << pin) << GPIO_PIN_MASK_POS;
 8003fc2:	ea4f 2302 	mov.w	r3, r2, lsl #8
		pinval |= (1 << (pin % 8)) | 0x04000000;
 8003fc6:	bfc5      	ittet	gt
 8003fc8:	408c      	lslgt	r4, r1
 8003fca:	431c      	orrgt	r4, r3
		pinval |= 1 << pin;
 8003fcc:	ea42 0403 	orrle.w	r4, r2, r3
		pinval |= (1 << (pin % 8)) | 0x04000000;
 8003fd0:	f044 6480 	orrgt.w	r4, r4, #67108864	; 0x4000000
	if (temp == STM32_MODE_INPUT) {
 8003fd4:	07ea      	lsls	r2, r5, #31
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003fd6:	6840      	ldr	r0, [r0, #4]
	if (temp == STM32_MODE_INPUT) {
 8003fd8:	d422      	bmi.n	8004020 <gpio_stm32_configure_raw.constprop.0.isra.0+0x70>
		if (temp == STM32_CNF_IN_ANALOG) {
 8003fda:	f015 0206 	ands.w	r2, r5, #6
 8003fde:	d104      	bne.n	8003fea <gpio_stm32_configure_raw.constprop.0.isra.0+0x3a>
			LL_GPIO_SetPinMode(gpio, pin_ll, LL_GPIO_MODE_FLOATING);
 8003fe0:	4621      	mov	r1, r4
}
 8003fe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LL_GPIO_SetPinMode(gpio, pin_ll, LL_GPIO_MODE_FLOATING);
 8003fe6:	f7ff bf8a 	b.w	8003efe <LL_GPIO_SetPinMode>
		} else if (temp == STM32_CNF_IN_FLOAT) {
 8003fea:	2a02      	cmp	r2, #2
 8003fec:	d101      	bne.n	8003ff2 <gpio_stm32_configure_raw.constprop.0.isra.0+0x42>
			LL_GPIO_SetPinMode(gpio, pin_ll, LL_GPIO_MODE_FLOATING);
 8003fee:	2204      	movs	r2, #4
 8003ff0:	e7f6      	b.n	8003fe0 <gpio_stm32_configure_raw.constprop.0.isra.0+0x30>
			if (temp == STM32_PUPD_PULL_UP) {
 8003ff2:	f405 75c0 	and.w	r5, r5, #384	; 0x180
 8003ff6:	2d80      	cmp	r5, #128	; 0x80
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8003ff8:	ea6f 2614 	mvn.w	r6, r4, lsr #8
 8003ffc:	ea4f 2214 	mov.w	r2, r4, lsr #8
 8004000:	d10b      	bne.n	800401a <gpio_stm32_configure_raw.constprop.0.isra.0+0x6a>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004002:	fa92 f2a2 	rbit	r2, r2
 8004006:	2301      	movs	r3, #1
  return __builtin_clz(value);
 8004008:	fab2 f282 	clz	r2, r2
 800400c:	68c1      	ldr	r1, [r0, #12]
 800400e:	4093      	lsls	r3, r2
 8004010:	4031      	ands	r1, r6
 8004012:	430b      	orrs	r3, r1
			LL_GPIO_SetPinMode(gpio, pin_ll, LL_GPIO_MODE_INPUT);
 8004014:	2208      	movs	r2, #8
 8004016:	60c3      	str	r3, [r0, #12]
 8004018:	e7e2      	b.n	8003fe0 <gpio_stm32_configure_raw.constprop.0.isra.0+0x30>
 800401a:	68c3      	ldr	r3, [r0, #12]
 800401c:	4033      	ands	r3, r6
 800401e:	e7f9      	b.n	8004014 <gpio_stm32_configure_raw.constprop.0.isra.0+0x64>
		if (temp == STM32_CNF_GP_OUTPUT) {
 8004020:	066b      	lsls	r3, r5, #25
			LL_GPIO_SetPinMode(gpio, pin_ll, LL_GPIO_MODE_OUTPUT);
 8004022:	bf54      	ite	pl
 8004024:	2201      	movpl	r2, #1
			LL_GPIO_SetPinMode(gpio, pin_ll,
 8004026:	2209      	movmi	r2, #9
 8004028:	4621      	mov	r1, r4
 800402a:	f7ff ff68 	bl	8003efe <LL_GPIO_SetPinMode>
		if (temp == STM32_CNF_PUSH_PULL) {
 800402e:	f015 0220 	ands.w	r2, r5, #32
			LL_GPIO_SetPinOutputType(gpio, pin_ll,
 8004032:	bf18      	it	ne
 8004034:	2204      	movne	r2, #4
 8004036:	4621      	mov	r1, r4
 8004038:	f005 0518 	and.w	r5, r5, #24
 800403c:	f7ff ff8b 	bl	8003f56 <LL_GPIO_SetPinOutputType>
		if (temp == STM32_MODE_OUTPUT_MAX_2) {
 8004040:	2d08      	cmp	r5, #8
 8004042:	d105      	bne.n	8004050 <gpio_stm32_configure_raw.constprop.0.isra.0+0xa0>
			LL_GPIO_SetPinSpeed(gpio, pin_ll,
 8004044:	2202      	movs	r2, #2
			LL_GPIO_SetPinSpeed(gpio, pin_ll,
 8004046:	4621      	mov	r1, r4
}
 8004048:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LL_GPIO_SetPinSpeed(gpio, pin_ll,
 800404c:	f7ff bf6d 	b.w	8003f2a <LL_GPIO_SetPinSpeed>
		} else if (temp == STM32_MODE_OUTPUT_MAX_10) {
 8004050:	b90d      	cbnz	r5, 8004056 <gpio_stm32_configure_raw.constprop.0.isra.0+0xa6>
			LL_GPIO_SetPinSpeed(gpio, pin_ll,
 8004052:	2201      	movs	r2, #1
 8004054:	e7f7      	b.n	8004046 <gpio_stm32_configure_raw.constprop.0.isra.0+0x96>
			LL_GPIO_SetPinSpeed(gpio, pin_ll,
 8004056:	2203      	movs	r2, #3
 8004058:	e7f5      	b.n	8004046 <gpio_stm32_configure_raw.constprop.0.isra.0+0x96>

0800405a <gpio_stm32_config>:
{
 800405a:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 800405c:	039a      	lsls	r2, r3, #14
{
 800405e:	b510      	push	{r4, lr}
	if ((flags & GPIO_OUTPUT) != 0) {
 8004060:	d518      	bpl.n	8004094 <gpio_stm32_config+0x3a>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8004062:	079c      	lsls	r4, r3, #30
 8004064:	d50f      	bpl.n	8004086 <gpio_stm32_config+0x2c>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8004066:	075a      	lsls	r2, r3, #29
 8004068:	d52d      	bpl.n	80040c6 <gpio_stm32_config+0x6c>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 800406a:	2221      	movs	r2, #33	; 0x21
		if ((flags & GPIO_PULL_UP) != 0) {
 800406c:	06dc      	lsls	r4, r3, #27
 800406e:	d50c      	bpl.n	800408a <gpio_stm32_config+0x30>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8004070:	f042 0284 	orr.w	r2, r2, #132	; 0x84
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8004074:	f413 2f00 	tst.w	r3, #524288	; 0x80000
	const struct gpio_stm32_config *cfg = dev->config;
 8004078:	6844      	ldr	r4, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 800407a:	d01b      	beq.n	80040b4 <gpio_stm32_config+0x5a>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 800407c:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800407e:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8004080:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BSRR, pins);
 8004082:	6123      	str	r3, [r4, #16]
	return 0;
 8004084:	e011      	b.n	80040aa <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8004086:	2201      	movs	r2, #1
 8004088:	e7f0      	b.n	800406c <gpio_stm32_config+0x12>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800408a:	069c      	lsls	r4, r3, #26
 800408c:	d5f2      	bpl.n	8004074 <gpio_stm32_config+0x1a>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800408e:	f442 7282 	orr.w	r2, r2, #260	; 0x104
	if (err != 0) {
 8004092:	e7ef      	b.n	8004074 <gpio_stm32_config+0x1a>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8004094:	f413 3280 	ands.w	r2, r3, #65536	; 0x10000
 8004098:	d007      	beq.n	80040aa <gpio_stm32_config+0x50>
		if ((flags & GPIO_PULL_UP) != 0) {
 800409a:	06dc      	lsls	r4, r3, #27
 800409c:	d411      	bmi.n	80040c2 <gpio_stm32_config+0x68>
			*pincfg |= STM32_PINCFG_FLOATING;
 800409e:	f013 0f20 	tst.w	r3, #32
 80040a2:	bf14      	ite	ne
 80040a4:	f44f 7282 	movne.w	r2, #260	; 0x104
 80040a8:	2202      	moveq	r2, #2
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 80040aa:	6840      	ldr	r0, [r0, #4]
 80040ac:	f7ff ff80 	bl	8003fb0 <gpio_stm32_configure_raw.constprop.0.isra.0>
	return 0;
 80040b0:	2000      	movs	r0, #0
}
 80040b2:	bd10      	pop	{r4, pc}
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 80040b4:	035b      	lsls	r3, r3, #13
 80040b6:	d5f8      	bpl.n	80040aa <gpio_stm32_config+0x50>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 80040b8:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80040ba:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 80040bc:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BRR, pins);
 80040be:	6163      	str	r3, [r4, #20]
	return 0;
 80040c0:	e7f3      	b.n	80040aa <gpio_stm32_config+0x50>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80040c2:	2284      	movs	r2, #132	; 0x84
 80040c4:	e7f1      	b.n	80040aa <gpio_stm32_config+0x50>
				return -ENOTSUP;
 80040c6:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80040ca:	e7f2      	b.n	80040b2 <gpio_stm32_config+0x58>

080040cc <gpio_stm32_configure>:
{
 80040cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ce:	461f      	mov	r7, r3
 80040d0:	4604      	mov	r4, r0
	gpio_stm32_configure_raw(dev, pin, conf, func);
 80040d2:	6840      	ldr	r0, [r0, #4]
{
 80040d4:	460e      	mov	r6, r1
 80040d6:	4615      	mov	r5, r2
	gpio_stm32_configure_raw(dev, pin, conf, func);
 80040d8:	f7ff ff6a 	bl	8003fb0 <gpio_stm32_configure_raw.constprop.0.isra.0>
	if (func == IS_GPIO_OUT) {
 80040dc:	2f03      	cmp	r7, #3
 80040de:	d108      	bne.n	80040f2 <gpio_stm32_configure+0x26>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 80040e0:	2301      	movs	r3, #1
 80040e2:	fa03 f606 	lsl.w	r6, r3, r6
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80040e6:	6863      	ldr	r3, [r4, #4]
		if (gpio_out == STM32_ODR_1) {
 80040e8:	05aa      	lsls	r2, r5, #22
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80040ea:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 80040ec:	bf4c      	ite	mi
 80040ee:	611e      	strmi	r6, [r3, #16]
	WRITE_REG(gpio->BRR, pins);
 80040f0:	615e      	strpl	r6, [r3, #20]
}
 80040f2:	2000      	movs	r0, #0
 80040f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080040f6 <LL_TIM_OC_SetCompareCH1>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 80040f6:	6341      	str	r1, [r0, #52]	; 0x34
}
 80040f8:	4770      	bx	lr

080040fa <LL_TIM_OC_SetCompareCH2>:
  WRITE_REG(TIMx->CCR2, CompareValue);
 80040fa:	6381      	str	r1, [r0, #56]	; 0x38
}
 80040fc:	4770      	bx	lr

080040fe <LL_TIM_OC_SetCompareCH3>:
  WRITE_REG(TIMx->CCR3, CompareValue);
 80040fe:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8004100:	4770      	bx	lr

08004102 <LL_TIM_OC_SetCompareCH4>:
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004102:	6401      	str	r1, [r0, #64]	; 0x40
}
 8004104:	4770      	bx	lr

08004106 <pwm_stm32_get_cycles_per_sec>:
	*cycles = (uint64_t)(data->tim_clk / (cfg->prescaler + 1));
 8004106:	6841      	ldr	r1, [r0, #4]
 8004108:	6903      	ldr	r3, [r0, #16]
 800410a:	6849      	ldr	r1, [r1, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3101      	adds	r1, #1
 8004110:	fbb3 f3f1 	udiv	r3, r3, r1
 8004114:	2000      	movs	r0, #0
 8004116:	e9c2 3000 	strd	r3, r0, [r2]
}
 800411a:	4770      	bx	lr

0800411c <spi_context_get_next_buf>:
{
 800411c:	b530      	push	{r4, r5, lr}
 800411e:	4604      	mov	r4, r0
	while (*count) {
 8004120:	6808      	ldr	r0, [r1, #0]
 8004122:	b908      	cbnz	r0, 8004128 <spi_context_get_next_buf+0xc>
	*buf_len = 0;
 8004124:	6010      	str	r0, [r2, #0]
	return NULL;
 8004126:	e008      	b.n	800413a <spi_context_get_next_buf+0x1e>
		if (((*current)->len / dfs) != 0) {
 8004128:	6820      	ldr	r0, [r4, #0]
 800412a:	6845      	ldr	r5, [r0, #4]
 800412c:	429d      	cmp	r5, r3
 800412e:	d305      	bcc.n	800413c <spi_context_get_next_buf+0x20>
			*buf_len = (*current)->len / dfs;
 8004130:	fbb5 f5f3 	udiv	r5, r5, r3
 8004134:	6015      	str	r5, [r2, #0]
			return (*current)->buf;
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	6818      	ldr	r0, [r3, #0]
}
 800413a:	bd30      	pop	{r4, r5, pc}
		++(*current);
 800413c:	3008      	adds	r0, #8
 800413e:	6020      	str	r0, [r4, #0]
		--(*count);
 8004140:	6808      	ldr	r0, [r1, #0]
 8004142:	3801      	subs	r0, #1
 8004144:	6008      	str	r0, [r1, #0]
 8004146:	e7eb      	b.n	8004120 <spi_context_get_next_buf+0x4>

08004148 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
 8004148:	4603      	mov	r3, r0
 800414a:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800414c:	7919      	ldrb	r1, [r3, #4]
 800414e:	2301      	movs	r3, #1
{
	return gpio_pin_set(spec->port, spec->pin, value);
 8004150:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8004152:	fa03 f101 	lsl.w	r1, r3, r1
 8004156:	6903      	ldr	r3, [r0, #16]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 800415c:	bf18      	it	ne
 800415e:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 8004162:	b112      	cbz	r2, 800416a <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
 8004164:	6883      	ldr	r3, [r0, #8]
 8004166:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8004168:	4718      	bx	r3
 800416a:	6883      	ldr	r3, [r0, #8]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	e7fb      	b.n	8004168 <gpio_pin_set_dt.isra.0+0x20>

08004170 <_spi_context_cs_control>:
{
 8004170:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8004172:	6803      	ldr	r3, [r0, #0]
{
 8004174:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8004176:	b1e3      	cbz	r3, 80041b2 <_spi_context_cs_control+0x42>
 8004178:	68d8      	ldr	r0, [r3, #12]
 800417a:	b1d0      	cbz	r0, 80041b2 <_spi_context_cs_control+0x42>
 800417c:	6805      	ldr	r5, [r0, #0]
 800417e:	b1c5      	cbz	r5, 80041b2 <_spi_context_cs_control+0x42>
		if (on) {
 8004180:	b149      	cbz	r1, 8004196 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
 8004182:	2101      	movs	r1, #1
 8004184:	f7ff ffe0 	bl	8004148 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
 8004188:	6823      	ldr	r3, [r4, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	6898      	ldr	r0, [r3, #8]
}
 800418e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
 8004192:	f7ff bc7d 	b.w	8003a90 <z_impl_k_busy_wait>
			if (!force_off &&
 8004196:	b912      	cbnz	r2, 800419e <_spi_context_cs_control+0x2e>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
 8004198:	685b      	ldr	r3, [r3, #4]
			if (!force_off &&
 800419a:	04db      	lsls	r3, r3, #19
 800419c:	d409      	bmi.n	80041b2 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
 800419e:	6880      	ldr	r0, [r0, #8]
 80041a0:	f7ff fc76 	bl	8003a90 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	2100      	movs	r1, #0
 80041a8:	68d8      	ldr	r0, [r3, #12]
}
 80041aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 80041ae:	f7ff bfcb 	b.w	8004148 <gpio_pin_set_dt.isra.0>
}
 80041b2:	bd38      	pop	{r3, r4, r5, pc}

080041b4 <spi_context_unlock_unconditionally>:
{
 80041b4:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
 80041b6:	2201      	movs	r2, #1
 80041b8:	2100      	movs	r1, #0
{
 80041ba:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
 80041bc:	f7ff ffd8 	bl	8004170 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
 80041c0:	69a3      	ldr	r3, [r4, #24]
 80041c2:	b933      	cbnz	r3, 80041d2 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
 80041c4:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 80041c6:	f104 0010 	add.w	r0, r4, #16
}
 80041ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041ce:	f7fe bfbb 	b.w	8003148 <z_impl_k_sem_give>
 80041d2:	bd10      	pop	{r4, pc}

080041d4 <spi_stm32_release>:
{
 80041d4:	b508      	push	{r3, lr}
	spi_context_unlock_unconditionally(&data->ctx);
 80041d6:	6900      	ldr	r0, [r0, #16]
 80041d8:	f7ff ffec 	bl	80041b4 <spi_context_unlock_unconditionally>
}
 80041dc:	2000      	movs	r0, #0
 80041de:	bd08      	pop	{r3, pc}

080041e0 <can_calc_prescaler>:
}
#endif /* CONFIG_CAN_FD_MODE */

int can_calc_prescaler(const struct device *dev, struct can_timing *timing,
		       uint32_t bitrate)
{
 80041e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80041e4:	460e      	mov	r6, r1
 80041e6:	4614      	mov	r4, r2
	uint32_t ts = timing->prop_seg + timing->phase_seg1 + timing->phase_seg2 +
 80041e8:	884d      	ldrh	r5, [r1, #2]
 80041ea:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80041ee:	88cf      	ldrh	r7, [r1, #6]
 80041f0:	6883      	ldr	r3, [r0, #8]
 80041f2:	a901      	add	r1, sp, #4
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	4798      	blx	r3
		   CAN_SYNC_SEG;
	uint32_t core_clock;
	int ret;

	ret = can_get_core_clock(dev, &core_clock);
	if (ret != 0) {
 80041f8:	b978      	cbnz	r0, 800421a <can_calc_prescaler+0x3a>
	uint32_t ts = timing->prop_seg + timing->phase_seg1 + timing->phase_seg2 +
 80041fa:	eb05 0308 	add.w	r3, r5, r8
 80041fe:	443b      	add	r3, r7
		return ret;
	}

	timing->prescaler = core_clock / (bitrate * ts);
 8004200:	fb03 4404 	mla	r4, r3, r4, r4
 8004204:	9801      	ldr	r0, [sp, #4]
 8004206:	fbb0 f4f4 	udiv	r4, r0, r4
 800420a:	8134      	strh	r4, [r6, #8]

	return core_clock % (ts * timing->prescaler);
 800420c:	b2a4      	uxth	r4, r4
 800420e:	fb03 4404 	mla	r4, r3, r4, r4
 8004212:	fbb0 f3f4 	udiv	r3, r0, r4
 8004216:	fb04 0013 	mls	r0, r4, r3, r0
}
 800421a:	b002      	add	sp, #8
 800421c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004220 <can_stm32_signal_tx_complete>:
{
 8004220:	b510      	push	{r4, lr}
 8004222:	460c      	mov	r4, r1
	can_tx_callback_t callback = mb->tx_callback;
 8004224:	6823      	ldr	r3, [r4, #0]
{
 8004226:	4611      	mov	r1, r2
	if (callback != NULL) {
 8004228:	b11b      	cbz	r3, 8004232 <can_stm32_signal_tx_complete+0x12>
		callback(dev, status, mb->callback_arg);
 800422a:	6862      	ldr	r2, [r4, #4]
 800422c:	4798      	blx	r3
		mb->tx_callback = NULL;
 800422e:	2300      	movs	r3, #0
 8004230:	6023      	str	r3, [r4, #0]
}
 8004232:	bd10      	pop	{r4, pc}

08004234 <can_stm32_get_state>:
	CAN_TypeDef *can = cfg->can;
 8004234:	6843      	ldr	r3, [r0, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
	if (state != NULL) {
 8004238:	b129      	cbz	r1, 8004246 <can_stm32_get_state+0x12>
		if (!data->started) {
 800423a:	6900      	ldr	r0, [r0, #16]
 800423c:	f890 00ed 	ldrb.w	r0, [r0, #237]	; 0xed
 8004240:	b950      	cbnz	r0, 8004258 <can_stm32_get_state+0x24>
			*state = CAN_STATE_STOPPED;
 8004242:	2004      	movs	r0, #4
			*state = CAN_STATE_ERROR_ACTIVE;
 8004244:	7008      	strb	r0, [r1, #0]
	if (err_cnt != NULL) {
 8004246:	b12a      	cbz	r2, 8004254 <can_stm32_get_state+0x20>
			((can->ESR & CAN_ESR_TEC) >> CAN_ESR_TEC_Pos);
 8004248:	6999      	ldr	r1, [r3, #24]
 800424a:	0c09      	lsrs	r1, r1, #16
		err_cnt->tx_err_cnt =
 800424c:	7011      	strb	r1, [r2, #0]
			((can->ESR & CAN_ESR_REC) >> CAN_ESR_REC_Pos);
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	0e1b      	lsrs	r3, r3, #24
		err_cnt->rx_err_cnt =
 8004252:	7053      	strb	r3, [r2, #1]
}
 8004254:	2000      	movs	r0, #0
 8004256:	4770      	bx	lr
		} else if (can->ESR & CAN_ESR_BOFF) {
 8004258:	6998      	ldr	r0, [r3, #24]
 800425a:	0740      	lsls	r0, r0, #29
 800425c:	d501      	bpl.n	8004262 <can_stm32_get_state+0x2e>
			*state = CAN_STATE_BUS_OFF;
 800425e:	2003      	movs	r0, #3
 8004260:	e7f0      	b.n	8004244 <can_stm32_get_state+0x10>
		} else if (can->ESR & CAN_ESR_EPVF) {
 8004262:	6998      	ldr	r0, [r3, #24]
 8004264:	0780      	lsls	r0, r0, #30
 8004266:	d501      	bpl.n	800426c <can_stm32_get_state+0x38>
			*state = CAN_STATE_ERROR_PASSIVE;
 8004268:	2002      	movs	r0, #2
 800426a:	e7eb      	b.n	8004244 <can_stm32_get_state+0x10>
		} else if (can->ESR & CAN_ESR_EWGF) {
 800426c:	6998      	ldr	r0, [r3, #24]
 800426e:	f010 0001 	ands.w	r0, r0, #1
			*state = CAN_STATE_ERROR_WARNING;
 8004272:	bf18      	it	ne
 8004274:	2001      	movne	r0, #1
 8004276:	e7e5      	b.n	8004244 <can_stm32_get_state+0x10>

08004278 <can_stm32_get_capabilities>:
	*cap = CAN_MODE_NORMAL | CAN_MODE_LOOPBACK | CAN_MODE_LISTENONLY | CAN_MODE_ONE_SHOT;
 8004278:	230b      	movs	r3, #11
}
 800427a:	2000      	movs	r0, #0
	*cap = CAN_MODE_NORMAL | CAN_MODE_LOOPBACK | CAN_MODE_LISTENONLY | CAN_MODE_ONE_SHOT;
 800427c:	600b      	str	r3, [r1, #0]
}
 800427e:	4770      	bx	lr

08004280 <can_stm32_get_max_bitrate>:
	*max_bitrate = config->max_bitrate;
 8004280:	6843      	ldr	r3, [r0, #4]
}
 8004282:	2000      	movs	r0, #0
	*max_bitrate = config->max_bitrate;
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	600b      	str	r3, [r1, #0]
}
 8004288:	4770      	bx	lr

0800428a <can_stm32_get_max_filters>:
		return CONFIG_CAN_MAX_EXT_ID_FILTER;
 800428a:	2900      	cmp	r1, #0
}
 800428c:	bf0c      	ite	eq
 800428e:	200e      	moveq	r0, #14
 8004290:	2007      	movne	r0, #7
 8004292:	4770      	bx	lr

08004294 <can_stm32_set_state_change_callback>:
{
 8004294:	b510      	push	{r4, lr}
	CAN_TypeDef *can = cfg->can;
 8004296:	6843      	ldr	r3, [r0, #4]
	struct can_stm32_data *data = dev->data;
 8004298:	6904      	ldr	r4, [r0, #16]
	CAN_TypeDef *can = cfg->can;
 800429a:	681b      	ldr	r3, [r3, #0]
	data->state_change_cb_data = user_data;
 800429c:	e9c4 1239 	strd	r1, r2, [r4, #228]	; 0xe4
		can->IER &= ~(CAN_IER_BOFIE | CAN_IER_EPVIE | CAN_IER_EWGIE);
 80042a0:	695a      	ldr	r2, [r3, #20]
	if (cb == NULL) {
 80042a2:	b919      	cbnz	r1, 80042ac <can_stm32_set_state_change_callback+0x18>
		can->IER &= ~(CAN_IER_BOFIE | CAN_IER_EPVIE | CAN_IER_EWGIE);
 80042a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
		can->IER |= CAN_IER_BOFIE | CAN_IER_EPVIE | CAN_IER_EWGIE;
 80042a8:	615a      	str	r2, [r3, #20]
}
 80042aa:	bd10      	pop	{r4, pc}
		can->IER |= CAN_IER_BOFIE | CAN_IER_EPVIE | CAN_IER_EWGIE;
 80042ac:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80042b0:	e7fa      	b.n	80042a8 <can_stm32_set_state_change_callback+0x14>

080042b2 <config_can_0_irq>:
CAN_STM32_IRQ_INST(inst)          \
CAN_STM32_CONFIG_INST(inst)       \
CAN_STM32_DATA_INST(inst)         \
CAN_STM32_DEFINE_INST(inst)

DT_INST_FOREACH_STATUS_OKAY(CAN_STM32_INST)
 80042b2:	2200      	movs	r2, #0
 80042b4:	b510      	push	{r4, lr}
 80042b6:	4611      	mov	r1, r2
 80042b8:	4604      	mov	r4, r0
 80042ba:	2014      	movs	r0, #20
 80042bc:	f7fc fdf2 	bl	8000ea4 <z_arm_irq_priority_set>
 80042c0:	2014      	movs	r0, #20
 80042c2:	f7fc fde1 	bl	8000e88 <arch_irq_enable>
 80042c6:	2200      	movs	r2, #0
 80042c8:	2013      	movs	r0, #19
 80042ca:	4611      	mov	r1, r2
 80042cc:	f7fc fdea 	bl	8000ea4 <z_arm_irq_priority_set>
 80042d0:	2013      	movs	r0, #19
 80042d2:	f7fc fdd9 	bl	8000e88 <arch_irq_enable>
 80042d6:	2200      	movs	r2, #0
 80042d8:	2016      	movs	r0, #22
 80042da:	4611      	mov	r1, r2
 80042dc:	f7fc fde2 	bl	8000ea4 <z_arm_irq_priority_set>
 80042e0:	2016      	movs	r0, #22
 80042e2:	f7fc fdd1 	bl	8000e88 <arch_irq_enable>
 80042e6:	6963      	ldr	r3, [r4, #20]
 80042e8:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80042ec:	f043 0313 	orr.w	r3, r3, #19
 80042f0:	6163      	str	r3, [r4, #20]
 80042f2:	bd10      	pop	{r4, pc}

080042f4 <can_stm32_rx_isr>:
{
 80042f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80042f8:	4606      	mov	r6, r0
	can_rx_callback_t callback = NULL;
 80042fa:	f04f 0900 	mov.w	r9, #0
	CAN_TypeDef *can = cfg->can;
 80042fe:	6843      	ldr	r3, [r0, #4]
	struct can_stm32_data *data = dev->data;
 8004300:	6907      	ldr	r7, [r0, #16]
	CAN_TypeDef *can = cfg->can;
 8004302:	681c      	ldr	r4, [r3, #0]
{
 8004304:	b085      	sub	sp, #20
	while (can->RF0R & CAN_RF0R_FMP0) {
 8004306:	68e3      	ldr	r3, [r4, #12]
 8004308:	079b      	lsls	r3, r3, #30
 800430a:	d103      	bne.n	8004314 <can_stm32_rx_isr+0x20>
	if (can->RF0R & CAN_RF0R_FOVR0) {
 800430c:	68e3      	ldr	r3, [r4, #12]
}
 800430e:	b005      	add	sp, #20
 8004310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memset(frame, 0, sizeof(*frame));
 8004314:	2210      	movs	r2, #16
 8004316:	2100      	movs	r1, #0
 8004318:	4668      	mov	r0, sp
		filter_id = ((mbox->RDTR & CAN_RDT0R_FMI) >> CAN_RDT0R_FMI_Pos);
 800431a:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
	memset(frame, 0, sizeof(*frame));
 800431e:	f7ff fd10 	bl	8003d42 <memset>
	if (mbox->RIR & CAN_RI0R_IDE) {
 8004322:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8004326:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800432a:	f013 0f04 	tst.w	r3, #4
		frame->id = mbox->RIR >> CAN_RI0R_EXID_Pos;
 800432e:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
 8004332:	9b00      	ldr	r3, [sp, #0]
	if (mbox->RIR & CAN_RI0R_IDE) {
 8004334:	d033      	beq.n	800439e <can_stm32_rx_isr+0xaa>
		frame->id = mbox->RIR >> CAN_RI0R_EXID_Pos;
 8004336:	08d2      	lsrs	r2, r2, #3
 8004338:	f362 031c 	bfi	r3, r2, #0, #29
 800433c:	9300      	str	r3, [sp, #0]
		frame->flags |= CAN_FRAME_IDE;
 800433e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	f88d 3005 	strb.w	r3, [sp, #5]
	if ((mbox->RIR & CAN_RI0R_RTR) != 0) {
 800434a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800434e:	079a      	lsls	r2, r3, #30
		frame->flags |= CAN_FRAME_RTR;
 8004350:	bf42      	ittt	mi
 8004352:	f89d 3005 	ldrbmi.w	r3, [sp, #5]
 8004356:	f043 0302 	orrmi.w	r3, r3, #2
 800435a:	f88d 3005 	strbmi.w	r3, [sp, #5]
	frame->dlc = mbox->RDTR & (CAN_RDT0R_DLC >> CAN_RDT0R_DLC_Pos);
 800435e:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
		if (filter_id < CONFIG_CAN_MAX_EXT_ID_FILTER) {
 8004362:	2d06      	cmp	r5, #6
	frame->dlc = mbox->RDTR & (CAN_RDT0R_DLC >> CAN_RDT0R_DLC_Pos);
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	f88d 3004 	strb.w	r3, [sp, #4]
	frame->data_32[0] = mbox->RDLR;
 800436c:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8004370:	9302      	str	r3, [sp, #8]
	frame->data_32[1] = mbox->RDHR;
 8004372:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 8004376:	9303      	str	r3, [sp, #12]
		if (filter_id < CONFIG_CAN_MAX_EXT_ID_FILTER) {
 8004378:	d816      	bhi.n	80043a8 <can_stm32_rx_isr+0xb4>
			callback = data->rx_cb_ext[filter_id];
 800437a:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800437e:	f8d5 9074 	ldr.w	r9, [r5, #116]	; 0x74
			cb_arg = data->cb_arg_ext[filter_id];
 8004382:	f8d5 80c8 	ldr.w	r8, [r5, #200]	; 0xc8
		if (callback) {
 8004386:	f1b9 0f00 	cmp.w	r9, #0
 800438a:	d003      	beq.n	8004394 <can_stm32_rx_isr+0xa0>
			callback(dev, &frame, cb_arg);
 800438c:	4642      	mov	r2, r8
 800438e:	4669      	mov	r1, sp
 8004390:	4630      	mov	r0, r6
 8004392:	47c8      	blx	r9
		can->RF0R |= CAN_RF0R_RFOM0;
 8004394:	68e3      	ldr	r3, [r4, #12]
 8004396:	f043 0320 	orr.w	r3, r3, #32
 800439a:	60e3      	str	r3, [r4, #12]
 800439c:	e7b3      	b.n	8004306 <can_stm32_rx_isr+0x12>
		frame->id = mbox->RIR >> CAN_RI0R_STID_Pos;
 800439e:	0d52      	lsrs	r2, r2, #21
 80043a0:	f362 031c 	bfi	r3, r2, #0, #29
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	e7d0      	b.n	800434a <can_stm32_rx_isr+0x56>
		} else if (filter_id < CAN_STM32_MAX_FILTER_ID) {
 80043a8:	2d22      	cmp	r5, #34	; 0x22
			callback = data->rx_cb_std[index];
 80043aa:	bf9e      	ittt	ls
 80043ac:	eb07 0585 	addls.w	r5, r7, r5, lsl #2
 80043b0:	f8d5 9020 	ldrls.w	r9, [r5, #32]
			cb_arg = data->cb_arg_std[index];
 80043b4:	f8d5 8074 	ldrls.w	r8, [r5, #116]	; 0x74
 80043b8:	e7e5      	b.n	8004386 <can_stm32_rx_isr+0x92>

080043ba <can_stm32_tx_isr_handler>:
{
 80043ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CAN_TypeDef *can = cfg->can;
 80043bc:	6843      	ldr	r3, [r0, #4]
{
 80043be:	4606      	mov	r6, r0
	CAN_TypeDef *can = cfg->can;
 80043c0:	681c      	ldr	r4, [r3, #0]
	struct can_stm32_data *data = dev->data;
 80043c2:	6907      	ldr	r7, [r0, #16]
	bus_off = can->ESR & CAN_ESR_BOFF;
 80043c4:	69a5      	ldr	r5, [r4, #24]
	if ((can->TSR & CAN_TSR_RQCP0) | bus_off) {
 80043c6:	68a3      	ldr	r3, [r4, #8]
	bus_off = can->ESR & CAN_ESR_BOFF;
 80043c8:	f005 0504 	and.w	r5, r5, #4
	if ((can->TSR & CAN_TSR_RQCP0) | bus_off) {
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	432b      	orrs	r3, r5
 80043d2:	d017      	beq.n	8004404 <can_stm32_tx_isr_handler+0x4a>
		status = can->TSR & CAN_TSR_TXOK0 ? 0  :
 80043d4:	68a3      	ldr	r3, [r4, #8]
 80043d6:	0798      	lsls	r0, r3, #30
 80043d8:	d458      	bmi.n	800448c <can_stm32_tx_isr_handler+0xd2>
			 can->TSR & CAN_TSR_TERR0 ? -EIO :
 80043da:	68a3      	ldr	r3, [r4, #8]
 80043dc:	0719      	lsls	r1, r3, #28
 80043de:	d457      	bmi.n	8004490 <can_stm32_tx_isr_handler+0xd6>
			 can->TSR & CAN_TSR_ALST0 ? -EBUSY :
 80043e0:	68a3      	ldr	r3, [r4, #8]
 80043e2:	075b      	lsls	r3, r3, #29
 80043e4:	d457      	bmi.n	8004496 <can_stm32_tx_isr_handler+0xdc>
					  bus_off ? -ENETUNREACH :
 80043e6:	2d00      	cmp	r5, #0
 80043e8:	bf0c      	ite	eq
 80043ea:	f06f 0204 	mvneq.w	r2, #4
 80043ee:	f06f 0271 	mvnne.w	r2, #113	; 0x71
		can->TSR |= CAN_TSR_RQCP0;
 80043f2:	68a3      	ldr	r3, [r4, #8]
		can_stm32_signal_tx_complete(dev, &data->mb0, status);
 80043f4:	4630      	mov	r0, r6
		can->TSR |= CAN_TSR_RQCP0;
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	60a3      	str	r3, [r4, #8]
		can_stm32_signal_tx_complete(dev, &data->mb0, status);
 80043fc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004400:	f7ff ff0e 	bl	8004220 <can_stm32_signal_tx_complete>
	if ((can->TSR & CAN_TSR_RQCP1) | bus_off) {
 8004404:	68a3      	ldr	r3, [r4, #8]
 8004406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440a:	432b      	orrs	r3, r5
 800440c:	d017      	beq.n	800443e <can_stm32_tx_isr_handler+0x84>
		status = can->TSR & CAN_TSR_TXOK1 ? 0  :
 800440e:	68a3      	ldr	r3, [r4, #8]
 8004410:	0598      	lsls	r0, r3, #22
 8004412:	d443      	bmi.n	800449c <can_stm32_tx_isr_handler+0xe2>
			 can->TSR & CAN_TSR_TERR1 ? -EIO :
 8004414:	68a3      	ldr	r3, [r4, #8]
 8004416:	0519      	lsls	r1, r3, #20
 8004418:	d442      	bmi.n	80044a0 <can_stm32_tx_isr_handler+0xe6>
			 can->TSR & CAN_TSR_ALST1 ? -EBUSY :
 800441a:	68a3      	ldr	r3, [r4, #8]
 800441c:	055b      	lsls	r3, r3, #21
 800441e:	d442      	bmi.n	80044a6 <can_stm32_tx_isr_handler+0xec>
			 bus_off                  ? -ENETUNREACH :
 8004420:	2d00      	cmp	r5, #0
 8004422:	bf0c      	ite	eq
 8004424:	f06f 0204 	mvneq.w	r2, #4
 8004428:	f06f 0271 	mvnne.w	r2, #113	; 0x71
		can->TSR |= CAN_TSR_RQCP1;
 800442c:	68a3      	ldr	r3, [r4, #8]
		can_stm32_signal_tx_complete(dev, &data->mb1, status);
 800442e:	4630      	mov	r0, r6
		can->TSR |= CAN_TSR_RQCP1;
 8004430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004434:	60a3      	str	r3, [r4, #8]
		can_stm32_signal_tx_complete(dev, &data->mb1, status);
 8004436:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800443a:	f7ff fef1 	bl	8004220 <can_stm32_signal_tx_complete>
	if ((can->TSR & CAN_TSR_RQCP2) | bus_off) {
 800443e:	68a3      	ldr	r3, [r4, #8]
 8004440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004444:	432b      	orrs	r3, r5
 8004446:	d017      	beq.n	8004478 <can_stm32_tx_isr_handler+0xbe>
		status = can->TSR & CAN_TSR_TXOK2 ? 0  :
 8004448:	68a3      	ldr	r3, [r4, #8]
 800444a:	0398      	lsls	r0, r3, #14
 800444c:	d42e      	bmi.n	80044ac <can_stm32_tx_isr_handler+0xf2>
			 can->TSR & CAN_TSR_TERR2 ? -EIO :
 800444e:	68a3      	ldr	r3, [r4, #8]
 8004450:	0319      	lsls	r1, r3, #12
 8004452:	d42d      	bmi.n	80044b0 <can_stm32_tx_isr_handler+0xf6>
			 can->TSR & CAN_TSR_ALST2 ? -EBUSY :
 8004454:	68a3      	ldr	r3, [r4, #8]
 8004456:	035b      	lsls	r3, r3, #13
 8004458:	d42d      	bmi.n	80044b6 <can_stm32_tx_isr_handler+0xfc>
			 bus_off                  ? -ENETUNREACH :
 800445a:	2d00      	cmp	r5, #0
 800445c:	bf0c      	ite	eq
 800445e:	f06f 0204 	mvneq.w	r2, #4
 8004462:	f06f 0271 	mvnne.w	r2, #113	; 0x71
		can->TSR |= CAN_TSR_RQCP2;
 8004466:	68a3      	ldr	r3, [r4, #8]
		can_stm32_signal_tx_complete(dev, &data->mb2, status);
 8004468:	4630      	mov	r0, r6
		can->TSR |= CAN_TSR_RQCP2;
 800446a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446e:	60a3      	str	r3, [r4, #8]
		can_stm32_signal_tx_complete(dev, &data->mb2, status);
 8004470:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8004474:	f7ff fed4 	bl	8004220 <can_stm32_signal_tx_complete>
	if (can->TSR & CAN_TSR_TME) {
 8004478:	68a3      	ldr	r3, [r4, #8]
 800447a:	f013 5fe0 	tst.w	r3, #469762048	; 0x1c000000
 800447e:	d01d      	beq.n	80044bc <can_stm32_tx_isr_handler+0x102>
 8004480:	f107 0014 	add.w	r0, r7, #20
}
 8004484:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004488:	f7fe be5e 	b.w	8003148 <z_impl_k_sem_give>
		status = can->TSR & CAN_TSR_TXOK0 ? 0  :
 800448c:	2200      	movs	r2, #0
 800448e:	e7b0      	b.n	80043f2 <can_stm32_tx_isr_handler+0x38>
			 can->TSR & CAN_TSR_TERR0 ? -EIO :
 8004490:	f06f 0204 	mvn.w	r2, #4
 8004494:	e7ad      	b.n	80043f2 <can_stm32_tx_isr_handler+0x38>
			 can->TSR & CAN_TSR_ALST0 ? -EBUSY :
 8004496:	f06f 020f 	mvn.w	r2, #15
 800449a:	e7aa      	b.n	80043f2 <can_stm32_tx_isr_handler+0x38>
		status = can->TSR & CAN_TSR_TXOK1 ? 0  :
 800449c:	2200      	movs	r2, #0
 800449e:	e7c5      	b.n	800442c <can_stm32_tx_isr_handler+0x72>
			 can->TSR & CAN_TSR_TERR1 ? -EIO :
 80044a0:	f06f 0204 	mvn.w	r2, #4
 80044a4:	e7c2      	b.n	800442c <can_stm32_tx_isr_handler+0x72>
			 can->TSR & CAN_TSR_ALST1 ? -EBUSY :
 80044a6:	f06f 020f 	mvn.w	r2, #15
 80044aa:	e7bf      	b.n	800442c <can_stm32_tx_isr_handler+0x72>
		status = can->TSR & CAN_TSR_TXOK2 ? 0  :
 80044ac:	2200      	movs	r2, #0
 80044ae:	e7da      	b.n	8004466 <can_stm32_tx_isr_handler+0xac>
			 can->TSR & CAN_TSR_TERR2 ? -EIO :
 80044b0:	f06f 0204 	mvn.w	r2, #4
 80044b4:	e7d7      	b.n	8004466 <can_stm32_tx_isr_handler+0xac>
			 can->TSR & CAN_TSR_ALST2 ? -EBUSY :
 80044b6:	f06f 020f 	mvn.w	r2, #15
 80044ba:	e7d4      	b.n	8004466 <can_stm32_tx_isr_handler+0xac>
}
 80044bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080044be <can_stm32_tx_isr>:
	can_stm32_tx_isr_handler(dev);
 80044be:	f7ff bf7c 	b.w	80043ba <can_stm32_tx_isr_handler>

080044c2 <can_stm32_state_change_isr>:
{
 80044c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	CAN_TypeDef *can = cfg->can;
 80044c6:	6843      	ldr	r3, [r0, #4]
{
 80044c8:	4604      	mov	r4, r0
	CAN_TypeDef *can = cfg->can;
 80044ca:	681e      	ldr	r6, [r3, #0]
	if (can->MSR & CAN_MSR_ERRI) {
 80044cc:	6873      	ldr	r3, [r6, #4]
 80044ce:	075b      	lsls	r3, r3, #29
 80044d0:	d51b      	bpl.n	800450a <can_stm32_state_change_isr+0x48>
		can_stm32_tx_isr_handler(dev);
 80044d2:	f7ff ff72 	bl	80043ba <can_stm32_tx_isr_handler>
	struct can_stm32_data *data = dev->data;
 80044d6:	6925      	ldr	r5, [r4, #16]
	(void)can_stm32_get_state(dev, &state, &err_cnt);
 80044d8:	f10d 0103 	add.w	r1, sp, #3
 80044dc:	4620      	mov	r0, r4
	void *state_change_cb_data = data->state_change_cb_data;
 80044de:	e9d5 7839 	ldrd	r7, r8, [r5, #228]	; 0xe4
	(void)can_stm32_get_state(dev, &state, &err_cnt);
 80044e2:	aa01      	add	r2, sp, #4
 80044e4:	f7ff fea6 	bl	8004234 <can_stm32_get_state>
	if (state != data->state) {
 80044e8:	f89d 1003 	ldrb.w	r1, [sp, #3]
 80044ec:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
 80044f0:	428b      	cmp	r3, r1
 80044f2:	d006      	beq.n	8004502 <can_stm32_state_change_isr+0x40>
		data->state = state;
 80044f4:	f885 10ec 	strb.w	r1, [r5, #236]	; 0xec
		if (cb != NULL) {
 80044f8:	b11f      	cbz	r7, 8004502 <can_stm32_state_change_isr+0x40>
			cb(dev, state, err_cnt, state_change_cb_data);
 80044fa:	4643      	mov	r3, r8
 80044fc:	4620      	mov	r0, r4
 80044fe:	9a01      	ldr	r2, [sp, #4]
 8004500:	47b8      	blx	r7
		can->MSR |= CAN_MSR_ERRI;
 8004502:	6873      	ldr	r3, [r6, #4]
 8004504:	f043 0304 	orr.w	r3, r3, #4
 8004508:	6073      	str	r3, [r6, #4]
}
 800450a:	b002      	add	sp, #8
 800450c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004510 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
 8004510:	f7fe bd64 	b.w	8002fdc <z_impl_k_mutex_lock>

08004514 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 8004514:	f7fe bddc 	b.w	80030d0 <z_impl_k_mutex_unlock>

08004518 <can_stm32_stop>:
{
 8004518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct can_stm32_data *data = dev->data;
 800451c:	6905      	ldr	r5, [r0, #16]
	const struct can_stm32_config *cfg = dev->config;
 800451e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 8004522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
 8004526:	4606      	mov	r6, r0
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 8004528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800452c:	4628      	mov	r0, r5
	CAN_TypeDef *can = cfg->can;
 800452e:	f8d8 7000 	ldr.w	r7, [r8]
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 8004532:	f7ff ffed 	bl	8004510 <k_mutex_lock.constprop.0.isra.0>
	if (!data->started) {
 8004536:	f895 30ed 	ldrb.w	r3, [r5, #237]	; 0xed
 800453a:	b383      	cbz	r3, 800459e <can_stm32_stop+0x86>
	ret = can_stm32_enter_init_mode(can);
 800453c:	4638      	mov	r0, r7
 800453e:	f7fd fd69 	bl	8002014 <can_stm32_enter_init_mode>
	if (ret < 0) {
 8004542:	1e04      	subs	r4, r0, #0
 8004544:	db2e      	blt.n	80045a4 <can_stm32_stop+0x8c>
	can_stm32_signal_tx_complete(dev, &data->mb0, -ENETDOWN);
 8004546:	f06f 0272 	mvn.w	r2, #114	; 0x72
 800454a:	4630      	mov	r0, r6
 800454c:	f105 0124 	add.w	r1, r5, #36	; 0x24
 8004550:	f7ff fe66 	bl	8004220 <can_stm32_signal_tx_complete>
	can_stm32_signal_tx_complete(dev, &data->mb1, -ENETDOWN);
 8004554:	f06f 0272 	mvn.w	r2, #114	; 0x72
 8004558:	4630      	mov	r0, r6
 800455a:	f105 012c 	add.w	r1, r5, #44	; 0x2c
 800455e:	f7ff fe5f 	bl	8004220 <can_stm32_signal_tx_complete>
	can_stm32_signal_tx_complete(dev, &data->mb2, -ENETDOWN);
 8004562:	4630      	mov	r0, r6
 8004564:	f06f 0272 	mvn.w	r2, #114	; 0x72
 8004568:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800456c:	f7ff fe58 	bl	8004220 <can_stm32_signal_tx_complete>
	can->TSR |= CAN_TSR_ABRQ2 | CAN_TSR_ABRQ1 | CAN_TSR_ABRQ0;
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f043 1380 	orr.w	r3, r3, #8388736	; 0x800080
 8004576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800457a:	60bb      	str	r3, [r7, #8]
	if (cfg->phy != NULL) {
 800457c:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
 8004580:	b120      	cbz	r0, 800458c <can_stm32_stop+0x74>
 8004582:	6883      	ldr	r3, [r0, #8]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	4798      	blx	r3
		if (ret != 0) {
 8004588:	4604      	mov	r4, r0
 800458a:	b910      	cbnz	r0, 8004592 <can_stm32_stop+0x7a>
	data->started = false;
 800458c:	2300      	movs	r3, #0
 800458e:	f885 30ed 	strb.w	r3, [r5, #237]	; 0xed
	k_mutex_unlock(&data->inst_mutex);
 8004592:	4628      	mov	r0, r5
 8004594:	f7ff ffbe 	bl	8004514 <k_mutex_unlock.isra.0>
}
 8004598:	4620      	mov	r0, r4
 800459a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = -EALREADY;
 800459e:	f06f 0477 	mvn.w	r4, #119	; 0x77
 80045a2:	e7f6      	b.n	8004592 <can_stm32_stop+0x7a>
		ret = -EIO;
 80045a4:	f06f 0404 	mvn.w	r4, #4
 80045a8:	e7f3      	b.n	8004592 <can_stm32_stop+0x7a>

080045aa <can_stm32_send>:
{
 80045aa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ae:	4698      	mov	r8, r3
	CAN_TypeDef *can = cfg->can;
 80045b0:	6843      	ldr	r3, [r0, #4]
{
 80045b2:	460d      	mov	r5, r1
	CAN_TypeDef *can = cfg->can;
 80045b4:	681c      	ldr	r4, [r3, #0]
	if (frame->dlc > CAN_MAX_DLC) {
 80045b6:	790b      	ldrb	r3, [r1, #4]
{
 80045b8:	4617      	mov	r7, r2
	if (frame->dlc > CAN_MAX_DLC) {
 80045ba:	2b08      	cmp	r3, #8
{
 80045bc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
	struct can_stm32_data *data = dev->data;
 80045c0:	6906      	ldr	r6, [r0, #16]
	uint32_t transmit_status_register = can->TSR;
 80045c2:	f8d4 9008 	ldr.w	r9, [r4, #8]
	if (frame->dlc > CAN_MAX_DLC) {
 80045c6:	d874      	bhi.n	80046b2 <can_stm32_send+0x108>
	if ((frame->flags & ~(CAN_FRAME_IDE | CAN_FRAME_RTR)) != 0) {
 80045c8:	794b      	ldrb	r3, [r1, #5]
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	d874      	bhi.n	80046b8 <can_stm32_send+0x10e>
	if (!data->started) {
 80045ce:	f896 30ed 	ldrb.w	r3, [r6, #237]	; 0xed
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d073      	beq.n	80046be <can_stm32_send+0x114>
	if (can->ESR & CAN_ESR_BOFF) {
 80045d6:	69a3      	ldr	r3, [r4, #24]
 80045d8:	0759      	lsls	r1, r3, #29
 80045da:	d473      	bmi.n	80046c4 <can_stm32_send+0x11a>
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 80045dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045e4:	4630      	mov	r0, r6
 80045e6:	f7ff ff93 	bl	8004510 <k_mutex_lock.constprop.0.isra.0>
		if (k_sem_take(&data->tx_int_sem, timeout)) {
 80045ea:	f106 0b14 	add.w	fp, r6, #20
	while (!(transmit_status_register & CAN_TSR_TME)) {
 80045ee:	f019 5fe0 	tst.w	r9, #469762048	; 0x1c000000
 80045f2:	d037      	beq.n	8004664 <can_stm32_send+0xba>
	if (transmit_status_register & CAN_TSR_TME0) {
 80045f4:	f019 6f80 	tst.w	r9, #67108864	; 0x4000000
 80045f8:	d04b      	beq.n	8004692 <can_stm32_send+0xe8>
		mailbox = &can->sTxMailBox[0];
 80045fa:	f504 73c0 	add.w	r3, r4, #384	; 0x180
		mb = &(data->mb0);
 80045fe:	f106 0224 	add.w	r2, r6, #36	; 0x24
	mb->callback_arg = user_data;
 8004602:	990b      	ldr	r1, [sp, #44]	; 0x2c
	mb->tx_callback = callback;
 8004604:	f8c2 a000 	str.w	sl, [r2]
	mb->callback_arg = user_data;
 8004608:	6051      	str	r1, [r2, #4]
	mailbox->TIR &= CAN_TI0R_TXRQ;
 800460a:	681a      	ldr	r2, [r3, #0]
	k_mutex_unlock(&data->inst_mutex);
 800460c:	4630      	mov	r0, r6
	mailbox->TIR &= CAN_TI0R_TXRQ;
 800460e:	f002 0201 	and.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]
	if ((frame->flags & CAN_FRAME_IDE) != 0) {
 8004614:	796a      	ldrb	r2, [r5, #5]
 8004616:	6829      	ldr	r1, [r5, #0]
 8004618:	f012 0f01 	tst.w	r2, #1
		mailbox->TIR |= (frame->id << CAN_TI0R_EXID_Pos)
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	bf16      	itet	ne
 8004620:	ea42 02c1 	orrne.w	r2, r2, r1, lsl #3
		mailbox->TIR |= (frame->id << CAN_TI0R_STID_Pos);
 8004624:	ea42 5241 	orreq.w	r2, r2, r1, lsl #21
		mailbox->TIR |= (frame->id << CAN_TI0R_EXID_Pos)
 8004628:	f042 0204 	orrne.w	r2, r2, #4
		mailbox->TIR |= (frame->id << CAN_TI0R_STID_Pos);
 800462c:	601a      	str	r2, [r3, #0]
	if ((frame->flags & CAN_FRAME_RTR) != 0) {
 800462e:	796a      	ldrb	r2, [r5, #5]
 8004630:	0792      	lsls	r2, r2, #30
		mailbox->TIR |= CAN_TI1R_RTR;
 8004632:	bf42      	ittt	mi
 8004634:	681a      	ldrmi	r2, [r3, #0]
 8004636:	f042 0202 	orrmi.w	r2, r2, #2
 800463a:	601a      	strmi	r2, [r3, #0]
	mailbox->TDTR = (mailbox->TDTR & ~CAN_TDT1R_DLC) |
 800463c:	6859      	ldr	r1, [r3, #4]
			((frame->dlc & 0xF) << CAN_TDT1R_DLC_Pos);
 800463e:	792a      	ldrb	r2, [r5, #4]
	mailbox->TDTR = (mailbox->TDTR & ~CAN_TDT1R_DLC) |
 8004640:	f021 010f 	bic.w	r1, r1, #15
			((frame->dlc & 0xF) << CAN_TDT1R_DLC_Pos);
 8004644:	f002 020f 	and.w	r2, r2, #15
	mailbox->TDTR = (mailbox->TDTR & ~CAN_TDT1R_DLC) |
 8004648:	430a      	orrs	r2, r1
 800464a:	605a      	str	r2, [r3, #4]
	mailbox->TDLR = frame->data_32[0];
 800464c:	68aa      	ldr	r2, [r5, #8]
 800464e:	609a      	str	r2, [r3, #8]
	mailbox->TDHR = frame->data_32[1];
 8004650:	68ea      	ldr	r2, [r5, #12]
 8004652:	60da      	str	r2, [r3, #12]
	mailbox->TIR |= CAN_TI0R_TXRQ;
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]
	k_mutex_unlock(&data->inst_mutex);
 800465c:	f7ff ff5a 	bl	8004514 <k_mutex_unlock.isra.0>
	return 0;
 8004660:	2000      	movs	r0, #0
 8004662:	e00a      	b.n	800467a <can_stm32_send+0xd0>
		k_mutex_unlock(&data->inst_mutex);
 8004664:	4630      	mov	r0, r6
 8004666:	f7ff ff55 	bl	8004514 <k_mutex_unlock.isra.0>
	return z_impl_k_sem_take(sem, timeout);
 800466a:	463a      	mov	r2, r7
 800466c:	4643      	mov	r3, r8
 800466e:	4658      	mov	r0, fp
 8004670:	f7fe fd8a 	bl	8003188 <z_impl_k_sem_take>
		if (k_sem_take(&data->tx_int_sem, timeout)) {
 8004674:	b118      	cbz	r0, 800467e <can_stm32_send+0xd4>
			return -EAGAIN;
 8004676:	f06f 000a 	mvn.w	r0, #10
}
 800467a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		k_mutex_lock(&data->inst_mutex, K_FOREVER);
 800467e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004686:	4630      	mov	r0, r6
 8004688:	f7ff ff42 	bl	8004510 <k_mutex_lock.constprop.0.isra.0>
		transmit_status_register = can->TSR;
 800468c:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8004690:	e7ad      	b.n	80045ee <can_stm32_send+0x44>
	} else if (transmit_status_register & CAN_TSR_TME1) {
 8004692:	f019 6f00 	tst.w	r9, #134217728	; 0x8000000
 8004696:	d004      	beq.n	80046a2 <can_stm32_send+0xf8>
		mailbox = &can->sTxMailBox[1];
 8004698:	f504 73c8 	add.w	r3, r4, #400	; 0x190
		mb = &data->mb1;
 800469c:	f106 022c 	add.w	r2, r6, #44	; 0x2c
 80046a0:	e7af      	b.n	8004602 <can_stm32_send+0x58>
	} else if (transmit_status_register & CAN_TSR_TME2) {
 80046a2:	f019 5180 	ands.w	r1, r9, #268435456	; 0x10000000
 80046a6:	d010      	beq.n	80046ca <can_stm32_send+0x120>
		mailbox = &can->sTxMailBox[2];
 80046a8:	f504 73d0 	add.w	r3, r4, #416	; 0x1a0
		mb = &data->mb2;
 80046ac:	f106 0234 	add.w	r2, r6, #52	; 0x34
 80046b0:	e7a7      	b.n	8004602 <can_stm32_send+0x58>
		return -EINVAL;
 80046b2:	f06f 0015 	mvn.w	r0, #21
 80046b6:	e7e0      	b.n	800467a <can_stm32_send+0xd0>
		return -ENOTSUP;
 80046b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80046bc:	e7dd      	b.n	800467a <can_stm32_send+0xd0>
		return -ENETDOWN;
 80046be:	f06f 0072 	mvn.w	r0, #114	; 0x72
 80046c2:	e7da      	b.n	800467a <can_stm32_send+0xd0>
		return -ENETUNREACH;
 80046c4:	f06f 0071 	mvn.w	r0, #113	; 0x71
 80046c8:	e7d7      	b.n	800467a <can_stm32_send+0xd0>
	mb->tx_callback = callback;
 80046ca:	f8c1 a000 	str.w	sl, [r1]
	mb->callback_arg = user_data;
 80046ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046d0:	604b      	str	r3, [r1, #4]
	mailbox->TIR &= CAN_TI0R_TXRQ;
 80046d2:	680b      	ldr	r3, [r1, #0]
 80046d4:	deff      	udf	#255	; 0xff

080046d6 <can_stm32_set_mode>:
{
 80046d6:	b570      	push	{r4, r5, r6, lr}
	CAN_TypeDef *can = cfg->can;
 80046d8:	6843      	ldr	r3, [r0, #4]
{
 80046da:	460d      	mov	r5, r1
	CAN_TypeDef *can = cfg->can;
 80046dc:	681c      	ldr	r4, [r3, #0]
	if ((mode & ~(CAN_MODE_LOOPBACK | CAN_MODE_LISTENONLY | CAN_MODE_ONE_SHOT)) != 0) {
 80046de:	f031 030b 	bics.w	r3, r1, #11
	struct can_stm32_data *data = dev->data;
 80046e2:	6906      	ldr	r6, [r0, #16]
	if ((mode & ~(CAN_MODE_LOOPBACK | CAN_MODE_LISTENONLY | CAN_MODE_ONE_SHOT)) != 0) {
 80046e4:	d126      	bne.n	8004734 <can_stm32_set_mode+0x5e>
	if (data->started) {
 80046e6:	f896 30ed 	ldrb.w	r3, [r6, #237]	; 0xed
 80046ea:	bb33      	cbnz	r3, 800473a <can_stm32_set_mode+0x64>
	k_mutex_lock(&data->inst_mutex, K_FOREVER);
 80046ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046f0:	4630      	mov	r0, r6
 80046f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046f6:	f7ff ff0b 	bl	8004510 <k_mutex_lock.constprop.0.isra.0>
		can->BTR |= CAN_BTR_LBKM;
 80046fa:	69e3      	ldr	r3, [r4, #28]
	if ((mode & CAN_MODE_LOOPBACK) != 0) {
 80046fc:	07e8      	lsls	r0, r5, #31
		can->BTR |= CAN_BTR_LBKM;
 80046fe:	bf4c      	ite	mi
 8004700:	f043 4380 	orrmi.w	r3, r3, #1073741824	; 0x40000000
		can->BTR &= ~CAN_BTR_LBKM;
 8004704:	f023 4380 	bicpl.w	r3, r3, #1073741824	; 0x40000000
 8004708:	61e3      	str	r3, [r4, #28]
		can->BTR |= CAN_BTR_SILM;
 800470a:	69e3      	ldr	r3, [r4, #28]
	if ((mode & CAN_MODE_LISTENONLY) != 0) {
 800470c:	07a9      	lsls	r1, r5, #30
		can->BTR |= CAN_BTR_SILM;
 800470e:	bf4c      	ite	mi
 8004710:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
		can->BTR &= ~CAN_BTR_SILM;
 8004714:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8004718:	61e3      	str	r3, [r4, #28]
		can->MCR |= CAN_MCR_NART;
 800471a:	6823      	ldr	r3, [r4, #0]
	if ((mode & CAN_MODE_ONE_SHOT) != 0) {
 800471c:	072a      	lsls	r2, r5, #28
		can->MCR |= CAN_MCR_NART;
 800471e:	bf4c      	ite	mi
 8004720:	f043 0310 	orrmi.w	r3, r3, #16
		can->MCR &= ~CAN_MCR_NART;
 8004724:	f023 0310 	bicpl.w	r3, r3, #16
	k_mutex_unlock(&data->inst_mutex);
 8004728:	4630      	mov	r0, r6
		can->MCR &= ~CAN_MCR_NART;
 800472a:	6023      	str	r3, [r4, #0]
	k_mutex_unlock(&data->inst_mutex);
 800472c:	f7ff fef2 	bl	8004514 <k_mutex_unlock.isra.0>
	return 0;
 8004730:	2000      	movs	r0, #0
}
 8004732:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
 8004734:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004738:	e7fb      	b.n	8004732 <can_stm32_set_mode+0x5c>
		return -EBUSY;
 800473a:	f06f 000f 	mvn.w	r0, #15
 800473e:	e7f8      	b.n	8004732 <can_stm32_set_mode+0x5c>

08004740 <LL_USART_ClearFlag_FE>:
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8004740:	6803      	ldr	r3, [r0, #0]
{
 8004742:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 8004744:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8004746:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 8004748:	6843      	ldr	r3, [r0, #4]
 800474a:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800474c:	9b01      	ldr	r3, [sp, #4]
}
 800474e:	b002      	add	sp, #8
 8004750:	4770      	bx	lr

08004752 <uart_stm32_set_baudrate>:
{
 8004752:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (clock_control_get_rate(data->clock,
 8004754:	6903      	ldr	r3, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 8004756:	6845      	ldr	r5, [r0, #4]
		if (clock_control_get_rate(data->clock,
 8004758:	6858      	ldr	r0, [r3, #4]
{
 800475a:	460c      	mov	r4, r1
	if (api->get_rate == NULL) {
 800475c:	6883      	ldr	r3, [r0, #8]
					   (clock_control_subsys_t)&config->pclken[0],
 800475e:	6869      	ldr	r1, [r5, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	b1bb      	cbz	r3, 8004794 <uart_stm32_set_baudrate+0x42>
	return api->get_rate(dev, sys, rate);
 8004764:	aa01      	add	r2, sp, #4
 8004766:	4798      	blx	r3
		if (clock_control_get_rate(data->clock,
 8004768:	2800      	cmp	r0, #0
 800476a:	db13      	blt.n	8004794 <uart_stm32_set_baudrate+0x42>
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800476c:	2219      	movs	r2, #25
 800476e:	9b01      	ldr	r3, [sp, #4]
 8004770:	00a4      	lsls	r4, r4, #2
 8004772:	4353      	muls	r3, r2
 8004774:	2264      	movs	r2, #100	; 0x64
 8004776:	fbb3 f1f4 	udiv	r1, r3, r4
 800477a:	fbb1 f0f2 	udiv	r0, r1, r2
 800477e:	fb02 1310 	mls	r3, r2, r0, r1
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	3332      	adds	r3, #50	; 0x32
 8004786:	fbb3 f3f2 	udiv	r3, r3, r2
		LL_USART_SetBaudRate(config->usart,
 800478a:	682d      	ldr	r5, [r5, #0]
 800478c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8004790:	b29b      	uxth	r3, r3
 8004792:	60ab      	str	r3, [r5, #8]
}
 8004794:	b003      	add	sp, #12
 8004796:	bd30      	pop	{r4, r5, pc}

08004798 <uart_stm32_poll_in>:
{
 8004798:	b508      	push	{r3, lr}
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 800479a:	6843      	ldr	r3, [r0, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800479e:	6803      	ldr	r3, [r0, #0]
 80047a0:	071a      	lsls	r2, r3, #28
 80047a2:	d501      	bpl.n	80047a8 <uart_stm32_poll_in+0x10>
		LL_USART_ClearFlag_ORE(config->usart);
 80047a4:	f7ff ffcc 	bl	8004740 <LL_USART_ClearFlag_FE>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80047a8:	6803      	ldr	r3, [r0, #0]
	if (!LL_USART_IsActiveFlag_RXNE(config->usart)) {
 80047aa:	069b      	lsls	r3, r3, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80047ac:	bf49      	itett	mi
 80047ae:	6843      	ldrmi	r3, [r0, #4]
		return -1;
 80047b0:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
	return 0;
 80047b4:	2000      	movmi	r0, #0
 80047b6:	700b      	strbmi	r3, [r1, #0]
}
 80047b8:	bd08      	pop	{r3, pc}

080047ba <uart_stm32_poll_out>:
{
 80047ba:	b510      	push	{r4, lr}
	const struct uart_stm32_config *config = dev->config;
 80047bc:	6840      	ldr	r0, [r0, #4]
		if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 80047be:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80047c0:	6813      	ldr	r3, [r2, #0]
 80047c2:	061b      	lsls	r3, r3, #24
 80047c4:	d5fc      	bpl.n	80047c0 <uart_stm32_poll_out+0x6>
	__asm__ volatile(
 80047c6:	f04f 0210 	mov.w	r2, #16
 80047ca:	f3ef 8311 	mrs	r3, BASEPRI
 80047ce:	f382 8812 	msr	BASEPRI_MAX, r2
 80047d2:	f3bf 8f6f 	isb	sy
			if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 80047d6:	6802      	ldr	r2, [r0, #0]
 80047d8:	6814      	ldr	r4, [r2, #0]
 80047da:	0624      	lsls	r4, r4, #24
 80047dc:	d404      	bmi.n	80047e8 <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 80047e6:	e7ea      	b.n	80047be <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 80047e8:	6051      	str	r1, [r2, #4]
	__asm__ volatile(
 80047ea:	f383 8811 	msr	BASEPRI, r3
 80047ee:	f3bf 8f6f 	isb	sy
}
 80047f2:	bd10      	pop	{r4, pc}

080047f4 <uart_stm32_err_check>:
{
 80047f4:	b508      	push	{r3, lr}
	const struct uart_stm32_config *config = dev->config;
 80047f6:	6841      	ldr	r1, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 80047f8:	680b      	ldr	r3, [r1, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80047fa:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 80047fc:	6818      	ldr	r0, [r3, #0]
 80047fe:	f3c2 02c0 	ubfx	r2, r2, #3, #1
	if (LL_USART_IsActiveFlag_PE(config->usart)) {
 8004802:	07c0      	lsls	r0, r0, #31
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8004804:	6818      	ldr	r0, [r3, #0]
		err |= UART_ERROR_PARITY;
 8004806:	bf48      	it	mi
 8004808:	f042 0202 	orrmi.w	r2, r2, #2
	if (LL_USART_IsActiveFlag_FE(config->usart)) {
 800480c:	0780      	lsls	r0, r0, #30
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 800480e:	6818      	ldr	r0, [r3, #0]
		err |= UART_ERROR_FRAMING;
 8004810:	bf48      	it	mi
 8004812:	f042 0204 	orrmi.w	r2, r2, #4
	if (LL_USART_IsActiveFlag_NE(config->usart)) {
 8004816:	0740      	lsls	r0, r0, #29
  return (READ_BIT(USARTx->SR, USART_SR_LBD) == (USART_SR_LBD));
 8004818:	6818      	ldr	r0, [r3, #0]
		err |= UART_ERROR_NOISE;
 800481a:	bf48      	it	mi
 800481c:	f042 0220 	orrmi.w	r2, r2, #32
	if (LL_USART_IsActiveFlag_LBD(config->usart)) {
 8004820:	05c0      	lsls	r0, r0, #23
  WRITE_REG(USARTx->SR, ~(USART_SR_LBD));
 8004822:	bf42      	ittt	mi
 8004824:	f46f 7080 	mvnmi.w	r0, #256	; 0x100
		err |= UART_BREAK;
 8004828:	f042 0208 	orrmi.w	r2, r2, #8
 800482c:	6018      	strmi	r0, [r3, #0]
	if (err & UART_ERROR_OVERRUN) {
 800482e:	07d0      	lsls	r0, r2, #31
 8004830:	d502      	bpl.n	8004838 <uart_stm32_err_check+0x44>
		LL_USART_ClearFlag_ORE(config->usart);
 8004832:	6808      	ldr	r0, [r1, #0]
 8004834:	f7ff ff84 	bl	8004740 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_PARITY) {
 8004838:	0793      	lsls	r3, r2, #30
 800483a:	d502      	bpl.n	8004842 <uart_stm32_err_check+0x4e>
		LL_USART_ClearFlag_PE(config->usart);
 800483c:	6808      	ldr	r0, [r1, #0]
 800483e:	f7ff ff7f 	bl	8004740 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_FRAMING) {
 8004842:	0750      	lsls	r0, r2, #29
 8004844:	d502      	bpl.n	800484c <uart_stm32_err_check+0x58>
		LL_USART_ClearFlag_FE(config->usart);
 8004846:	6808      	ldr	r0, [r1, #0]
 8004848:	f7ff ff7a 	bl	8004740 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_NOISE) {
 800484c:	0693      	lsls	r3, r2, #26
 800484e:	d502      	bpl.n	8004856 <uart_stm32_err_check+0x62>
		LL_USART_ClearFlag_NE(config->usart);
 8004850:	6808      	ldr	r0, [r1, #0]
 8004852:	f7ff ff75 	bl	8004740 <LL_USART_ClearFlag_FE>
}
 8004856:	4610      	mov	r0, r2
 8004858:	bd08      	pop	{r3, pc}

0800485a <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 800485a:	6903      	ldr	r3, [r0, #16]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	600b      	str	r3, [r1, #0]
	return LL_USART_GetParity(config->usart);
 8004860:	6843      	ldr	r3, [r0, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 800486a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486e:	d02f      	beq.n	80048d0 <uart_stm32_config_get+0x76>
 8004870:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 8004874:	f1dc 0300 	rsbs	r3, ip, #0
 8004878:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 800487c:	710b      	strb	r3, [r1, #4]
	return LL_USART_GetStopBitsLength(config->usart);
 800487e:	6843      	ldr	r3, [r0, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8004888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800488c:	d022      	beq.n	80048d4 <uart_stm32_config_get+0x7a>
 800488e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004892:	d021      	beq.n	80048d8 <uart_stm32_config_get+0x7e>
		return UART_CFG_STOP_BITS_2;
 8004894:	2b00      	cmp	r3, #0
 8004896:	bf0c      	ite	eq
 8004898:	2301      	moveq	r3, #1
 800489a:	2303      	movne	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 800489c:	714b      	strb	r3, [r1, #5]
	return LL_USART_GetDataWidth(config->usart);
 800489e:	6843      	ldr	r3, [r0, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80048a2:	68da      	ldr	r2, [r3, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80048a4:	68db      	ldr	r3, [r3, #12]
	switch (db) {
 80048a6:	04d2      	lsls	r2, r2, #19
 80048a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048ac:	d516      	bpl.n	80048dc <uart_stm32_config_get+0x82>
			return UART_CFG_DATA_BITS_9;
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	bf14      	ite	ne
 80048b2:	2303      	movne	r3, #3
 80048b4:	2304      	moveq	r3, #4
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 80048b6:	718b      	strb	r3, [r1, #6]
	return LL_USART_GetHWFlowCtrl(config->usart);
 80048b8:	6843      	ldr	r3, [r0, #4]
}
 80048ba:	2000      	movs	r0, #0
	return LL_USART_GetHWFlowCtrl(config->usart);
 80048bc:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 80048c4:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80048c8:	4253      	negs	r3, r2
 80048ca:	4153      	adcs	r3, r2
 80048cc:	71cb      	strb	r3, [r1, #7]
}
 80048ce:	4770      	bx	lr
	switch (parity) {
 80048d0:	2302      	movs	r3, #2
 80048d2:	e7d3      	b.n	800487c <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 80048d4:	2300      	movs	r3, #0
 80048d6:	e7e1      	b.n	800489c <uart_stm32_config_get+0x42>
		return UART_CFG_STOP_BITS_1_5;
 80048d8:	2302      	movs	r3, #2
 80048da:	e7df      	b.n	800489c <uart_stm32_config_get+0x42>
			return UART_CFG_DATA_BITS_8;
 80048dc:	2b00      	cmp	r3, #0
 80048de:	bf14      	ite	ne
 80048e0:	2302      	movne	r3, #2
 80048e2:	2303      	moveq	r3, #3
 80048e4:	e7e7      	b.n	80048b6 <uart_stm32_config_get+0x5c>

080048e6 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 80048e6:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 80048e8:	6803      	ldr	r3, [r0, #0]
 80048ea:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
 80048ec:	7905      	ldrb	r5, [r0, #4]
 80048ee:	6804      	ldr	r4, [r0, #0]
 80048f0:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80048f4:	42a3      	cmp	r3, r4
 80048f6:	d302      	bcc.n	80048fe <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
 80048f8:	f06f 0001 	mvn.w	r0, #1
}
 80048fc:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 80048fe:	795c      	ldrb	r4, [r3, #5]
 8004900:	428c      	cmp	r4, r1
 8004902:	d001      	beq.n	8004908 <pinctrl_lookup_state+0x22>
		(*state)++;
 8004904:	3308      	adds	r3, #8
 8004906:	e7f0      	b.n	80048ea <pinctrl_lookup_state+0x4>
			return 0;
 8004908:	2000      	movs	r0, #0
 800490a:	e7f7      	b.n	80048fc <pinctrl_lookup_state+0x16>

0800490c <reset_stm32_status>:
static int reset_stm32_status(const struct device *dev, uint32_t id,
			      uint8_t *status)
{
	const struct reset_stm32_config *config = dev->config;

	*status = !!sys_test_bit(config->base + STM32_RESET_SET_OFFSET(id),
 800490c:	6843      	ldr	r3, [r0, #4]
 800490e:	f3c1 104b 	ubfx	r0, r1, #5, #12
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f001 011f 	and.w	r1, r1, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 8004918:	58c0      	ldr	r0, [r0, r3]
	return temp & (1 << bit);
 800491a:	2301      	movs	r3, #1
 800491c:	408b      	lsls	r3, r1
 800491e:	4203      	tst	r3, r0
 8004920:	bf14      	ite	ne
 8004922:	2301      	movne	r3, #1
 8004924:	2300      	moveq	r3, #0
				 STM32_RESET_REG_BIT(id));

	return 0;
}
 8004926:	2000      	movs	r0, #0
	*status = !!sys_test_bit(config->base + STM32_RESET_SET_OFFSET(id),
 8004928:	7013      	strb	r3, [r2, #0]
}
 800492a:	4770      	bx	lr

0800492c <reset_stm32_line_assert>:

static int reset_stm32_line_assert(const struct device *dev, uint32_t id)
{
 800492c:	b510      	push	{r4, lr}
	const struct reset_stm32_config *config = dev->config;

	sys_set_bit(config->base + STM32_RESET_SET_OFFSET(id),
 800492e:	6843      	ldr	r3, [r0, #4]
 8004930:	f3c1 104b 	ubfx	r0, r1, #5, #12
 8004934:	681a      	ldr	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 8004936:	2301      	movs	r3, #1
	uint32_t temp = *(volatile uint32_t *)addr;
 8004938:	5884      	ldr	r4, [r0, r2]
 800493a:	f001 011f 	and.w	r1, r1, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
 800493e:	408b      	lsls	r3, r1
 8004940:	4323      	orrs	r3, r4
 8004942:	5083      	str	r3, [r0, r2]
		    STM32_RESET_REG_BIT(id));

	return 0;
}
 8004944:	2000      	movs	r0, #0
 8004946:	bd10      	pop	{r4, pc}

08004948 <reset_stm32_line_deassert>:
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
 8004948:	2201      	movs	r2, #1

static int reset_stm32_line_deassert(const struct device *dev, uint32_t id)
{
 800494a:	b510      	push	{r4, lr}

#if DT_INST_PROP(0, set_bit_to_deassert)
	sys_set_bit(config->base + STM32_RESET_CLR_OFFSET(id),
		    STM32_RESET_REG_BIT(id));
#else
	sys_clear_bit(config->base + STM32_RESET_SET_OFFSET(id),
 800494c:	6843      	ldr	r3, [r0, #4]
 800494e:	f3c1 144b 	ubfx	r4, r1, #5, #12
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	f001 011f 	and.w	r1, r1, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 8004958:	5823      	ldr	r3, [r4, r0]
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
 800495a:	408a      	lsls	r2, r1
 800495c:	ea23 0302 	bic.w	r3, r3, r2
 8004960:	5023      	str	r3, [r4, r0]
		      STM32_RESET_REG_BIT(id));
#endif

	return 0;
}
 8004962:	2000      	movs	r0, #0
 8004964:	bd10      	pop	{r4, pc}

08004966 <reset_stm32_line_toggle>:

static int reset_stm32_line_toggle(const struct device *dev, uint32_t id)
{
 8004966:	b538      	push	{r3, r4, r5, lr}
 8004968:	4604      	mov	r4, r0
 800496a:	460d      	mov	r5, r1
	reset_stm32_line_assert(dev, id);
 800496c:	f7ff ffde 	bl	800492c <reset_stm32_line_assert>
	reset_stm32_line_deassert(dev, id);
 8004970:	4629      	mov	r1, r5
 8004972:	4620      	mov	r0, r4
 8004974:	f7ff ffe8 	bl	8004948 <reset_stm32_line_deassert>

	return 0;
}
 8004978:	2000      	movs	r0, #0
 800497a:	bd38      	pop	{r3, r4, r5, pc}

0800497c <reset_stm32_init>:

static int reset_stm32_init(const struct device *dev)
{
	return 0;
}
 800497c:	2000      	movs	r0, #0
 800497e:	4770      	bx	lr

08004980 <LL_TIM_StructInit>:
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 8004980:	2300      	movs	r3, #0
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 8004982:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 8004986:	8003      	strh	r3, [r0, #0]
  TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
 8004988:	e9c0 2302 	strd	r2, r3, [r0, #8]
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
 800498c:	6043      	str	r3, [r0, #4]
  TIM_InitStruct->RepetitionCounter = 0x00000000U;
 800498e:	6103      	str	r3, [r0, #16]
}
 8004990:	4770      	bx	lr

08004992 <LL_TIM_OC_StructInit>:
  TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
 8004992:	2300      	movs	r3, #0
  TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
 8004994:	e9c0 3300 	strd	r3, r3, [r0]
  TIM_OC_InitStruct->CompareValue = 0x00000000U;
 8004998:	e9c0 3302 	strd	r3, r3, [r0, #8]
  TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 800499c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80049a0:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
 80049a4:	4770      	bx	lr

080049a6 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
 80049a6:	4770      	bx	lr

080049a8 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 80049a8:	b140      	cbz	r0, 80049bc <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 80049aa:	68c3      	ldr	r3, [r0, #12]
 80049ac:	7858      	ldrb	r0, [r3, #1]
 80049ae:	f010 0001 	ands.w	r0, r0, #1
 80049b2:	bf1e      	ittt	ne
 80049b4:	7818      	ldrbne	r0, [r3, #0]
 80049b6:	fab0 f080 	clzne	r0, r0
 80049ba:	0940      	lsrne	r0, r0, #5
}
 80049bc:	4770      	bx	lr

080049be <arch_system_halt>:
	__asm__ volatile(
 80049be:	f04f 0210 	mov.w	r2, #16
 80049c2:	f3ef 8311 	mrs	r3, BASEPRI
 80049c6:	f382 8812 	msr	BASEPRI_MAX, r2
 80049ca:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 80049ce:	e7fe      	b.n	80049ce <arch_system_halt+0x10>

080049d0 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 80049d0:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 80049d2:	f7ff fff4 	bl	80049be <arch_system_halt>

080049d6 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 80049d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d8:	4605      	mov	r5, r0
 80049da:	460e      	mov	r6, r1
 80049dc:	f04f 0310 	mov.w	r3, #16
 80049e0:	f3ef 8711 	mrs	r7, BASEPRI
 80049e4:	f383 8812 	msr	BASEPRI_MAX, r3
 80049e8:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 80049ec:	f7fe fe7e 	bl	80036ec <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
 80049f0:	4631      	mov	r1, r6
 80049f2:	4604      	mov	r4, r0
 80049f4:	4628      	mov	r0, r5
 80049f6:	f7ff ffeb 	bl	80049d0 <k_sys_fatal_error_handler>
	__asm__ volatile(
 80049fa:	f387 8811 	msr	BASEPRI, r7
 80049fe:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8004a02:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8004a04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a08:	f7fc bc64 	b.w	80012d4 <z_impl_k_thread_abort>

08004a0c <z_early_memset>:
	(void) memset(dst, c, n);
 8004a0c:	f7ff b999 	b.w	8003d42 <memset>

08004a10 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
 8004a10:	f7ff b98c 	b.w	8003d2c <memcpy>

08004a14 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8004a14:	b508      	push	{r3, lr}
	__asm__ volatile(
 8004a16:	f04f 0210 	mov.w	r2, #16
 8004a1a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a1e:	f382 8812 	msr	BASEPRI_MAX, r2
 8004a22:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8004a26:	f7fc fa21 	bl	8000e6c <arch_cpu_idle>
 8004a2a:	e7f4      	b.n	8004a16 <idle+0x2>

08004a2c <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
 8004a2c:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8004a30:	428b      	cmp	r3, r1
 8004a32:	d001      	beq.n	8004a38 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
 8004a34:	f7fe bd26 	b.w	8003484 <z_set_prio>
}
 8004a38:	2000      	movs	r0, #0
 8004a3a:	4770      	bx	lr

08004a3c <z_impl_k_mutex_init>:
{
 8004a3c:	4603      	mov	r3, r0
	mutex->owner = NULL;
 8004a3e:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
 8004a40:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
 8004a44:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
 8004a48:	4770      	bx	lr

08004a4a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 8004a4a:	b13a      	cbz	r2, 8004a5c <z_impl_k_sem_init+0x12>
 8004a4c:	428a      	cmp	r2, r1
 8004a4e:	d305      	bcc.n	8004a5c <z_impl_k_sem_init+0x12>
	sem->limit = limit;
 8004a50:	e9c0 1202 	strd	r1, r2, [r0, #8]
 8004a54:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
 8004a58:	2000      	movs	r0, #0
 8004a5a:	4770      	bx	lr
		return -EINVAL;
 8004a5c:	f06f 0015 	mvn.w	r0, #21
}
 8004a60:	4770      	bx	lr

08004a62 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 8004a62:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8004a66:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8004a68:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8004a6a:	2300      	movs	r3, #0
	node->prev = NULL;
 8004a6c:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 8004a70:	4770      	bx	lr

08004a72 <unpend_thread_no_timeout>:
{
 8004a72:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 8004a74:	f7ff fff5 	bl	8004a62 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8004a78:	7b43      	ldrb	r3, [r0, #13]
 8004a7a:	f023 0302 	bic.w	r3, r3, #2
 8004a7e:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 8004a80:	2300      	movs	r3, #0
 8004a82:	6083      	str	r3, [r0, #8]
}
 8004a84:	bd08      	pop	{r3, pc}

08004a86 <z_thread_timeout>:
{
 8004a86:	4601      	mov	r1, r0
 8004a88:	b510      	push	{r4, lr}
 8004a8a:	f04f 0310 	mov.w	r3, #16
 8004a8e:	f3ef 8411 	mrs	r4, BASEPRI
 8004a92:	f383 8812 	msr	BASEPRI_MAX, r3
 8004a96:	f3bf 8f6f 	isb	sy
		if (!killed) {
 8004a9a:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 8004a9e:	f013 0f28 	tst.w	r3, #40	; 0x28
 8004aa2:	d10d      	bne.n	8004ac0 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 8004aa4:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 8004aa8:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 8004aaa:	b10b      	cbz	r3, 8004ab0 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 8004aac:	f7ff ffe1 	bl	8004a72 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8004ab0:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 8004ab4:	f023 0314 	bic.w	r3, r3, #20
 8004ab8:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 8004abc:	f7fe fbf8 	bl	80032b0 <ready_thread>
	__asm__ volatile(
 8004ac0:	f384 8811 	msr	BASEPRI, r4
 8004ac4:	f3bf 8f6f 	isb	sy
}
 8004ac8:	bd10      	pop	{r4, pc}

08004aca <add_to_waitq_locked>:
{
 8004aca:	b538      	push	{r3, r4, r5, lr}
 8004acc:	4604      	mov	r4, r0
 8004ace:	460d      	mov	r5, r1
	unready_thread(thread);
 8004ad0:	f7fe fc22 	bl	8003318 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 8004ad4:	7b63      	ldrb	r3, [r4, #13]
 8004ad6:	f043 0302 	orr.w	r3, r3, #2
 8004ada:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 8004adc:	b1e5      	cbz	r5, 8004b18 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
 8004ade:	60a5      	str	r5, [r4, #8]
	return list->head == list;
 8004ae0:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004ae2:	429d      	cmp	r5, r3
 8004ae4:	d109      	bne.n	8004afa <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
 8004ae6:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 8004ae8:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 8004aec:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8004aee:	606c      	str	r4, [r5, #4]
}
 8004af0:	e012      	b.n	8004b18 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
 8004af2:	686a      	ldr	r2, [r5, #4]
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d0f6      	beq.n	8004ae6 <add_to_waitq_locked+0x1c>
 8004af8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0f3      	beq.n	8004ae6 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
 8004afe:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 8004b02:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 8004b06:	428a      	cmp	r2, r1
 8004b08:	d0f3      	beq.n	8004af2 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8004b0a:	4291      	cmp	r1, r2
 8004b0c:	ddf1      	ble.n	8004af2 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
 8004b0e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8004b10:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8004b14:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8004b16:	605c      	str	r4, [r3, #4]
}
 8004b18:	bd38      	pop	{r3, r4, r5, pc}

08004b1a <z_ready_thread>:
{
 8004b1a:	b510      	push	{r4, lr}
	__asm__ volatile(
 8004b1c:	f04f 0310 	mov.w	r3, #16
 8004b20:	f3ef 8411 	mrs	r4, BASEPRI
 8004b24:	f383 8812 	msr	BASEPRI_MAX, r3
 8004b28:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 8004b2c:	f7fe fbc0 	bl	80032b0 <ready_thread>
	__asm__ volatile(
 8004b30:	f384 8811 	msr	BASEPRI, r4
 8004b34:	f3bf 8f6f 	isb	sy
}
 8004b38:	bd10      	pop	{r4, pc}

08004b3a <z_unpend_first_thread>:
{
 8004b3a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8004b3c:	f04f 0310 	mov.w	r3, #16
 8004b40:	f3ef 8511 	mrs	r5, BASEPRI
 8004b44:	f383 8812 	msr	BASEPRI_MAX, r3
 8004b48:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8004b4c:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004b4e:	42a0      	cmp	r0, r4
 8004b50:	d00d      	beq.n	8004b6e <z_unpend_first_thread+0x34>
		if (thread != NULL) {
 8004b52:	b134      	cbz	r4, 8004b62 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
 8004b54:	4620      	mov	r0, r4
 8004b56:	f7ff ff8c 	bl	8004a72 <unpend_thread_no_timeout>
 8004b5a:	f104 0018 	add.w	r0, r4, #24
 8004b5e:	f000 f82f 	bl	8004bc0 <z_abort_timeout>
	__asm__ volatile(
 8004b62:	f385 8811 	msr	BASEPRI, r5
 8004b66:	f3bf 8f6f 	isb	sy
}
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	bd38      	pop	{r3, r4, r5, pc}
 8004b6e:	2400      	movs	r4, #0
 8004b70:	e7f7      	b.n	8004b62 <z_unpend_first_thread+0x28>

08004b72 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8004b72:	4603      	mov	r3, r0
 8004b74:	b920      	cbnz	r0, 8004b80 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b76:	f3ef 8205 	mrs	r2, IPSR
 8004b7a:	b90a      	cbnz	r2, 8004b80 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 8004b7c:	f7fc b9c4 	b.w	8000f08 <arch_swap>
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
}
 8004b88:	4770      	bx	lr

08004b8a <z_reschedule_unlocked>:
	__asm__ volatile(
 8004b8a:	f04f 0310 	mov.w	r3, #16
 8004b8e:	f3ef 8011 	mrs	r0, BASEPRI
 8004b92:	f383 8812 	msr	BASEPRI_MAX, r3
 8004b96:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8004b9a:	f7ff bfea 	b.w	8004b72 <z_reschedule_irqlock>

08004b9e <z_impl_k_usleep>:
	ticks = k_us_to_ticks_ceil64(us);
 8004b9e:	17c1      	asrs	r1, r0, #31
		t += off;
 8004ba0:	3063      	adds	r0, #99	; 0x63
{
 8004ba2:	b508      	push	{r3, lr}
			return t / ((uint64_t)from_hz / to_hz);
 8004ba4:	f04f 0264 	mov.w	r2, #100	; 0x64
 8004ba8:	f04f 0300 	mov.w	r3, #0
 8004bac:	f141 0100 	adc.w	r1, r1, #0
 8004bb0:	f7fb fa9e 	bl	80000f0 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
 8004bb4:	17c1      	asrs	r1, r0, #31
 8004bb6:	f7fe fd55 	bl	8003664 <z_tick_sleep>
}
 8004bba:	2364      	movs	r3, #100	; 0x64
 8004bbc:	4358      	muls	r0, r3
 8004bbe:	bd08      	pop	{r3, pc}

08004bc0 <z_abort_timeout>:
{
 8004bc0:	b510      	push	{r4, lr}
 8004bc2:	f04f 0210 	mov.w	r2, #16
 8004bc6:	f3ef 8411 	mrs	r4, BASEPRI
 8004bca:	f382 8812 	msr	BASEPRI_MAX, r2
 8004bce:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8004bd2:	6803      	ldr	r3, [r0, #0]
 8004bd4:	b13b      	cbz	r3, 8004be6 <z_abort_timeout+0x26>
			remove_timeout(to);
 8004bd6:	f7fe fe3b 	bl	8003850 <remove_timeout>
			ret = 0;
 8004bda:	2000      	movs	r0, #0
	__asm__ volatile(
 8004bdc:	f384 8811 	msr	BASEPRI, r4
 8004be0:	f3bf 8f6f 	isb	sy
}
 8004be4:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8004be6:	f06f 0015 	mvn.w	r0, #21
 8004bea:	e7f7      	b.n	8004bdc <z_abort_timeout+0x1c>

08004bec <z_set_timeout_expiry>:
{
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	4604      	mov	r4, r0
 8004bf0:	460d      	mov	r5, r1
	__asm__ volatile(
 8004bf2:	f04f 0310 	mov.w	r3, #16
 8004bf6:	f3ef 8611 	mrs	r6, BASEPRI
 8004bfa:	f383 8812 	msr	BASEPRI_MAX, r3
 8004bfe:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 8004c02:	f7fe fdfd 	bl	8003800 <next_timeout>
			      || (ticks <= next_to);
 8004c06:	2801      	cmp	r0, #1
 8004c08:	dd07      	ble.n	8004c1a <z_set_timeout_expiry+0x2e>
 8004c0a:	42a0      	cmp	r0, r4
 8004c0c:	db05      	blt.n	8004c1a <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 8004c0e:	42a0      	cmp	r0, r4
 8004c10:	4629      	mov	r1, r5
 8004c12:	bfa8      	it	ge
 8004c14:	4620      	movge	r0, r4
 8004c16:	f7fd fe13 	bl	8002840 <sys_clock_set_timeout>
	__asm__ volatile(
 8004c1a:	f386 8811 	msr	BASEPRI, r6
 8004c1e:	f3bf 8f6f 	isb	sy
}
 8004c22:	bd70      	pop	{r4, r5, r6, pc}

08004c24 <sys_clock_tick_get_32>:
{
 8004c24:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 8004c26:	f7fe ff19 	bl	8003a5c <sys_clock_tick_get>
}
 8004c2a:	bd08      	pop	{r3, pc}

08004c2c <k_heap_init>:
{
 8004c2c:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
 8004c2e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
 8004c32:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 8004c36:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
 8004c38:	f7fe bfbf 	b.w	8003bba <sys_heap_init>
